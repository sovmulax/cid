type SemverBumpType = "major" | "minor" | "patch";
declare function determineSemverChange(commits: GitCommit[], config: ChangelogConfig): SemverBumpType | null;
declare function bumpVersion(commits: GitCommit[], config: ChangelogConfig): Promise<string | false>;

interface ChangelogConfig {
    cwd: string;
    types: Record<string, {
        title: string;
        semver?: SemverBumpType;
    }>;
    scopeMap: Record<string, string>;
    github: string;
    from: string;
    to: string;
    newVersion?: string;
    output: string | boolean;
}
declare function loadChangelogConfig(cwd: string, overrides?: Partial<ChangelogConfig>): Promise<ChangelogConfig>;

interface GitCommitAuthor {
    name: string;
    email: string;
}
interface RawGitCommit {
    message: string;
    body: string;
    shortHash: string;
    author: GitCommitAuthor;
}
interface Reference {
    type: "hash" | "issue" | "pull-request";
    value: string;
}
interface GitCommit extends RawGitCommit {
    description: string;
    type: string;
    scope: string;
    references: Reference[];
    authors: GitCommitAuthor[];
    isBreaking: boolean;
}
declare function getLastGitTag(): Promise<string>;
declare function getCurrentGitBranch(): Promise<string>;
declare function getCurrentGitTag(): Promise<string>;
declare function getCurrentGitRef(): Promise<string>;
declare function getGitDiff(from: string | undefined, to?: string): Promise<RawGitCommit[]>;
declare function parseCommits(commits: RawGitCommit[], config: ChangelogConfig): GitCommit[];
declare function parseGitCommit(commit: RawGitCommit, config: ChangelogConfig): GitCommit | null;

declare function generateMarkDown(commits: GitCommit[], config: ChangelogConfig): Promise<string>;

export { ChangelogConfig, GitCommit, GitCommitAuthor, RawGitCommit, Reference, SemverBumpType, bumpVersion, determineSemverChange, generateMarkDown, getCurrentGitBranch, getCurrentGitRef, getCurrentGitTag, getGitDiff, getLastGitTag, loadChangelogConfig, parseCommits, parseGitCommit };
