#!/usr/bin/env node
'use strict';

const node_path = require('node:path');
const node_fs = require('node:fs');
const consola = require('consola');
const mri = require('mri');
const execa = require('execa');
const semver = require('./shared/changelogen.f98b57a4.cjs');
require('scule');
require('convert-gitmoji');
require('node-fetch-native');
require('c12');
require('pkg-types');
require('semver');

async function main() {
  const args = mri(process.argv.splice(2));
  const cwd = node_path.resolve(args._[0] || "");
  process.chdir(cwd);
  const config = await semver.loadChangelogConfig(cwd, {
    from: args.from,
    to: args.to,
    output: args.output,
    newVersion: args.r
  });
  const logger = consola.create({ stdout: process.stderr });
  logger.info(`Generating changelog for ${config.from}...${config.to}`);
  const rawCommits = await semver.getGitDiff(config.from, config.to);
  const commits = semver.parseCommits(rawCommits, config).filter(
    (c) => config.types[c.type] && !(c.type === "chore" && c.scope === "deps" && !c.isBreaking)
  );
  if (args.bump || args.release) {
    const newVersion = await semver.bumpVersion(commits, config);
    if (!newVersion) {
      consola.error("Unable to bump version based on changes.");
      process.exit(1);
    }
    config.newVersion = newVersion;
  }
  const markdown = await semver.generateMarkDown(commits, config);
  const displayOnly = !args.bump && !args.release;
  if (displayOnly) {
    consola.log("\n\n" + markdown + "\n\n");
  }
  if (typeof config.output === "string" && (args.output || !displayOnly)) {
    let changelogMD;
    if (node_fs.existsSync(config.output)) {
      consola.info(`Updating ${config.output}`);
      changelogMD = await node_fs.promises.readFile(config.output, "utf8");
    } else {
      consola.info(`Creating  ${config.output}`);
      changelogMD = "# Changelog\n\n";
    }
    const lastEntry = changelogMD.match(/^###?\s+.*$/m);
    if (lastEntry) {
      changelogMD = changelogMD.slice(0, lastEntry.index) + markdown + "\n\n" + changelogMD.slice(lastEntry.index);
    } else {
      changelogMD += "\n" + markdown + "\n\n";
    }
    await node_fs.promises.writeFile(config.output, changelogMD);
  }
  if (args.release) {
    if (args.commit !== false) {
      await execa.execa(
        "git",
        ["commit", "-am", `chore(release): v${config.newVersion}`],
        { cwd }
      );
    }
    if (args.tag !== false) {
      await execa.execa(
        "git",
        ["tag", "-am", "v" + config.newVersion, "v" + config.newVersion],
        { cwd }
      );
    }
  }
}
main().catch(consola.error);
