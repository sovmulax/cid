// make sure to keep this as 'var'
// we don't want block scoping

var dartNodePreambleSelf = typeof global !== "undefined" ? global : window;

var self = Object.create(dartNodePreambleSelf);

self.scheduleImmediate = typeof setImmediate !== "undefined"
    ? function (cb) {
        setImmediate(cb);
      }
    : function(cb) {
        setTimeout(cb, 0);
      };

// CommonJS globals.
self.exports = exports;

// Node.js specific exports, check to see if they exist & or polyfilled

if (typeof process !== "undefined") {
  self.process = process;
}

if (typeof __dirname !== "undefined") {
  self.__dirname = __dirname;
}

if (typeof __filename !== "undefined") {
  self.__filename = __filename;
}

if (typeof Buffer !== "undefined") {
  self.Buffer = Buffer;
}

// if we're running in a browser, Dart supports most of this out of box
// make sure we only run these in Node.js environment

var dartNodeIsActuallyNode = !dartNodePreambleSelf.window

try {
  // Check if we're in a Web Worker instead.
  if ("undefined" !== typeof WorkerGlobalScope && dartNodePreambleSelf instanceof WorkerGlobalScope) {
    dartNodeIsActuallyNode = false;
  }

  // Check if we're in Electron, with Node.js integration, and override if true.
  if ("undefined" !== typeof process && process.versions && process.versions.hasOwnProperty('electron') && process.versions.hasOwnProperty('node')) {
    dartNodeIsActuallyNode = true;
  }
} catch(e) {}

if (dartNodeIsActuallyNode) {
  // This line is to:
  // 1) Prevent Webpack from bundling.
  // 2) In Webpack on Node.js, make sure we're using the native Node.js require, which is available via __non_webpack_require__
  // https://github.com/mbullington/node_preamble.dart/issues/18#issuecomment-527305561
  var url = ("undefined" !== typeof __webpack_require__ ? __non_webpack_require__ : require)("url");

  // Setting `self.location=` in Electron throws a `TypeError`, so we define it
  // as a property instead to be safe.
  Object.defineProperty(self, "location", {
    value: {
      get href() {
        if (url.pathToFileURL) {
          return url.pathToFileURL(process.cwd()).href + "/";
        } else {
          // This isn't really a correct transformation, but it's the best we have
          // for versions of Node <10.12.0 which introduced `url.pathToFileURL()`.
          // For example, it will fail for paths that contain characters that need
          // to be escaped in URLs.
          return "file://" + (function() {
            var cwd = process.cwd();
            if (process.platform != "win32") return cwd;
            return "/" + cwd.replace(/\\/g, "/");
          })() + "/"
        }
      }
    }
  });

  (function() {
    function computeCurrentScript() {
      try {
        throw new Error();
      } catch(e) {
        var stack = e.stack;
        var re = new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "mg");
        var lastMatch = null;
        do {
          var match = re.exec(stack);
          if (match != null) lastMatch = match;
        } while (match != null);
        return lastMatch[1];
      }
    }

    // Setting `self.document=` isn't known to throw an error anywhere like
    // `self.location=` does on Electron, but it's better to be future-proof
    // just in case..
    var cachedCurrentScript = null;
    Object.defineProperty(self, "document", {
      value: {
        get currentScript() {
          if (cachedCurrentScript == null) {
            cachedCurrentScript = {src: computeCurrentScript()};
          }
          return cachedCurrentScript;
        }
      }
    });
  })();

  self.dartDeferredLibraryLoader = function(uri, successCallback, errorCallback) {
    try {
     load(uri);
      successCallback();
    } catch (error) {
      errorCallback(error);
    }
  };
}

self.path = require("path");
self.os = require("os");
self.fs = require("fs");
// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, csp, deferred-serialization, intern-composite-values), the Dart to JavaScript compiler version: 2.19.2.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    FollowedByIterable_FollowedByIterable$firstEfficient(first, second, $E) {
      if ($E._eval$1("EfficientLengthIterable<0>")._is(second))
        return new A.EfficientLengthFollowedByIterable(first, second, $E._eval$1("EfficientLengthFollowedByIterable<0>"));
      return new A.FollowedByIterable(first, second, $E._eval$1("FollowedByIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort_sort(a, compare) {
      A.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare);
    },
    Sort__doSort(a, left, right, compare) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare);
    },
    Sort__insertionSort(a, left, right, compare) {
      var i, t1, el, j, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && compare.call$2(t1.$index(a, j - 1), el) > 0))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, t2,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5);
      if (compare.call$2(el1, el2) > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (compare.call$2(el4, el5) > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (compare.call$2(el1, el3) > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (compare.call$2(el2, el3) > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (compare.call$2(el1, el4) > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (compare.call$2(el3, el4) > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (compare.call$2(el2, el5) > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (compare.call$2(el2, el3) > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (compare.call$2(el4, el5) > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare);
      A.Sort__doSort(a, great + 2, right, compare);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare);
      } else
        A.Sort__doSort(a, less, great, compare);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1) {
      this.__internal$_current = null;
      this._iterator = t0;
      this._f = t1;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1) {
      this._iterator = t0;
      this._f = t1;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1) {
      this._iterator = t0;
      this._remaining = t1;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1) {
      this._iterator = t0;
      this._skipCount = t1;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator() {
    },
    FollowedByIterable: function FollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    FollowedByIterator: function FollowedByIterator(t0, t1) {
      this._currentIterator = t0;
      this._nextIterable = t1;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, t2,
        keys = A.List_List$from(other.get$keys(other), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (_i = 0; t2 = keys.length, _i < t2; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
          k = keys[_i];
          object[k] = other.$index(0, k);
        }
        return new A.ConstantStringMap(t2, object, keys, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    GeneralConstantMap__constantMapHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (type$.Symbol._is(key))
        return key.get$hashCode(key);
      if (type$.Type._is(key))
        return A.Primitives_objectHashCode(key);
      return A.objectHashCode(key);
    },
    GeneralConstantMap__typeTest($T) {
      return new A.GeneralConstantMap__typeTest_closure($T);
    },
    instantiate1(f, T1) {
      var t1 = new A.Instantiation1(f, T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((B.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = B.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      var value,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      if (isNaN(value) || value < -864e13 || value > 864e13)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, t2,
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, true, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[keys[_i]];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            t2 = keys[_i];
            if (namedArguments.containsKey$1(t2)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else {
              defaultValue = defaultValues[t2];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_, null);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    checkNum(value) {
      return value;
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace)
        return A.saveStackTrace(ex, ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = A.S(message);
              return A.saveStackTrace(ex, new A.NullError(t1 + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1)
              return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      switch (numberOfArguments) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(new A._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    LinkedHashMapKeyIterator$(_map, _modifications) {
      var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications);
      t1._cell = _map._first;
      return t1;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = $.getTagFunction.call$1(obj),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = $.alternateTagFunction.call$2(obj, tag);
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else {
        t1 = J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex));
        return !t1.get$isEmpty(t1);
      }
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1.__js_helper$_string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_containsValue_closure: function ConstantStringMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.needle = t1;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0) {
      this.$this = t0;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    GeneralConstantMap__typeTest_closure: function GeneralConstantMap__typeTest_closure(t0) {
      this.T = t0;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__js_helper$_memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_containsValue_closure: function JsLinkedHashMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this.__js_helper$_string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(A.LateError$fieldADI(fieldName));
    },
    throwUnnamedLateFieldNI() {
      return A.throwExpression(A.LateError$fieldNI(""));
    },
    throwUnnamedLateFieldADI() {
      return A.throwExpression(A.LateError$fieldADI(""));
    },
    _Cell$() {
      var t1 = new A._Cell("");
      return t1._value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this._value = null;
    },
    _ensureNativeList(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        result[i] = t1.$index(list, i);
      return result;
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var t1,
        signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        t1 = closure.$signature();
        return t1;
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType(object) {
      var rti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      return A.createRuntimeType(rti == null ? A.instanceType(object) : rti);
    },
    createRuntimeType(rti) {
      var s, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      s = rti._canonicalRecipe;
      starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object);
      return objectDescription + ": type '" + A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, boundRti, kind, t3, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          genericContext.push("T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[genericContext.length - 1 - i]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        return genericContext[genericContext.length - 1 - t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 12:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleArguments(parser, stack) {
      var optionalPositional, named, requiredPositional, returnType, parameters, _null = null,
        t1 = parser.u,
        head = stack.pop();
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            named = _null;
            break;
          case -2:
            named = stack.pop();
            optionalPositional = _null;
            break;
          default:
            stack.push(head);
            named = _null;
            optionalPositional = named;
            break;
        }
      else {
        stack.push(head);
        named = _null;
        optionalPositional = named;
      }
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      t1 = sKind === 11;
      if (t1 && t === type$.Record)
        return true;
      if (t1 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.C_Duration, callback);
    },
    Timer__createTimer(duration, callback) {
      return A._TimerImpl$(0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(0, thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _IterationMarker_yieldStar(values) {
      return new A._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration() {
      return B._IterationMarker_null_2;
    },
    _IterationMarker_uncaughtError(error) {
      return new A._IterationMarker(error, 3);
    },
    _makeSyncStarIterable(body, $T) {
      return new A._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_3uE;
    },
    _Future__chainCoreFuture(source, target) {
      var t1, listeners;
      for (; t1 = source._state, (t1 & 4) !== 0;)
        source = source._resultOrListeners;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = target._resultOrListeners;
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, _box_0, t3, t4, hasError, nextListener, nextListener0, sourceResult, t5, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t3 = t1._state;
        t4 = (t3 & 16) === 0;
        hasError = !t4;
        if (listeners == null) {
          if (hasError && (t3 & 1) === 0) {
            t2 = t1._resultOrListeners;
            t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t3 = _box_1.source;
        sourceResult = t3._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t4) {
          t5 = t1.state;
          t5 = (t5 & 1) !== 0 || (t5 & 15) === 8;
        } else
          t5 = true;
        if (t5) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t3._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            t2 = t1._resultOrListeners;
            t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t4) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t2._is(t1)) {
            t3 = _box_0.listener.$ti;
            t3 = t3._eval$1("Future<2>")._is(t1) || !t3._rest[1]._is(t1);
          } else
            t3 = false;
          if (t3) {
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = result._resultOrListeners;
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = result._resultOrListeners;
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t3 = _box_0.listenerValueOrError;
        if (!t1) {
          result._state = 8;
          result._resultOrListeners = t3;
        } else {
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t3;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    StreamIterator_StreamIterator(stream) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator();
    },
    _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
      A._rootHandleError(error, stackTrace);
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback($self, $parent, zone, f) {
      return f;
    },
    _rootRegisterUnaryCallback($self, $parent, zone, f) {
      return f;
    },
    _rootRegisterBinaryCallback($self, $parent, zone, f) {
      return f;
    },
    _rootErrorCallback($self, $parent, zone, error, stackTrace) {
      return null;
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _rootCreateTimer($self, $parent, zone, duration, callback) {
      return A.Timer__createTimer(duration, B.C__RootZone !== zone ? zone.bindCallback$1$1(callback, type$.void) : callback);
    },
    _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
      if (B.C__RootZone !== zone)
        callback = zone.bindUnaryCallback$2$1(callback, type$.void, type$.Timer);
      return A._TimerImpl$periodic(0, callback);
    },
    _rootPrint($self, $parent, zone, line) {
      A.printString(line);
    },
    _printToZone(line) {
      $.Zone__current.print$1(line);
    },
    _rootFork($self, $parent, zone, specification, zoneValues) {
      var t1, valueMap, handleUncaughtError;
      $.printToZone = A.async___printToZone$closure();
      if (specification == null)
        specification = B._ZoneSpecification_ALf;
      t1 = type$.nullable_Object;
      valueMap = A.HashMap_HashMap$from(zoneValues, t1, t1);
      t1 = new A._CustomZone(zone.get$_run(), zone.get$_runUnary(), zone.get$_runBinary(), zone.get$_registerCallback(), zone.get$_registerUnaryCallback(), zone.get$_registerBinaryCallback(), zone.get$_errorCallback(), zone.get$_scheduleMicrotask(), zone.get$_createTimer(), zone.get$_createPeriodicTimer(), zone.get$_print(), zone.get$_fork(), zone.get$_handleUncaughtError(), zone, valueMap);
      handleUncaughtError = specification.handleUncaughtError;
      if (handleUncaughtError != null)
        t1._handleUncaughtError = new A._ZoneFunction(t1, handleUncaughtError);
      return t1;
    },
    runZoned(body, zoneValues, $R) {
      A.checkNotNullable(body, "body", $R._eval$1("0()"));
      return A._runZoned(body, zoneValues, null, $R);
    },
    _runZoned(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamIterator: function _StreamIterator() {
    },
    _ZoneFunction: function _ZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._run = t0;
      _._runUnary = t1;
      _._runBinary = t2;
      _._registerCallback = t3;
      _._registerUnaryCallback = t4;
      _._registerBinaryCallback = t5;
      _._errorCallback = t6;
      _._scheduleMicrotask = t7;
      _._createTimer = t8;
      _._createPeriodicTimer = t9;
      _._print = t10;
      _._fork = t11;
      _._handleUncaughtError = t12;
      _._delegateCache = null;
      _.parent = t13;
      _._async$_map = t14;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    HashMap_HashMap(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
          hashCode = A.collection___defaultHashCode$closure();
        } else {
          if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
            return new A._IdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_IdentityHashMap<1,2>"));
          if (equals == null)
            equals = A.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = A.collection___defaultHashCode$closure();
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._CustomHashMap_closure($K);
      return new A._CustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_CustomHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap(hashCode, isValidKey, $K, $V) {
      var equals;
      if (isValidKey == null) {
        if (hashCode == null)
          return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
        equals = A.collection___defaultEquals$closure();
      } else {
        if (hashCode == null)
          hashCode = A.collection___defaultHashCode$closure();
        equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>")));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._LinkedCustomHashMap_closure($K);
      return new A._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>")));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    UnmodifiableListView$(source, $E) {
      return new A.UnmodifiableListView(source, $E._eval$1("UnmodifiableListView<0>"));
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    HashMap_HashMap$from(other, $K, $V) {
      var result = A.HashMap_HashMap(null, null, null, $K, $V);
      other.forEach$1(0, new A.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      $._toStringVisiting.push(iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      $._toStringVisiting.push(iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = J.get$iterator$ax(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = parts.pop();
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, $E._as(t1.get$current()));
      return result;
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    ListMixin__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        $._toStringVisiting.push(m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    ListQueue_ListQueue$of(elements, $E) {
      var t1 = new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
      t1.addAll$1(0, elements);
      return t1;
    },
    ListQueue__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    _ListQueueIterator$(queue) {
      return new A._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head);
    },
    _UnmodifiableSetMixin__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot change an unmodifiable set"));
    },
    _dynamicCompare(a, b) {
      return J.compareTo$1$ns(a, b);
    },
    _defaultCompare($K) {
      if ($K._eval$1("int(0,0)")._is(A.core_Comparable_compare$closure()))
        return A.core_Comparable_compare$closure();
      return A.collection___dynamicCompare$closure();
    },
    SplayTreeMap$($K, $V) {
      var t1 = A._defaultCompare($K);
      return new A.SplayTreeMap(t1, new A.SplayTreeMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("SplayTreeMap<1,2>"));
    },
    SplayTreeSet$(compare, isValidKey, $E) {
      var t1 = isValidKey == null ? new A.SplayTreeSet_closure($E) : isValidKey;
      return new A.SplayTreeSet(compare, t1, $E._eval$1("SplayTreeSet<0>"));
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_containsValue_closure: function _HashMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1) {
      var _ = this;
      _._map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._table = t0;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3) {
      var _ = this;
      _._queue = t0;
      _._collection$_end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeSetNode: function _SplayTreeSetNode(t0, t1) {
      var _ = this;
      _.key = t0;
      _._right = _._left = null;
      _.$ti = t1;
    },
    _SplayTreeMapNode: function _SplayTreeMapNode(t0, t1, t2) {
      var _ = this;
      _.value = t0;
      _.key = t1;
      _._right = _._left = null;
      _.$ti = t2;
    },
    _SplayTree: function _SplayTree() {
    },
    SplayTreeMap: function SplayTreeMap(t0, t1, t2) {
      var _ = this;
      _._root = null;
      _._compare = t0;
      _._validKey = t1;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t2;
    },
    SplayTreeMap_closure: function SplayTreeMap_closure(t0) {
      this.K = t0;
    },
    SplayTreeMap_containsValue_visit: function SplayTreeMap_containsValue_visit(t0, t1, t2) {
      this.$this = t0;
      this.value = t1;
      this.initialSplayCount = t2;
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable(t0, t1) {
      this._tree = t0;
      this.$ti = t1;
    },
    _SplayTreeMapEntryIterable: function _SplayTreeMapEntryIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3) {
      var _ = this;
      _._tree = t0;
      _._path = t1;
      _._modificationCount = null;
      _._splayCount = t2;
      _.$ti = t3;
    },
    _SplayTreeMapEntryIterator: function _SplayTreeMapEntryIterator(t0, t1, t2, t3) {
      var _ = this;
      _._tree = t0;
      _._path = t1;
      _._modificationCount = null;
      _._splayCount = t2;
      _.$ti = t3;
    },
    SplayTreeSet: function SplayTreeSet(t0, t1, t2) {
      var _ = this;
      _._root = null;
      _._compare = t0;
      _._validKey = t1;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t2;
    },
    SplayTreeSet_closure: function SplayTreeSet_closure(t0) {
      this.E = t0;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    __UnmodifiableSet__SetBase__UnmodifiableSetMixin: function __UnmodifiableSet__SetBase__UnmodifiableSetMixin() {
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        bytes[i] = (b & 4294967040) >>> 0 !== 0 ? 255 : b;
      }
      return bytes;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    double_parse(source) {
      var value = A.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$("Invalid double", source, null));
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch) {
      var t1;
      if (Math.abs(millisecondsSinceEpoch) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + millisecondsSinceEpoch, null));
      A.checkNotNullable(false, "isUtc", type$.bool);
      return new A.DateTime(millisecondsSinceEpoch, false);
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      if (growable)
        return list;
      return J.JSArray_markFixedList(list);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E));
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, charCodes.length, _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, charCodes.length, _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return A.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source, caseSensitive) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, false));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$_(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
      return new A.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
    },
    Uri_base() {
      var uri = A.Primitives_currentUri();
      if (uri != null)
        return A.Uri_parse(uri);
      throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.get$encoder().convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128 && (canonicalTable[byte >>> 4] & 1 << (byte & 15)) !== 0)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    Comparable_compare(a, b) {
      return J.compareTo$1$ns(a, b);
    },
    DateTime_parse(formattedString) {
      var t1, t2, t3, years, month, day, hour, minute, second, milliAndMicroseconds, millisecond, tzSign, sign, hourDifference, isUtc, value, _null = null,
        match = $.$get$DateTime__parseFormat().firstMatch$1(formattedString);
      if (match != null) {
        t1 = new A.DateTime_parse_parseIntOrZero();
        t2 = match._match;
        t3 = t2[1];
        t3.toString;
        years = A.int_parse(t3, _null);
        t3 = t2[2];
        t3.toString;
        month = A.int_parse(t3, _null);
        t3 = t2[3];
        t3.toString;
        day = A.int_parse(t3, _null);
        hour = t1.call$1(t2[4]);
        minute = t1.call$1(t2[5]);
        second = t1.call$1(t2[6]);
        milliAndMicroseconds = new A.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
        millisecond = B.JSInt_methods._tdivFast$1(milliAndMicroseconds, 1000);
        if (t2[8] != null) {
          tzSign = t2[9];
          if (tzSign != null) {
            sign = tzSign === "-" ? -1 : 1;
            t3 = t2[10];
            t3.toString;
            hourDifference = A.int_parse(t3, _null);
            minute -= sign * (t1.call$1(t2[11]) + 60 * hourDifference);
          }
          isUtc = true;
        } else
          isUtc = false;
        value = A.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond + B.JSNumber_methods.round$0(milliAndMicroseconds % 1000 / 1000), isUtc);
        if (value == null)
          throw A.wrapException(A.FormatException$("Time out of range", formattedString, _null));
        return A.DateTime$_withValue(value, isUtc);
      } else
        throw A.wrapException(A.FormatException$("Invalid date format", formattedString, _null));
    },
    DateTime$_withValue(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + _value, null));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new A.DateTime(_value, isUtc);
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name, message) {
      return new A.RangeError(null, null, true, value, $name, message == null ? "Value not in range" : message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, message == null ? "Invalid value" : message);
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Object_hash(object1, object2, object3, object4) {
      var t1, t2;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      t2 = $.$get$_hashSeed();
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2), object3), object4));
    },
    print(object) {
      var line = A.S(object),
        toZone = $.printToZone;
      if (toZone == null)
        A.printString(line);
      else
        toZone.call$1(line);
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((B.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3 | B.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | B.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | B.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | B.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      indices[0] = 0;
      indices[1] = -1;
      indices[2] = -1;
      indices[7] = -1;
      indices[3] = 0;
      indices[4] = 0;
      indices[5] = end;
      indices[6] = end;
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        indices[7] = end;
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > 0)
                t2 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t2 = true;
              if (t2) {
                scheme = _null;
                isSimple = false;
              } else {
                if (schemeEnd === 4)
                  if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                    if (hostStart <= 0) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= 0;
                      t1 = delta - 0;
                      queryStart += t1;
                      fragmentStart += t1;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                    if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = "http";
                  } else
                    scheme = _null;
                else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                  if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "https";
                } else
                  scheme = _null;
                isSimple = true;
              }
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (B.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            parts.push(-1);
            wildcardSeen = true;
          } else
            parts.push(parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          parts.push(parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          parts.push((last[0] << 8 | last[1]) >>> 0);
          parts.push((last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            bytes[index] = 0;
            bytes[index + 1] = 0;
            index += 2;
          }
        else {
          bytes[index] = B.JSInt_methods._shrOtherPositive$1(value, 8);
          bytes[index + 1] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (J.contains$1$asx(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (B.JSString_methods.contains$1(t3, A.RegExp_RegExp('["*/:<>?\\\\|]', true))) {
          t1 = A.UnsupportedError$("Illegal character in path: " + t3);
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1;
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      t1 = A.UnsupportedError$("Illegal drive letter " + A.String_String$fromCharCode(charCode));
      throw A.wrapException(t1);
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (B.JSString_methods.codeUnitAt$1(host, start) === 91) {
        t1 = end - 1;
        if (B.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = A._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t2, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t2 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (B.List_nxB[char >>> 4] & 1 << (char & 15)) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            } else
              sourceLength = 1;
          } else
            sourceLength = 1;
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t1._contents += A._Uri__escapeChar(char);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (B.List_qNA[char >>> 4] & 1 << (char & 15)) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (char <= 93 && (B.List_2Vk[char >>> 4] & 1 << (char & 15)) !== 0)
          A._Uri__fail(host, index, "Invalid character");
        else {
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            } else
              sourceLength = 1;
          } else
            sourceLength = 1;
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t1._contents += A._Uri__escapeChar(char);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      if (!A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(scheme, start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(scheme, i);
        if (!(codeUnit < 128 && (B.List_JYB[codeUnit >>> 4] & 1 << (codeUnit & 15)) !== 0))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_gRj, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        result = new A.MappedListIterable(pathSegments, new A._Uri__makePath_closure(), A._arrayInstanceType(pathSegments)._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_qg4, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_CVk, true, false);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_CVk, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = B.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = B.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127 && (B.List_nxB[B.JSInt_methods._shrOtherPositive$1(value, 4)] & 1 << (value & 15)) !== 0)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = B.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
        codeUnits[2] = B.JSString_methods._codeUnitAt$1(_s16_, char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        codeUnits = new Uint8Array(3 * encodedBytes);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          codeUnits[index] = 37;
          codeUnits[index + 1] = B.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4);
          codeUnits[index + 2] = B.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1, index, sectionStart, buffer, char, replacement, sourceLength, t2, tail, t3, _null = null;
      for (t1 = !escapeDelimiters, index = start, sectionStart = index, buffer = _null; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(component, index);
        if (char < 127 && (charTable[char >>> 4] & 1 << (char & 15)) !== 0)
          ++index;
        else {
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash) {
            replacement = "/";
            sourceLength = 1;
          } else if (t1 && char <= 93 && (B.List_2Vk[char >>> 4] & 1 << (char & 15)) !== 0) {
            A._Uri__fail(component, index, "Invalid character");
            sourceLength = _null;
            replacement = sourceLength;
          } else {
            if ((char & 64512) === 55296) {
              t2 = index + 1;
              if (t2 < end) {
                tail = B.JSString_methods.codeUnitAt$1(component, t2);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t3 = t2._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t2._contents = t3 + A.S(replacement);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          if (output.length !== 0) {
            output.pop();
            if (output.length === 0)
              output.push("");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        output.push("");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && B.JSArray_methods.get$last(output) !== "..") {
            output.pop();
            appendSlash = true;
          } else {
            output.push("..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        t1 = t1 === 1 && output[0].length === 0;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        output.push("");
      if (!allowScheme)
        output[0] = A._Uri__escapeScheme(output[0]);
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char > 127 || (B.List_JYB[char >>> 4] & 1 << (char & 15)) === 0)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        A._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "" + "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host(uri);
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = A.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = B.JSString_methods._codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t1, bytes,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t1 = false;
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (B.C_Utf8Codec !== encoding)
          t1 = false;
        else
          t1 = true;
        if (t1)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      } else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (t1 = text.length, i = start; i < end; ++i) {
          codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            bytes.push(A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            bytes.push(codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = B.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        indices.push(i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          indices.push(equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      indices.push(i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_CVk, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    _createTables() {
      var _i, t1, t2, t3, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "\\", _s1_3 = "?", _s1_4 = "#", _s2_ = "/\\",
        tables = A._setArrayType(new Array(22), type$.JSArray_Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 227);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_2, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_2, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_3, 12);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_3, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        table = tables[state];
        char = B.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        indices[transition >>> 5] = i;
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var i, dots, char;
      for (i = start, dots = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(source, i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, result, i, prefixChar, stringChar, delta, lowerChar;
      for (t1 = prefix.length, result = 0, i = 0; i < t1; ++i) {
        prefixChar = B.JSString_methods._codeUnitAt$1(prefix, i);
        stringChar = B.JSString_methods._codeUnitAt$1(string, start + i);
        delta = prefixChar ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    DateTime_parse_parseIntOrZero: function DateTime_parse_parseIntOrZero() {
    },
    DateTime_parse_parseMilliAndMicroseconds: function DateTime_parse_parseMilliAndMicroseconds() {
    },
    Duration: function Duration() {
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3, t4) {
      var _ = this;
      _._core$_receiver = t0;
      _._memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
      _._existingArgumentNames = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._core$_position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando(t0) {
      this._jsWeakMap = t0;
    },
    FileSystemEntityType: function FileSystemEntityType(t0) {
      this._type = t0;
    },
    max(a, b) {
      return Math.max(A.checkNum(a), A.checkNum(b));
    },
    pow(x, exponent) {
      return Math.pow(x, exponent);
    },
    Random_Random() {
      return B.C__JSRandom;
    },
    _JSRandom: function _JSRandom() {
    },
    _getCommandUsage(commands, isSubcommand, lineLength) {
      var commandsByCategory, _i, $name, t3, categories, $length, buffer, columnStart, category, lines, t4, t5, t6,
        t1 = A._instanceType(commands)._eval$1("LinkedHashMapKeyIterable<1>"),
        t2 = t1._eval$1("WhereIterable<Iterable.E>"),
        names = new A.WhereIterable(new A.LinkedHashMapKeyIterable(commands, t1), new A._getCommandUsage_closure(commands), t2),
        visible = new A.WhereIterable(names, new A._getCommandUsage_closure0(commands), t2._eval$1("WhereIterable<Iterable.E>"));
      if (!visible.get$isEmpty(visible))
        names = visible;
      names = A.List_List$of(names, true, names.$ti._eval$1("Iterable.E"));
      B.JSArray_methods.sort$0(names);
      commandsByCategory = A.SplayTreeMap$(type$.String, type$.List_Command_dynamic);
      for (t1 = names.length, _i = 0; _i < names.length; names.length === t1 || (0, A.throwConcurrentModificationError)(names), ++_i) {
        $name = names[_i];
        commands.$index(0, $name).toString;
        t2 = commandsByCategory.putIfAbsent$2("", new A._getCommandUsage_closure1());
        t3 = commands.$index(0, $name);
        t3.toString;
        J.add$1$ax(t2, t3);
      }
      t1 = commandsByCategory.$ti;
      t1 = t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeMapNode<1,2>"))._eval$1("_SplayTreeKeyIterable<1,2>");
      categories = A.List_List$of(new A._SplayTreeKeyIterable(commandsByCategory, t1), true, t1._eval$1("Iterable.E"));
      $length = new A.MappedListIterable(names, new A._getCommandUsage_closure2(), A._arrayInstanceType(names)._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT);
      buffer = new A.StringBuffer("Available " + (isSubcommand ? "sub" : "") + "commands:");
      columnStart = $length + 5;
      for (t1 = categories.length, _i = 0; _i < categories.length; categories.length === t1 || (0, A.throwConcurrentModificationError)(categories), ++_i) {
        category = categories[_i];
        if (!J.$eq$(category, "")) {
          t2 = buffer._contents += "\n";
          t2 += "\n";
          buffer._contents = t2;
          buffer._contents = t2 + A.S(category);
        }
        t2 = commandsByCategory.$index(0, category);
        t2.toString;
        t2 = J.get$iterator$ax(t2);
        for (; t2.moveNext$0();) {
          t3 = t2.get$current();
          lines = A.wrapTextAsLines(B.JSArray_methods.get$first(t3.get$description().split("\n")), lineLength, columnStart);
          t4 = buffer._contents += "\n";
          t3 = t3.get$name(t3);
          t3 = buffer._contents = t4 + ("  " + (t3 + B.JSString_methods.$mul(" ", $length - t3.length)) + "   " + A.S(B.JSArray_methods.get$first(lines)));
          for (t4 = A._arrayInstanceType(lines), t5 = new A.SubListIterable(lines, 1, null, t4._eval$1("SubListIterable<1>")), t5.SubListIterable$3(lines, 1, null, t4._precomputed1), t5 = new A.ListIterator(t5, t5.get$length(t5)), t4 = A._instanceType(t5)._precomputed1; t5.moveNext$0(); t3 = t6) {
            t6 = t5.__internal$_current;
            if (t6 == null)
              t6 = t4._as(t6);
            t3 += "\n";
            buffer._contents = t3;
            t3 += B.JSString_methods.$mul(" ", columnStart);
            buffer._contents = t3;
            t6 = t3 + t6;
            buffer._contents = t6;
          }
        }
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _editDistance(from, to) {
      var t1, t2, t3, t4, i, t5, t6, j, t7, t8, t9, t10, min, t11;
      from = " " + from;
      to = " " + to;
      t1 = A._setArrayType([], type$.JSArray_List_int);
      for (t2 = from.length, t3 = to.length, t4 = type$.JSArray_int, i = 0; i < t2; ++i) {
        t5 = A._setArrayType([], t4);
        for (t6 = i === 0, j = 0; j < t3; ++j)
          if (t6)
            t5.push(j);
          else if (j === 0)
            t5.push(i);
          else
            t5.push(0);
        t1.push(t5);
      }
      for (i = 1; i < t2; ++i)
        for (t4 = i > 1, t5 = i - 1, t6 = i - 2, j = 1; j < t3; ++j) {
          t7 = t1[t5];
          t8 = t7[j];
          t9 = t1[i];
          t10 = j - 1;
          min = Math.min(t8 + 1, t9[t10] + 1);
          t7 = t7[t10];
          t8 = from[i];
          t11 = to[j];
          min = Math.min(min, t7 + (t8 === t11 ? 0 : 1));
          t9[j] = t4 && j > 1 && t8 === to[t10] && from[t5] === t11 ? Math.min(min, t1[t6][j - 2] + 1) : min;
        }
      return B.JSArray_methods.get$last(B.JSArray_methods.get$last(t1));
    },
    CommandRunner: function CommandRunner() {
    },
    CommandRunner__similarCommandsText_closure: function CommandRunner__similarCommandsText_closure(t0, t1) {
      this.$this = t0;
      this.distances = t1;
    },
    Command: function Command() {
    },
    Command_hidden_closure: function Command_hidden_closure(t0) {
      this.$this = t0;
    },
    _getCommandUsage_closure: function _getCommandUsage_closure(t0) {
      this.commands = t0;
    },
    _getCommandUsage_closure0: function _getCommandUsage_closure0(t0) {
      this.commands = t0;
    },
    _getCommandUsage_closure1: function _getCommandUsage_closure1() {
    },
    _getCommandUsage_closure2: function _getCommandUsage_closure2() {
    },
    ArgParser_ArgParser(usageLineLength) {
      var t1 = type$.String,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Option),
        t3 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.ArgParser);
      return new A.ArgParser(t2, t3, A.LinkedHashMap_LinkedHashMap$_empty(t1, t1), new A.UnmodifiableMapView(t2, type$.UnmodifiableMapView_String_Option), new A.UnmodifiableMapView(t3, type$.UnmodifiableMapView_String_ArgParser), [], true, usageLineLength);
    },
    ArgParser: function ArgParser(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._options = t0;
      _._arg_parser$_commands = t1;
      _._aliases = t2;
      _.options = t3;
      _.commands = t4;
      _._optionsAndSeparators = t5;
      _.allowTrailingOptions = t6;
      _.usageLineLength = t7;
    },
    ArgParser__addOption_closure: function ArgParser__addOption_closure(t0) {
      this.$this = t0;
    },
    ArgParserException$(message, commands) {
      return new A.ArgParserException(commands == null ? B.List_empty : A.List_List$unmodifiable(commands, type$.String), message, null, null);
    },
    ArgParserException: function ArgParserException(t0, t1, t2, t3) {
      var _ = this;
      _.commands = t0;
      _.message = t1;
      _.source = t2;
      _.offset = t3;
    },
    ArgResults: function ArgResults(t0, t1, t2, t3, t4) {
      var _ = this;
      _._parser = t0;
      _._parsed = t1;
      _.name = t2;
      _.command = t3;
      _.rest = t4;
    },
    ArgResults_options_closure: function ArgResults_options_closure(t0) {
      this.result = t0;
    },
    HelpCommand: function HelpCommand(t0, t1, t2) {
      var _ = this;
      _._argResults = _._globalResults = _._runner = null;
      _._argParser = t0;
      _._subcommands = t1;
      _.$ti = t2;
    },
    Option: function Option(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.name = t0;
      _.abbr = t1;
      _.help = t2;
      _.valueHelp = t3;
      _.allowed = t4;
      _.allowedHelp = t5;
      _.defaultsTo = t6;
      _.negatable = t7;
      _.callback = t8;
      _.type = t9;
      _.splitCommas = t10;
      _.mandatory = t11;
      _.hide = t12;
    },
    OptionType: function OptionType(t0) {
      this.name = t0;
    },
    Parser$(_commandName, _grammar, _args, _parent, rest) {
      var t1 = A._setArrayType([], type$.JSArray_String);
      if (rest != null)
        B.JSArray_methods.addAll$1(t1, rest);
      return new A.Parser1(_commandName, _parent, _grammar, _args, t1, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
    },
    _isLetterOrDigit(codeUnit) {
      var t1;
      if (!(codeUnit >= 65 && codeUnit <= 90))
        if (!(codeUnit >= 97 && codeUnit <= 122))
          t1 = codeUnit >= 48 && codeUnit <= 57;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    Parser1: function Parser1(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._commandName = t0;
      _._parent = t1;
      _._grammar = t2;
      _._args = t3;
      _._parser$_rest = t4;
      _._results = t5;
    },
    Parser_parse_closure: function Parser_parse_closure(t0) {
      this.$this = t0;
    },
    Parser__setOption_closure: function Parser__setOption_closure() {
    },
    _Usage: function _Usage(t0, t1, t2) {
      var _ = this;
      _._usage$_optionsAndSeparators = t0;
      _._usage$_buffer = t1;
      _._currentColumn = 0;
      _.___Usage__columnWidths_FI = $;
      _._newlinesNeeded = 0;
      _.lineLength = t2;
    },
    _Usage__writeOption_closure: function _Usage__writeOption_closure() {
    },
    _Usage__buildAllowedList_closure: function _Usage__buildAllowedList_closure(t0) {
      this.option = t0;
    },
    UsageException$(message, usage) {
      return new A.UsageException(message, usage);
    },
    UsageException: function UsageException(t0, t1) {
      this.message = t0;
      this.usage = t1;
    },
    DefaultEquality: function DefaultEquality() {
    },
    IterableEquality: function IterableEquality(t0) {
      this.$ti = t0;
    },
    ListEquality: function ListEquality(t0) {
      this.$ti = t0;
    },
    _UnorderedEquality: function _UnorderedEquality() {
    },
    UnorderedIterableEquality: function UnorderedIterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    SetEquality: function SetEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _MapEntry: function _MapEntry(t0, t1, t2) {
      this.equality = t0;
      this.key = t1;
      this.value = t2;
    },
    MapEquality: function MapEquality(t0) {
      this.$ti = t0;
    },
    QueueList$(initialCapacity, $E) {
      return new A.QueueList(A.List_List$filled(A.QueueList__computeInitialCapacity(initialCapacity), null, false, $E._eval$1("0?")), 0, 0, $E._eval$1("QueueList<0>"));
    },
    QueueList_QueueList$from(source, $E) {
      var $length, queue, t1;
      if (type$.List_dynamic._is(source)) {
        $length = J.get$length$asx(source);
        queue = A.QueueList$($length + 1, $E);
        J.setRange$4$ax(queue._queue_list$_table, 0, $length, source, 0);
        queue._queue_list$_tail = $length;
        return queue;
      } else {
        t1 = A.QueueList$(null, $E);
        t1.addAll$1(0, source);
        return t1;
      }
    },
    QueueList__computeInitialCapacity(initialCapacity) {
      if (initialCapacity == null || initialCapacity < 8)
        return 8;
      ++initialCapacity;
      if ((initialCapacity & initialCapacity - 1) >>> 0 === 0)
        return initialCapacity;
      return A.QueueList__nextPowerOf2(initialCapacity);
    },
    QueueList__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    QueueList: function QueueList(t0, t1, t2, t3) {
      var _ = this;
      _._queue_list$_table = t0;
      _._queue_list$_head = t1;
      _._queue_list$_tail = t2;
      _.$ti = t3;
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    UnmodifiableSetMixin__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable Set"));
    },
    UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingSet: function DelegatingSet() {
    },
    FileSystem: function FileSystem() {
    },
    Glob: function Glob(t0, t1, t2) {
      var _ = this;
      _.pattern = t0;
      _.context = t1;
      _._ast = t2;
      _._patternCanMatchRelativeCache = _._patternCanMatchAbsoluteCache = _._contextIsAbsoluteCache = _._previousFileSystem = _._listTree = null;
    },
    AstNode: function AstNode() {
    },
    SequenceNode: function SequenceNode(t0, t1) {
      this.nodes = t0;
      this._ast$_regExp = null;
      this.caseSensitive = t1;
    },
    SequenceNode_flattenOptions_closure: function SequenceNode_flattenOptions_closure() {
    },
    SequenceNode_flattenOptions_closure0: function SequenceNode_flattenOptions_closure0(t0) {
      this.nextSequences = t0;
    },
    SequenceNode_flattenOptions__closure0: function SequenceNode_flattenOptions__closure0(t0) {
      this.sequence = t0;
    },
    SequenceNode_flattenOptions_closure1: function SequenceNode_flattenOptions_closure1(t0) {
      this.$this = t0;
    },
    SequenceNode_flattenOptions__closure: function SequenceNode_flattenOptions__closure(t0) {
      this.$this = t0;
    },
    SequenceNode_split_addNode: function SequenceNode_split_addNode(t0) {
      this._box_0 = t0;
    },
    SequenceNode_split_finishComponent: function SequenceNode_split_finishComponent(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.componentsToReturn = t2;
    },
    SequenceNode__toRegExp_closure: function SequenceNode__toRegExp_closure() {
    },
    StarNode: function StarNode(t0) {
      this._ast$_regExp = null;
      this.caseSensitive = t0;
    },
    DoubleStarNode: function DoubleStarNode(t0, t1) {
      this._ast$_context = t0;
      this._ast$_regExp = null;
      this.caseSensitive = t1;
    },
    AnyCharNode: function AnyCharNode(t0) {
      this._ast$_regExp = null;
      this.caseSensitive = t0;
    },
    RangeNode: function RangeNode(t0, t1, t2) {
      var _ = this;
      _.ranges = t0;
      _.negated = t1;
      _._ast$_regExp = null;
      _.caseSensitive = t2;
    },
    RangeNode_flattenOptions_closure: function RangeNode_flattenOptions_closure() {
    },
    RangeNode_flattenOptions_closure0: function RangeNode_flattenOptions_closure0(t0) {
      this.$this = t0;
    },
    RangeNode__toRegExp_closure: function RangeNode__toRegExp_closure() {
    },
    OptionsNode: function OptionsNode(t0, t1) {
      this.options = t0;
      this._ast$_regExp = null;
      this.caseSensitive = t1;
    },
    OptionsNode_flattenOptions_closure: function OptionsNode_flattenOptions_closure() {
    },
    OptionsNode__toRegExp_closure: function OptionsNode__toRegExp_closure() {
    },
    LiteralNode: function LiteralNode(t0, t1, t2) {
      var _ = this;
      _.text = t0;
      _._ast$_context = t1;
      _._ast$_regExp = null;
      _.caseSensitive = t2;
    },
    ListTree_ListTree(glob, fileSystem) {
      var t1, t2, _i, option, t3, components, firstNode, text, root,
        trees = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$._ListTreeNode);
      for (t1 = glob.flattenOptions$0().options, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        option = t1[_i];
        t3 = $.$get$context();
        components = J.split$1$s(option, t3);
        firstNode = B.JSArray_methods.get$first(B.JSArray_methods.get$first(components).nodes);
        if (firstNode instanceof A.LiteralNode) {
          text = firstNode.text;
          if (t3 == $.$get$windows())
            A.stringReplaceAllUnchecked(text, "/", "\\");
          if (t3.style.rootLength$1(text) > 0) {
            B.JSArray_methods.removeAt$1(components, 0);
            root = text;
          } else
            root = ".";
        } else
          root = ".";
        A.ListTree__addGlob(root, components, trees);
      }
      return new A.ListTree(trees, A.ListTree__computeCanOverlap(trees), fileSystem);
    },
    ListTree__addGlob(root, components, trees) {
      var t1, t2, t3, i, component, recursive, complete, children, t4, rootNode, rootChildren, _null = null,
        $parent = trees.$index(0, root);
      for (t1 = type$.SequenceNode, t2 = type$._ListTreeNode, t3 = type$.JSArray_SequenceNode, i = 0; i < components.length; ++i) {
        component = components[i];
        recursive = B.JSArray_methods.any$1(component.nodes, new A.ListTree__addGlob_closure());
        complete = i === components.length - 1;
        if ($parent != null) {
          children = $parent.children;
          if (children == null || recursive) {
            $parent.makeRecursive$0();
            t1 = A._join(B.JSArray_methods.sublist$1(components, i));
            t2 = $parent._validator;
            if (t2 == null)
              $parent._validator = new A.OptionsNode(B.JSArray_methods.toList$0(A._setArrayType([t1], t3)), t1.caseSensitive);
            else
              B.JSArray_methods.add$1(t2.options, t1);
            return;
          } else if (complete) {
            t4 = $parent._validator;
            if (t4 == null)
              $parent._validator = new A.OptionsNode(B.JSArray_methods.toList$0(A._setArrayType([component], t3)), component.caseSensitive);
            else
              B.JSArray_methods.add$1(t4.options, component);
          } else {
            if (!children.containsKey$1(component))
              children.$indexSet(0, component, new A._ListTreeNode(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _null));
            $parent = children.$index(0, component);
          }
        } else if (recursive) {
          t1 = A._join(B.JSArray_methods.sublist$1(components, i));
          trees.$indexSet(0, root, new A._ListTreeNode(_null, new A.OptionsNode(B.JSArray_methods.toList$0(A._setArrayType([t1], t3)), t1.caseSensitive)));
          return;
        } else if (complete) {
          t4 = new A._ListTreeNode(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _null);
          t4._validator = new A.OptionsNode(B.JSArray_methods.toList$0(A._setArrayType([component], t3)), component.caseSensitive);
          trees.$indexSet(0, root, t4);
        } else {
          rootNode = new A._ListTreeNode(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _null);
          trees.$indexSet(0, root, rootNode);
          rootChildren = rootNode.children;
          rootChildren.$indexSet(0, component, new A._ListTreeNode(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _null));
          $parent = rootChildren.$index(0, component);
        }
      }
    },
    ListTree__computeCanOverlap(trees) {
      if (trees.__js_helper$_length > 1 && trees.containsKey$1("."))
        return true;
      return trees.get$values(trees).any$1(0, new A.ListTree__computeCanOverlap_closure());
    },
    _join(components) {
      var t1, t2, _i, component,
        componentsList = A._setArrayType(components.slice(0), A._arrayInstanceType(components)),
        first = B.JSArray_methods.removeAt$1(componentsList, 0),
        nodes = A._setArrayType([first], type$.JSArray_AstNode);
      for (t1 = componentsList.length, t2 = first.caseSensitive, _i = 0; _i < componentsList.length; componentsList.length === t1 || (0, A.throwConcurrentModificationError)(componentsList), ++_i) {
        component = componentsList[_i];
        nodes.push(new A.LiteralNode("/", null, t2));
        nodes.push(component);
      }
      return new A.SequenceNode(B.JSArray_methods.toList$0(nodes), t2);
    },
    ListTree: function ListTree(t0, t1, t2) {
      this._trees = t0;
      this._canOverlap = t1;
      this._fileSystem = t2;
    },
    ListTree__addGlob_closure: function ListTree__addGlob_closure() {
    },
    ListTree__computeCanOverlap_closure: function ListTree__computeCanOverlap_closure() {
    },
    ListTree_listSync_closure: function ListTree_listSync_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.followLinks = t2;
    },
    ListTree_listSync_closure0: function ListTree_listSync_closure0(t0) {
      this.seen = t0;
    },
    _ListTreeNode: function _ListTreeNode(t0, t1) {
      this.children = t0;
      this._validator = t1;
    },
    _ListTreeNode__isIntermediate_closure: function _ListTreeNode__isIntermediate_closure() {
    },
    _ListTreeNode_canOverlap_closure: function _ListTreeNode_canOverlap_closure() {
    },
    _ListTreeNode_canOverlap_closure0: function _ListTreeNode_canOverlap_closure0() {
    },
    _ListTreeNode_makeRecursive_closure: function _ListTreeNode_makeRecursive_closure() {
    },
    _ListTreeNode_listSync_closure: function _ListTreeNode_listSync_closure(t0, t1) {
      this.$this = t0;
      this.dir = t1;
    },
    _ListTreeNode_listSync_closure0: function _ListTreeNode_listSync_closure0(t0, t1, t2) {
      this.dir = t0;
      this.fileSystem = t1;
      this.followLinks = t2;
    },
    _ListTreeNode_listSync_closure1: function _ListTreeNode_listSync_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.dir = t1;
      _.fileSystem = t2;
      _.followLinks = t3;
    },
    _ListTreeNode_listSync__closure: function _ListTreeNode_listSync__closure(t0) {
      this.basename = t0;
    },
    _ListTreeNode_listSync__closure0: function _ListTreeNode_listSync__closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.dir = t1;
      _.basename = t2;
      _.fileSystem = t3;
      _.followLinks = t4;
    },
    _ListTreeNode__validateIntermediateChildrenSync_closure: function _ListTreeNode__validateIntermediateChildrenSync_closure(t0, t1, t2) {
      this.entities = t0;
      this.dir = t1;
      this.fileSystem = t2;
    },
    _ListTreeNode__validateIntermediateChildrenSync__closure: function _ListTreeNode__validateIntermediateChildrenSync__closure(t0, t1) {
      this.sequence = t0;
      this.dir = t1;
    },
    Parser: function Parser(t0, t1, t2) {
      this._scanner = t0;
      this._context = t1;
      this._caseSensitive = t2;
    },
    Parser__parseRange_readRangeChar: function Parser__parseRange_readRangeChar(t0, t1) {
      this.$this = t0;
      this.negated = t1;
    },
    regExpQuote(contents) {
      return A.stringReplaceAllFuncUnchecked(contents, $.$get$_quote0(), new A.regExpQuote_closure(), null);
    },
    toPosixPath(context, path) {
      var t1 = context.style;
      if (t1 === $.$get$Style_windows())
        return A.stringReplaceAllUnchecked(path, "\\", "/");
      if (t1 === $.$get$Style_url())
        return A._Uri__uriDecode(path, 0, path.length, B.C_Utf8Codec, false);
      return path;
    },
    Range: function Range(t0, t1) {
      this.min = t0;
      this.max = t1;
    },
    regExpQuote_closure: function regExpQuote_closure() {
    },
    BufferModule: function BufferModule() {
    },
    BufferConstants: function BufferConstants() {
    },
    Buffer: function Buffer() {
    },
    ConsoleModule: function ConsoleModule() {
    },
    Console: function Console() {
    },
    DNS: function DNS() {
    },
    DNSLookupOptions: function DNSLookupOptions() {
    },
    DNSAddress: function DNSAddress() {
    },
    Resolver: function Resolver() {
    },
    EventEmitter: function EventEmitter() {
    },
    fs() {
      var t1 = $._fs;
      return t1 == null ? $._fs = self.fs : t1;
    },
    FS: function FS() {
    },
    FSConstants: function FSConstants() {
    },
    FSWatcher: function FSWatcher() {
    },
    ReadStream: function ReadStream() {
    },
    ReadStreamOptions: function ReadStreamOptions() {
    },
    WriteStream: function WriteStream() {
    },
    WriteStreamOptions: function WriteStreamOptions() {
    },
    FileOptions: function FileOptions() {
    },
    StatOptions: function StatOptions() {
    },
    MkdirOptions: function MkdirOptions() {
    },
    RmdirOptions: function RmdirOptions() {
    },
    WatchOptions: function WatchOptions() {
    },
    WatchFileOptions: function WatchFileOptions() {
    },
    Stats: function Stats() {
    },
    HTTP: function HTTP() {
    },
    HttpAgent: function HttpAgent() {
    },
    HttpAgentOptions: function HttpAgentOptions() {
    },
    RequestOptions: function RequestOptions() {
    },
    ClientRequest: function ClientRequest() {
    },
    HttpServer: function HttpServer() {
    },
    ServerResponse: function ServerResponse() {
    },
    IncomingMessage: function IncomingMessage() {
    },
    Promise: function Promise() {
    },
    Date: function Date() {
    },
    JsError: function JsError() {
    },
    Atomics: function Atomics() {
    },
    Modules: function Modules() {
    },
    Module: function Module() {
    },
    Net: function Net() {
    },
    Socket: function Socket() {
    },
    NetAddress: function NetAddress() {
    },
    NetServer: function NetServer() {
    },
    NodeJsError: function NodeJsError() {
    },
    JsAssertionError: function JsAssertionError() {
    },
    JsRangeError: function JsRangeError() {
    },
    JsReferenceError: function JsReferenceError() {
    },
    JsSyntaxError: function JsSyntaxError() {
    },
    JsTypeError: function JsTypeError() {
    },
    JsSystemError: function JsSystemError() {
    },
    OS: function OS() {
    },
    CPU: function CPU() {
    },
    CPUTimes: function CPUTimes() {
    },
    OSConstants: function OSConstants() {
    },
    OSSignalConstants: function OSSignalConstants() {
    },
    OSErrorConstants: function OSErrorConstants() {
    },
    OSDLOpenConstants: function OSDLOpenConstants() {
    },
    Path: function Path() {
    },
    PathObject: function PathObject() {
    },
    Process: function Process() {
    },
    CPUUsage: function CPUUsage() {
    },
    Release: function Release() {
    },
    StreamModule: function StreamModule() {
    },
    Readable: function Readable() {
    },
    Writable: function Writable() {
    },
    Duplex: function Duplex() {
    },
    Transform: function Transform() {
    },
    WritableOptions: function WritableOptions() {
    },
    ReadableOptions: function ReadableOptions() {
    },
    Immediate: function Immediate() {
    },
    Timeout: function Timeout() {
    },
    TTY: function TTY() {
    },
    TTYReadStream: function TTYReadStream() {
    },
    TTYWriteStream: function TTYWriteStream() {
    },
    futureToPromise(future, $T) {
      return new self.Promise(A.allowInterop(new A.futureToPromise_closure(future, $T)));
    },
    Util: function Util() {
    },
    futureToPromise_closure: function futureToPromise_closure(t0, t1) {
      this.future = t0;
      this.T = t1;
    },
    futureToPromise__closure: function futureToPromise__closure(t0, t1) {
      this.resolve = t0;
      this.T = t1;
    },
    Directory: function Directory(t0) {
      this.path = t0;
    },
    Directory_listSync_list: function Directory_listSync_list(t0, t1, t2) {
      this.$this = t0;
      this.followLinks = t1;
      this.recursive = t2;
    },
    File: function File(t0) {
      this.path = t0;
    },
    File_length_closure: function File_length_closure() {
    },
    NodeFileSystem: function NodeFileSystem() {
    },
    FileStat$_internalNotFound() {
      return new A.FileStat(A.DateTime$fromMillisecondsSinceEpoch(0), A.DateTime$fromMillisecondsSinceEpoch(0), A.DateTime$fromMillisecondsSinceEpoch(0), B.FileSystemEntityType_5, 0, -1);
    },
    FileStat_FileStat$_fromNodeStats(stats) {
      var type,
        t1 = J.getInterceptor$x(stats);
      if (t1.isDirectory$0(stats))
        type = B.FileSystemEntityType_1;
      else if (t1.isFile$0(stats))
        type = B.FileSystemEntityType_0;
      else
        type = t1.isSymbolicLink$0(stats) ? B.FileSystemEntityType_2 : B.FileSystemEntityType_5;
      return new A.FileStat(A.DateTime_parse(J.toISOString$0$x(t1.get$ctime(stats))), A.DateTime_parse(J.toISOString$0$x(t1.get$mtime(stats))), A.DateTime_parse(J.toISOString$0$x(t1.get$atime(stats))), type, J.floor$0$n(t1.get$mode(stats)), t1.get$size(stats));
    },
    FileStat_stat(path) {
      var t1 = new A._Future($.Zone__current, type$._Future_FileStat),
        jsCallback = A.allowInterop(new A.FileStat_stat_callback(new A._AsyncCompleter(t1, type$._AsyncCompleter_FileStat)));
      J.lstat$2$x(A.fs(), path, jsCallback);
      return t1;
    },
    FileStat_statSync(path) {
      var t1, exception;
      try {
        t1 = A.FileStat_FileStat$_fromNodeStats(J.lstatSync$1$x(A.fs(), path));
        return t1;
      } catch (exception) {
        t1 = A.FileStat$_internalNotFound();
        return t1;
      }
    },
    FileSystemEntity0: function FileSystemEntity0() {
    },
    FileStat: function FileStat(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.changed = t0;
      _.modified = t1;
      _.accessed = t2;
      _.type = t3;
      _.mode = t4;
      _.size = t5;
    },
    FileStat_stat_callback: function FileStat_stat_callback(t0) {
      this.completer = t0;
    },
    Link: function Link(t0) {
      this.path = t0;
    },
    Context_Context(style) {
      var current = style == null ? A.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return new A.Context(type$.InternalStyle._as(style), current);
    },
    _parseUri(uri) {
      if (typeof uri == "string")
        return A.Uri_parse(uri);
      if (type$.Uri._is(uri))
        return uri;
      throw A.wrapException(A.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, new A._validateArgList_closure(), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    _PathDirection: function _PathDirection(t0) {
      this.name = t0;
    },
    _PathRelation: function _PathRelation(t0) {
      this.name = t0;
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path),
        isRootRelative = style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, 0))) {
        separators.push(path[0]);
        start = 1;
      } else {
        separators.push("");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, i))) {
          parts.push(B.JSString_methods.substring$2(path, start, i));
          separators.push(path[i]);
          start = i + 1;
        }
      if (start < t1) {
        parts.push(B.JSString_methods.substring$1(path, start));
        separators.push("");
      }
      return new A.ParsedPath(style, root, isRootRelative, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.isRootRelative = t2;
      _.parts = t3;
      _.separators = t4;
    },
    ParsedPath__splitExtension_closure: function ParsedPath__splitExtension_closure() {
    },
    ParsedPath__splitExtension_closure0: function ParsedPath__splitExtension_closure0() {
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      var t1 = A.Uri_base();
      if (!B.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(null, "a/b", null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    },
    Argument: function Argument(t0, t1, t2) {
      this.name = t0;
      this.defaultValue = t1;
      this.span = t2;
    },
    ArgumentDeclaration: function ArgumentDeclaration(t0, t1, t2) {
      this.$arguments = t0;
      this.restArgument = t1;
      this.span = t2;
    },
    ArgumentInvocation$empty(span) {
      return new A.ArgumentInvocation(B.List_empty5, B.Map_empty, null, null, span);
    },
    ArgumentInvocation: function ArgumentInvocation(t0, t1, t2, t3, t4) {
      var _ = this;
      _.positional = t0;
      _.named = t1;
      _.rest = t2;
      _.keywordRest = t3;
      _.span = t4;
    },
    ConfiguredVariable: function ConfiguredVariable(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.expression = t1;
      _.isGuarded = t2;
      _.span = t3;
    },
    BinaryOperationExpression: function BinaryOperationExpression(t0, t1, t2, t3) {
      var _ = this;
      _.operator = t0;
      _.left = t1;
      _.right = t2;
      _.allowsSlash = t3;
    },
    BinaryOperator: function BinaryOperator(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.operator = t1;
      _.precedence = t2;
      _._name = t3;
    },
    BooleanExpression: function BooleanExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    CalculationExpression__verifyArguments($arguments) {
      return A.List_List$unmodifiable(new A.MappedListIterable($arguments, new A.CalculationExpression__verifyArguments_closure(), A._arrayInstanceType($arguments)._eval$1("MappedListIterable<1,@>")), type$.Expression);
    },
    CalculationExpression__verify(expression) {
      var t1,
        _s29_ = "Invalid calculation argument ";
      if (expression instanceof A.NumberExpression)
        return;
      if (expression instanceof A.CalculationExpression)
        return;
      if (expression instanceof A.VariableExpression)
        return;
      if (expression instanceof A.FunctionExpression)
        return;
      if (expression instanceof A.IfExpression)
        return;
      if (expression instanceof A.StringExpression) {
        if (expression.hasQuotes)
          throw A.wrapException(A.ArgumentError$(_s29_ + expression.toString$0(0) + ".", null));
      } else if (expression instanceof A.ParenthesizedExpression)
        A.CalculationExpression__verify(expression.expression);
      else if (expression instanceof A.BinaryOperationExpression) {
        A.CalculationExpression__verify(expression.left);
        A.CalculationExpression__verify(expression.right);
        t1 = expression.operator;
        if (t1 === B.BinaryOperator_qbf)
          return;
        if (t1 === B.BinaryOperator_KlB)
          return;
        if (t1 === B.BinaryOperator_6pl)
          return;
        if (t1 === B.BinaryOperator_qpm)
          return;
        throw A.wrapException(A.ArgumentError$(_s29_ + expression.toString$0(0) + ".", null));
      } else
        throw A.wrapException(A.ArgumentError$(_s29_ + expression.toString$0(0) + ".", null));
    },
    CalculationExpression: function CalculationExpression(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    CalculationExpression__verifyArguments_closure: function CalculationExpression__verifyArguments_closure() {
    },
    ColorExpression: function ColorExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    FunctionExpression: function FunctionExpression(t0, t1, t2, t3) {
      var _ = this;
      _.namespace = t0;
      _.originalName = t1;
      _.$arguments = t2;
      _.span = t3;
    },
    IfExpression: function IfExpression(t0, t1) {
      this.$arguments = t0;
      this.span = t1;
    },
    InterpolatedFunctionExpression: function InterpolatedFunctionExpression(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    ListExpression: function ListExpression(t0, t1, t2, t3) {
      var _ = this;
      _.contents = t0;
      _.separator = t1;
      _.hasBrackets = t2;
      _.span = t3;
    },
    ListExpression_toString_closure: function ListExpression_toString_closure(t0) {
      this.$this = t0;
    },
    MapExpression: function MapExpression(t0, t1) {
      this.pairs = t0;
      this.span = t1;
    },
    MapExpression_toString_closure: function MapExpression_toString_closure() {
    },
    NullExpression: function NullExpression(t0) {
      this.span = t0;
    },
    NumberExpression: function NumberExpression(t0, t1, t2) {
      this.value = t0;
      this.unit = t1;
      this.span = t2;
    },
    ParenthesizedExpression: function ParenthesizedExpression(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SelectorExpression: function SelectorExpression(t0) {
      this.span = t0;
    },
    StringExpression_quoteText(text) {
      var t1,
        quote = A.StringExpression__bestQuote(A._setArrayType([text], type$.JSArray_String)),
        buffer = new A.StringBuffer("");
      buffer._contents = "" + A.Primitives_stringFromCharCode(quote);
      A.StringExpression__quoteInnerText(text, quote, buffer, true);
      t1 = buffer._contents += A.Primitives_stringFromCharCode(quote);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    StringExpression__quoteInnerText(text, quote, buffer, $static) {
      var t1, t2, i, codeUnit, next, t3;
      for (t1 = text.length, t2 = t1 - 1, i = 0; i < t1; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
        if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12) {
          buffer.writeCharCode$1(92);
          buffer.writeCharCode$1(97);
          if (i !== t2) {
            next = B.JSString_methods._codeUnitAt$1(text, i + 1);
            if (next === 32 || next === 9 || next === 10 || next === 13 || next === 12 || A.isHex(next))
              buffer.writeCharCode$1(32);
          }
        } else {
          if (codeUnit !== quote)
            if (codeUnit !== 92)
              t3 = $static && codeUnit === 35 && i < t2 && B.JSString_methods._codeUnitAt$1(text, i + 1) === 123;
            else
              t3 = true;
          else
            t3 = true;
          if (t3)
            buffer.writeCharCode$1(92);
          buffer.writeCharCode$1(codeUnit);
        }
      }
    },
    StringExpression__bestQuote(strings) {
      var t1, containsDoubleQuote, t2, t3, i, codeUnit;
      for (t1 = J.get$iterator$ax(strings), containsDoubleQuote = false; t1.moveNext$0();) {
        t2 = t1.get$current();
        for (t3 = t2.length, i = 0; i < t3; ++i) {
          codeUnit = B.JSString_methods._codeUnitAt$1(t2, i);
          if (codeUnit === 39)
            return 34;
          if (codeUnit === 34)
            containsDoubleQuote = true;
        }
      }
      return containsDoubleQuote ? 39 : 34;
    },
    StringExpression: function StringExpression(t0, t1) {
      this.text = t0;
      this.hasQuotes = t1;
    },
    SupportsExpression: function SupportsExpression(t0) {
      this.condition = t0;
    },
    UnaryOperationExpression: function UnaryOperationExpression(t0, t1, t2) {
      this.operator = t0;
      this.operand = t1;
      this.span = t2;
    },
    UnaryOperator: function UnaryOperator(t0, t1, t2) {
      this.name = t0;
      this.operator = t1;
      this._name = t2;
    },
    VariableExpression: function VariableExpression(t0, t1, t2) {
      this.namespace = t0;
      this.name = t1;
      this.span = t2;
    },
    DynamicImport: function DynamicImport(t0, t1) {
      this.urlString = t0;
      this.span = t1;
    },
    StaticImport: function StaticImport(t0, t1, t2) {
      this.url = t0;
      this.modifiers = t1;
      this.span = t2;
    },
    Interpolation$(contents, span) {
      var t1 = new A.Interpolation(A.List_List$unmodifiable(contents, type$.Object), span);
      t1.Interpolation$2(contents, span);
      return t1;
    },
    Interpolation: function Interpolation(t0, t1) {
      this.contents = t0;
      this.span = t1;
    },
    Interpolation_toString_closure: function Interpolation_toString_closure() {
    },
    AtRootRule$(children, span, query) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.AtRootRule(query, span, t1);
    },
    AtRootRule: function AtRootRule(t0, t1, t2) {
      this.query = t0;
      this.span = t1;
      this.children = t2;
    },
    AtRule$($name, span, children, value) {
      var t1 = children == null ? null : A.List_List$unmodifiable(children, type$.Statement);
      if (t1 != null)
        B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.AtRule($name, value, span, t1);
    },
    AtRule: function AtRule(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.span = t2;
      _.children = t3;
    },
    CallableDeclaration: function CallableDeclaration() {
    },
    ContentBlock$($arguments, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.ContentBlock("@content", $arguments, span, t1);
    },
    ContentBlock: function ContentBlock(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.$arguments = t1;
      _.span = t2;
      _.children = t3;
    },
    ContentRule: function ContentRule(t0, t1) {
      this.$arguments = t0;
      this.span = t1;
    },
    DebugRule: function DebugRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    Declaration$($name, value, span) {
      if (B.JSString_methods.startsWith$1($name.get$initialPlain(), "--") && !(value instanceof A.StringExpression))
        A.throwExpression(A.ArgumentError$('Declarations whose names begin with "--" must have StringExpression values (was `' + value.toString$0(0) + "` of type " + value.get$runtimeType(value).toString$0(0) + ").", null));
      return new A.Declaration($name, value, span, null);
    },
    Declaration$nested($name, children, span, value) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      if (B.JSString_methods.startsWith$1($name.get$initialPlain(), "--") && !(value instanceof A.StringExpression))
        A.throwExpression(A.ArgumentError$('Declarations whose names begin with "--" may not be nested.', null));
      return new A.Declaration($name, value, span, t1);
    },
    Declaration: function Declaration(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.span = t2;
      _.children = t3;
    },
    EachRule$(variables, list, children, span) {
      var t1 = A.List_List$unmodifiable(variables, type$.String),
        t2 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t2, new A.ParentStatement_closure());
      return new A.EachRule(t1, list, span, t2);
    },
    EachRule: function EachRule(t0, t1, t2, t3) {
      var _ = this;
      _.variables = t0;
      _.list = t1;
      _.span = t2;
      _.children = t3;
    },
    EachRule_toString_closure: function EachRule_toString_closure() {
    },
    ErrorRule: function ErrorRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    ExtendRule: function ExtendRule(t0, t1, t2) {
      this.selector = t0;
      this.isOptional = t1;
      this.span = t2;
    },
    ForRule$(variable, from, to, children, span, exclusive) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.ForRule(variable, from, to, exclusive, span, t1);
    },
    ForRule: function ForRule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.variable = t0;
      _.from = t1;
      _.to = t2;
      _.isExclusive = t3;
      _.span = t4;
      _.children = t5;
    },
    ForwardRule: function ForwardRule(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.url = t0;
      _.shownMixinsAndFunctions = t1;
      _.shownVariables = t2;
      _.hiddenMixinsAndFunctions = t3;
      _.hiddenVariables = t4;
      _.prefix = t5;
      _.configuration = t6;
      _.span = t7;
    },
    FunctionRule$($name, $arguments, children, span, comment) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.FunctionRule($name, $arguments, span, t1);
    },
    FunctionRule: function FunctionRule(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.$arguments = t1;
      _.span = t2;
      _.children = t3;
    },
    IfClause$(expression, children) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.IfRuleClause$__closure());
      return new A.IfClause(expression, t1);
    },
    ElseClause$(children) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.IfRuleClause$__closure());
      return new A.ElseClause(t1);
    },
    IfRule: function IfRule(t0, t1, t2) {
      this.clauses = t0;
      this.lastClause = t1;
      this.span = t2;
    },
    IfRule_toString_closure: function IfRule_toString_closure() {
    },
    IfRuleClause: function IfRuleClause() {
    },
    IfRuleClause$__closure: function IfRuleClause$__closure() {
    },
    IfRuleClause$___closure: function IfRuleClause$___closure() {
    },
    IfClause: function IfClause(t0, t1) {
      this.expression = t0;
      this.children = t1;
    },
    ElseClause: function ElseClause(t0) {
      this.children = t0;
    },
    ImportRule: function ImportRule(t0, t1) {
      this.imports = t0;
      this.span = t1;
    },
    IncludeRule: function IncludeRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.namespace = t0;
      _.name = t1;
      _.$arguments = t2;
      _.content = t3;
      _.span = t4;
    },
    LoudComment: function LoudComment(t0) {
      this.text = t0;
    },
    MediaRule$(query, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.MediaRule(query, span, t1);
    },
    MediaRule: function MediaRule(t0, t1, t2) {
      this.query = t0;
      this.span = t1;
      this.children = t2;
    },
    MixinRule$($name, $arguments, children, span, comment) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.MixinRule($name, $arguments, span, t1);
    },
    MixinRule: function MixinRule(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.$arguments = t1;
      _.span = t2;
      _.children = t3;
    },
    ParentStatement: function ParentStatement() {
    },
    ParentStatement_closure: function ParentStatement_closure() {
    },
    ParentStatement__closure: function ParentStatement__closure() {
    },
    ReturnRule: function ReturnRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SilentComment: function SilentComment(t0, t1) {
      this.text = t0;
      this.span = t1;
    },
    StyleRule$(selector, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.StyleRule(selector, span, t1);
    },
    StyleRule: function StyleRule(t0, t1, t2) {
      this.selector = t0;
      this.span = t1;
      this.children = t2;
    },
    Stylesheet$internal(children, span, plainCss) {
      var t1 = A._setArrayType([], type$.JSArray_UseRule),
        t2 = A._setArrayType([], type$.JSArray_ForwardRule),
        t3 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t3, new A.ParentStatement_closure());
      t1 = new A.Stylesheet(span, t1, t2, t3);
      t1.Stylesheet$internal$3$plainCss(children, span, plainCss);
      return t1;
    },
    Stylesheet_Stylesheet$parse(contents, syntax, logger, url) {
      var t1, t2;
      switch (syntax) {
        case B.Syntax_Sass_sass:
          t1 = A.SourceFile$fromString(contents, url);
          t2 = logger == null ? B.C_StderrLogger : logger;
          return new A.SassParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.VariableDeclaration), new A.SpanScanner(t1, url, contents), t2).parse$0(0);
        case B.Syntax_SCSS_scss:
          return A.ScssParser$(contents, logger, url).parse$0(0);
        case B.Syntax_CSS_css:
          t1 = A.SourceFile$fromString(contents, url);
          t2 = logger == null ? B.C_StderrLogger : logger;
          return new A.CssParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.VariableDeclaration), new A.SpanScanner(t1, url, contents), t2).parse$0(0);
        default:
          throw A.wrapException(A.ArgumentError$("Unknown syntax " + syntax.toString$0(0) + ".", null));
      }
    },
    Stylesheet: function Stylesheet(t0, t1, t2, t3) {
      var _ = this;
      _.span = t0;
      _._uses = t1;
      _._forwards = t2;
      _.children = t3;
    },
    SupportsRule$(condition, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.SupportsRule(condition, span, t1);
    },
    SupportsRule: function SupportsRule(t0, t1, t2) {
      this.condition = t0;
      this.span = t1;
      this.children = t2;
    },
    UseRule: function UseRule(t0, t1, t2, t3) {
      var _ = this;
      _.url = t0;
      _.namespace = t1;
      _.configuration = t2;
      _.span = t3;
    },
    VariableDeclaration$($name, expression, span, comment, global, guarded, namespace) {
      if (namespace != null && global)
        A.throwExpression(A.ArgumentError$("Other modules' members can't be defined with !global.", null));
      return new A.VariableDeclaration(namespace, $name, expression, guarded, global, span);
    },
    VariableDeclaration: function VariableDeclaration(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.namespace = t0;
      _.name = t1;
      _.expression = t2;
      _.isGuarded = t3;
      _.isGlobal = t4;
      _.span = t5;
    },
    WarnRule: function WarnRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    WhileRule$(condition, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.WhileRule(condition, span, t1);
    },
    WhileRule: function WhileRule(t0, t1, t2) {
      this.condition = t0;
      this.span = t1;
      this.children = t2;
    },
    SupportsAnything: function SupportsAnything(t0, t1) {
      this.contents = t0;
      this.span = t1;
    },
    SupportsDeclaration: function SupportsDeclaration(t0, t1, t2) {
      this.name = t0;
      this.value = t1;
      this.span = t2;
    },
    SupportsFunction: function SupportsFunction(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    SupportsInterpolation: function SupportsInterpolation(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SupportsNegation: function SupportsNegation(t0, t1) {
      this.condition = t0;
      this.span = t1;
    },
    SupportsOperation: function SupportsOperation(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.right = t1;
      _.operator = t2;
      _.span = t3;
    },
    Selector: function Selector() {
    },
    _IsInvisibleVisitor: function _IsInvisibleVisitor() {
    },
    _IsBogusVisitor: function _IsBogusVisitor(t0) {
      this.includeLeadingCombinator = t0;
    },
    _IsBogusVisitor_visitComplexSelector_closure: function _IsBogusVisitor_visitComplexSelector_closure(t0) {
      this.$this = t0;
    },
    _IsUselessVisitor: function _IsUselessVisitor() {
    },
    _IsUselessVisitor_visitComplexSelector_closure: function _IsUselessVisitor_visitComplexSelector_closure(t0) {
      this.$this = t0;
    },
    __IsBogusVisitor_Object_AnySelectorVisitor: function __IsBogusVisitor_Object_AnySelectorVisitor() {
    },
    __IsInvisibleVisitor_Object_AnySelectorVisitor: function __IsInvisibleVisitor_Object_AnySelectorVisitor() {
    },
    __IsUselessVisitor_Object_AnySelectorVisitor: function __IsUselessVisitor_Object_AnySelectorVisitor() {
    },
    AttributeSelector: function AttributeSelector(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.op = t1;
      _.value = t2;
      _.modifier = t3;
    },
    AttributeOperator: function AttributeOperator(t0, t1) {
      this._attribute$_text = t0;
      this._name = t1;
    },
    ClassSelector: function ClassSelector(t0) {
      this.name = t0;
    },
    Combinator: function Combinator(t0, t1) {
      this._combinator$_text = t0;
      this._name = t1;
    },
    ComplexSelector$(leadingCombinators, components, lineBreak) {
      var t1 = A.List_List$unmodifiable(leadingCombinators, type$.Combinator),
        t2 = A.List_List$unmodifiable(components, type$.ComplexSelectorComponent);
      if (t1.length === 0 && t2.length === 0)
        A.throwExpression(A.ArgumentError$(string$.leadin, null));
      return new A.ComplexSelector(t1, t2, lineBreak);
    },
    ComplexSelector: function ComplexSelector(t0, t1, t2) {
      var _ = this;
      _.leadingCombinators = t0;
      _.components = t1;
      _.lineBreak = t2;
      _.__ComplexSelector_specificity_FI = $;
    },
    ComplexSelectorComponent: function ComplexSelectorComponent(t0, t1) {
      this.selector = t0;
      this.combinators = t1;
    },
    ComplexSelectorComponent_toString_closure: function ComplexSelectorComponent_toString_closure() {
    },
    CompoundSelector$(components) {
      var t1 = A.List_List$unmodifiable(components, type$.SimpleSelector);
      if (t1.length === 0)
        A.throwExpression(A.ArgumentError$("components may not be empty.", null));
      return new A.CompoundSelector(t1);
    },
    CompoundSelector: function CompoundSelector(t0) {
      this.components = t0;
      this.__CompoundSelector_specificity_FI = $;
    },
    IDSelector: function IDSelector(t0) {
      this.name = t0;
    },
    IDSelector_unify_closure: function IDSelector_unify_closure(t0) {
      this.$this = t0;
    },
    SelectorList$(components) {
      var t1 = A.List_List$unmodifiable(components, type$.ComplexSelector);
      if (t1.length === 0)
        A.throwExpression(A.ArgumentError$("components may not be empty.", null));
      return new A.SelectorList(t1);
    },
    SelectorList: function SelectorList(t0) {
      this.components = t0;
    },
    SelectorList_asSassList_closure: function SelectorList_asSassList_closure() {
    },
    SelectorList_resolveParentSelectors_closure: function SelectorList_resolveParentSelectors_closure(t0, t1, t2) {
      this.$this = t0;
      this.implicitParent = t1;
      this.parent = t2;
    },
    SelectorList_resolveParentSelectors__closure: function SelectorList_resolveParentSelectors__closure(t0) {
      this.complex = t0;
    },
    SelectorList__complexContainsParentSelector_closure: function SelectorList__complexContainsParentSelector_closure() {
    },
    SelectorList__complexContainsParentSelector__closure: function SelectorList__complexContainsParentSelector__closure() {
    },
    SelectorList__resolveParentSelectorsCompound_closure: function SelectorList__resolveParentSelectorsCompound_closure() {
    },
    SelectorList__resolveParentSelectorsCompound_closure0: function SelectorList__resolveParentSelectorsCompound_closure0(t0) {
      this.parent = t0;
    },
    SelectorList__resolveParentSelectorsCompound_closure1: function SelectorList__resolveParentSelectorsCompound_closure1(t0, t1, t2) {
      this.parentSelector = t0;
      this.resolvedSimples = t1;
      this.component = t2;
    },
    SelectorList_withAdditionalCombinators_closure: function SelectorList_withAdditionalCombinators_closure(t0) {
      this.combinators = t0;
    },
    ParentSelector: function ParentSelector(t0) {
      this.suffix = t0;
    },
    PlaceholderSelector: function PlaceholderSelector(t0) {
      this.name = t0;
    },
    PseudoSelector$($name, argument, element, selector) {
      var t1 = !element,
        t2 = t1 && !A.PseudoSelector__isFakePseudoElement($name);
      return new A.PseudoSelector($name, A.unvendor($name), t2, t1, argument, selector);
    },
    PseudoSelector__isFakePseudoElement($name) {
      switch (B.JSString_methods._codeUnitAt$1($name, 0)) {
        case 97:
        case 65:
          return A.equalsIgnoreCase($name, "after");
        case 98:
        case 66:
          return A.equalsIgnoreCase($name, "before");
        case 102:
        case 70:
          return A.equalsIgnoreCase($name, "first-line") || A.equalsIgnoreCase($name, "first-letter");
        default:
          return false;
      }
    },
    PseudoSelector: function PseudoSelector(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.normalizedName = t1;
      _.isClass = t2;
      _.isSyntacticClass = t3;
      _.argument = t4;
      _.selector = t5;
      _.__PseudoSelector_specificity_FI = $;
    },
    PseudoSelector_unify_closure: function PseudoSelector_unify_closure() {
    },
    QualifiedName: function QualifiedName(t0, t1) {
      this.name = t0;
      this.namespace = t1;
    },
    SimpleSelector: function SimpleSelector() {
    },
    SimpleSelector_isSuperselector_closure: function SimpleSelector_isSuperselector_closure(t0) {
      this.$this = t0;
    },
    SimpleSelector_isSuperselector__closure: function SimpleSelector_isSuperselector__closure(t0) {
      this.$this = t0;
    },
    TypeSelector: function TypeSelector(t0) {
      this.name = t0;
    },
    UniversalSelector: function UniversalSelector(t0) {
      this.namespace = t0;
    },
    BuiltInCallable$function($name, $arguments, callback, url) {
      return new A.BuiltInCallable($name, A._setArrayType([new A.Tuple2(A.ScssParser$("@function " + $name + "(" + $arguments + ") {", null, url).parseArgumentDeclaration$0(), callback, type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value)], type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value));
    },
    BuiltInCallable$overloadedFunction($name, overloads) {
      var t2, t3, t4, t5, t6, t7, t8, t9,
        t1 = A._setArrayType([], type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value);
      for (t2 = overloads.get$entries(overloads), t2 = new A.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f), t3 = type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value, t4 = "@function " + $name + "(", t5 = type$.String, t6 = type$.VariableDeclaration, t7 = A._instanceType(t2)._rest[1]; t2.moveNext$0();) {
        t8 = t2.__internal$_current;
        if (t8 == null)
          t8 = t7._as(t8);
        t9 = A.SpanScanner$(t4 + A.S(t8.get$key()) + ") {", null);
        t1.push(new A.Tuple2(new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6), t9, B.C_StderrLogger).parseArgumentDeclaration$0(), t8.get$value(t8), t3));
      }
      return new A.BuiltInCallable($name, t1);
    },
    BuiltInCallable: function BuiltInCallable(t0, t1) {
      this.name = t0;
      this._overloads = t1;
    },
    SassException$(message, span) {
      return new A.SassException(message, span);
    },
    SassScriptException$(message) {
      return new A.SassScriptException(message);
    },
    SassException: function SassException(t0, t1) {
      this._span_exception$_message = t0;
      this._span = t1;
    },
    SassFormatException: function SassFormatException(t0, t1) {
      this._span_exception$_message = t0;
      this._span = t1;
    },
    SassScriptException: function SassScriptException(t0) {
      this.message = t0;
    },
    unifyComplex(complexes) {
      var t2, trailingCombinator, leadingCombinator, unifiedBase, t3, t4, newLeadingCombinator, base, newTrailingCombinator, _i, t5, t6, t7, t8, t9, t10, result, _null = null,
        t1 = J.getInterceptor$asx(complexes);
      if (t1.get$length(complexes) === 1)
        return complexes;
      for (t2 = t1.get$iterator(complexes), trailingCombinator = _null, leadingCombinator = trailingCombinator, unifiedBase = leadingCombinator; t2.moveNext$0();) {
        t3 = t2.get$current();
        if (t3.accept$1(B.C__IsUselessVisitor))
          return _null;
        t4 = t3.components;
        if (t4.length === 1 && t3.leadingCombinators.length !== 0) {
          newLeadingCombinator = B.JSArray_methods.get$single(t3.leadingCombinators);
          if (leadingCombinator != null && leadingCombinator !== newLeadingCombinator)
            return _null;
          leadingCombinator = newLeadingCombinator;
        }
        base = B.JSArray_methods.get$last(t4);
        t3 = base.combinators;
        if (t3.length !== 0) {
          newTrailingCombinator = B.JSArray_methods.get$single(t3);
          if (trailingCombinator != null && trailingCombinator !== newTrailingCombinator)
            return _null;
          trailingCombinator = newTrailingCombinator;
        }
        if (unifiedBase == null)
          unifiedBase = base.selector.components;
        else
          for (t3 = base.selector.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
            unifiedBase = t3[_i].unify$1(unifiedBase);
            if (unifiedBase == null)
              return _null;
          }
      }
      t2 = type$.JSArray_ComplexSelector;
      t3 = A._setArrayType([], t2);
      for (t4 = t1.get$iterator(complexes), t5 = type$.Combinator, t6 = type$.ComplexSelectorComponent; t4.moveNext$0();) {
        t7 = t4.get$current();
        t8 = t7.components;
        t9 = t8.length;
        if (t9 > 1) {
          t10 = t7.leadingCombinators;
          t8 = B.JSArray_methods.take$1(t8, t9 - 1);
          t7 = t7.lineBreak;
          result = A.List_List$from(t10, false, t5);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t10 = result;
          result = A.List_List$from(t8, false, t6);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t8 = result;
          if (t10.length === 0 && t8.length === 0)
            A.throwExpression(A.ArgumentError$(string$.leadin, _null));
          t3.push(new A.ComplexSelector(t10, t8, t7));
        }
      }
      t4 = leadingCombinator == null ? B.List_empty0 : A._setArrayType([leadingCombinator], type$.JSArray_Combinator);
      unifiedBase.toString;
      t6 = A.CompoundSelector$(unifiedBase);
      base = A.ComplexSelector$(t4, A._setArrayType([new A.ComplexSelectorComponent(t6, A.List_List$unmodifiable(trailingCombinator == null ? B.List_empty0 : A._setArrayType([trailingCombinator], type$.JSArray_Combinator), t5))], type$.JSArray_ComplexSelectorComponent), t1.any$1(complexes, new A.unifyComplex_closure()));
      if (t3.length === 0)
        t1 = A._setArrayType([base], t2);
      else {
        t1 = A.List_List$of(A.IterableExtension_get_exceptLast(t3), true, type$.ComplexSelector);
        t1.push(B.JSArray_methods.get$last(t3).concatenate$1(base));
      }
      return A.weave(t1, false);
    },
    unifyCompound(compound1, compound2) {
      var t1, result, _i, unified;
      for (t1 = compound1.length, result = compound2, _i = 0; _i < t1; ++_i, result = unified) {
        unified = compound1[_i].unify$1(result);
        if (unified == null)
          return null;
      }
      return A.CompoundSelector$(result);
    },
    unifyUniversalAndElement(selector1, selector2) {
      var namespace1, name1, t1, namespace2, name2, namespace, $name, _null = null,
        _s45_ = "must be a UniversalSelector or a TypeSelector";
      if (selector1 instanceof A.UniversalSelector) {
        namespace1 = selector1.namespace;
        name1 = _null;
      } else if (selector1 instanceof A.TypeSelector) {
        t1 = selector1.name;
        namespace1 = t1.namespace;
        name1 = t1.name;
      } else
        throw A.wrapException(A.ArgumentError$value(selector1, "selector1", _s45_));
      if (selector2 instanceof A.UniversalSelector) {
        namespace2 = selector2.namespace;
        name2 = _null;
      } else if (selector2 instanceof A.TypeSelector) {
        t1 = selector2.name;
        namespace2 = t1.namespace;
        name2 = t1.name;
      } else
        throw A.wrapException(A.ArgumentError$value(selector2, "selector2", _s45_));
      if (namespace1 == namespace2 || namespace2 === "*")
        namespace = namespace1;
      else {
        if (namespace1 !== "*")
          return _null;
        namespace = namespace2;
      }
      if (name1 == name2 || name2 == null)
        $name = name1;
      else {
        if (!(name1 == null || name1 === "*"))
          return _null;
        $name = name2;
      }
      return $name == null ? new A.UniversalSelector(namespace) : new A.TypeSelector(new A.QualifiedName($name, namespace));
    },
    weave(complexes, forceLineBreak) {
      var complex, t2, prefixes, t3, t4, t5, t6, target, i, t7, _i, t8, t9, _i0, parentPrefix, t10, t11, result, t12,
        t1 = J.getInterceptor$asx(complexes);
      if (t1.get$length(complexes) === 1) {
        complex = t1.get$first(complexes);
        if (!forceLineBreak || complex.lineBreak)
          return complexes;
        return A._setArrayType([A.ComplexSelector$(complex.leadingCombinators, complex.components, true)], type$.JSArray_ComplexSelector);
      }
      t2 = type$.JSArray_ComplexSelector;
      prefixes = A._setArrayType([t1.get$first(complexes)], t2);
      for (t1 = t1.skip$1(complexes, 1), t1 = t1.get$iterator(t1), t3 = type$.Combinator, t4 = type$.ComplexSelectorComponent; t1.moveNext$0();) {
        t5 = t1.get$current();
        t6 = t5.components;
        target = B.JSArray_methods.get$last(t6);
        if (t6.length === 1) {
          for (i = 0; i < prefixes.length; ++i)
            prefixes[i] = prefixes[i].concatenate$2$forceLineBreak(t5, forceLineBreak);
          continue;
        }
        t6 = A._setArrayType([], t2);
        for (t7 = prefixes.length, _i = 0; _i < prefixes.length; prefixes.length === t7 || (0, A.throwConcurrentModificationError)(prefixes), ++_i) {
          t8 = A._weaveParents(prefixes[_i], t5);
          if (t8 == null)
            t8 = B.List_empty1;
          t9 = t8.length;
          _i0 = 0;
          for (; _i0 < t8.length; t8.length === t9 || (0, A.throwConcurrentModificationError)(t8), ++_i0) {
            parentPrefix = t8[_i0];
            t10 = A.List_List$of(parentPrefix.components, true, t4);
            t10.push(target);
            t11 = parentPrefix.lineBreak || forceLineBreak;
            result = A.List_List$from(parentPrefix.leadingCombinators, false, t3);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t12 = result;
            result = A.List_List$from(t10, false, t4);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t10 = result;
            if (t12.length === 0 && t10.length === 0)
              A.throwExpression(A.ArgumentError$(string$.leadin, null));
            t6.push(new A.ComplexSelector(t12, t10, t11));
          }
        }
        prefixes = t6;
      }
      return prefixes;
    },
    _weaveParents(prefix, base) {
      var t1, queue1, queue2, trailingCombinators, rootish1, rootish2, t2, rootish, groups1, groups2, lcs, choices, t3, t4, t5, _i, group, t6, t7, t8, _i0, chunk, t9, t10, result, _null = null,
        leadingCombinators = A._mergeLeadingCombinators(prefix.leadingCombinators, base.leadingCombinators);
      if (leadingCombinators == null)
        return _null;
      t1 = type$.ComplexSelectorComponent;
      queue1 = A.ListQueue_ListQueue$of(prefix.components, t1);
      queue2 = A.ListQueue_ListQueue$of(A.IterableExtension_get_exceptLast(base.components), t1);
      trailingCombinators = A._mergeTrailingCombinators(queue1, queue2, _null);
      if (trailingCombinators == null)
        return _null;
      rootish1 = A._firstIfRootish(queue1);
      rootish2 = A._firstIfRootish(queue2);
      t2 = rootish1 == null;
      if (!t2 && rootish2 != null) {
        rootish = A.unifyCompound(rootish1.selector.components, rootish2.selector.components);
        if (rootish == null)
          return _null;
        t2 = type$.Combinator;
        queue1.addFirst$1(new A.ComplexSelectorComponent(rootish, A.List_List$unmodifiable(rootish1.combinators, t2)));
        queue2.addFirst$1(new A.ComplexSelectorComponent(rootish, A.List_List$unmodifiable(rootish2.combinators, t2)));
      } else if (!t2 || rootish2 != null) {
        t2 = t2 ? rootish2 : rootish1;
        t2.toString;
        queue1.addFirst$1(t2);
        queue2.addFirst$1(t2);
      }
      groups1 = A._groupSelectors(queue1);
      groups2 = A._groupSelectors(queue2);
      t2 = type$.List_ComplexSelectorComponent;
      lcs = A.longestCommonSubsequence(groups2, groups1, new A._weaveParents_closure(), t2);
      choices = A._setArrayType([], type$.JSArray_List_Iterable_ComplexSelectorComponent);
      for (t3 = lcs.length, t4 = type$.JSArray_Iterable_ComplexSelectorComponent, t5 = type$.JSArray_ComplexSelectorComponent, _i = 0; _i < lcs.length; lcs.length === t3 || (0, A.throwConcurrentModificationError)(lcs), ++_i) {
        group = lcs[_i];
        t6 = A._setArrayType([], t4);
        for (t7 = A._chunks(groups1, groups2, new A._weaveParents_closure0(group), t2), t8 = t7.length, _i0 = 0; _i0 < t7.length; t7.length === t8 || (0, A.throwConcurrentModificationError)(t7), ++_i0) {
          chunk = t7[_i0];
          t9 = A._setArrayType([], t5);
          for (t10 = B.JSArray_methods.get$iterator(chunk); t10.moveNext$0();)
            B.JSArray_methods.addAll$1(t9, t10.get$current());
          t6.push(t9);
        }
        choices.push(t6);
        choices.push(A._setArrayType([group], t4));
        groups1.removeFirst$0();
        groups2.removeFirst$0();
      }
      t3 = A._setArrayType([], t4);
      for (t2 = A._chunks(groups1, groups2, new A._weaveParents_closure1(), t2), t4 = t2.length, _i = 0; _i < t2.length; t2.length === t4 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        chunk = t2[_i];
        t6 = A._setArrayType([], t5);
        for (t7 = B.JSArray_methods.get$iterator(chunk); t7.moveNext$0();)
          B.JSArray_methods.addAll$1(t6, t7.get$current());
        t3.push(t6);
      }
      choices.push(t3);
      B.JSArray_methods.addAll$1(choices, trailingCombinators);
      t2 = A._setArrayType([], type$.JSArray_ComplexSelector);
      for (t3 = J.get$iterator$ax(A.paths(new A.WhereIterable(choices, new A._weaveParents_closure2(), type$.WhereIterable_List_Iterable_ComplexSelectorComponent), type$.Iterable_ComplexSelectorComponent)), t4 = type$.Combinator, t6 = !prefix.lineBreak, t7 = base.lineBreak; t3.moveNext$0();) {
        t8 = t3.get$current();
        t9 = A._setArrayType([], t5);
        for (t8 = J.get$iterator$ax(t8); t8.moveNext$0();)
          B.JSArray_methods.addAll$1(t9, t8.get$current());
        t8 = !t6 || t7;
        result = A.List_List$from(leadingCombinators, false, t4);
        result.fixed$length = Array;
        result.immutable$list = Array;
        t10 = result;
        result = A.List_List$from(t9, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        t9 = result;
        if (t10.length === 0 && t9.length === 0)
          A.throwExpression(A.ArgumentError$(string$.leadin, _null));
        t2.push(new A.ComplexSelector(t10, t9, t8));
      }
      return t2;
    },
    _firstIfRootish(queue) {
      var first, t1, t2, _i, simple;
      if (queue._head === queue._tail)
        return null;
      first = queue.get$first(queue);
      for (t1 = first.selector.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        simple = t1[_i];
        if (simple instanceof A.PseudoSelector && simple.isClass && $._rootishPseudoClasses.contains$1(0, simple.normalizedName)) {
          queue.removeFirst$0();
          return first;
        }
      }
      return null;
    },
    _mergeLeadingCombinators(combinators1, combinators2) {
      var t2, _null = null,
        t1 = combinators1.length;
      if (t1 > 1)
        return _null;
      t2 = combinators2.length;
      if (t2 > 1)
        return _null;
      if (t1 === 0)
        return combinators2;
      if (t2 === 0)
        return combinators1;
      return B.C_ListEquality.equals$2(0, combinators1, combinators2) ? combinators1 : _null;
    },
    _mergeTrailingCombinators(components1, components2, result) {
      var combinators1, combinators2, t1, t2, combinator1, combinator2, component1, component2, t3, t4, choices, unified, followingSiblingComponent, nextSiblingComponent, _null = null;
      if (result == null)
        result = A.QueueList$(_null, type$.List_List_ComplexSelectorComponent);
      combinators1 = components1._head === components1._tail ? B.List_empty0 : components1.get$last(components1).combinators;
      combinators2 = components2._head === components2._tail ? B.List_empty0 : components2.get$last(components2).combinators;
      t1 = combinators1.length;
      t2 = t1 === 0;
      if (t2 && combinators2.length === 0)
        return result;
      if (t1 > 1 || combinators2.length > 1)
        return _null;
      combinator1 = t2 ? _null : B.JSArray_methods.get$first(combinators1);
      combinator2 = combinators2.length === 0 ? _null : B.JSArray_methods.get$first(combinators2);
      t1 = combinator1 != null;
      if (t1 && combinator2 != null) {
        component1 = components1.removeLast$0(0);
        component2 = components2.removeLast$0(0);
        t1 = combinator1 === B.Combinator_Htt;
        if (t1 && combinator2 === B.Combinator_Htt) {
          t1 = component1.selector;
          t2 = component2.selector;
          if (A.compoundIsSuperselector(t1, t2, _null))
            result.addFirst$1(A._setArrayType([A._setArrayType([component2], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
          else {
            t3 = type$.JSArray_ComplexSelectorComponent;
            t4 = type$.JSArray_List_ComplexSelectorComponent;
            if (A.compoundIsSuperselector(t2, t1, _null))
              result.addFirst$1(A._setArrayType([A._setArrayType([component1], t3)], t4));
            else {
              choices = A._setArrayType([A._setArrayType([component1, component2], t3), A._setArrayType([component2, component1], t3)], t4);
              unified = A.unifyCompound(t1.components, t2.components);
              if (unified != null)
                choices.push(A._setArrayType([new A.ComplexSelectorComponent(unified, A.List_List$unmodifiable(B.List_Kw1, type$.Combinator))], t3));
              result.addFirst$1(choices);
            }
          }
        } else {
          if (!(t1 && combinator2 === B.Combinator_4QF))
            t2 = combinator1 === B.Combinator_4QF && combinator2 === B.Combinator_Htt;
          else
            t2 = true;
          if (t2) {
            followingSiblingComponent = t1 ? component1 : component2;
            nextSiblingComponent = t1 ? component2 : component1;
            t1 = type$.JSArray_ComplexSelectorComponent;
            t2 = type$.JSArray_List_ComplexSelectorComponent;
            if (A.compoundIsSuperselector(followingSiblingComponent.selector, nextSiblingComponent.selector, _null))
              result.addFirst$1(A._setArrayType([A._setArrayType([nextSiblingComponent], t1)], t2));
            else {
              unified = A.unifyCompound(component1.selector.components, component2.selector.components);
              t2 = A._setArrayType([A._setArrayType([followingSiblingComponent, nextSiblingComponent], t1)], t2);
              if (unified != null)
                t2.push(A._setArrayType([new A.ComplexSelectorComponent(unified, A.List_List$unmodifiable(B.List_IoD, type$.Combinator))], t1));
              result.addFirst$1(t2);
            }
          } else {
            if (combinator1 === B.Combinator_Cht)
              t2 = combinator2 === B.Combinator_4QF || combinator2 === B.Combinator_Htt;
            else
              t2 = false;
            if (t2) {
              result.addFirst$1(A._setArrayType([A._setArrayType([component2], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
              components1._add$1(component1);
            } else {
              if (combinator2 === B.Combinator_Cht)
                t1 = combinator1 === B.Combinator_4QF || t1;
              else
                t1 = false;
              if (t1) {
                result.addFirst$1(A._setArrayType([A._setArrayType([component1], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
                components2._add$1(component2);
              } else if (combinator1 === combinator2) {
                unified = A.unifyCompound(component1.selector.components, component2.selector.components);
                if (unified == null)
                  return _null;
                result.addFirst$1(A._setArrayType([A._setArrayType([new A.ComplexSelectorComponent(unified, A.List_List$unmodifiable(A._setArrayType([combinator1], type$.JSArray_Combinator), type$.Combinator))], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
              } else
                return _null;
            }
          }
        }
        return A._mergeTrailingCombinators(components1, components2, result);
      } else if (t1) {
        if (combinator1 === B.Combinator_Cht && !components2.get$isEmpty(components2) && A.compoundIsSuperselector(components2.get$last(components2).selector, components1.get$last(components1).selector, _null))
          components2.removeLast$0(0);
        result.addFirst$1(A._setArrayType([A._setArrayType([components1.removeLast$0(0)], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
        return A._mergeTrailingCombinators(components1, components2, result);
      } else {
        if (combinator2 === B.Combinator_Cht && !components1.get$isEmpty(components1) && A.compoundIsSuperselector(components1.get$last(components1).selector, components2.get$last(components2).selector, _null))
          components1.removeLast$0(0);
        result.addFirst$1(A._setArrayType([A._setArrayType([components2.removeLast$0(0)], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
        return A._mergeTrailingCombinators(components1, components2, result);
      }
    },
    _mustUnify(complex1, complex2) {
      var t2, t3, t4,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector);
      for (t2 = J.get$iterator$ax(complex1); t2.moveNext$0();)
        for (t3 = B.JSArray_methods.get$iterator(t2.get$current().selector.components), t4 = new A.WhereIterator(t3, A.functions___isUnique$closure()); t4.moveNext$0();)
          t1.add$1(0, t3.get$current());
      if (t1._collection$_length === 0)
        return false;
      return J.any$1$ax(complex2, new A._mustUnify_closure(t1));
    },
    _isUnique(simple) {
      var t1;
      if (!(simple instanceof A.IDSelector))
        t1 = simple instanceof A.PseudoSelector && !simple.isClass;
      else
        t1 = true;
      return t1;
    },
    _chunks(queue1, queue2, done, $T) {
      var chunk2, t2,
        t1 = $T._eval$1("JSArray<0>"),
        chunk1 = A._setArrayType([], t1);
      for (; !done.call$1(queue1);)
        chunk1.push(queue1.removeFirst$0());
      chunk2 = A._setArrayType([], t1);
      for (; !done.call$1(queue2);)
        chunk2.push(queue2.removeFirst$0());
      t1 = chunk1.length === 0;
      if (t1 && chunk2.length === 0)
        return A._setArrayType([], $T._eval$1("JSArray<List<0>>"));
      if (t1)
        return A._setArrayType([chunk2], $T._eval$1("JSArray<List<0>>"));
      if (chunk2.length === 0)
        return A._setArrayType([chunk1], $T._eval$1("JSArray<List<0>>"));
      t1 = A.List_List$of(chunk1, true, $T);
      B.JSArray_methods.addAll$1(t1, chunk2);
      t2 = A.List_List$of(chunk2, true, $T);
      B.JSArray_methods.addAll$1(t2, chunk1);
      return A._setArrayType([t1, t2], $T._eval$1("JSArray<List<0>>"));
    },
    paths(choices, $T) {
      return J.fold$2$ax(choices, A._setArrayType([A._setArrayType([], $T._eval$1("JSArray<0>"))], $T._eval$1("JSArray<List<0>>")), new A.paths_closure($T));
    },
    _groupSelectors(complex) {
      var t2, t3, t4,
        groups = A.QueueList$(null, type$.List_ComplexSelectorComponent),
        t1 = type$.JSArray_ComplexSelectorComponent,
        group = A._setArrayType([], t1);
      for (t2 = A._ListQueueIterator$(complex), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        group.push(t4);
        if (t4.combinators.length === 0) {
          groups._queue_list$_add$1(group);
          group = A._setArrayType([], t1);
        }
      }
      if (group.length !== 0)
        groups._queue_list$_add$1(group);
      return groups;
    },
    listIsSuperselector(list1, list2) {
      return B.JSArray_methods.every$1(list2, new A.listIsSuperselector_closure(list1));
    },
    _complexIsParentSuperselector(complex1, complex2) {
      var base, t1, t2;
      if (J.get$length$asx(complex1) > J.get$length$asx(complex2))
        return false;
      base = new A.ComplexSelectorComponent(A.CompoundSelector$(A._setArrayType([new A.PlaceholderSelector("<temp>")], type$.JSArray_SimpleSelector)), A.List_List$unmodifiable(B.List_empty0, type$.Combinator));
      t1 = type$.ComplexSelectorComponent;
      t2 = A.List_List$of(complex1, true, t1);
      t2.push(base);
      t1 = A.List_List$of(complex2, true, t1);
      t1.push(base);
      return A.complexIsSuperselector(t2, t1);
    },
    complexIsSuperselector(complex1, complex2) {
      var t1, t2, t3, i1, i2, remaining1, t4, remaining2, component1, t5, parents, endOfSubselector, component2, combinator1, combinator2;
      if (B.JSArray_methods.get$last(complex1).combinators.length !== 0)
        return false;
      if (B.JSArray_methods.get$last(complex2).combinators.length !== 0)
        return false;
      for (t1 = type$.JSArray_ComplexSelectorComponent, t2 = A._arrayInstanceType(complex2), t3 = t2._precomputed1, t2 = t2._eval$1("SubListIterable<1>"), i1 = 0, i2 = 0; true;) {
        remaining1 = complex1.length - i1;
        t4 = complex2.length;
        remaining2 = t4 - i2;
        if (remaining1 === 0 || remaining2 === 0)
          return false;
        if (remaining1 > remaining2)
          return false;
        component1 = complex1[i1];
        t5 = component1.combinators;
        if (t5.length > 1)
          return false;
        if (remaining1 === 1) {
          parents = B.JSArray_methods.sublist$2(complex2, i2, t4 - 1);
          if (B.JSArray_methods.any$1(parents, new A.complexIsSuperselector_closure()))
            return false;
          return A.compoundIsSuperselector(component1.selector, B.JSArray_methods.get$last(complex2).selector, parents);
        }
        for (t4 = component1.selector, endOfSubselector = i2, parents = null; true;) {
          component2 = complex2[endOfSubselector];
          if (component2.combinators.length > 1)
            return false;
          if (A.compoundIsSuperselector(t4, component2.selector, parents))
            break;
          ++endOfSubselector;
          if (endOfSubselector === complex2.length - 1)
            return false;
          if (parents == null)
            parents = A._setArrayType([], t1);
          parents.push(component2);
        }
        component2 = complex2[endOfSubselector];
        combinator1 = A.IterableExtension_get_firstOrNull(t5);
        combinator2 = A.IterableExtension_get_firstOrNull(component2.combinators);
        if (combinator1 != combinator2)
          if (!(combinator1 == null && combinator2 === B.Combinator_Cht))
            t4 = combinator1 === B.Combinator_Htt && combinator2 === B.Combinator_4QF;
          else
            t4 = true;
        else
          t4 = true;
        if (!t4)
          return false;
        ++i1;
        i2 = endOfSubselector + 1;
        if (complex1.length - i1 === 1)
          if (combinator1 === B.Combinator_Htt) {
            t4 = complex2.length - 1;
            t5 = new A.SubListIterable(complex2, 0, t4, t2);
            t5.SubListIterable$3(complex2, 0, t4, t3);
            if (!t5.skip$1(0, i2).every$1(0, new A.complexIsSuperselector_closure0(combinator1)))
              return false;
          } else if (combinator1 != null)
            if (complex2.length - i2 > 1)
              return false;
      }
    },
    _isSupercombinator(combinator1, combinator2) {
      var t1;
      if (combinator1 != combinator2)
        if (!(combinator1 == null && combinator2 === B.Combinator_Cht))
          t1 = combinator1 === B.Combinator_Htt && combinator2 === B.Combinator_4QF;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    compoundIsSuperselector(compound1, compound2, parents) {
      var t2, t3, t4, t5, t6, t7, t8, _i, simple1,
        tuple1 = A._findPseudoElementIndexed(compound1),
        tuple2 = A._findPseudoElementIndexed(compound2),
        t1 = tuple1 == null;
      if (!t1 && tuple2 != null) {
        if (tuple1.item1.isSuperselector$1(tuple2.item1)) {
          t1 = compound1.components;
          t2 = tuple1.item2;
          t3 = type$.int;
          t4 = A._arrayInstanceType(t1)._precomputed1;
          t5 = A.SubListIterable$(t1, 0, A.checkNotNullable(t2, "count", t3), t4);
          t6 = compound2.components;
          t7 = tuple2.item2;
          t8 = A._arrayInstanceType(t6)._precomputed1;
          t1 = A._compoundComponentsIsSuperselector(t5, A.SubListIterable$(t6, 0, A.checkNotNullable(t7, "count", t3), t8), parents) && A._compoundComponentsIsSuperselector(A.SubListIterable$(t1, t2 + 1, null, t4), A.SubListIterable$(t6, t7 + 1, null, t8), parents);
        } else
          t1 = false;
        return t1;
      } else if (!t1 || tuple2 != null)
        return false;
      for (t1 = compound1.components, t2 = t1.length, t3 = compound2.components, _i = 0; _i < t2; ++_i) {
        simple1 = t1[_i];
        if (simple1 instanceof A.PseudoSelector && simple1.selector != null) {
          if (!A._selectorPseudoIsSuperselector(simple1, compound2, parents))
            return false;
        } else if (!B.JSArray_methods.any$1(t3, simple1.get$isSuperselector()))
          return false;
      }
      return true;
    },
    _findPseudoElementIndexed(compound) {
      var t1, t2, i, simple;
      for (t1 = compound.components, t2 = t1.length, i = 0; i < t2; ++i) {
        simple = t1[i];
        if (simple instanceof A.PseudoSelector && !simple.isClass)
          return new A.Tuple2(simple, i, type$.Tuple2_PseudoSelector_int);
      }
      return null;
    },
    _compoundComponentsIsSuperselector(compound1, compound2, parents) {
      if (compound1.get$length(compound1) === 0)
        return true;
      if (compound2.get$length(compound2) === 0)
        compound2 = A._setArrayType([new A.UniversalSelector("*")], type$.JSArray_SimpleSelector);
      return A.compoundIsSuperselector(A.CompoundSelector$(compound1), A.CompoundSelector$(compound2), parents);
    },
    _selectorPseudoIsSuperselector(pseudo1, compound2, parents) {
      var selector1_ = pseudo1.selector;
      if (selector1_ == null)
        throw A.wrapException(A.ArgumentError$("Selector " + pseudo1.toString$0(0) + " must have a selector argument.", null));
      switch (pseudo1.normalizedName) {
        case "is":
        case "matches":
        case "any":
        case "where":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure(selector1_)) || B.JSArray_methods.any$1(selector1_.components, new A._selectorPseudoIsSuperselector_closure0(parents, compound2));
        case "has":
        case "host":
        case "host-context":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure1(selector1_));
        case "slotted":
          return A._selectorPseudoArgs(compound2, pseudo1.name, false).any$1(0, new A._selectorPseudoIsSuperselector_closure2(selector1_));
        case "not":
          return B.JSArray_methods.every$1(selector1_.components, new A._selectorPseudoIsSuperselector_closure3(compound2, pseudo1));
        case "current":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure4(selector1_));
        case "nth-child":
        case "nth-last-child":
          return B.JSArray_methods.any$1(compound2.components, new A._selectorPseudoIsSuperselector_closure5(pseudo1, selector1_));
        default:
          throw A.wrapException("unreachable");
      }
    },
    _selectorPseudoArgs(compound, $name, isClass) {
      var t1 = type$.WhereTypeIterable_PseudoSelector;
      return A.IterableNullableExtension_whereNotNull(new A.MappedIterable(new A.WhereIterable(new A.WhereTypeIterable(compound.components, t1), new A._selectorPseudoArgs_closure(isClass, $name), t1._eval$1("WhereIterable<Iterable.E>")), new A._selectorPseudoArgs_closure0(), t1._eval$1("MappedIterable<Iterable.E,SelectorList?>")), type$.SelectorList);
    },
    unifyComplex_closure: function unifyComplex_closure() {
    },
    _weaveParents_closure: function _weaveParents_closure() {
    },
    _weaveParents_closure0: function _weaveParents_closure0(t0) {
      this.group = t0;
    },
    _weaveParents_closure1: function _weaveParents_closure1() {
    },
    _weaveParents_closure2: function _weaveParents_closure2() {
    },
    _mustUnify_closure: function _mustUnify_closure(t0) {
      this.uniqueSelectors = t0;
    },
    _mustUnify__closure: function _mustUnify__closure(t0) {
      this.uniqueSelectors = t0;
    },
    paths_closure: function paths_closure(t0) {
      this.T = t0;
    },
    paths__closure: function paths__closure(t0, t1) {
      this.paths = t0;
      this.T = t1;
    },
    paths___closure: function paths___closure(t0, t1) {
      this.option = t0;
      this.T = t1;
    },
    listIsSuperselector_closure: function listIsSuperselector_closure(t0) {
      this.list1 = t0;
    },
    listIsSuperselector__closure: function listIsSuperselector__closure(t0) {
      this.complex1 = t0;
    },
    complexIsSuperselector_closure: function complexIsSuperselector_closure() {
    },
    complexIsSuperselector_closure0: function complexIsSuperselector_closure0(t0) {
      this.combinator1 = t0;
    },
    _selectorPseudoIsSuperselector_closure: function _selectorPseudoIsSuperselector_closure(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure0: function _selectorPseudoIsSuperselector_closure0(t0, t1) {
      this.parents = t0;
      this.compound2 = t1;
    },
    _selectorPseudoIsSuperselector_closure1: function _selectorPseudoIsSuperselector_closure1(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure2: function _selectorPseudoIsSuperselector_closure2(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure3: function _selectorPseudoIsSuperselector_closure3(t0, t1) {
      this.compound2 = t0;
      this.pseudo1 = t1;
    },
    _selectorPseudoIsSuperselector__closure: function _selectorPseudoIsSuperselector__closure(t0, t1) {
      this.complex = t0;
      this.pseudo1 = t1;
    },
    _selectorPseudoIsSuperselector___closure: function _selectorPseudoIsSuperselector___closure(t0) {
      this.simple2 = t0;
    },
    _selectorPseudoIsSuperselector___closure0: function _selectorPseudoIsSuperselector___closure0(t0) {
      this.simple2 = t0;
    },
    _selectorPseudoIsSuperselector_closure4: function _selectorPseudoIsSuperselector_closure4(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure5: function _selectorPseudoIsSuperselector_closure5(t0, t1) {
      this.pseudo1 = t0;
      this.selector1 = t1;
    },
    _selectorPseudoArgs_closure: function _selectorPseudoArgs_closure(t0, t1) {
      this.isClass = t0;
      this.name = t1;
    },
    _selectorPseudoArgs_closure0: function _selectorPseudoArgs_closure0() {
    },
    globalFunctions_closure: function globalFunctions_closure() {
    },
    _updateComponents($arguments, adjust, change, scale) {
      var keywords, alpha, red, green, blue, hueNumber, t2, hue, saturation, lightness, whiteness, blackness, hasRgb, hasSL, hasWB, t3, t4, t5, _null = null,
        t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        argumentList = type$.SassArgumentList._as(t1.$index($arguments, 1));
      t1 = argumentList.get$asList();
      if (t1.get$isNotEmpty(t1))
        throw A.wrapException(A.SassScriptException$("Only one positional argument is allowed. All other arguments must be passed by name."));
      keywords = A.LinkedHashMap_LinkedHashMap$of(argumentList.get$keywords(), type$.String, type$.Value);
      t1 = new A._updateComponents_getParam(keywords, scale, change);
      alpha = t1.call$2("alpha", 1);
      red = t1.call$2("red", 255);
      green = t1.call$2("green", 255);
      blue = t1.call$2("blue", 255);
      if (scale)
        hueNumber = _null;
      else {
        t2 = keywords.remove$1(0, "hue");
        hueNumber = t2 == null ? _null : t2.assertNumber$1("hue");
      }
      t2 = hueNumber == null;
      if (!t2)
        A._checkAngle(hueNumber, "hue");
      hue = t2 ? _null : hueNumber._number$_value;
      saturation = t1.call$3$checkPercent("saturation", 100, true);
      lightness = t1.call$3$checkPercent("lightness", 100, true);
      whiteness = t1.call$3$assertPercent("whiteness", 100, true);
      blackness = t1.call$3$assertPercent("blackness", 100, true);
      t1 = keywords.__js_helper$_length;
      if (t1 !== 0)
        throw A.wrapException(A.SassScriptException$("No " + A.pluralize("argument", t1, _null) + " named " + A.S(A.toSentence(keywords.get$keys(keywords).map$1$1(0, new A._updateComponents_closure(), type$.Object), "or")) + "."));
      hasRgb = red != null || green != null || blue != null;
      hasSL = saturation != null || lightness != null;
      hasWB = whiteness != null || blackness != null;
      if (hasRgb)
        t1 = hasSL || hasWB || hue != null;
      else
        t1 = false;
      if (t1)
        throw A.wrapException(A.SassScriptException$("RGB parameters may not be passed along with " + (hasWB ? "HWB" : "HSL") + " parameters."));
      if (hasSL && hasWB)
        throw A.wrapException(A.SassScriptException$("HSL parameters may not be passed along with HWB parameters."));
      t1 = new A._updateComponents_updateValue(change, adjust);
      t2 = new A._updateComponents_updateRgb(t1);
      if (hasRgb) {
        t3 = t2.call$2(color.get$red(), red);
        t4 = t2.call$2(color.get$green(), green);
        t2 = t2.call$2(color.get$blue(), blue);
        return color.changeRgb$4$alpha$blue$green$red(t1.call$3(color._alpha, alpha, 1), t2, t4, t3);
      } else if (hasWB) {
        if (change)
          t2 = hue;
        else {
          t2 = color.get$hue();
          t2 += hue == null ? 0 : hue;
        }
        t3 = t1.call$3(color.get$whiteness(), whiteness, 100);
        t4 = t1.call$3(color.get$blackness(), blackness, 100);
        t5 = color._alpha;
        t1 = t1.call$3(t5, alpha, 1);
        if (t2 == null)
          t2 = color.get$hue();
        if (t3 == null)
          t3 = color.get$whiteness();
        if (t4 == null)
          t4 = color.get$blackness();
        return A.SassColor_SassColor$hwb(t2, t3, t4, t1 == null ? t5 : t1);
      } else {
        t2 = hue == null;
        if (!t2 || hasSL) {
          if (change)
            t2 = hue;
          else {
            t3 = color.get$hue();
            t3 += t2 ? 0 : hue;
            t2 = t3;
          }
          t3 = t1.call$3(color.get$saturation(), saturation, 100);
          t4 = t1.call$3(color.get$lightness(), lightness, 100);
          return color.changeHsl$4$alpha$hue$lightness$saturation(t1.call$3(color._alpha, alpha, 1), t2, t4, t3);
        } else if (alpha != null)
          return color.changeAlpha$1(t1.call$3(color._alpha, alpha, 1));
        else
          return color;
      }
    },
    _functionString($name, $arguments) {
      return new A.SassString($name + "(" + J.map$1$1$ax($arguments, new A._functionString_closure(), type$.String).join$1(0, ", ") + ")", false);
    },
    _rgb($name, $arguments) {
      var t2, red, green, blue,
        t1 = J.getInterceptor$asx($arguments),
        alpha = t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
      if (!t1.$index($arguments, 0).get$isSpecialNumber())
        if (!t1.$index($arguments, 1).get$isSpecialNumber())
          if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
            t2 = alpha == null ? null : alpha.get$isSpecialNumber();
            t2 = t2 === true;
          } else
            t2 = true;
        else
          t2 = true;
      else
        t2 = true;
      if (t2)
        return A._functionString($name, $arguments);
      red = t1.$index($arguments, 0).assertNumber$1("red");
      green = t1.$index($arguments, 1).assertNumber$1("green");
      blue = t1.$index($arguments, 2).assertNumber$1("blue");
      return A.SassColor$rgbInternal(A.fuzzyRound(A._percentageOrUnitless(red, 255, "red")), A.fuzzyRound(A._percentageOrUnitless(green, 255, "green")), A.fuzzyRound(A._percentageOrUnitless(blue, 255, "blue")), A.NullableExtension_andThen(alpha, new A._rgb_closure()), B._ColorFormatEnum_rgbFunction);
    },
    _rgbTwoArg($name, $arguments) {
      var first, color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0).get$isVar())
        return A._functionString($name, $arguments);
      else if (t1.$index($arguments, 1).get$isVar()) {
        first = t1.$index($arguments, 0);
        if (first instanceof A.SassColor)
          return new A.SassString($name + "(" + first.get$red() + ", " + first.get$green() + ", " + first.get$blue() + ", " + A.serializeValue(t1.$index($arguments, 1), false, true) + ")", false);
        else
          return A._functionString($name, $arguments);
      } else if (t1.$index($arguments, 1).get$isSpecialNumber()) {
        color = t1.$index($arguments, 0).assertColor$1("color");
        return new A.SassString($name + "(" + color.get$red() + ", " + color.get$green() + ", " + color.get$blue() + ", " + A.serializeValue(t1.$index($arguments, 1), false, true) + ")", false);
      }
      return t1.$index($arguments, 0).assertColor$1("color").changeAlpha$1(A._percentageOrUnitless(t1.$index($arguments, 1).assertNumber$1("alpha"), 1, "alpha"));
    },
    _hsl($name, $arguments) {
      var t2, hue, saturation, lightness,
        _s10_ = "saturation",
        _s9_ = "lightness",
        t1 = J.getInterceptor$asx($arguments),
        alpha = t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
      if (!t1.$index($arguments, 0).get$isSpecialNumber())
        if (!t1.$index($arguments, 1).get$isSpecialNumber())
          if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
            t2 = alpha == null ? null : alpha.get$isSpecialNumber();
            t2 = t2 === true;
          } else
            t2 = true;
        else
          t2 = true;
      else
        t2 = true;
      if (t2)
        return A._functionString($name, $arguments);
      hue = t1.$index($arguments, 0).assertNumber$1("hue");
      saturation = t1.$index($arguments, 1).assertNumber$1(_s10_);
      lightness = t1.$index($arguments, 2).assertNumber$1(_s9_);
      A._checkAngle(hue, "hue");
      A._checkPercent(saturation, _s10_);
      A._checkPercent(lightness, _s9_);
      return A.SassColor$hslInternal(hue._number$_value, B.JSNumber_methods.clamp$2(saturation._number$_value, 0, 100), B.JSNumber_methods.clamp$2(lightness._number$_value, 0, 100), A.NullableExtension_andThen(alpha, new A._hsl_closure()), B._ColorFormatEnum_hslFunction);
    },
    _checkAngle(angle, $name) {
      var t1, t2, t3,
        _s31_ = "To preserve current behavior: $";
      if (!angle.get$hasUnits() || angle.hasUnit$1("deg"))
        return;
      t1 = "" + ("$" + $name + ": Passing a unit other than deg (" + angle.toString$0(0) + ") is deprecated.\n") + "\n";
      if (angle.compatibleWithUnit$1("deg")) {
        t2 = angle.toString$0(0);
        t3 = type$.JSArray_String;
        t3 = t1 + ("You're passing " + t2 + ", which is currently (incorrectly) converted to " + new A.SingleUnitSassNumber("deg", angle._number$_value, null).toString$0(0) + ".\n") + ("Soon, it will instead be correctly converted to " + angle.coerce$2(A._setArrayType(["deg"], t3), A._setArrayType([], t3)).toString$0(0) + ".\n") + "\n" + (_s31_ + $name + " * 1deg/1" + B.JSArray_methods.get$first(angle.get$numeratorUnits()) + "\n") + ("To migrate to new behavior: 0deg + $" + $name + "\n") + "\n";
        t1 = t3;
      } else
        t1 = t1 + (_s31_ + $name + A._removeUnits(angle) + "\n") + "\n";
      t1 += "See https://sass-lang.com/d/color-units";
      A.warn(t1.charCodeAt(0) == 0 ? t1 : t1, true);
    },
    _checkPercent(number, $name) {
      if (number.hasUnit$1("%"))
        return;
      A.warn("$" + $name + ": Passing a number without unit % (" + number.toString$0(0) + ") is deprecated.\n\nTo preserve current behavior: $" + $name + A._removeUnits(number) + " * 1%", true);
    },
    _removeUnits(number) {
      var t2,
        t1 = number.get$denominatorUnits();
      t1 = new A.MappedListIterable(t1, new A._removeUnits_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$0(0);
      t2 = number.get$numeratorUnits();
      return t1 + new A.MappedListIterable(t2, new A._removeUnits_closure0(), A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    _parseChannels($name, argumentNames, channels) {
      var list, t1, channels0, alphaFromSlashList, isCommaSeparated, isBracketed, buffer, maybeSlashSeparated,
        _s17_ = "$channels must be";
      if (channels.get$isVar())
        return A._functionString($name, A._setArrayType([channels], type$.JSArray_Value));
      if (channels.get$separator() === B.ListSeparator_zg9) {
        list = channels.get$asList();
        t1 = list.length;
        if (t1 !== 2)
          throw A.wrapException(A.SassScriptException$("Only 2 slash-separated elements allowed, but " + t1 + " " + A.pluralize("was", t1, "were") + " passed."));
        channels0 = list[0];
        alphaFromSlashList = list[1];
        if (!alphaFromSlashList.get$isSpecialNumber())
          alphaFromSlashList.assertNumber$1("alpha");
        if (list[0].get$isVar())
          return A._functionString($name, A._setArrayType([channels], type$.JSArray_Value));
      } else {
        channels0 = channels;
        alphaFromSlashList = null;
      }
      isCommaSeparated = channels0.get$separator() === B.ListSeparator_rXA;
      isBracketed = channels0.get$hasBrackets();
      if (isCommaSeparated || isBracketed) {
        buffer = new A.StringBuffer(_s17_);
        if (isBracketed) {
          t1 = _s17_ + " an unbracketed";
          buffer._contents = t1;
        } else
          t1 = _s17_;
        if (isCommaSeparated) {
          t1 += isBracketed ? "," : " a";
          buffer._contents = t1;
          t1 = buffer._contents = t1 + " space-separated";
        }
        buffer._contents = t1 + " list.";
        throw A.wrapException(A.SassScriptException$(buffer.toString$0(0)));
      }
      list = channels0.get$asList();
      t1 = list.length;
      if (t1 > 3)
        throw A.wrapException(A.SassScriptException$("Only 3 elements allowed, but " + t1 + " were passed."));
      else if (t1 < 3) {
        if (!B.JSArray_methods.any$1(list, new A._parseChannels_closure()))
          if (list.length !== 0) {
            t1 = B.JSArray_methods.get$last(list);
            if (t1 instanceof A.SassString)
              if (t1._hasQuotes) {
                t1 = t1._string$_text;
                t1 = A.startsWithIgnoreCase(t1, "var(") && B.JSString_methods.contains$1(t1, "/");
              } else
                t1 = false;
            else
              t1 = false;
          } else
            t1 = false;
        else
          t1 = true;
        if (t1)
          return A._functionString($name, A._setArrayType([channels], type$.JSArray_Value));
        else
          throw A.wrapException(A.SassScriptException$("Missing element " + argumentNames[list.length] + "."));
      }
      if (alphaFromSlashList != null) {
        t1 = A.List_List$of(list, true, type$.Value);
        t1.push(alphaFromSlashList);
        return t1;
      }
      maybeSlashSeparated = list[2];
      if (maybeSlashSeparated instanceof A.SassNumber)
        return list;
      else if (maybeSlashSeparated instanceof A.SassString && !maybeSlashSeparated._hasQuotes && B.JSString_methods.contains$1(maybeSlashSeparated._string$_text, "/"))
        return A._functionString($name, A._setArrayType([channels0], type$.JSArray_Value));
      else
        return list;
    },
    _percentageOrUnitless(number, max, $name) {
      var value;
      if (!number.get$hasUnits())
        value = number._number$_value;
      else if (number.hasUnit$1("%"))
        value = max * number._number$_value / 100;
      else
        throw A.wrapException(A.SassScriptException$("$" + $name + ": Expected " + number.toString$0(0) + ' to have no units or "%".'));
      return B.JSNumber_methods.clamp$2(value, 0, max);
    },
    _mixColors(color1, color2, weight) {
      var weightScale = weight.valueInRange$3(0, 100, "weight") / 100,
        normalizedWeight = weightScale * 2 - 1,
        t1 = color1._alpha,
        t2 = color2._alpha,
        alphaDistance = t1 - t2,
        t3 = normalizedWeight * alphaDistance,
        weight1 = ((t3 === -1 ? normalizedWeight : (normalizedWeight + alphaDistance) / (1 + t3)) + 1) / 2,
        weight2 = 1 - weight1;
      return A.SassColor$rgb(A.fuzzyRound(color1.get$red() * weight1 + color2.get$red() * weight2), A.fuzzyRound(color1.get$green() * weight1 + color2.get$green() * weight2), A.fuzzyRound(color1.get$blue() * weight1 + color2.get$blue() * weight2), t1 * weightScale + t2 * (1 - weightScale));
    },
    _opacify($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color");
      return color.changeAlpha$1(B.JSNumber_methods.clamp$2(color._alpha + t1.$index($arguments, 1).assertNumber$1("amount").valueInRangeWithUnit$4(0, 1, "amount", ""), 0, 1));
    },
    _transparentize($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color");
      return color.changeAlpha$1(B.JSNumber_methods.clamp$2(color._alpha - t1.$index($arguments, 1).assertNumber$1("amount").valueInRangeWithUnit$4(0, 1, "amount", ""), 0, 1));
    },
    _function5($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:color");
    },
    global_closure3: function global_closure3() {
    },
    global_closure4: function global_closure4() {
    },
    global_closure5: function global_closure5() {
    },
    global_closure6: function global_closure6() {
    },
    global_closure7: function global_closure7() {
    },
    global_closure8: function global_closure8() {
    },
    global_closure9: function global_closure9() {
    },
    global_closure10: function global_closure10() {
    },
    global_closure11: function global_closure11() {
    },
    global_closure12: function global_closure12() {
    },
    global_closure13: function global_closure13() {
    },
    global_closure14: function global_closure14() {
    },
    global_closure15: function global_closure15() {
    },
    global_closure16: function global_closure16() {
    },
    global_closure17: function global_closure17() {
    },
    global_closure18: function global_closure18() {
    },
    global_closure19: function global_closure19() {
    },
    global_closure20: function global_closure20() {
    },
    global_closure21: function global_closure21() {
    },
    global_closure22: function global_closure22() {
    },
    global_closure23: function global_closure23() {
    },
    global_closure24: function global_closure24() {
    },
    global_closure25: function global_closure25() {
    },
    global_closure26: function global_closure26() {
    },
    global_closure27: function global_closure27() {
    },
    global_closure28: function global_closure28() {
    },
    global__closure: function global__closure() {
    },
    global_closure29: function global_closure29() {
    },
    _red_closure: function _red_closure() {
    },
    _green_closure: function _green_closure() {
    },
    _blue_closure: function _blue_closure() {
    },
    _mix_closure: function _mix_closure() {
    },
    _hue_closure: function _hue_closure() {
    },
    _saturation_closure: function _saturation_closure() {
    },
    _lightness_closure: function _lightness_closure() {
    },
    _complement_closure: function _complement_closure() {
    },
    _adjust_closure: function _adjust_closure() {
    },
    _scale_closure: function _scale_closure() {
    },
    _change_closure: function _change_closure() {
    },
    _ieHexStr_closure: function _ieHexStr_closure() {
    },
    _ieHexStr_closure_hexString: function _ieHexStr_closure_hexString() {
    },
    _updateComponents_getParam: function _updateComponents_getParam(t0, t1, t2) {
      this.keywords = t0;
      this.scale = t1;
      this.change = t2;
    },
    _updateComponents_closure: function _updateComponents_closure() {
    },
    _updateComponents_updateValue: function _updateComponents_updateValue(t0, t1) {
      this.change = t0;
      this.adjust = t1;
    },
    _updateComponents_updateRgb: function _updateComponents_updateRgb(t0) {
      this.updateValue = t0;
    },
    _functionString_closure: function _functionString_closure() {
    },
    _rgb_closure: function _rgb_closure() {
    },
    _hsl_closure: function _hsl_closure() {
    },
    _removeUnits_closure: function _removeUnits_closure() {
    },
    _removeUnits_closure0: function _removeUnits_closure0() {
    },
    _parseChannels_closure: function _parseChannels_closure() {
    },
    _function4($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:list");
    },
    _length_closure0: function _length_closure0() {
    },
    _nth_closure: function _nth_closure() {
    },
    _setNth_closure: function _setNth_closure() {
    },
    _join_closure: function _join_closure() {
    },
    _append_closure0: function _append_closure0() {
    },
    _zip_closure: function _zip_closure() {
    },
    _zip__closure: function _zip__closure() {
    },
    _zip__closure0: function _zip__closure0(t0) {
      this._box_0 = t0;
    },
    _zip__closure1: function _zip__closure1(t0) {
      this._box_0 = t0;
    },
    _index_closure0: function _index_closure0() {
    },
    _separator_closure: function _separator_closure() {
    },
    _isBracketed_closure: function _isBracketed_closure() {
    },
    _modify(map, keys, modify) {
      var keyIterator = keys.get$iterator(keys);
      return keyIterator.moveNext$0() ? new A._modify__modifyNestedMap(keyIterator, modify, true).call$1(map) : modify.call$1(map);
    },
    _function3($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:map");
    },
    _get_closure: function _get_closure() {
    },
    _merge_closure: function _merge_closure() {
    },
    _merge_closure0: function _merge_closure0() {
    },
    _merge__closure: function _merge__closure(t0) {
      this.map2 = t0;
    },
    _remove_closure: function _remove_closure() {
    },
    _remove_closure0: function _remove_closure0() {
    },
    _keys_closure: function _keys_closure() {
    },
    _values_closure: function _values_closure() {
    },
    _hasKey_closure: function _hasKey_closure() {
    },
    _modify__modifyNestedMap: function _modify__modifyNestedMap(t0, t1, t2) {
      this.keyIterator = t0;
      this.modify = t1;
      this.addNesting = t2;
    },
    _numberFunction($name, transform) {
      return A.BuiltInCallable$function($name, "$number", new A._numberFunction_closure(transform), "sass:math");
    },
    _function2($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:math");
    },
    _ceil_closure: function _ceil_closure() {
    },
    _floor_closure: function _floor_closure() {
    },
    _max_closure: function _max_closure() {
    },
    _min_closure: function _min_closure() {
    },
    _abs_closure: function _abs_closure() {
    },
    _compatible_closure: function _compatible_closure() {
    },
    _isUnitless_closure: function _isUnitless_closure() {
    },
    _unit_closure: function _unit_closure() {
    },
    _percentage_closure: function _percentage_closure() {
    },
    _randomFunction_closure: function _randomFunction_closure() {
    },
    _numberFunction_closure: function _numberFunction_closure(t0) {
      this.transform = t0;
    },
    _function($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:meta");
    },
    global_closure: function global_closure() {
    },
    global_closure0: function global_closure0() {
    },
    global_closure1: function global_closure1() {
    },
    global_closure2: function global_closure2() {
    },
    _prependParent(compound) {
      var t2, _null = null,
        t1 = compound.components,
        first = B.JSArray_methods.get$first(t1);
      if (first instanceof A.UniversalSelector)
        return _null;
      if (first instanceof A.TypeSelector) {
        t2 = first.name;
        if (t2.namespace != null)
          return _null;
        t2 = A._setArrayType([new A.ParentSelector(t2.name)], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t2, A.SubListIterable$(t1, 1, _null, A._arrayInstanceType(t1)._precomputed1));
        return A.CompoundSelector$(t2);
      } else {
        t2 = A._setArrayType([new A.ParentSelector(_null)], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t2, t1);
        return A.CompoundSelector$(t2);
      }
    },
    _function1($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:selector");
    },
    _nest_closure: function _nest_closure() {
    },
    _nest__closure: function _nest__closure(t0) {
      this._box_0 = t0;
    },
    _nest__closure0: function _nest__closure0() {
    },
    _append_closure: function _append_closure() {
    },
    _append__closure: function _append__closure() {
    },
    _append__closure0: function _append__closure0() {
    },
    _append___closure: function _append___closure(t0) {
      this.parent = t0;
    },
    _extend_closure: function _extend_closure() {
    },
    _replace_closure: function _replace_closure() {
    },
    _unify_closure: function _unify_closure() {
    },
    _isSuperselector_closure: function _isSuperselector_closure() {
    },
    _simpleSelectors_closure: function _simpleSelectors_closure() {
    },
    _simpleSelectors__closure: function _simpleSelectors__closure() {
    },
    _parse_closure: function _parse_closure() {
    },
    _codepointForIndex(index, lengthInCodepoints, allowNegative) {
      var result;
      if (index === 0)
        return 0;
      if (index > 0)
        return Math.min(index - 1, lengthInCodepoints);
      result = lengthInCodepoints + index;
      if (result < 0 && !allowNegative)
        return 0;
      return result;
    },
    _function0($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:string");
    },
    _unquote_closure: function _unquote_closure() {
    },
    _quote_closure: function _quote_closure() {
    },
    _length_closure: function _length_closure() {
    },
    _insert_closure: function _insert_closure() {
    },
    _index_closure: function _index_closure() {
    },
    _slice_closure: function _slice_closure() {
    },
    _toUpperCase_closure: function _toUpperCase_closure() {
    },
    _toLowerCase_closure: function _toLowerCase_closure() {
    },
    _uniqueId_closure: function _uniqueId_closure() {
    },
    ImportCache__toImporters(importers, loadPaths, packageConfig) {
      var sassPath, t2, t3, _i,
        t1 = J.get$env$x(self.process);
      if (t1 == null)
        t1 = type$.Object._as(t1);
      sassPath = A._asStringQ(t1.SASS_PATH);
      t1 = A._setArrayType([], type$.JSArray_Importer);
      B.JSArray_methods.addAll$1(t1, importers);
      if (loadPaths != null)
        for (t2 = J.get$iterator$ax(loadPaths); t2.moveNext$0();)
          t1.push(new A.FilesystemImporter(A.absolute(t2.get$current())));
      if (sassPath != null) {
        t2 = sassPath.split(J.$eq$(J.get$platform$x(self.process), "win32") ? ";" : ":");
        t3 = t2.length;
        _i = 0;
        for (; _i < t3; ++_i)
          t1.push(new A.FilesystemImporter(A.absolute(t2[_i])));
      }
      return t1;
    },
    ImportCache: function ImportCache(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._importers = t0;
      _._logger = t1;
      _._canonicalizeCache = t2;
      _._relativeCanonicalizeCache = t3;
      _._importCache = t4;
      _._resultsCache = t5;
    },
    ImportCache_canonicalize_closure: function ImportCache_canonicalize_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.baseUrl = t1;
      _.url = t2;
      _.baseImporter = t3;
      _.forImport = t4;
    },
    ImportCache_canonicalize_closure0: function ImportCache_canonicalize_closure0(t0, t1, t2) {
      this.$this = t0;
      this.url = t1;
      this.forImport = t2;
    },
    ImportCache__canonicalize_closure: function ImportCache__canonicalize_closure(t0, t1) {
      this.importer = t0;
      this.url = t1;
    },
    ImportCache_importCanonical_closure: function ImportCache_importCanonical_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.originalUrl = t3;
      _.quiet = t4;
    },
    Importer: function Importer() {
    },
    AsyncImporter: function AsyncImporter() {
    },
    FilesystemImporter: function FilesystemImporter(t0) {
      this._loadPath = t0;
    },
    FilesystemImporter_canonicalize_closure: function FilesystemImporter_canonicalize_closure() {
    },
    ImporterResult: function ImporterResult(t0, t1) {
      this.contents = t0;
      this.syntax = t1;
    },
    fromImport() {
      var t1 = A._asBoolQ($.Zone__current.$index(0, B.Symbol__inImportRule));
      return t1 === true;
    },
    resolveImportPath(path) {
      var t1,
        extension = A.ParsedPath_ParsedPath$parse(path, $.$get$context().style)._splitExtension$1(1)[1];
      if (extension === ".sass" || extension === ".scss" || extension === ".css") {
        t1 = A.fromImport() ? new A.resolveImportPath_closure(path, extension).call$0() : null;
        return t1 == null ? A._exactlyOne(A._tryPath(path)) : t1;
      }
      t1 = A.fromImport() ? new A.resolveImportPath_closure0(path).call$0() : null;
      if (t1 == null)
        t1 = A._exactlyOne(A._tryPathWithExtensions(path));
      return t1 == null ? A._tryPathAsDirectory(path) : t1;
    },
    _tryPathWithExtensions(path) {
      var result = A._tryPath(path + ".sass");
      B.JSArray_methods.addAll$1(result, A._tryPath(path + ".scss"));
      return result.length !== 0 ? result : A._tryPath(path + ".css");
    },
    _tryPath(path) {
      var partial,
        t1 = $.$get$context(),
        t2 = t1.dirname$1(0, path);
      t1 = A.ParsedPath_ParsedPath$parse(path, t1.style);
      partial = A.join(t2, "_" + t1.get$basename(t1), null);
      t1 = A._setArrayType([], type$.JSArray_String);
      if (A.fileExists(partial))
        t1.push(partial);
      if (A.fileExists(path))
        t1.push(path);
      return t1;
    },
    _tryPathAsDirectory(path) {
      var t1;
      if (!A.dirExists(path))
        return null;
      t1 = A.fromImport() ? new A._tryPathAsDirectory_closure(path).call$0() : null;
      return t1 == null ? A._exactlyOne(A._tryPathWithExtensions(A.join(path, "index", null))) : t1;
    },
    _exactlyOne(paths) {
      var t1 = paths.length;
      if (t1 === 0)
        return null;
      if (t1 === 1)
        return B.JSArray_methods.get$first(paths);
      throw A.wrapException("It's not clear which file to import. Found:\n" + B.JSArray_methods.map$1$1(paths, new A._exactlyOne_closure(), type$.String).join$1(0, "\n"));
    },
    resolveImportPath_closure: function resolveImportPath_closure(t0, t1) {
      this.path = t0;
      this.extension = t1;
    },
    resolveImportPath_closure0: function resolveImportPath_closure0(t0) {
      this.path = t0;
    },
    _tryPathAsDirectory_closure: function _tryPathAsDirectory_closure(t0) {
      this.path = t0;
    },
    _exactlyOne_closure: function _exactlyOne_closure() {
    },
    InterpolationBuffer: function InterpolationBuffer(t0, t1) {
      this._interpolation_buffer$_text = t0;
      this._interpolation_buffer$_contents = t1;
    },
    _realCasePath(path) {
      var prefix, t1;
      if (!(J.$eq$(J.get$platform$x(self.process), "win32") || J.$eq$(J.get$platform$x(self.process), "darwin")))
        return path;
      if (J.$eq$(J.get$platform$x(self.process), "win32")) {
        prefix = B.JSString_methods.substring$2(path, 0, $.$get$context().style.rootLength$1(path));
        t1 = prefix.length;
        if (t1 !== 0 && A.isAlphabetic0(B.JSString_methods._codeUnitAt$1(prefix, 0)))
          path = prefix.toUpperCase() + B.JSString_methods.substring$1(path, t1);
      }
      return new A._realCasePath_helper().call$1(path);
    },
    _realCasePath_helper: function _realCasePath_helper() {
    },
    _realCasePath_helper_closure: function _realCasePath_helper_closure(t0, t1, t2) {
      this.helper = t0;
      this.dirname = t1;
      this.path = t2;
    },
    _realCasePath_helper__closure: function _realCasePath_helper__closure(t0) {
      this.basename = t0;
    },
    readFile(path) {
      var sourceFile, t1, i,
        contents = A._asString(A._readFile(path, "utf8"));
      if (!B.JSString_methods.contains$1(contents, "\ufffd"))
        return contents;
      sourceFile = A.SourceFile$fromString(contents, $.$get$context().toUri$1(path));
      for (t1 = contents.length, i = 0; i < t1; ++i) {
        if (B.JSString_methods._codeUnitAt$1(contents, i) !== 65533)
          continue;
        throw A.wrapException(A.SassException$("Invalid UTF-8.", A.FileLocation$_(sourceFile, i).pointSpan$0()));
      }
      return contents;
    },
    _readFile(path, encoding) {
      return A._systemErrorToFileSystemException(new A._readFile_closure(path, encoding));
    },
    fileExists(path) {
      return A._systemErrorToFileSystemException(new A.fileExists_closure(path));
    },
    dirExists(path) {
      return A._systemErrorToFileSystemException(new A.dirExists_closure(path));
    },
    listDir(path) {
      return A._systemErrorToFileSystemException(new A.listDir_closure(false, path));
    },
    _systemErrorToFileSystemException(callback) {
      var error, t1, exception, t2;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        if (!type$.JsSystemError._is(error))
          throw exception;
        t1 = error;
        t2 = J.getInterceptor$x(t1);
        throw A.wrapException(new A.FileSystemException(J.substring$2$s(t2.get$message(t1), (A.S(t2.get$code(t1)) + ": ").length, J.get$length$asx(t2.get$message(t1)) - (", " + A.S(t2.get$syscall(t1)) + " '" + A.S(t2.get$path(t1)) + "'").length), J.get$path$x(error)));
      }
    },
    FileSystemException: function FileSystemException(t0, t1) {
      this.message = t0;
      this.path = t1;
    },
    Stderr: function Stderr(t0) {
      this._stderr = t0;
    },
    _readFile_closure: function _readFile_closure(t0, t1) {
      this.path = t0;
      this.encoding = t1;
    },
    fileExists_closure: function fileExists_closure(t0) {
      this.path = t0;
    },
    dirExists_closure: function dirExists_closure(t0) {
      this.path = t0;
    },
    listDir_closure: function listDir_closure(t0, t1) {
      this.recursive = t0;
      this.path = t1;
    },
    listDir__closure: function listDir__closure(t0) {
      this.path = t0;
    },
    listDir__closure0: function listDir__closure0() {
    },
    listDir_closure_list: function listDir_closure_list() {
    },
    listDir__list_closure: function listDir__list_closure(t0, t1) {
      this.parent = t0;
      this.list = t1;
    },
    _QuietLogger: function _QuietLogger() {
    },
    StderrLogger: function StderrLogger() {
    },
    JSArray0: function JSArray0() {
    },
    Chokidar: function Chokidar() {
    },
    ChokidarOptions: function ChokidarOptions() {
    },
    ChokidarWatcher: function ChokidarWatcher() {
    },
    JSFunction: function JSFunction() {
    },
    NodeImporterResult: function NodeImporterResult() {
    },
    RenderContext: function RenderContext() {
    },
    RenderContextOptions: function RenderContextOptions() {
    },
    RenderContextResult: function RenderContextResult() {
    },
    RenderContextResultStats: function RenderContextResultStats() {
    },
    JSClass: function JSClass() {
    },
    JSUrl: function JSUrl() {
    },
    _PropertyDescriptor: function _PropertyDescriptor() {
    },
    _disallowedFunctionNames_closure: function _disallowedFunctionNames_closure() {
    },
    CssParser: function CssParser(t0, t1, t2) {
      var _ = this;
      _._isUseAllowed = true;
      _._inParentheses = _._inStyleRule = _._inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._inMixin = false;
      _._globalVariables = t0;
      _.lastSilentComment = null;
      _.scanner = t1;
      _.logger = t2;
    },
    Parser_isIdentifier(text, logger) {
      var t1, exception;
      try {
        t1 = A.SpanScanner$(text, null);
        new A.Parser0(t1, logger == null ? B.C_StderrLogger : logger)._parseIdentifier$0();
        return true;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.SassFormatException)
          return false;
        else
          throw exception;
      }
    },
    Parser0: function Parser0(t0, t1) {
      this.scanner = t0;
      this.logger = t1;
    },
    Parser__parseIdentifier_closure: function Parser__parseIdentifier_closure(t0) {
      this.$this = t0;
    },
    Parser_scanIdentChar_matches: function Parser_scanIdentChar_matches(t0, t1) {
      this.caseSensitive = t0;
      this.char = t1;
    },
    SassParser: function SassParser(t0, t1, t2) {
      var _ = this;
      _._currentIndentation = 0;
      _._spaces = _._nextIndentationEnd = _._nextIndentation = null;
      _._isUseAllowed = true;
      _._inParentheses = _._inStyleRule = _._inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._inMixin = false;
      _._globalVariables = t0;
      _.lastSilentComment = null;
      _.scanner = t1;
      _.logger = t2;
    },
    SassParser_children_closure: function SassParser_children_closure(t0, t1, t2) {
      this.$this = t0;
      this.child = t1;
      this.children = t2;
    },
    ScssParser$(contents, logger, url) {
      var t2, t3,
        t1 = A.SourceFile$fromString(contents, url);
      if (url == null)
        t2 = null;
      else
        t2 = typeof url == "string" ? A.Uri_parse(url) : type$.Uri._as(url);
      t3 = logger == null ? B.C_StderrLogger : logger;
      return new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.VariableDeclaration), new A.SpanScanner(t1, t2, contents), t3);
    },
    ScssParser: function ScssParser(t0, t1, t2) {
      var _ = this;
      _._isUseAllowed = true;
      _._inParentheses = _._inStyleRule = _._inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._inMixin = false;
      _._globalVariables = t0;
      _.lastSilentComment = null;
      _.scanner = t1;
      _.logger = t2;
    },
    SelectorParser$(contents, allowParent, allowPlaceholder, logger, url) {
      var t1 = A.SourceFile$fromString(contents, url);
      return new A.SelectorParser(allowParent, true, new A.SpanScanner(t1, null, contents), B.C_StderrLogger);
    },
    SelectorParser: function SelectorParser(t0, t1, t2, t3) {
      var _ = this;
      _._allowParent = t0;
      _._allowPlaceholder = t1;
      _.scanner = t2;
      _.logger = t3;
    },
    SelectorParser_parse_closure: function SelectorParser_parse_closure(t0) {
      this.$this = t0;
    },
    SelectorParser_parseCompoundSelector_closure: function SelectorParser_parseCompoundSelector_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser: function StylesheetParser() {
    },
    StylesheetParser_parse_closure: function StylesheetParser_parse_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parse__closure: function StylesheetParser_parse__closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parse__closure0: function StylesheetParser_parse__closure0() {
    },
    StylesheetParser_parseArgumentDeclaration_closure: function StylesheetParser_parseArgumentDeclaration_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__parseSingleProduction_closure: function StylesheetParser__parseSingleProduction_closure(t0, t1, t2) {
      this.$this = t0;
      this.production = t1;
      this.T = t2;
    },
    StylesheetParser__statement_closure: function StylesheetParser__statement_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_variableDeclarationWithoutNamespace_closure: function StylesheetParser_variableDeclarationWithoutNamespace_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetParser_variableDeclarationWithoutNamespace_closure0: function StylesheetParser_variableDeclarationWithoutNamespace_closure0(t0) {
      this.declaration = t0;
    },
    StylesheetParser__declarationOrBuffer_closure: function StylesheetParser__declarationOrBuffer_closure(t0) {
      this.name = t0;
    },
    StylesheetParser__declarationOrBuffer_closure0: function StylesheetParser__declarationOrBuffer_closure0(t0, t1) {
      this._box_0 = t0;
      this.name = t1;
    },
    StylesheetParser__styleRule_closure: function StylesheetParser__styleRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.wasInStyleRule = t2;
      _.start = t3;
    },
    StylesheetParser__propertyOrVariableDeclaration_closure: function StylesheetParser__propertyOrVariableDeclaration_closure(t0) {
      this._box_0 = t0;
    },
    StylesheetParser__propertyOrVariableDeclaration_closure0: function StylesheetParser__propertyOrVariableDeclaration_closure0(t0, t1) {
      this._box_0 = t0;
      this.value = t1;
    },
    StylesheetParser__atRootRule_closure: function StylesheetParser__atRootRule_closure(t0) {
      this.query = t0;
    },
    StylesheetParser__atRootRule_closure0: function StylesheetParser__atRootRule_closure0() {
    },
    StylesheetParser__eachRule_closure: function StylesheetParser__eachRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.wasInControlDirective = t1;
      _.variables = t2;
      _.list = t3;
    },
    StylesheetParser__functionRule_closure: function StylesheetParser__functionRule_closure(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.precedingComment = t2;
    },
    StylesheetParser__forRule_closure: function StylesheetParser__forRule_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StylesheetParser__forRule_closure0: function StylesheetParser__forRule_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.wasInControlDirective = t2;
      _.variable = t3;
      _.from = t4;
      _.to = t5;
    },
    StylesheetParser__memberList_closure: function StylesheetParser__memberList_closure(t0, t1, t2) {
      this.$this = t0;
      this.variables = t1;
      this.identifiers = t2;
    },
    StylesheetParser__includeRule_closure: function StylesheetParser__includeRule_closure(t0) {
      this.contentArguments_ = t0;
    },
    StylesheetParser_mediaRule_closure: function StylesheetParser_mediaRule_closure(t0) {
      this.query = t0;
    },
    StylesheetParser__mixinRule_closure: function StylesheetParser__mixinRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.name = t1;
      _.$arguments = t2;
      _.precedingComment = t3;
    },
    StylesheetParser_mozDocumentRule_closure: function StylesheetParser_mozDocumentRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.name = t2;
      _.value = t3;
    },
    StylesheetParser_supportsRule_closure: function StylesheetParser_supportsRule_closure(t0) {
      this.condition = t0;
    },
    StylesheetParser__whileRule_closure: function StylesheetParser__whileRule_closure(t0, t1, t2) {
      this.$this = t0;
      this.wasInControlDirective = t1;
      this.condition = t2;
    },
    StylesheetParser_unknownAtRule_closure: function StylesheetParser_unknownAtRule_closure(t0, t1) {
      this._box_0 = t0;
      this.name = t1;
    },
    StylesheetParser__expression_resetState: function StylesheetParser__expression_resetState(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.start = t2;
    },
    StylesheetParser__expression_resolveOneOperation: function StylesheetParser__expression_resolveOneOperation(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StylesheetParser__expression_resolveOperations: function StylesheetParser__expression_resolveOperations(t0, t1) {
      this._box_0 = t0;
      this.resolveOneOperation = t1;
    },
    StylesheetParser__expression_addSingleExpression: function StylesheetParser__expression_addSingleExpression(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.resetState = t2;
      _.resolveOperations = t3;
    },
    StylesheetParser__expression_addOperator: function StylesheetParser__expression_addOperator(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.resolveOneOperation = t2;
    },
    StylesheetParser__expression_resolveSpaceExpressions: function StylesheetParser__expression_resolveSpaceExpressions(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.resolveOperations = t2;
    },
    StylesheetParser_expressionUntilComma_closure: function StylesheetParser_expressionUntilComma_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__unicodeRange_closure: function StylesheetParser__unicodeRange_closure() {
    },
    StylesheetParser__unicodeRange_closure0: function StylesheetParser__unicodeRange_closure0() {
    },
    StylesheetParser_namespacedExpression_closure: function StylesheetParser_namespacedExpression_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetParser_trySpecialFunction_closure: function StylesheetParser_trySpecialFunction_closure() {
    },
    StylesheetParser__expressionUntilComparison_closure: function StylesheetParser__expressionUntilComparison_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__publicIdentifier_closure: function StylesheetParser__publicIdentifier_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    Syntax_forPath(path) {
      switch (A.ParsedPath_ParsedPath$parse(path, $.$get$context().style)._splitExtension$1(1)[1]) {
        case ".sass":
          return B.Syntax_Sass_sass;
        case ".css":
          return B.Syntax_CSS_css;
        default:
          return B.Syntax_SCSS_scss;
      }
    },
    Syntax: function Syntax(t0, t1) {
      this._syntax$_name = t0;
      this._name = t1;
    },
    NoSourceMapBuffer: function NoSourceMapBuffer(t0) {
      this._no_source_map_buffer$_buffer = t0;
    },
    toSentence(iter, conjunction) {
      var t1 = iter.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$length(t1) === 1)
        return J.toString$0$(iter._f.call$1(t2.get$first(t1)));
      return A.IterableExtension_get_exceptLast(iter).join$1(0, ", ") + (" " + conjunction + " " + A.S(iter._f.call$1(t2.get$last(t1))));
    },
    pluralize($name, number, plural) {
      if (number === 1)
        return $name;
      if (plural != null)
        return plural;
      return $name + "s";
    },
    flattenVertically(iterable, $T) {
      var result,
        t1 = iterable.$ti._eval$1("@<ListIterable.E>")._bind$1($T._eval$1("QueueList<0>"))._eval$1("MappedListIterable<1,2>"),
        queues = A.List_List$of(new A.MappedListIterable(iterable, new A.flattenVertically_closure($T), t1), true, t1._eval$1("ListIterable.E"));
      if (queues.length === 1)
        return B.JSArray_methods.get$first(queues);
      result = A._setArrayType([], $T._eval$1("JSArray<0>"));
      for (; queues.length !== 0;) {
        if (!!queues.fixed$length)
          A.throwExpression(A.UnsupportedError$("removeWhere"));
        B.JSArray_methods._removeWhere$2(queues, new A.flattenVertically_closure0(result, $T), true);
      }
      return result;
    },
    codepointIndexToCodeUnitIndex(string, codepointIndex) {
      var codeUnitIndex, i, codeUnitIndex0;
      for (codeUnitIndex = 0, i = 0; i < codepointIndex; ++i) {
        codeUnitIndex0 = codeUnitIndex + 1;
        codeUnitIndex = B.JSString_methods._codeUnitAt$1(string, codeUnitIndex) >>> 10 === 54 ? codeUnitIndex0 + 1 : codeUnitIndex0;
      }
      return codeUnitIndex;
    },
    codeUnitIndexToCodepointIndex(string, codeUnitIndex) {
      var codepointIndex, i;
      for (codepointIndex = 0, i = 0; i < codeUnitIndex; i = (B.JSString_methods._codeUnitAt$1(string, i) >>> 10 === 54 ? i + 1 : i) + 1)
        ++codepointIndex;
      return codepointIndex;
    },
    unvendor($name) {
      var i,
        t1 = $name.length;
      if (t1 < 2)
        return $name;
      if (B.JSString_methods._codeUnitAt$1($name, 0) !== 45)
        return $name;
      if (B.JSString_methods._codeUnitAt$1($name, 1) === 45)
        return $name;
      for (i = 2; i < t1; ++i)
        if (B.JSString_methods._codeUnitAt$1($name, i) === 45)
          return B.JSString_methods.substring$1($name, i + 1);
      return $name;
    },
    equalsIgnoreCase(string1, string2) {
      var t1, i;
      if (string1 === string2)
        return true;
      if (string1 == null || false)
        return false;
      t1 = string1.length;
      if (t1 !== string2.length)
        return false;
      for (i = 0; i < t1; ++i)
        if (!A.characterEqualsIgnoreCase(B.JSString_methods._codeUnitAt$1(string1, i), B.JSString_methods._codeUnitAt$1(string2, i)))
          return false;
      return true;
    },
    startsWithIgnoreCase(string, prefix) {
      var i,
        t1 = prefix.length;
      if (string.length < t1)
        return false;
      for (i = 0; i < t1; ++i)
        if (!A.characterEqualsIgnoreCase(B.JSString_methods._codeUnitAt$1(string, i), B.JSString_methods._codeUnitAt$1(prefix, i)))
          return false;
      return true;
    },
    longestCommonSubsequence(list1, list2, select, $T) {
      var t1, _i, selections, i, i0, j, selection, j0,
        _length = list1.get$length(list1) + 1,
        lengths = J.JSArray_JSArray$allocateFixed(_length, type$.List_int);
      for (t1 = type$.int, _i = 0; _i < _length; ++_i)
        lengths[_i] = A.List_List$filled(((list2._queue_list$_tail - list2._queue_list$_head & J.get$length$asx(list2._queue_list$_table) - 1) >>> 0) + 1, 0, false, t1);
      _length = list1.get$length(list1);
      selections = J.JSArray_JSArray$allocateFixed(_length, $T._eval$1("List<0?>"));
      for (t1 = $T._eval$1("0?"), _i = 0; _i < _length; ++_i)
        selections[_i] = A.List_List$filled((list2._queue_list$_tail - list2._queue_list$_head & J.get$length$asx(list2._queue_list$_table) - 1) >>> 0, null, false, t1);
      for (i = 0; i < (list1._queue_list$_tail - list1._queue_list$_head & J.get$length$asx(list1._queue_list$_table) - 1) >>> 0; i = i0)
        for (i0 = i + 1, j = 0; j < (list2._queue_list$_tail - list2._queue_list$_head & J.get$length$asx(list2._queue_list$_table) - 1) >>> 0; j = j0) {
          selection = select.call$2(list1.$index(0, i), list2.$index(0, j));
          selections[i][j] = selection;
          t1 = lengths[i0];
          j0 = j + 1;
          t1[j0] = selection == null ? Math.max(t1[j], lengths[i][j0]) : lengths[i][j] + 1;
        }
      return new A.longestCommonSubsequence_backtrack(selections, lengths, $T).call$2(list1.get$length(list1) - 1, list2.get$length(list2) - 1);
    },
    removeFirstWhere(list, test, orElse) {
      var i;
      for (i = 0; i < list.length; ++i) {
        if (!test.call$1(list[i]))
          continue;
        B.JSArray_methods.removeAt$1(list, i);
        return;
      }
      orElse.call$0();
    },
    consumeEscapedCharacter(scanner) {
      var first, value, i, next, t1;
      scanner.expectChar$1(92);
      first = scanner.peekChar$0();
      if (first == null)
        return 65533;
      else if (first === 10 || first === 13 || first === 12)
        scanner.error$1(0, "Expected escape sequence.");
      else if (A.isHex(first)) {
        for (value = 0, i = 0; i < 6; ++i) {
          next = scanner.peekChar$0();
          if (next == null || !A.isHex(next))
            break;
          value = (value << 4 >>> 0) + A.asHex(scanner.readChar$0());
        }
        t1 = scanner.peekChar$0();
        if (t1 === 32 || t1 === 9 || t1 === 10 || t1 === 13 || t1 === 12)
          scanner.readChar$0();
        if (value !== 0)
          t1 = value >= 55296 && value <= 57343 || value >= 1114111;
        else
          t1 = true;
        if (t1)
          return 65533;
        else
          return value;
      } else
        return scanner.readChar$0();
    },
    throwWithTrace(error, trace) {
      A.attachTrace(error, trace);
      throw A.wrapException(error);
    },
    attachTrace(error, trace) {
      var t1, t2;
      if (trace.toString$0(0).length === 0)
        return;
      t1 = $.$get$_traces();
      t2 = false;
      if (t2)
        A.throwExpression(A.ArgumentError$value(error, "Expandos are not allowed on strings, numbers, booleans or null", null));
      t1 = t1._jsWeakMap;
      if (t1.get(error) == null)
        t1.set(error, trace);
    },
    IterableExtension_get_exceptLast(_this) {
      var t1 = J.getInterceptor$asx(_this),
        size = t1.get$length(_this) - 1;
      if (size < 0)
        throw A.wrapException(A.StateError$("Iterable may not be empty"));
      return t1.take$1(_this, size);
    },
    flattenVertically_closure: function flattenVertically_closure(t0) {
      this.T = t0;
    },
    flattenVertically_closure0: function flattenVertically_closure0(t0, t1) {
      this.result = t0;
      this.T = t1;
    },
    longestCommonSubsequence_backtrack: function longestCommonSubsequence_backtrack(t0, t1, t2) {
      this.selections = t0;
      this.lengths = t1;
      this.T = t2;
    },
    SassApiValue_assertSelector(_this, allowParent, $name) {
      var error, stackTrace, t1, exception,
        string = _this._selectorString$1($name);
      try {
        t1 = A.SelectorParser$(string, allowParent, true, null, null).parse$0(0);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SassFormatException) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = B.JSString_methods.replaceFirst$2(J.toString$0$(error), "Error: ", "");
          A.throwWithTrace(new A.SassScriptException($name == null ? t1 : "$" + $name + ": " + t1), stackTrace);
        } else
          throw exception;
      }
    },
    SassApiValue_assertCompoundSelector(_this, $name) {
      var error, stackTrace, t1, exception,
        allowParent = false,
        string = _this._selectorString$1($name);
      try {
        t1 = A.SelectorParser$(string, allowParent, true, null, null).parseCompoundSelector$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SassFormatException) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = B.JSString_methods.replaceFirst$2(J.toString$0$(error), "Error: ", "");
          A.throwWithTrace(new A.SassScriptException("$" + $name + ": " + t1), stackTrace);
        } else
          throw exception;
      }
    },
    Value: function Value() {
    },
    SassBoolean: function SassBoolean(t0) {
      this.value = t0;
    },
    SassColor$rgb(red, green, blue, alpha) {
      var _null = null,
        t1 = new A.SassColor(red, green, blue, _null, _null, _null, alpha == null ? 1 : A.fuzzyAssertRange(alpha, 0, 1, "alpha"), _null);
      A.RangeError_checkValueInInterval(t1.get$red(), 0, 255, "red");
      A.RangeError_checkValueInInterval(t1.get$green(), 0, 255, "green");
      A.RangeError_checkValueInInterval(t1.get$blue(), 0, 255, "blue");
      return t1;
    },
    SassColor$rgbInternal(_red, _green, _blue, alpha, format) {
      var t1 = new A.SassColor(_red, _green, _blue, null, null, null, alpha == null ? 1 : A.fuzzyAssertRange(alpha, 0, 1, "alpha"), format);
      A.RangeError_checkValueInInterval(t1.get$red(), 0, 255, "red");
      A.RangeError_checkValueInInterval(t1.get$green(), 0, 255, "green");
      A.RangeError_checkValueInInterval(t1.get$blue(), 0, 255, "blue");
      return t1;
    },
    SassColor$hslInternal(hue, saturation, lightness, alpha, format) {
      var t1 = B.JSNumber_methods.$mod(hue, 360),
        t2 = A.fuzzyAssertRange(saturation, 0, 100, "saturation"),
        t3 = A.fuzzyAssertRange(lightness, 0, 100, "lightness");
      return new A.SassColor(null, null, null, t1, t2, t3, alpha == null ? 1 : A.fuzzyAssertRange(alpha, 0, 1, "alpha"), format);
    },
    SassColor_SassColor$hwb(hue, whiteness, blackness, alpha) {
      var t2, t1 = {},
        scaledHue = B.JSNumber_methods.$mod(hue, 360) / 360,
        scaledWhiteness = t1.scaledWhiteness = A.fuzzyAssertRange(whiteness, 0, 100, "whiteness") / 100,
        scaledBlackness = A.fuzzyAssertRange(blackness, 0, 100, "blackness") / 100,
        sum = scaledWhiteness + scaledBlackness;
      if (sum > 1) {
        t2 = t1.scaledWhiteness = scaledWhiteness / sum;
        scaledBlackness /= sum;
      } else
        t2 = scaledWhiteness;
      t2 = new A.SassColor_SassColor$hwb_toRgb(t1, 1 - t2 - scaledBlackness);
      return A.SassColor$rgb(t2.call$1(scaledHue + 0.3333333333333333), t2.call$1(scaledHue), t2.call$1(scaledHue - 0.3333333333333333), alpha);
    },
    SassColor__hueToRgb(m1, m2, hue) {
      if (hue < 0)
        ++hue;
      if (hue > 1)
        --hue;
      if (hue < 0.16666666666666666)
        return m1 + (m2 - m1) * hue * 6;
      else if (hue < 0.5)
        return m2;
      else if (hue < 0.6666666666666666)
        return m1 + (m2 - m1) * (0.6666666666666666 - hue) * 6;
      else
        return m1;
    },
    SassColor: function SassColor(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._red = t0;
      _._green = t1;
      _._blue = t2;
      _._hue = t3;
      _._saturation = t4;
      _._lightness = t5;
      _._alpha = t6;
      _.format = t7;
    },
    SassColor_SassColor$hwb_toRgb: function SassColor_SassColor$hwb_toRgb(t0, t1) {
      this._box_0 = t0;
      this.factor = t1;
    },
    _ColorFormatEnum: function _ColorFormatEnum(t0) {
      this._color0$_name = t0;
    },
    SpanColorFormat: function SpanColorFormat(t0) {
      this._color0$_span = t0;
    },
    SassList$(contents, _separator, brackets) {
      var t1 = A.List_List$unmodifiable(contents, type$.Value);
      if (_separator === B.ListSeparator_undecided_null_undecided && t1.length > 1)
        A.throwExpression(A.ArgumentError$("A list with more than one element must have an explicit separator.", null));
      return new A.SassList(t1, _separator, brackets);
    },
    SassList: function SassList(t0, t1, t2) {
      this._list$_contents = t0;
      this._separator = t1;
      this._hasBrackets = t2;
    },
    SassList_isBlank_closure: function SassList_isBlank_closure() {
    },
    ListSeparator: function ListSeparator(t0, t1, t2) {
      this._list$_name = t0;
      this.separator = t1;
      this._name = t2;
    },
    SassMap: function SassMap(t0) {
      this._map$_contents = t0;
    },
    SassMap_asList_closure: function SassMap_asList_closure(t0) {
      this.result = t0;
    },
    _SassNull: function _SassNull() {
    },
    conversionFactor(unit1, unit2) {
      var innerMap;
      if (unit1 === unit2)
        return 1;
      innerMap = B.Map_K2BWj.$index(0, unit1);
      if (innerMap == null)
        return null;
      return innerMap.$index(0, unit2);
    },
    SassNumber_SassNumber$withUnits(value, denominatorUnits, numeratorUnits) {
      var numerators, unsimplifiedDenominators, denominators, _i, denominator, simplifiedAway, i, factor, _null = null,
        t1 = denominatorUnits.length;
      if (t1 === 0) {
        t1 = numeratorUnits.length;
        if (t1 === 0)
          return new A.UnitlessSassNumber(value, _null);
        else if (t1 === 1)
          return new A.SingleUnitSassNumber(numeratorUnits[0], value, _null);
        else
          return new A.ComplexSassNumber(A.List_List$unmodifiable(numeratorUnits, type$.String), B.List_empty, value, _null);
      } else {
        t1 = numeratorUnits.length;
        if (t1 === 0)
          return new A.ComplexSassNumber(B.List_empty, A.List_List$unmodifiable(denominatorUnits, type$.String), value, _null);
        else {
          numerators = A._setArrayType(numeratorUnits.slice(0), A._arrayInstanceType(numeratorUnits));
          unsimplifiedDenominators = A._setArrayType(denominatorUnits.slice(0), A._arrayInstanceType(denominatorUnits));
          denominators = A._setArrayType([], type$.JSArray_String);
          for (t1 = unsimplifiedDenominators.length, _i = 0; _i < unsimplifiedDenominators.length; unsimplifiedDenominators.length === t1 || (0, A.throwConcurrentModificationError)(unsimplifiedDenominators), ++_i) {
            denominator = unsimplifiedDenominators[_i];
            i = 0;
            while (true) {
              if (!(i < numerators.length)) {
                simplifiedAway = false;
                break;
              }
              c$0: {
                factor = A.conversionFactor(denominator, numerators[i]);
                if (factor == null)
                  break c$0;
                value *= factor;
                B.JSArray_methods.removeAt$1(numerators, i);
                simplifiedAway = true;
                break;
              }
              ++i;
            }
            if (!simplifiedAway)
              denominators.push(denominator);
          }
          if (denominatorUnits.length === 0) {
            t1 = numeratorUnits.length;
            if (t1 === 0)
              return new A.UnitlessSassNumber(value, _null);
            else if (t1 === 1)
              return new A.SingleUnitSassNumber(B.JSArray_methods.get$single(numeratorUnits), value, _null);
          }
          t1 = type$.String;
          return new A.ComplexSassNumber(A.List_List$unmodifiable(numerators, t1), A.List_List$unmodifiable(denominators, t1), value, _null);
        }
      }
    },
    SassNumber: function SassNumber() {
    },
    SassNumber__coerceOrConvertValue__compatibilityException: function SassNumber__coerceOrConvertValue__compatibilityException(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.other = t1;
      _.otherName = t2;
      _.otherHasUnits = t3;
      _.name = t4;
      _.newNumerators = t5;
      _.newDenominators = t6;
    },
    SassNumber__coerceOrConvertValue_closure: function SassNumber__coerceOrConvertValue_closure(t0, t1) {
      this._box_0 = t0;
      this.newNumerator = t1;
    },
    SassNumber__coerceOrConvertValue_closure0: function SassNumber__coerceOrConvertValue_closure0(t0) {
      this._compatibilityException = t0;
    },
    SassNumber__coerceOrConvertValue_closure1: function SassNumber__coerceOrConvertValue_closure1(t0, t1) {
      this._box_0 = t0;
      this.newDenominator = t1;
    },
    SassNumber__coerceOrConvertValue_closure2: function SassNumber__coerceOrConvertValue_closure2(t0) {
      this._compatibilityException = t0;
    },
    SassNumber__canonicalizeUnitList_closure: function SassNumber__canonicalizeUnitList_closure() {
    },
    SassNumber__canonicalMultiplier_closure: function SassNumber__canonicalMultiplier_closure(t0) {
      this.$this = t0;
    },
    ComplexSassNumber: function ComplexSassNumber(t0, t1, t2, t3) {
      var _ = this;
      _._numeratorUnits = t0;
      _._denominatorUnits = t1;
      _._number$_value = t2;
      _.hashCache = null;
      _.asSlash = t3;
    },
    SingleUnitSassNumber: function SingleUnitSassNumber(t0, t1, t2) {
      var _ = this;
      _._unit = t0;
      _._number$_value = t1;
      _.hashCache = null;
      _.asSlash = t2;
    },
    SingleUnitSassNumber__coerceToUnit_closure: function SingleUnitSassNumber__coerceToUnit_closure(t0, t1) {
      this.$this = t0;
      this.unit = t1;
    },
    SingleUnitSassNumber__coerceValueToUnit_closure: function SingleUnitSassNumber__coerceValueToUnit_closure(t0) {
      this.$this = t0;
    },
    UnitlessSassNumber: function UnitlessSassNumber(t0, t1) {
      this._number$_value = t0;
      this.hashCache = null;
      this.asSlash = t1;
    },
    SassString$(_text, quotes) {
      return new A.SassString(_text, quotes);
    },
    SassString: function SassString(t0, t1) {
      var _ = this;
      _._string$_text = t0;
      _._hasQuotes = t1;
      _.__SassString__sassLength_FI = $;
      _._hashCache = null;
    },
    AnySelectorVisitor: function AnySelectorVisitor() {
    },
    AnySelectorVisitor_visitComplexSelector_closure: function AnySelectorVisitor_visitComplexSelector_closure(t0) {
      this.$this = t0;
    },
    AnySelectorVisitor_visitCompoundSelector_closure: function AnySelectorVisitor_visitCompoundSelector_closure(t0) {
      this.$this = t0;
    },
    RecursiveAstVisitor: function RecursiveAstVisitor() {
    },
    RecursiveAstVisitor_visitIfRule_closure: function RecursiveAstVisitor_visitIfRule_closure(t0) {
      this.$this = t0;
    },
    RecursiveStatementVisitor: function RecursiveStatementVisitor() {
    },
    RecursiveStatementVisitor_visitIfRule_closure: function RecursiveStatementVisitor_visitIfRule_closure(t0) {
      this.$this = t0;
    },
    serializeValue(value, inspect, quote) {
      var visitor = A._SerializeVisitor$(inspect, true, false);
      value.accept$1(visitor);
      return visitor._serialize$_buffer.toString$0(0);
    },
    serializeSelector(selector, inspect) {
      var visitor = A._SerializeVisitor$(true, true, false);
      selector.accept$1(visitor);
      return visitor._serialize$_buffer.toString$0(0);
    },
    _SerializeVisitor$(inspect, quote, sourceMap) {
      var t1 = new A.NoSourceMapBuffer(new A.StringBuffer(""));
      A.RangeError_checkValueInInterval(2, 0, 10, "indentWidth");
      return new A._SerializeVisitor(t1, B.OutputStyle_0, inspect, true, 2, B.LineFeed_lf);
    },
    _SerializeVisitor: function _SerializeVisitor(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._serialize$_buffer = t0;
      _._style = t1;
      _._inspect = t2;
      _._quote = t3;
      _._indentWidth = t4;
      _._lineFeed = t5;
    },
    _SerializeVisitor_visitList_closure: function _SerializeVisitor_visitList_closure() {
    },
    _SerializeVisitor_visitList_closure0: function _SerializeVisitor_visitList_closure0(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _SerializeVisitor_visitList_closure1: function _SerializeVisitor_visitList_closure1(t0) {
      this.$this = t0;
    },
    _SerializeVisitor_visitMap_closure: function _SerializeVisitor_visitMap_closure(t0) {
      this.$this = t0;
    },
    _SerializeVisitor_visitSelectorList_closure: function _SerializeVisitor_visitSelectorList_closure() {
    },
    OutputStyle: function OutputStyle(t0) {
      this._name = t0;
    },
    LineFeed: function LineFeed(t0) {
      this._name = t0;
    },
    MigrationException$(message) {
      return new A.MigrationException(message);
    },
    MigrationSourceSpanException$(message, span) {
      return new A.MigrationSourceSpanException(message, span);
    },
    MigrationException: function MigrationException(t0) {
      this.message = t0;
    },
    MigrationSourceSpanException: function MigrationSourceSpanException(t0, t1) {
      this._span_exception$_message = t0;
      this._span = t1;
    },
    MigrationVisitor: function MigrationVisitor() {
    },
    MigrationVisitor_visitDependency_closure: function MigrationVisitor_visitDependency_closure(t0) {
      this.context = t0;
    },
    _MigrationVisitor_Object_RecursiveStatementVisitor: function _MigrationVisitor_Object_RecursiveStatementVisitor() {
    },
    _MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor: function _MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor() {
    },
    Migrator: function Migrator() {
    },
    Migrator_run_closure: function Migrator_run_closure(t0) {
      this.allMigrated = t0;
    },
    Migrator__warnForMissingDependencies_closure: function Migrator__warnForMissingDependencies_closure() {
    },
    _DeprecationLogger: function _DeprecationLogger(t0) {
      this.migrator = t0;
    },
    DivisionMigrator: function DivisionMigrator(t0, t1, t2, t3) {
      var _ = this;
      _.argParser = t0;
      _.missingDependencies = t1;
      _._argResults = _._globalResults = _._runner = null;
      _._argParser = t2;
      _._subcommands = t3;
    },
    _DivisionMigrationVisitor: function _DivisionMigrationVisitor(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.isPessimistic = t0;
      _.useMultiplication = t1;
      _._inCalcContext = _._expectsNumericResult = _._isDivisionAllowed = false;
      _.__useRulesToInsert = _.__existingNamespaces = null;
      _._migrated = t2;
      _.migrateDependencies = t3;
      _.importCache = t4;
      _._missingDependencies = t5;
      _._currentUrl = _.__patches = null;
      _.__MigrationVisitor__importer_A = $;
    },
    _DivisionMigrationVisitor__builtInPrefix_closure: function _DivisionMigrationVisitor__builtInPrefix_closure() {
    },
    _DivisionMigrationVisitor__builtInPrefix_options: function _DivisionMigrationVisitor__builtInPrefix_options(t0) {
      this.module = t0;
    },
    _DivisionMigrationVisitor__builtInPrefix_closure0: function _DivisionMigrationVisitor__builtInPrefix_closure0(t0) {
      this.$this = t0;
    },
    _DivisionMigrationVisitor_visitArgumentInvocation_closure: function _DivisionMigrationVisitor_visitArgumentInvocation_closure(t0, t1) {
      this.$this = t0;
      this.invocation = t1;
    },
    _DivisionMigrationVisitor_visitBinaryOperationExpression_closure: function _DivisionMigrationVisitor_visitBinaryOperationExpression_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _DivisionMigrationVisitor_visitCalculationExpression_closure: function _DivisionMigrationVisitor_visitCalculationExpression_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _DivisionMigrationVisitor_visitInterpolation_closure: function _DivisionMigrationVisitor_visitInterpolation_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _DivisionMigrationVisitor_visitListExpression_closure: function _DivisionMigrationVisitor_visitListExpression_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _DivisionMigrationVisitor_visitParenthesizedExpression_closure: function _DivisionMigrationVisitor_visitParenthesizedExpression_closure(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.negated = t2;
    },
    _DivisionMigrationVisitor_visitReturnRule_closure: function _DivisionMigrationVisitor_visitReturnRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _DivisionMigrationVisitor_visitVariableDeclaration_closure: function _DivisionMigrationVisitor_visitVariableDeclaration_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _DivisionMigrationVisitor__tryColorFunction_closure: function _DivisionMigrationVisitor__tryColorFunction_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.last = t2;
    },
    _DivisionMigrationVisitor__visitSlashOperation_closure: function _DivisionMigrationVisitor__visitSlashOperation_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    MediaLogicMigrator: function MediaLogicMigrator(t0, t1, t2, t3) {
      var _ = this;
      _._expressionsToMigrate = t0;
      _.missingDependencies = t1;
      _._argResults = _._globalResults = _._runner = null;
      _._argParser = t2;
      _._subcommands = t3;
    },
    MediaLogicMigrator_handleDeprecation_closure: function MediaLogicMigrator_handleDeprecation_closure() {
    },
    _MediaLogicVisitor: function _MediaLogicVisitor(t0, t1, t2, t3, t4) {
      var _ = this;
      _._expressionsToMigrate = t0;
      _._migrated = t1;
      _.migrateDependencies = t2;
      _.importCache = t3;
      _._missingDependencies = t4;
      _._currentUrl = _.__patches = null;
      _.__MigrationVisitor__importer_A = $;
    },
    _ModuleMigrationVisitor$(importCache, references, loadPaths, migrateDependencies, forwards, prefixesToRemove) {
      var t1 = type$.Uri,
        t2 = type$.MemberDeclaration_SassDeclaration,
        t3 = type$.String;
      return new A._ModuleMigrationVisitor(A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), A.LinkedHashSet_LinkedHashSet$_empty(type$.MemberDeclaration_VariableDeclaration), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Tuple2_Uri_Importer), new A.UnreferencableMembers(null, A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.UnreferencableType)), references, importCache, A.List_List$unmodifiable(J.map$1$1$ax(loadPaths, new A._ModuleMigrationVisitor_closure(), type$.dynamic), t3), new A.UnmodifiableSetView(prefixesToRemove.toSet$0(0), type$.UnmodifiableSetView_String), forwards, A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), migrateDependencies, importCache, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.FileSpan));
    },
    ModuleMigrator: function ModuleMigrator(t0, t1, t2, t3, t4) {
      var _ = this;
      _.argParser = t0;
      _._filesWithRenamedDeclarations = t1;
      _.missingDependencies = t2;
      _._argResults = _._globalResults = _._runner = null;
      _._argParser = t3;
      _._subcommands = t4;
    },
    ModuleMigrator_migrateFile_closure: function ModuleMigrator_migrateFile_closure() {
    },
    _ModuleMigrationVisitor: function _ModuleMigrationVisitor(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _._upstreamStylesheets = t0;
      _.renamedMembers = t1;
      _._reassignedVariables = t2;
      _._originalImports = t3;
      _._unreferencable = t4;
      _._afterLastImport = _._beforeFirstImport = _.__additionalRelativeUseRules = _.__additionalLoadPathUseRules = _.__builtInUseRules = _.__usedUrls = _.__forwardedUrls = _.__namespaces = null;
      _._useAllowed = true;
      _._needsImportOnly = false;
      _.__configuredVariables = null;
      _.references = t5;
      _._ModuleMigrationVisitor_importCache = t6;
      _.loadPaths = t7;
      _.prefixesToRemove = t8;
      _.forwards = t9;
      _._migrated = t10;
      _.migrateDependencies = t11;
      _.importCache = t12;
      _._missingDependencies = t13;
      _._currentUrl = _.__patches = null;
      _.__MigrationVisitor__importer_A = $;
    },
    _ModuleMigrationVisitor_closure: function _ModuleMigrationVisitor_closure() {
    },
    _ModuleMigrationVisitor__generateImportOnly_closure: function _ModuleMigrationVisitor__generateImportOnly_closure() {
    },
    _ModuleMigrationVisitor__generateImportOnly_closure0: function _ModuleMigrationVisitor__generateImportOnly_closure0() {
    },
    _ModuleMigrationVisitor__generateImportOnly_closure1: function _ModuleMigrationVisitor__generateImportOnly_closure1() {
    },
    _ModuleMigrationVisitor__getAdditionalForwardRules_closure: function _ModuleMigrationVisitor__getAdditionalForwardRules_closure() {
    },
    _ModuleMigrationVisitor_beforePatch_useRulesToString: function _ModuleMigrationVisitor_beforePatch_useRulesToString(t0) {
      this.$this = t0;
    },
    _ModuleMigrationVisitor_beforePatch_useRulesToString_closure: function _ModuleMigrationVisitor_beforePatch_useRulesToString_closure(t0) {
      this.$this = t0;
    },
    _ModuleMigrationVisitor__determineNamespaces_closure: function _ModuleMigrationVisitor__determineNamespaces_closure(t0, t1, t2) {
      this.url = t0;
      this.namespaces = t1;
      this.sourcesByNamespace = t2;
    },
    _ModuleMigrationVisitor__determineNamespaces__closure: function _ModuleMigrationVisitor__determineNamespaces__closure() {
    },
    _ModuleMigrationVisitor__determineNamespaces_closure0: function _ModuleMigrationVisitor__determineNamespaces_closure0(t0, t1) {
      this.namespaces = t0;
      this.conflictingNamespaces = t1;
    },
    _ModuleMigrationVisitor__determineNamespaces_closure1: function _ModuleMigrationVisitor__determineNamespaces_closure1(t0, t1, t2) {
      this.$this = t0;
      this.namespaces = t1;
      this.url = t2;
    },
    _ModuleMigrationVisitor__resolveNamespaceConflict_closure: function _ModuleMigrationVisitor__resolveNamespaceConflict_closure() {
    },
    _ModuleMigrationVisitor__resolveNamespaceConflict_closure0: function _ModuleMigrationVisitor__resolveNamespaceConflict_closure0() {
    },
    _ModuleMigrationVisitor__orderSources_closure: function _ModuleMigrationVisitor__orderSources_closure() {
    },
    _ModuleMigrationVisitor__orderSources_closure0: function _ModuleMigrationVisitor__orderSources_closure0() {
    },
    _ModuleMigrationVisitor_visitFunctionExpression_closure: function _ModuleMigrationVisitor_visitFunctionExpression_closure(t0, t1) {
      this.$this = t0;
      this.fnNameSpan = t1;
    },
    _ModuleMigrationVisitor_visitFunctionExpression_closure0: function _ModuleMigrationVisitor_visitFunctionExpression_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _ModuleMigrationVisitor_visitImportRule_closure: function _ModuleMigrationVisitor_visitImportRule_closure() {
    },
    _ModuleMigrationVisitor__migrateImportToRules_closure: function _ModuleMigrationVisitor__migrateImportToRules_closure(t0, t1) {
      this.$this = t0;
      this.defaultNamespace = t1;
    },
    _ModuleMigrationVisitor__migrateImportCommon_closure: function _ModuleMigrationVisitor__migrateImportCommon_closure(t0, t1) {
      this.ruleUrl = t0;
      this.tuple = t1;
    },
    _ModuleMigrationVisitor__migrateImportCommon_closure0: function _ModuleMigrationVisitor__migrateImportCommon_closure0() {
    },
    _ModuleMigrationVisitor__migrateImportCommon_closure1: function _ModuleMigrationVisitor__migrateImportCommon_closure1(t0, t1) {
      this.$this = t0;
      this.configured = t1;
    },
    _ModuleMigrationVisitor__makeForwardRules_closure: function _ModuleMigrationVisitor__makeForwardRules_closure() {
    },
    _ModuleMigrationVisitor__findOrAddBuiltInNamespace_closure: function _ModuleMigrationVisitor__findOrAddBuiltInNamespace_closure(t0, t1) {
      this.$this = t0;
      this.module = t1;
    },
    _ModuleMigrationVisitor__namespaceForDeclaration_closure: function _ModuleMigrationVisitor__namespaceForDeclaration_closure() {
    },
    _ModuleMigrationVisitor__namespaceForDeclaration_closure0: function _ModuleMigrationVisitor__namespaceForDeclaration_closure0(t0, t1) {
      this.$this = t0;
      this.defaultNamespace = t1;
    },
    _ModuleMigrationVisitor__absoluteUrlToDependency_closure: function _ModuleMigrationVisitor__absoluteUrlToDependency_closure() {
    },
    _ModuleMigrationVisitor__prefixFor_closure: function _ModuleMigrationVisitor__prefixFor_closure(t0) {
      this.identifier = t0;
    },
    _ModuleMigrationVisitor__prefixFor_closure0: function _ModuleMigrationVisitor__prefixFor_closure0() {
    },
    ForwardType_ForwardType(option) {
      switch (option) {
        case "all":
          return B.C_ForwardType1;
        case "import-only":
          return B.C_ForwardType0;
        case "prefixed":
          return B.C_ForwardType;
        default:
          throw A.wrapException(A.StateError$('Invalid value "' + option + '" for --forward option.'));
      }
    },
    ForwardType: function ForwardType() {
    },
    MemberDeclaration$(member, $T) {
      var t1 = member.get$name(member),
        t2 = member.get$span().file.url;
      t2.toString;
      return new A.MemberDeclaration(member, t1, t2, $T._eval$1("MemberDeclaration<0>"));
    },
    MemberDeclaration: function MemberDeclaration(t0, t1, t2, t3) {
      var _ = this;
      _.member = t0;
      _.name = t1;
      _.sourceUrl = t2;
      _.$ti = t3;
    },
    ImportOnlyMemberDeclaration: function ImportOnlyMemberDeclaration(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.importOnlyPrefix = t0;
      _.importOnlyUrl = t1;
      _.member = t2;
      _.name = t3;
      _.sourceUrl = t4;
      _.$ti = t5;
    },
    ReferenceSource: function ReferenceSource() {
    },
    ImportSource: function ImportSource(t0, t1) {
      this.url = t0;
      this.originalRuleUrl = t1;
    },
    UseSource: function UseSource(t0, t1) {
      this.url = t0;
      this.use = t1;
    },
    BuiltInSource: function BuiltInSource(t0) {
      this.url = t0;
    },
    CurrentSource: function CurrentSource(t0) {
      this.url = t0;
    },
    ForwardSource: function ForwardSource(t0, t1) {
      this.url = t0;
      this.forward = t1;
    },
    ImportOnlySource: function ImportOnlySource(t0, t1, t2) {
      this.url = t0;
      this.realSourceUrl = t1;
      this.originalRuleUrl = t2;
    },
    References$_(variables, variableReassignments, defaultVariableDeclarations, mixins, functions, getFunctionReferences, globalDeclarations, libraries, sources, orphanImportOnlyFiles) {
      var t3, t4, t5, t6,
        t1 = type$.UnmodifiableBidirectionalMapView_of_FunctionExpression_and_MemberDeclaration_FunctionRule,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(type$.MemberDeclaration_SassDeclaration, type$.Set_Uri);
      for (t3 = libraries.get$entries(libraries), t3 = new A.MappedIterator(J.get$iterator$ax(t3.__internal$_iterable), t3._f), t4 = type$.UnmodifiableSetView_Uri, t5 = A._instanceType(t3)._rest[1]; t3.moveNext$0();) {
        t6 = t3.__internal$_current;
        if (t6 == null)
          t6 = t5._as(t6);
        t2.$indexSet(0, t6.get$key(), new A.UnmodifiableSetView(t6.get$value(t6), t4));
      }
      return new A.References(new A.UnmodifiableBidirectionalMapView(variables, variables, type$.UnmodifiableBidirectionalMapView_of_VariableExpression_and_MemberDeclaration_SassDeclaration), new A.UnmodifiableBidirectionalMapView(variableReassignments, variableReassignments, type$.UnmodifiableBidirectionalMapView_of_MemberDeclaration_VariableDeclaration_and_MemberDeclaration_SassDeclaration), new A.UnmodifiableMapView(defaultVariableDeclarations, type$.UnmodifiableMapView_of_MemberDeclaration_VariableDeclaration_and_MemberDeclaration_SassDeclaration), new A.UnmodifiableBidirectionalMapView(mixins, mixins, type$.UnmodifiableBidirectionalMapView_of_IncludeRule_and_MemberDeclaration_MixinRule), new A.UnmodifiableBidirectionalMapView(functions, functions, t1), new A.UnmodifiableBidirectionalMapView(getFunctionReferences, getFunctionReferences, t1), new A.UnmodifiableSetView(globalDeclarations, type$.UnmodifiableSetView_MemberDeclaration_SassDeclaration), new A.UnmodifiableMapView(t2, type$.UnmodifiableMapView_of_MemberDeclaration_SassDeclaration_and_Set_Uri), new A.UnmodifiableMapView(sources, type$.UnmodifiableMapView_SassReference_ReferenceSource), new A.UnmodifiableMapView(orphanImportOnlyFiles, type$.UnmodifiableMapView_of_Uri_and_nullable_ForwardRule));
    },
    References: function References(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.variables = t0;
      _.variableReassignments = t1;
      _.defaultVariableDeclarations = t2;
      _.mixins = t3;
      _.functions = t4;
      _.getFunctionReferences = t5;
      _.globalDeclarations = t6;
      _.libraries = t7;
      _.sources = t8;
      _.orphanImportOnlyFiles = t9;
    },
    References_referencedOutsideDeclaringStylesheet_closure: function References_referencedOutsideDeclaringStylesheet_closure(t0) {
      this.declaration = t0;
    },
    _ReferenceVisitor: function _ReferenceVisitor(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._variables = t0;
      _._variableReassignments = t1;
      _._defaultVariableDeclarations = t2;
      _._mixins = t3;
      _._functions = t4;
      _._getFunctionReferences = t5;
      _._globalDeclarations = t6;
      _._libraries = t7;
      _._sources = t8;
      _._orphanImportOnlyFiles = t9;
      _.___ReferenceVisitor__scope_A = $;
      _._moduleScopes = t10;
      _.___ReferenceVisitor__declarationSources_A = $;
      _._moduleSources = t11;
      _._unresolvedReferences = t12;
      _._namespaces = t13;
      _._libraryUrl = null;
      _.___ReferenceVisitor__currentUrl_A = $;
      _._currentRuleUrl = null;
      _.___ReferenceVisitor__isOrphanImportOnly_A = _.___ReferenceVisitor__importer_A = $;
      _.importCache = t14;
      _._lastRegularForward = null;
    },
    _ReferenceVisitor_visitUseRule_closure: function _ReferenceVisitor_visitUseRule_closure(t0, t1, t2) {
      this.$this = t0;
      this.canonicalUrl = t1;
      this.useSource = t2;
    },
    _ReferenceVisitor__registerLibraryUrl_closure: function _ReferenceVisitor__registerLibraryUrl_closure() {
    },
    __ReferenceVisitor_Object_RecursiveStatementVisitor: function __ReferenceVisitor_Object_RecursiveStatementVisitor() {
    },
    __ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor: function __ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor() {
    },
    Scope$($parent) {
      var t1 = type$.String;
      return new A.Scope($parent, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.MemberDeclaration_SassDeclaration), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.MemberDeclaration_MixinRule), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.MemberDeclaration_FunctionRule));
    },
    Scope: function Scope(t0, t1, t2, t3) {
      var _ = this;
      _.parent = t0;
      _.variables = t1;
      _.mixins = t2;
      _.functions = t3;
    },
    UnreferencableMembers: function UnreferencableMembers(t0, t1) {
      this.parent = t0;
      this._unreferencable_members$_unreferencable = t1;
    },
    UnreferencableType: function UnreferencableType() {
    },
    NamespaceMigrator: function NamespaceMigrator(t0, t1, t2, t3) {
      var _ = this;
      _.argParser = t0;
      _.missingDependencies = t1;
      _._argResults = _._globalResults = _._runner = null;
      _._argParser = t2;
      _._subcommands = t3;
    },
    NamespaceMigrator_migrateFile_closure: function NamespaceMigrator_migrateFile_closure() {
    },
    NamespaceMigrator_migrateFile_closure0: function NamespaceMigrator_migrateFile_closure0() {
    },
    _NamespaceMigrationVisitor: function _NamespaceMigrationVisitor(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.renamer = t0;
      _.forceRename = t1;
      _.__usedNamespaces = _.__spansByNamespace = null;
      _._migrated = t2;
      _.migrateDependencies = t3;
      _.importCache = t4;
      _._missingDependencies = t5;
      _._currentUrl = _.__patches = null;
      _.__MigrationVisitor__importer_A = $;
    },
    _NamespaceMigrationVisitor_beforePatch_closure: function _NamespaceMigrationVisitor_beforePatch_closure() {
    },
    _NamespaceMigrationVisitor__addNamespaceSpan_closure: function _NamespaceMigrationVisitor__addNamespaceSpan_closure() {
    },
    StrictUnaryMigrator: function StrictUnaryMigrator(t0, t1, t2) {
      var _ = this;
      _.missingDependencies = t0;
      _._argResults = _._globalResults = _._runner = null;
      _._argParser = t1;
      _._subcommands = t2;
    },
    _UnaryMigrationVisitor: function _UnaryMigrationVisitor(t0, t1, t2, t3) {
      var _ = this;
      _._migrated = t0;
      _.migrateDependencies = t1;
      _.importCache = t2;
      _._missingDependencies = t3;
      _._currentUrl = _.__patches = null;
      _.__MigrationVisitor__importer_A = $;
    },
    Patch_applyAll(file, patches) {
      var buffer, t1, t2, t3, lastPatch, offset, _i, patch, t4, t5, t6, _null = null,
        sortedPatches = patches.toList$0(patches);
      A.mergeSort(sortedPatches, type$.Patch);
      buffer = new A.StringBuffer("");
      for (t1 = sortedPatches.length, t2 = file._decodedChars, t3 = t2.length, lastPatch = _null, offset = 0, _i = 0; _i < sortedPatches.length; sortedPatches.length === t1 || (0, A.throwConcurrentModificationError)(sortedPatches), ++_i) {
        patch = sortedPatches[_i];
        t4 = patch.selection;
        t5 = lastPatch == null;
        if (t4.$eq(0, t5 ? _null : lastPatch.selection)) {
          t6 = patch.replacement;
          t5 = t6 === (t5 ? _null : lastPatch.replacement) && t4._end - t4._file$_start > 0;
        } else
          t5 = false;
        if (t5)
          continue;
        t5 = t4.file;
        t6 = t4._file$_start;
        new A.FileLocation(t5, t6).FileLocation$_$2(t5, t6);
        if (t6 < offset)
          throw A.wrapException(A.ArgumentError$("Can't apply overlapping patches.", _null));
        new A.FileLocation(t5, t6).FileLocation$_$2(t5, t6);
        t6 = buffer._contents += A.String_String$fromCharCodes(new Uint32Array(t2.subarray(offset, A._checkValidRange(offset, t6, t3))), 0, _null);
        buffer._contents = t6 + patch.replacement;
        offset = t4._end;
        new A.FileLocation(t5, offset).FileLocation$_$2(t5, offset);
        lastPatch = patch;
      }
      t1 = buffer._contents += A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t2, offset, _null), 0, _null);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Patch: function Patch(t0, t1) {
      this.selection = t0;
      this.replacement = t1;
    },
    Renamer_Renamer(code, keys, sourceUrl, $T) {
      var t1, t2, t3, scanner, statements;
      for (t1 = A.LinkedHashMapKeyIterator$(keys, keys._modifications); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        t3 = A.RegExp_RegExp("^[a-z_-]*$", true);
        if (!t3._nativeRegExp.test(t2))
          throw A.wrapException(A.ArgumentError$('Invalid key "' + t2 + '". Must use only lowercase letters, underscores, and hyphens.', null));
      }
      scanner = A.StringScanner$(code, null, sourceUrl);
      statements = A._setArrayType([], $T._eval$1("JSArray<_Statement<0>>"));
      scanner.scan$1($.$get$_statementDelimiter());
      for (t1 = scanner.string.length; scanner._position !== t1;)
        statements.push(A.Renamer__readStatement(scanner, keys, $T));
      return new A.Renamer(statements, $T._eval$1("Renamer<0>"));
    },
    Renamer__readStatement(scanner, keys, $T) {
      var entry, statement, e, t1, t2, t3, t4, t5, exception,
        start = scanner._position,
        lastException = null;
      for (t1 = keys.get$entries(keys), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = type$.FormatException, t3 = A._instanceType(t1)._rest[1], t4 = scanner.string.length; t1.moveNext$0();) {
        t5 = t1.__internal$_current;
        entry = t5 == null ? t3._as(t5) : t5;
        try {
          statement = A.Renamer__tryKey(scanner, entry.get$key(), J.get$value$z(entry), $T);
          if (statement != null) {
            t5 = statement;
            return t5;
          }
        } catch (exception) {
          t5 = A.unwrapException(exception);
          if (t2._is(t5)) {
            e = t5;
            lastException = e;
            t5 = start;
            if ((t5 === 0 ? 1 / t5 < 0 : t5 < 0) || t5 > t4)
              A.throwExpression(A.ArgumentError$("Invalid position " + A.S(t5), null));
            scanner._position = t5;
            scanner._lastMatch = null;
          } else
            throw exception;
        }
      }
      if (lastException == null)
        scanner.error$1(0, "invalid key");
      throw A.wrapException(lastException);
    },
    Renamer__tryKey(scanner, key, keyFunction, $T) {
      var matcher;
      if (key.length !== 0 && !scanner.scan$1(key + " "))
        return null;
      matcher = A.Renamer__readMatcher(scanner);
      scanner.expect$1(" to ");
      return new A._Statement(keyFunction, matcher, A.Renamer__readOutput(scanner), $T._eval$1("_Statement<0>"));
    },
    Renamer__readMatcher(scanner) {
      var char, next, t1, t2,
        src = new A.StringBuffer("");
      for (; true;) {
        char = scanner.peekChar$0();
        if (char === 32)
          break;
        if (char === 59 || char === 10)
          scanner.error$1(0, "statement ended unexpectedly");
        char = scanner.readChar$0();
        if (char === 92) {
          next = scanner.readChar$0();
          t1 = next === 59 || next === 32;
          t2 = src._contents;
          if (t1)
            src._contents = t2 + A.Primitives_stringFromCharCode(next);
          else {
            t1 = t2 + A.Primitives_stringFromCharCode(92);
            src._contents = t1;
            src._contents = t1 + A.Primitives_stringFromCharCode(next);
          }
        } else
          src._contents += A.Primitives_stringFromCharCode(char);
      }
      return A.RegExp_RegExp("^" + src.toString$0(0) + "$", true);
    },
    Renamer__readOutput(scanner) {
      var t1, t2, char, next,
        components = A._setArrayType([], type$.JSArray__OutputComponent);
      for (t1 = type$.nullable_int, t2 = ""; true;) {
        char = scanner.peekChar$0();
        if (A.LinkedHashSet_LinkedHashSet$_literal([null, 32, 59, 10], t1).contains$1(0, char))
          break;
        char = scanner.readChar$0();
        if (char === 92) {
          next = scanner.readChar$0();
          if (next >= 48 && next <= 57) {
            if (t2.length !== 0)
              components.push(new A._Literal(t2.charCodeAt(0) == 0 ? t2 : t2));
            components.push(new A._Backreference(next - 48));
            t2 = "";
          } else
            t2 += A.Primitives_stringFromCharCode(next);
        } else
          t2 += A.Primitives_stringFromCharCode(char);
      }
      if (t2.length !== 0)
        components.push(new A._Literal(t2.charCodeAt(0) == 0 ? t2 : t2));
      if (scanner._position !== scanner.string.length)
        scanner.expect$2$name($.$get$_statementDelimiter(), "end of statement");
      return components;
    },
    Renamer: function Renamer(t0, t1) {
      this._statements = t0;
      this.$ti = t1;
    },
    _Statement: function _Statement(t0, t1, t2, t3) {
      var _ = this;
      _.key = t0;
      _.matcher = t1;
      _.output = t2;
      _.$ti = t3;
    },
    _Statement_rename_closure: function _Statement_rename_closure(t0) {
      this.match = t0;
    },
    _OutputComponent: function _OutputComponent() {
    },
    _Literal: function _Literal(t0) {
      this.text = t0;
    },
    _Backreference: function _Backreference(t0) {
      this.number = t0;
    },
    _loadVersion() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue;
      var $async$_loadVersion = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = "1.7.3 compiled with dart2js 2.19.2";
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_loadVersion, $async$completer);
    },
    MigratorRunner: function MigratorRunner(t0, t1, t2, t3) {
      var _ = this;
      _.executableName = t0;
      _.description = t1;
      _._commands = t2;
      _._argParser = t3;
    },
    MigratorRunner_execute_closure: function MigratorRunner_execute_closure(t0) {
      this._box_0 = t0;
    },
    MigratorRunner_execute_closure0: function MigratorRunner_execute_closure0(t0) {
      this._box_0 = t0;
    },
    BidirectionalMap: function BidirectionalMap(t0, t1, t2) {
      this._valueForKey = t0;
      this._keysForValue = t1;
      this.$ti = t2;
    },
    BidirectionalMap_operator$indexSet_closure: function BidirectionalMap_operator$indexSet_closure(t0) {
      this.$this = t0;
    },
    NodeModulesImporter: function NodeModulesImporter(t0) {
      this._fsImporters = t0;
    },
    UnmodifiableBidirectionalMapView: function UnmodifiableBidirectionalMapView(t0, t1, t2) {
      this._unmodifiable_bidirectional_map_view$_map = t0;
      this._map = t1;
      this.$ti = t2;
    },
    SourceFile$fromString(text, url) {
      var t1 = new A.CodeUnits(text),
        t2 = A._setArrayType([0], type$.JSArray_int),
        t3 = typeof url == "string" ? A.Uri_parse(url) : type$.nullable_Uri._as(url);
      t2 = new A.SourceFile(t3, t2, new Uint32Array(A._ensureNativeList(t1.toList$0(t1))));
      t2.SourceFile$decoded$2$url(t1, url);
      return t2;
    },
    FileLocation$_(file, offset) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        A.throwExpression(A.RangeError$("Offset " + offset + string$.x20must_ + file.get$length(file) + "."));
      return new A.FileLocation(file, offset);
    },
    _FileSpan$(file, _start, _end) {
      if (_end < _start)
        A.throwExpression(A.ArgumentError$("End " + _end + " must come after start " + _start + ".", null));
      else if (_end > file._decodedChars.length)
        A.throwExpression(A.RangeError$("End " + _end + string$.x20must_ + file.get$length(file) + "."));
      else if (_start < 0)
        A.throwExpression(A.RangeError$("Start may not be negative, was " + _start + "."));
      return new A._FileSpan(file, _start, _end);
    },
    FileSpanExtension_subspan(_this, start, end) {
      var startOffset,
        t1 = _this._end,
        t2 = _this._file$_start,
        t3 = t1 - t2;
      A.RangeError_checkValidRange(start, end, t3);
      if (start === 0)
        t3 = end == null || end === t3;
      else
        t3 = false;
      if (t3)
        return _this;
      t3 = _this.file;
      startOffset = A.FileLocation$_(t3, t2).offset;
      t1 = end == null ? A.FileLocation$_(t3, t1).offset : startOffset + end;
      return t3.span$2(startOffset + start, t1);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._end = t2;
    },
    Highlighter$(span, color) {
      var t1 = A.Highlighter__collateLines(A._setArrayType([A._Highlight$(span, null, true)], type$.JSArray__Highlight)),
        t2 = new A.Highlighter_closure(color).call$0(),
        t3 = B.JSInt_methods.toString$0(B.JSArray_methods.get$last(t1).number + 1),
        t4 = A.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = A._arrayInstanceType(t1);
      return new A.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new A.MappedListIterable(t1, new A.Highlighter$__closure(), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT), !A.isAllTheSame(new A.MappedListIterable(t1, new A.Highlighter$__closure0(), t5._eval$1("MappedListIterable<1,Object?>"))), new A.StringBuffer(""));
    },
    Highlighter$multiple(primarySpan, primaryLabel, secondarySpans, color, primaryColor, secondaryColor) {
      var t2, t3, t4, t5, t6,
        t1 = A._setArrayType([A._Highlight$(primarySpan, primaryLabel, true)], type$.JSArray__Highlight);
      for (t2 = secondarySpans.get$entries(secondarySpans), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current();
        t1.push(A._Highlight$(t3.get$key(), t3.get$value(t3), false));
      }
      t1 = A.Highlighter__collateLines(t1);
      if (color)
        t2 = "\x1b[31m";
      else
        t2 = null;
      if (color)
        t3 = "\x1b[34m";
      else
        t3 = null;
      t4 = B.JSInt_methods.toString$0(B.JSArray_methods.get$last(t1).number + 1);
      t5 = A.Highlighter__contiguous(t1) ? 0 : 3;
      t6 = A._arrayInstanceType(t1);
      return new A.Highlighter(t1, t2, t3, 1 + Math.max(t4.length, t5), new A.MappedListIterable(t1, new A.Highlighter$__closure(), t6._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT), !A.isAllTheSame(new A.MappedListIterable(t1, new A.Highlighter$__closure0(), t6._eval$1("MappedListIterable<1,Object?>"))), new A.StringBuffer(""));
    },
    Highlighter__contiguous(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && J.$eq$(thisLine.url, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines(highlights) {
      var t1, t2, t3,
        highlightsByUrl = A.groupBy(highlights, new A.Highlighter__collateLines_closure(), type$._Highlight, type$.Object);
      for (t1 = highlightsByUrl.get$values(highlightsByUrl), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        J.sort$1$ax(t3, new A.Highlighter__collateLines_closure0());
      }
      t1 = highlightsByUrl.get$entries(highlightsByUrl);
      t2 = A._instanceType(t1)._eval$1("ExpandIterable<Iterable.E,_Line>");
      return A.List_List$of(new A.ExpandIterable(t1, new A.Highlighter__collateLines_closure1(), t2), true, t2._eval$1("Iterable.E"));
    },
    _Highlight$(span, label, primary) {
      var t2,
        t1 = new A._Highlight_closure(span).call$0();
      if (label == null)
        t2 = null;
      else
        t2 = A.stringReplaceAllUnchecked(label, "\r\n", "\n");
      return new A._Highlight(t1, primary, t2);
    },
    _Highlight__normalizeNewlines(span) {
      var endOffset, t1, i, t2, t3, t4,
        text = span.get$text();
      if (!B.JSString_methods.contains$1(text, "\r\n"))
        return span;
      endOffset = span.get$end(span).get$offset();
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (B.JSString_methods._codeUnitAt$1(text, i) === 13 && B.JSString_methods._codeUnitAt$1(text, i + 1) === 10)
          --endOffset;
      t1 = span.get$start(span);
      t2 = span.get$sourceUrl(span);
      t3 = span.get$end(span).get$line();
      t2 = A.SourceLocation$(endOffset, span.get$end(span).get$column(), t3, t2);
      t3 = A.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context(span);
      return A.SourceSpanWithContext$(t1, t2, t3, A.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline(span) {
      var context, text, start, end, t1, t2, t3;
      if (!B.JSString_methods.endsWith$1(span.get$context(span), "\n"))
        return span;
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n\n"))
        return span;
      context = B.JSString_methods.substring$2(span.get$context(span), 0, span.get$context(span).length - 1);
      text = span.get$text();
      start = span.get$start(span);
      end = span.get$end(span);
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n")) {
        t1 = A.findLineStart(span.get$context(span), span.get$text(), span.get$start(span).get$column());
        t1.toString;
        t1 = t1 + span.get$start(span).get$column() + span.get$length(span) === span.get$context(span).length;
      } else
        t1 = false;
      if (t1) {
        text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end(span).get$offset();
          t2 = span.get$sourceUrl(span);
          t3 = span.get$end(span).get$line();
          end = A.SourceLocation$(t1 - 1, A._Highlight__lastLineLength(context), t3 - 1, t2);
          start = span.get$start(span).get$offset() === span.get$end(span).get$offset() ? end : span.get$start(span);
        }
      }
      return A.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end(span).get$column() !== 0)
        return span;
      if (span.get$end(span).get$line() === span.get$start(span).get$line())
        return span;
      text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
      t1 = span.get$start(span);
      t2 = span.get$end(span).get$offset();
      t3 = span.get$sourceUrl(span);
      t4 = span.get$end(span).get$line();
      t3 = A.SourceLocation$(t2 - 1, text.length - B.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return A.SourceSpanWithContext$(t1, t3, text, B.JSString_methods.endsWith$1(span.get$context(span), "\n") ? B.JSString_methods.substring$2(span.get$context(span), 0, span.get$context(span).length - 1) : span.get$context(span));
    },
    _Highlight__lastLineLength(text) {
      var t1 = text.length;
      if (t1 === 0)
        return 0;
      else if (B.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
        return t1 === 1 ? 0 : t1 - B.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
      else
        return t1 - B.JSString_methods.lastIndexOf$1(text, "\n") - 1;
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._highlighter$_buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeLabel_closure: function Highlighter__writeLabel_closure(t0, t1) {
      this.$this = t0;
      this.lines = t1;
    },
    Highlighter__writeLabel_closure0: function Highlighter__writeLabel_closure0(t0, t1) {
      this.$this = t0;
      this.text = t1;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1, t2) {
      this.span = t0;
      this.isPrimary = t1;
      this.label = t2;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    },
    SourceLocation$(offset, column, line, sourceUrl) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (line < 0)
        A.throwExpression(A.RangeError$("Line may not be negative, was " + line + "."));
      else if (column < 0)
        A.throwExpression(A.RangeError$("Column may not be negative, was " + column + "."));
      return new A.SourceLocation(sourceUrl, offset, line, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    SourceSpanBase: function SourceSpanBase() {
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    MultiSourceSpanException: function MultiSourceSpanException(t0, t1, t2, t3) {
      var _ = this;
      _.primaryLabel = t0;
      _.secondarySpans = t1;
      _._span_exception$_message = t2;
      _._span = t3;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    SourceSpanWithContext$(start, end, text, _context) {
      var t1 = new A.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!B.JSString_methods.contains$1(_context, text))
        A.throwExpression(A.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".', null));
      if (A.findLineStart(_context, text, start.get$column()) == null)
        A.throwExpression(A.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".', null));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._span_with_context$_context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    Frame: function Frame(t0, t1, t2, t3) {
      var _ = this;
      _.uri = t0;
      _.line = t1;
      _.column = t2;
      _.member = t3;
    },
    Trace: function Trace(t0) {
      this.frames = t0;
    },
    Trace_toString_closure0: function Trace_toString_closure0() {
    },
    Trace_toString_closure: function Trace_toString_closure(t0) {
      this.longest = t0;
    },
    StringScannerException$(message, span, source) {
      return new A.StringScannerException(source, message, span);
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    SpanScanner$(string, sourceUrl) {
      var t2,
        t1 = A.SourceFile$fromString(string, sourceUrl);
      if (sourceUrl == null)
        t2 = null;
      else
        t2 = typeof sourceUrl == "string" ? A.Uri_parse(sourceUrl) : type$.Uri._as(sourceUrl);
      return new A.SpanScanner(t1, t2, string);
    },
    SpanScanner: function SpanScanner(t0, t1, t2) {
      var _ = this;
      _._sourceFile = t0;
      _.sourceUrl = t1;
      _.string = t2;
      _._position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    _SpanScannerState: function _SpanScannerState(t0, t1) {
      this._span_scanner$_scanner = t0;
      this.position = t1;
    },
    StringScanner$(string, position, sourceUrl) {
      var t1;
      if (sourceUrl == null)
        t1 = null;
      else
        t1 = typeof sourceUrl == "string" ? A.Uri_parse(sourceUrl) : type$.Uri._as(sourceUrl);
      return new A.StringScanner(t1, string);
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    AsciiGlyphSet: function AsciiGlyphSet() {
    },
    UnicodeGlyphSet: function UnicodeGlyphSet() {
    },
    Tuple2: function Tuple2(t0, t1, t2) {
      this.item1 = t0;
      this.item2 = t1;
      this.$ti = t2;
    },
    Tuple3: function Tuple3(t0, t1, t2, t3) {
      var _ = this;
      _.item1 = t0;
      _.item2 = t1;
      _.item3 = t2;
      _.$ti = t3;
    },
    Tuple4: function Tuple4(t0, t1, t2, t3, t4) {
      var _ = this;
      _.item1 = t0;
      _.item2 = t1;
      _.item3 = t2;
      _.item4 = t3;
      _.$ti = t4;
    },
    _translateReturnValue(val) {
      if (type$.Future_dynamic._is(val))
        return A.futureToPromise(val, type$.dynamic);
      else
        return val;
    },
    main() {
      new Uint8Array(0);
      J.set$cli_pkg_main_0_$x(self.exports, A._wrapMain(A.sass_migrator__main$closure()));
    },
    _wrapMain(main) {
      if (type$.dynamic_Function._is(main))
        return A.allowInterop(new A._wrapMain_closure(main));
      else
        return A.allowInterop(new A._wrapMain_closure0(main));
    },
    _Exports: function _Exports() {
    },
    _wrapMain_closure: function _wrapMain_closure(t0) {
      this.main = t0;
    },
    _wrapMain_closure0: function _wrapMain_closure0(t0) {
      this.main = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      return A.Primitives_applyFunction(callback, $arguments, null);
    },
    allowInterop(f) {
      if (typeof f == "function")
        return f;
      else
        return A._convertDartFunctionFast(f);
    },
    wrapText(text, hangingIndent, $length) {
      return text;
    },
    wrapTextAsLines(text, $length, start) {
      var t1 = A._setArrayType(text.split("\n"), type$.JSArray_String);
      return t1;
    },
    insertionSort(elements, compare, end, start) {
      var pos, element, max, min, mid;
      for (pos = start + 1; pos < end;) {
        element = elements[pos];
        for (max = pos, min = start; min < max;) {
          mid = min + B.JSInt_methods._shrOtherPositive$1(max - min, 1);
          if (compare.call$2(element, elements[mid]) < 0)
            max = mid;
          else
            min = mid + 1;
        }
        ++pos;
        B.JSArray_methods.setRange$4(elements, min + 1, pos, elements, min);
        elements[min] = element;
      }
    },
    mergeSort(elements, $E) {
      var firstLength, secondLength, scratchSpace,
        end = A.RangeError_checkValidRange(0, null, elements.length),
        $length = end - 0;
      if ($length < 2)
        return;
      if ($length < 32) {
        A.insertionSort(elements, A.utils__defaultCompare$closure(), end, 0);
        return;
      }
      firstLength = B.JSInt_methods._shrOtherPositive$1($length, 1);
      secondLength = end - firstLength;
      scratchSpace = A.List_List$filled(secondLength, elements[0], false, $E);
      A._mergeSort(elements, A.instantiate1(A.utils__identity$closure(), $E), A.utils__defaultCompare$closure(), firstLength, end, scratchSpace, 0);
      A._mergeSort(elements, A.instantiate1(A.utils__identity$closure(), $E), A.utils__defaultCompare$closure(), 0, firstLength, elements, secondLength);
      A._merge(A.instantiate1(A.utils__identity$closure(), $E), A.utils__defaultCompare$closure(), elements, secondLength, end, scratchSpace, 0, secondLength, elements, 0);
    },
    _movingInsertionSort(list, keyOf, compare, start, end, target, targetOffset) {
      var i, element, elementKey, max, max0, min, mid,
        $length = end - start;
      if ($length === 0)
        return;
      target[targetOffset] = list[start];
      for (i = 1; i < $length; ++i) {
        element = list[start + i];
        elementKey = keyOf.call$1(element);
        max = targetOffset + i;
        for (max0 = max, min = targetOffset; min < max0;) {
          mid = min + B.JSInt_methods._shrOtherPositive$1(max0 - min, 1);
          if (compare.call$2(elementKey, keyOf.call$1(target[mid])) < 0)
            max0 = mid;
          else
            min = mid + 1;
        }
        B.JSArray_methods.setRange$4(target, min + 1, max + 1, target, min);
        target[min] = element;
      }
    },
    _mergeSort(elements, keyOf, compare, start, end, target, targetOffset) {
      var middle, firstLength, targetMiddle,
        $length = end - start;
      if ($length < 32) {
        A._movingInsertionSort(elements, keyOf, compare, start, end, target, targetOffset);
        return;
      }
      middle = start + B.JSInt_methods._shrOtherPositive$1($length, 1);
      firstLength = middle - start;
      targetMiddle = targetOffset + firstLength;
      A._mergeSort(elements, keyOf, compare, middle, end, target, targetMiddle);
      A._mergeSort(elements, keyOf, compare, start, middle, elements, middle);
      A._merge(keyOf, compare, elements, middle, middle + firstLength, target, targetMiddle, targetMiddle + (end - middle), target, targetOffset);
    },
    _merge(keyOf, compare, firstList, firstStart, firstEnd, secondList, secondStart, secondEnd, target, targetOffset) {
      var targetOffset0, cursor10, cursor20,
        cursor1 = firstStart + 1,
        firstElement = firstList[firstStart],
        firstKey = keyOf.call$1(firstElement),
        cursor2 = secondStart + 1,
        secondElement = secondList[secondStart],
        secondKey = keyOf.call$1(secondElement);
      for (; true; targetOffset = targetOffset0) {
        targetOffset0 = targetOffset + 1;
        if (compare.call$2(firstKey, secondKey) <= 0) {
          target[targetOffset] = firstElement;
          if (cursor1 === firstEnd) {
            targetOffset = targetOffset0;
            break;
          }
          cursor10 = cursor1 + 1;
          firstElement = firstList[cursor1];
          firstKey = keyOf.call$1(firstElement);
        } else {
          target[targetOffset] = secondElement;
          if (cursor2 !== secondEnd) {
            cursor20 = cursor2 + 1;
            secondElement = secondList[cursor2];
            secondKey = keyOf.call$1(secondElement);
            cursor2 = cursor20;
            continue;
          }
          targetOffset = targetOffset0 + 1;
          target[targetOffset0] = firstElement;
          B.JSArray_methods.setRange$4(target, targetOffset, targetOffset + (firstEnd - cursor1), firstList, cursor1);
          return;
        }
        cursor1 = cursor10;
      }
      targetOffset0 = targetOffset + 1;
      target[targetOffset] = secondElement;
      B.JSArray_methods.setRange$4(target, targetOffset0, targetOffset0 + (secondEnd - cursor2), secondList, cursor2);
    },
    groupBy(values, key, $S, $T) {
      var t1, t2, _i, element, t3, t4,
        map = A.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (t1 = values.length, t2 = $S._eval$1("JSArray<0>"), _i = 0; _i < values.length; values.length === t1 || (0, A.throwConcurrentModificationError)(values), ++_i) {
        element = values[_i];
        t3 = key.call$1(element);
        t4 = map.$index(0, t3);
        if (t4 == null) {
          t4 = A._setArrayType([], t2);
          map.$indexSet(0, t3, t4);
          t3 = t4;
        } else
          t3 = t4;
        J.add$1$ax(t3, element);
      }
      return map;
    },
    minBy(values, orderBy) {
      var t1, minValue, minOrderBy, element, elementOrderBy;
      for (t1 = J.get$iterator$ax(values), minValue = null, minOrderBy = null; t1.moveNext$0();) {
        element = t1.get$current();
        elementOrderBy = orderBy.call$1(element);
        if (minOrderBy == null || A.defaultCompare(elementOrderBy, minOrderBy) < 0) {
          minOrderBy = elementOrderBy;
          minValue = element;
        }
      }
      return minValue;
    },
    maxBy(values, orderBy) {
      var t1, t2, maxValue, maxOrderBy, element, elementOrderBy;
      for (t1 = J.get$iterator$ax(values.__internal$_iterable), t2 = new A.WhereIterator(t1, values._f), maxValue = null, maxOrderBy = null; t2.moveNext$0();) {
        element = t1.get$current();
        elementOrderBy = orderBy.call$1(element);
        if (maxOrderBy == null || A.defaultCompare(elementOrderBy, maxOrderBy) > 0) {
          maxOrderBy = elementOrderBy;
          maxValue = element;
        }
      }
      return maxValue;
    },
    IterableExtension_get_firstOrNull(_this) {
      var t1,
        iterator = new J.ArrayIterator(_this, _this.length);
      if (iterator.moveNext$0()) {
        t1 = iterator._current;
        return t1 == null ? A._instanceType(iterator)._precomputed1._as(t1) : t1;
      }
      return null;
    },
    IterableNullableExtension_whereNotNull(_this, $T) {
      return A.IterableNullableExtension_whereNotNull$body(_this, $T, $T);
    },
    IterableNullableExtension_whereNotNull$body($async$_this, $async$$T, $async$type) {
      return A._makeSyncStarIterable(function() {
        var _this = $async$_this,
          $T = $async$$T;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, element;
        return function $async$IterableNullableExtension_whereNotNull($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = new A.MappedIterator(J.get$iterator$ax(_this.__internal$_iterable), _this._f), t2 = A._instanceType(t1)._rest[1];
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                element = t1.__internal$_current;
                if (element == null)
                  element = t2._as(element);
                $async$goto = element != null ? 4 : 5;
                break;
              case 4:
                // then
                $async$goto = 6;
                return element;
              case 6:
                // after yield
              case 5:
                // join
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    ListExtensions_mapIndexed(_this, convert, $E, $R) {
      return A.ListExtensions_mapIndexed$body(_this, convert, $E, $R, $R);
    },
    ListExtensions_mapIndexed$body($async$_this, $async$convert, $async$$E, $async$$R, $async$type) {
      return A._makeSyncStarIterable(function() {
        var _this = $async$_this,
          convert = $async$convert,
          $E = $async$$E,
          $R = $async$$R;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, index;
        return function $async$ListExtensions_mapIndexed($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = _this.length, index = 0;
              case 2:
                // for condition
                if (!(index < t1)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return convert.call$2(index, _this[index]);
              case 5:
                // after yield
              case 3:
                // for update
                ++index;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    defaultCompare(value1, value2) {
      return J.compareTo$1$ns(type$.Comparable_nullable_Object._as(value1), value2);
    },
    identity(value) {
      return value;
    },
    style() {
      return $.$get$context().style;
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() == $.$get$Style_url())
        t1 = $._current = J.resolve$1$x(uri, ".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    absolute(part1) {
      var _null = null;
      return $.$get$context().absolute$15(part1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    join(part1, part2, part3) {
      var _null = null;
      return $.$get$context().join$16(0, part1, part2, part3, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    prettyUri(uri) {
      return $.$get$context().prettyUri$1(uri);
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter(path, index) {
      var t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!A.isAlphabetic(B.JSString_methods.codeUnitAt$1(path, index)))
        return false;
      if (B.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
        return false;
      if (t1 === t2)
        return true;
      return B.JSString_methods.codeUnitAt$1(path, t2) === 47;
    },
    EvaluationContext_current() {
      $.Zone__current.$index(0, B.Symbol__evaluationContext);
      throw A.wrapException(A.StateError$("No Sass stylesheet is currently being evaluated."));
    },
    warn(message, deprecation) {
      return A.EvaluationContext_current().warn$2$deprecation(0, message, deprecation);
    },
    isWhitespace(character) {
      return character === 32 || character === 9 || character === 10 || character === 13 || character === 12;
    },
    isNewline(character) {
      return character === 10 || character === 13 || character === 12;
    },
    isAlphabetic0(character) {
      var t1;
      if (!(character >= 97 && character <= 122))
        t1 = character >= 65 && character <= 90;
      else
        t1 = true;
      return t1;
    },
    isDigit(character) {
      return character != null && character >= 48 && character <= 57;
    },
    isHex(character) {
      if (character == null)
        return false;
      if (A.isDigit(character))
        return true;
      if (character >= 97 && character <= 102)
        return true;
      if (character >= 65 && character <= 70)
        return true;
      return false;
    },
    asHex(character) {
      if (character <= 57)
        return character - 48;
      if (character <= 70)
        return 10 + character - 65;
      return 10 + character - 97;
    },
    hexCharFor(number) {
      return number < 10 ? 48 + number : 87 + number;
    },
    opposite(character) {
      switch (character) {
        case 40:
          return 41;
        case 123:
          return 125;
        case 91:
          return 93;
        default:
          throw A.wrapException(A.ArgumentError$('"' + A.String_String$fromCharCode(character) + "\" isn't a brace-like character.", null));
      }
    },
    characterEqualsIgnoreCase(character1, character2) {
      var upperCase1;
      if (character1 === character2)
        return true;
      if ((character1 ^ character2) >>> 0 !== 32)
        return false;
      upperCase1 = (character1 & 4294967263) >>> 0;
      return upperCase1 >= 65 && upperCase1 <= 90;
    },
    NullableExtension_andThen(_this, fn) {
      return _this == null ? null : fn.call$1(_this);
    },
    fuzzyHashCode(number) {
      return number == 1 / 0 || number == -1 / 0 || isNaN(number) ? B.JSNumber_methods.get$hashCode(number) : B.JSInt_methods.get$hashCode(B.JSNumber_methods.round$0(number * $.$get$_inverseEpsilon()));
    },
    fuzzyLessThan(number1, number2) {
      return number1 < number2 && !(Math.abs(number1 - number2) < $.$get$epsilon());
    },
    fuzzyGreaterThan(number1, number2) {
      return number1 > number2 && !(Math.abs(number1 - number2) < $.$get$epsilon());
    },
    fuzzyIsInt(number) {
      if (number == 1 / 0 || number == -1 / 0 || isNaN(number))
        return false;
      if (A._isInt(number))
        return true;
      return Math.abs(B.JSNumber_methods.$mod(Math.abs(number - 0.5), 1) - 0.5) < $.$get$epsilon();
    },
    fuzzyRound(number) {
      var t1;
      if (number > 0) {
        t1 = B.JSNumber_methods.$mod(number, 1);
        return t1 < 0.5 && !(Math.abs(t1 - 0.5) < $.$get$epsilon()) ? B.JSNumber_methods.floor$0(number) : B.JSNumber_methods.ceil$0(number);
      } else {
        t1 = B.JSNumber_methods.$mod(number, 1);
        return t1 < 0.5 || Math.abs(t1 - 0.5) < $.$get$epsilon() ? B.JSNumber_methods.floor$0(number) : B.JSNumber_methods.ceil$0(number);
      }
    },
    fuzzyCheckRange(number, min, max) {
      var t1 = $.$get$epsilon();
      if (Math.abs(number - min) < t1)
        return min;
      if (Math.abs(number - max) < t1)
        return max;
      if (number > min && number < max)
        return number;
      return null;
    },
    fuzzyAssertRange(number, min, max, $name) {
      var result = A.fuzzyCheckRange(number, min, max);
      if (result != null)
        return result;
      throw A.wrapException(A.RangeError$range(number, min, max, $name, "must be between " + min + " and " + max));
    },
    SpanExtensions_trimLeft(_this) {
      var t5,
        t1 = _this._file$_start,
        t2 = _this._end,
        t3 = _this.file._decodedChars,
        t4 = t3.length,
        start = 0;
      while (true) {
        t5 = B.JSString_methods._codeUnitAt$1(A.String_String$fromCharCodes(new Uint32Array(t3.subarray(t1, A._checkValidRange(t1, t2, t4))), 0, null), start);
        if (!(t5 === 32 || t5 === 9 || t5 === 10 || t5 === 13 || t5 === 12))
          break;
        ++start;
      }
      return A.FileSpanExtension_subspan(_this, start, null);
    },
    SpanExtensions_initialIdentifier(_this, includeLeading) {
      var i,
        scanner = A.StringScanner$(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(_this.file._decodedChars, _this._file$_start, _this._end), 0, null), null, null);
      for (i = 0; i < includeLeading; ++i)
        scanner.readChar$0();
      A._scanIdentifier(scanner);
      return A.FileSpanExtension_subspan(_this, 0, scanner._position);
    },
    SpanExtensions_withoutInitialIdentifier(_this) {
      var _null = null,
        scanner = A.StringScanner$(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(_this.file._decodedChars, _this._file$_start, _this._end), 0, _null), _null, _null);
      A._scanIdentifier(scanner);
      return A.FileSpanExtension_subspan(_this, scanner._position, _null);
    },
    SpanExtensions_withoutInitialAtRule(_this) {
      var _null = null,
        scanner = A.StringScanner$(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(_this.file._decodedChars, _this._file$_start, _this._end), 0, _null), _null, _null);
      scanner.expectChar$1(64);
      A._scanIdentifier(scanner);
      return A.SpanExtensions_trimLeft(A.FileSpanExtension_subspan(_this, scanner._position, _null));
    },
    _scanIdentifier(scanner) {
      var t1, t2, t3;
      for (t1 = scanner.string.length; scanner._position !== t1;) {
        t2 = scanner.peekChar$0();
        t2.toString;
        if (t2 === 92)
          A.consumeEscapedCharacter(scanner);
        else {
          if (t2 !== 95) {
            if (!(t2 >= 97 && t2 <= 122))
              t3 = t2 >= 65 && t2 <= 90;
            else
              t3 = true;
            t3 = t3 || t2 >= 128;
          } else
            t3 = true;
          if (!t3)
            t2 = t2 >= 48 && t2 <= 57 || t2 === 45;
          else
            t2 = true;
          if (t2)
            scanner.readChar$0();
          else
            break;
        }
      }
    },
    ExtendSpan_extendThroughWhitespace(_this) {
      var t2, newEnd, t3,
        t1 = _this.file,
        text = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, 0, null), 0, null),
        newStart = A.FileLocation$_(t1, _this._file$_start).offset - 1;
      for (; newStart >= 0; --newStart) {
        t2 = B.JSString_methods.codeUnitAt$1(text, newStart);
        if (!(t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12))
          break;
      }
      newEnd = A.FileLocation$_(t1, _this._end).offset;
      for (t2 = text.length; newEnd < t2; ++newEnd) {
        t3 = B.JSString_methods.codeUnitAt$1(text, newEnd);
        if (!(t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12))
          break;
      }
      return t1.span$2(newStart + 1, newEnd);
    },
    ExtendSpan_extendIfMatches(_this, pattern) {
      var t1 = _this.file,
        t2 = _this._end,
        match = J.matchAsPrefix$1$s(pattern, A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, A.FileLocation$_(t1, t2).offset, null), 0, null));
      if (match == null)
        return _this;
      return t1.span$2(A.FileLocation$_(t1, _this._file$_start).offset, A.FileLocation$_(t1, t2).offset + match.get$end(match));
    },
    ExtendSpan_matchesBefore(_this, text) {
      var t1 = _this.file,
        t2 = _this._file$_start,
        t3 = text.length;
      if (A.FileLocation$_(t1, t2).offset - t3 < 0)
        return false;
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, A.FileLocation$_(t1, t2).offset - t3, A.FileLocation$_(t1, t2).offset), 0, null) === text;
    },
    NullableExtension_andThen0(_this, fn) {
      return _this == null ? null : fn.call$1(_this);
    },
    namespaceForPath(path) {
      var basename = B.JSArray_methods.get$first(J.split$1$s(B.JSArray_methods.get$last(path.split("/")), "."));
      return B.JSString_methods.startsWith$1(basename, "_") ? B.JSString_methods.substring$1(basename, 1) : basename;
    },
    afterImport($import, shouldHaveSemicolon) {
      var t2, textAfter, t3, inLineComment, inBlockComment, i, char, t4, next,
        t1 = $import.span,
        loc = A.FileLocation$_(t1.file, t1._end);
      t1 = loc.file;
      t2 = loc.offset;
      textAfter = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t2, null), 0, null);
      for (t3 = textAfter.length, inLineComment = false, inBlockComment = false, i = 0; i < t3; ++i) {
        char = B.JSString_methods._codeUnitAt$1(textAfter, i);
        if (inBlockComment)
          if (char === 42 && B.JSString_methods._codeUnitAt$1(textAfter, i + 1) === 47) {
            ++i;
            inBlockComment = false;
          } else
            inBlockComment = true;
        else {
          t4 = char === 10;
          if (t4 && !shouldHaveSemicolon) {
            ++i;
            break;
          } else if (inLineComment)
            continue;
          else if (char === 47) {
            next = B.JSString_methods._codeUnitAt$1(textAfter, i + 1);
            if (next === 47) {
              inLineComment = true;
              inBlockComment = false;
            } else {
              if (next !== 42)
                break;
              inLineComment = false;
              inBlockComment = true;
            }
          } else {
            if (shouldHaveSemicolon && char === 59)
              shouldHaveSemicolon = false;
            else if (!(char === 32 || char === 9 || t4 || char === 13 || char === 12))
              break;
            inLineComment = false;
            inBlockComment = false;
          }
        }
      }
      return A.FileLocation$_(t1, t2 + i);
    },
    nameSpan(node) {
      var span;
      if (type$.SassDeclaration._is(node))
        span = node.get$nameSpan();
      else
        span = type$.SassReference._is(node) ? node.get$nameSpan() : A.throwExpression(A.UnsupportedError$(node.toString$0(0) + " of type " + A.getRuntimeType(node).toString$0(0) + " doesn't have a nameSpan"));
      return node instanceof A.VariableDeclaration || node instanceof A.VariableExpression ? A.FileSpanExtension_subspan(span, 1, null) : span;
    },
    emitWarning(message, context) {
      var t1;
      if (context == null)
        J.write$1$x(J.get$stderr$x(self.process), "WARNING: " + message + "\n");
      else {
        t1 = context.message$1(0, message);
        J.write$1$x(J.get$stderr$x(self.process), "WARNING on " + t1 + "\n");
      }
    },
    getOnlyArgument(invocation) {
      var t3,
        t1 = invocation.positional,
        t2 = t1.length;
      if (t2 === 0) {
        t3 = invocation.named;
        t3 = t3.get$length(t3) === 1;
      } else
        t3 = false;
      if (t3) {
        t1 = invocation.named;
        t1 = t1.get$values(t1);
        return t1.get$first(t1);
      } else {
        if (t2 === 1) {
          t2 = invocation.named;
          t2 = t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          return B.JSArray_methods.get$first(t1);
        else
          return null;
      }
    },
    getStaticNameForGetFunctionCall(node) {
      var t1, nameArgument, t2;
      if (A.stringReplaceAllUnchecked(node.originalName, "_", "-") !== "get-function")
        return null;
      t1 = node.$arguments;
      nameArgument = t1.named.$index(0, "name");
      if (nameArgument == null)
        nameArgument = B.JSArray_methods.get$first(t1.positional);
      if (!(nameArgument instanceof A.StringExpression) || nameArgument.text.get$asPlain() == null)
        return null;
      t1 = nameArgument.hasQuotes;
      t2 = nameArgument.text.span;
      return t1 ? A.FileSpanExtension_subspan(t2, 1, t2._end - t2._file$_start - 1) : t2;
    },
    getStaticModuleForGetFunctionCall(node) {
      var t1, moduleArg, t2;
      if (A.stringReplaceAllUnchecked(node.originalName, "_", "-") !== "get-function")
        return null;
      t1 = node.$arguments;
      moduleArg = t1.named.$index(0, "module");
      if (moduleArg == null && t1.positional.length > 2)
        moduleArg = t1.positional[2];
      if (!(moduleArg instanceof A.StringExpression) || moduleArg.text.get$asPlain() == null)
        return null;
      t1 = moduleArg.hasQuotes;
      t2 = moduleArg.text.span;
      return t1 ? A.FileSpanExtension_subspan(t2, 1, t2._end - t2._file$_start - 2) : t2;
    },
    getImportOnlyUrl(url) {
      var filename = B.JSArray_methods.get$last(url.get$pathSegments()),
        extension = B.JSArray_methods.get$last(filename.split("."));
      return url.resolve$1(0, B.JSString_methods.substring$2(filename, 0, filename.length - extension.length - 1) + ".import." + extension);
    },
    partitionOnType(iterable, $E, $F, $G) {
      var t1, _i, element,
        fs = A._setArrayType([], $F._eval$1("JSArray<0>")),
        gs = A._setArrayType([], $G._eval$1("JSArray<0>"));
      for (t1 = iterable.length, _i = 0; _i < t1; ++_i) {
        element = iterable[_i];
        if ($F._is(element))
          fs.push(element);
        else
          gs.push($G._as(element));
      }
      return new A.Tuple2(fs, gs, $F._eval$1("@<List<0>>")._bind$1($G._eval$1("List<0>"))._eval$1("Tuple2<1,2>"));
    },
    isAllTheSame(iter) {
      var firstValue, t1, t2, value;
      if (iter.get$length(iter) === 0)
        return true;
      firstValue = iter.get$first(iter);
      for (t1 = A.SubListIterable$(iter, 1, null, iter.$ti._eval$1("ListIterable.E")), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        value = t1.__internal$_current;
        if (!J.$eq$(value == null ? t2._as(value) : value, firstValue))
          return false;
      }
      return true;
    },
    replaceFirstNull(list, element) {
      var index = B.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no null elements.", null));
      list[index] = element;
    },
    replaceWithNull(list, element) {
      var index = B.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no elements matching " + element.toString$0(0) + ".", null));
      list[index] = null;
    },
    countCodeUnits(string, codeUnit) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(string), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1, count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === codeUnit)
          ++count;
      }
      return count;
    },
    findLineStart(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = B.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = B.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : B.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = B.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    },
    validateErrorArgs(string, match, position, $length) {
      var t2,
        t1 = position != null;
      if (t1)
        if (position < 0)
          throw A.wrapException(A.RangeError$("position must be greater than or equal to 0."));
        else if (position > string.length)
          throw A.wrapException(A.RangeError$("position must be less than or equal to the string length."));
      t2 = $length != null;
      if (t2 && $length < 0)
        throw A.wrapException(A.RangeError$("length must be greater than or equal to 0."));
      if (t1 && t2 && position + $length > string.length)
        throw A.wrapException(A.RangeError$("position plus length must not go beyond the end of the string."));
    },
    main0(args) {
      var t1, t2, t3, t4, t5, t6, t7, _null = null,
        _s13_ = "sass-migrator",
        _s42_ = "Migrates stylesheets to new Sass versions.";
      args = J.skip$1$ax(J.get$argv$x(self.process), 2);
      t1 = type$.String;
      t2 = type$.Command_Map_Uri_String;
      t3 = A.ArgParser_ArgParser(_null);
      t4 = new A.MigratorRunner(_s13_, _s42_, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), t3);
      t5 = type$.Map_Uri_String;
      t4.CommandRunner$4$suggestionDistanceLimit$usageLineLength(_s13_, _s42_, 2, _null, t5);
      t3.addMultiOption$5$abbr$help$splitCommas$valueHelp("load-path", "I", "A path to use when resolving imports.\nMay be passed multiple times.", false, "PATH");
      t3.addFlag$4$abbr$help$negatable("migrate-deps", "d", "Migrate dependencies in addition to entrypoints.", false);
      t3.addFlag$4$abbr$help$negatable("dry-run", "n", "Show which files would be migrated but make no changes.", false);
      t3.addFlag$3$abbr$help("color", "c", "Whether to use terminal colors for messages..");
      t3.addFlag$2$help("unicode", "Whether to use Unicode characters for messages.");
      t3.addFlag$4$abbr$help$negatable("verbose", "v", "Print more information.", false);
      t3.addFlag$3$help$negatable("version", "Print the version of the Sass migrator.", false);
      t3 = A.ArgParser_ArgParser(_null);
      t3.addFlag$4$abbr$help$negatable("pessimistic", "p", "Only migrate / expressions that are unambiguously division.", false);
      t3.addFlag$3$defaultsTo$help("multiplication", true, "Migrate / expressions with certain constant divisors to use multiplication instead.");
      t6 = type$.Uri;
      t7 = type$.FileSpan;
      t3 = new A.DivisionMigrator(t3, A.LinkedHashMap_LinkedHashMap$_empty(t6, t7), A.ArgParser_ArgParser(_null), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2));
      t3.Command$0(t5);
      t4.addCommand$1(t3);
      t3 = new A.MediaLogicMigrator(A.LinkedHashMap_LinkedHashMap$_empty(t6, type$.Set_FileSpan), A.LinkedHashMap_LinkedHashMap$_empty(t6, t7), A.ArgParser_ArgParser(_null), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2));
      t3.Command$0(t5);
      t4.addCommand$1(t3);
      t3 = A.ArgParser_ArgParser(_null);
      t3.addMultiOption$4$abbr$help$valueHelp("remove-prefix", "p", "Removes PREFIX from all migrated member names.\nMay be set multiple times.", "PREFIX");
      t3.addMultiOption$4$allowed$allowedHelp$help("forward", A._setArrayType(["all", "import-only", "prefixed"], type$.JSArray_String), A.LinkedHashMap_LinkedHashMap$_literal(["prefixed", "Forwards members that start with the prefix(es) specified for --remove-prefix.", "all", "Forwards all members.", "import-only", "Forwards all members, but only through an import-only file."], t1, t1), "Specifies which members from dependencies to forward from the entrypoint.");
      t3 = new A.ModuleMigrator(t3, A.LinkedHashSet_LinkedHashSet$_empty(t6), A.LinkedHashMap_LinkedHashMap$_empty(t6, t7), A.ArgParser_ArgParser(_null), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2));
      t3.Command$0(t5);
      t4.addCommand$1(t3);
      t3 = A.ArgParser_ArgParser(_null);
      t3.addMultiOption$4$abbr$help$splitCommas("rename", "r", 'e.g. "old-namespace to new-namespace" or\n     "url my/url to new-namespace"\nSee https://sass-lang.com/documentation/cli/migrator#rename.', false);
      t3.addFlag$3$abbr$help("force", "f", "Force rename namespaces, adding numerical suffixes for conflicts.");
      t3 = new A.NamespaceMigrator(t3, A.LinkedHashMap_LinkedHashMap$_empty(t6, t7), A.ArgParser_ArgParser(_null), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2));
      t3.Command$0(t5);
      t4.addCommand$1(t3);
      t2 = new A.StrictUnaryMigrator(A.LinkedHashMap_LinkedHashMap$_empty(t6, t7), A.ArgParser_ArgParser(_null), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2));
      t2.Command$0(t5);
      t4.addCommand$1(t2);
      t4.execute$1(J.cast$1$0$ax(args, t1));
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$allocateFixed($length, $E) {
      if ($length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")));
    },
    JSArray_markFixedList(list) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      return J.compareTo$1$ns(a, b);
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = B.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = B.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$cli_pkg_main_0_$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$cli_pkg_main_0_(receiver, value);
    },
    set$exitCode$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$exitCode(receiver, value);
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$argv$x(receiver) {
      return J.getInterceptor$x(receiver).get$argv(receiver);
    },
    get$code$x(receiver) {
      return J.getInterceptor$x(receiver).get$code(receiver);
    },
    get$env$x(receiver) {
      return J.getInterceptor$x(receiver).get$env(receiver);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$z(receiver) {
      return J.getInterceptor$z(receiver).get$keys(receiver);
    },
    get$last$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$x(receiver) {
      return J.getInterceptor$x(receiver).get$message(receiver);
    },
    get$parent$z(receiver) {
      return J.getInterceptor$z(receiver).get$parent(receiver);
    },
    get$path$x(receiver) {
      return J.getInterceptor$x(receiver).get$path(receiver);
    },
    get$platform$x(receiver) {
      return J.getInterceptor$x(receiver).get$platform(receiver);
    },
    get$stderr$x(receiver) {
      return J.getInterceptor$x(receiver).get$stderr(receiver);
    },
    get$url$z(receiver) {
      return J.getInterceptor$z(receiver).get$url(receiver);
    },
    get$value$z(receiver) {
      return J.getInterceptor$z(receiver).get$value(receiver);
    },
    $add$ns(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ns(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      if (typeof a0 === "number")
        if ((receiver.constructor == Array || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0] = a1;
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    any$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    existsSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).existsSync$1(receiver, a0);
    },
    expand$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
    },
    fillRange$3$ax(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    firstWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).firstWhere$1(receiver, a0);
    },
    floor$0$n(receiver) {
      return J.getInterceptor$n(receiver).floor$0(receiver);
    },
    fold$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    isDirectory$0$x(receiver) {
      return J.getInterceptor$x(receiver).isDirectory$0(receiver);
    },
    isFile$0$x(receiver) {
      return J.getInterceptor$x(receiver).isFile$0(receiver);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    lstat$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).lstat$2(receiver, a0, a1);
    },
    lstatSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).lstatSync$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).matchAsPrefix$1(receiver, a0);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    parse$0$z(receiver) {
      return J.getInterceptor$z(receiver).parse$0(receiver);
    },
    readFileSync$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).readFileSync$2(receiver, a0, a1);
    },
    readdirSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).readdirSync$1(receiver, a0);
    },
    resolve$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).resolve$1(receiver, a0);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    startsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    statSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).statSync$1(receiver, a0);
    },
    substring$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    then$1$1$z(receiver, a0, $T1) {
      return J.getInterceptor$z(receiver).then$1$1(receiver, a0, $T1);
    },
    toISOString$0$x(receiver) {
      return J.getInterceptor$x(receiver).toISOString$0(receiver);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toRadixString$1$n(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toString$1$color$(receiver, a0) {
      return J.getInterceptor$(receiver).toString$1$color(receiver, a0);
    },
    trim$0$s(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    where$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    write$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).write$1(receiver, a0);
    },
    writeFileSync$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).writeFileSync$2(receiver, a0, a1);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      throw A.wrapException(new A.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    },
    $isJsSystemError: 1,
    get$length(obj) {
      return obj.length;
    },
    toString$0(receiver) {
      return receiver.toString();
    },
    get$write(obj) {
      return obj.write;
    },
    write$1(receiver, p0) {
      return receiver.write(p0);
    },
    existsSync$1(receiver, p0) {
      return receiver.existsSync(p0);
    },
    lstat$2(receiver, p0, p1) {
      return receiver.lstat(p0, p1);
    },
    lstatSync$1(receiver, p0) {
      return receiver.lstatSync(p0);
    },
    readdirSync$1(receiver, p0) {
      return receiver.readdirSync(p0);
    },
    readFileSync$2(receiver, p0, p1) {
      return receiver.readFileSync(p0, p1);
    },
    statSync$1(receiver, p0) {
      return receiver.statSync(p0);
    },
    writeFileSync$2(receiver, p0, p1) {
      return receiver.writeFileSync(p0, p1);
    },
    get$path(obj) {
      return obj.path;
    },
    get$mode(obj) {
      return obj.mode;
    },
    isDirectory$0(receiver) {
      return receiver.isDirectory();
    },
    isFile$0(receiver) {
      return receiver.isFile();
    },
    isSymbolicLink$0(receiver) {
      return receiver.isSymbolicLink();
    },
    get$atime(obj) {
      return obj.atime;
    },
    get$ctime(obj) {
      return obj.ctime;
    },
    get$mtime(obj) {
      return obj.mtime;
    },
    get$size(obj) {
      return obj.size;
    },
    toISOString$0(receiver) {
      return receiver.toISOString();
    },
    get$message(obj) {
      return obj.message;
    },
    message$1(receiver, p0) {
      return receiver.message(p0);
    },
    get$code(obj) {
      return obj.code;
    },
    get$syscall(obj) {
      return obj.syscall;
    },
    get$platform(obj) {
      return obj.platform;
    },
    join$1(receiver, p0) {
      return receiver.join(p0);
    },
    join$2(receiver, p0, p1) {
      return receiver.join(p0, p1);
    },
    resolve$1(receiver, p0) {
      return receiver.resolve(p0);
    },
    get$name(obj) {
      return obj.name;
    },
    get$argv(obj) {
      return obj.argv;
    },
    get$env(obj) {
      return obj.env;
    },
    set$exitCode(obj, v) {
      return obj.exitCode = v;
    },
    get$stderr(obj) {
      return obj.stderr;
    },
    call$0(receiver) {
      return receiver.call();
    },
    call$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$1$0(receiver) {
      return receiver.call();
    },
    call$2(receiver, p0, p1) {
      return receiver.call(p0, p1);
    },
    call$3$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$2$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$1$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$3(receiver, p0, p1, p2) {
      return receiver.call(p0, p1, p2);
    },
    call$3$3(receiver, p0, p1, p2) {
      return receiver.call(p0, p1, p2);
    },
    call$2$2(receiver, p0, p1) {
      return receiver.call(p0, p1);
    },
    set$cli_pkg_main_0_(obj, v) {
      return obj.cli_pkg_main_0_ = v;
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + A.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insertAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var i, element, t1, retained = [],
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!test.call$1(element))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    where$1(receiver, f) {
      return new A.WhereIterable(receiver, f, A._arrayInstanceType(receiver)._eval$1("WhereIterable<1>"));
    },
    expand$1$1(receiver, f, $T) {
      return new A.ExpandIterable(receiver, f, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($T)._eval$1("ExpandIterable<1,2>"));
    },
    addAll$1(receiver, collection) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var i,
        len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("clear"));
      receiver.length = 0;
    },
    map$1$1(receiver, f, $T) {
      return new A.MappedListIterable(receiver, f, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        list[i] = A.S(receiver[i]);
      return list.join(separator);
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine) {
      var value, i,
        $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      var end0 = receiver.length;
      if (start > end0)
        throw A.wrapException(A.RangeError$range(start, 0, end0, "start", null));
      if (end == null)
        end = end0;
      else if (end < start || end > end0)
        throw A.wrapException(A.RangeError$range(end, start, end0, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(receiver) {
      var t1 = receiver.length;
      if (t1 === 1)
        return receiver[0];
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      throw A.wrapException(A.IterableElementError_tooMany());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    fillRange$3(receiver, start, end, fillValue) {
      var i;
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("fill range"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      A._arrayInstanceType(receiver)._precomputed1._as(fillValue);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    any$1(receiver, test) {
      var i,
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var i,
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!test.call$1(receiver[i]))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    sort$1(receiver, compare) {
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      A.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare);
    },
    sort$0($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(receiver[i], element))
          return i;
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length);
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    indexWhere$1(receiver, test) {
      var i;
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (test.call$1(receiver[i]))
          return i;
      return -1;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this._current = null;
        return false;
      }
      _this._current = t1[t2];
      _this._index = t2 + 1;
      return true;
    }
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
      if (B.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw A.wrapException(A.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toRadixString$1(receiver, radix) {
      var result, match, exponent, t1;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      result = match[1];
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || false)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, i, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return _null;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return _null;
      return new A.StringMatch(start, receiver);
    },
    matchAsPrefix$1($receiver, string) {
      return this.matchAsPrefix$2($receiver, string, 0);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      A.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return A.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1(receiver, pattern) {
      var t1 = A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      return t1;
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0(receiver) {
      var result, endIndex, t1;
      if (typeof receiver.trimRight != "undefined") {
        result = receiver.trimRight();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        t1 = endIndex - 1;
        if (this.codeUnitAt$1(result, t1) === 133)
          endIndex = J.JSString__skipTrailingWhitespace(result, t1);
      } else {
        endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
        result = receiver;
      }
      if (endIndex === result.length)
        return result;
      if (endIndex === 0)
        return "";
      return result.substring(0, endIndex);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isJSIndexable: 1,
    $isComparable: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    get$last(_) {
      return A._instanceType(this)._rest[1]._as(J.get$last$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    }
  };
  A.CastIterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this._source, A._instanceType(this)._precomputed1, $R);
    },
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet(_, index, value) {
      J.$indexSet$ax(this._source, index, this.$ti._precomputed1._as(value));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      J.add$1$ax(this._source, this.$ti._precomputed1._as(value));
    },
    sort$1(_, compare) {
      var t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(iterable, t1._rest[1], t1._precomputed1), skipCount);
    },
    fillRange$3(_, start, end, fillValue) {
      J.fillRange$3$ax(this._source, start, end, this.$ti._precomputed1._as(fillValue));
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A.CastList.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this._string.length;
    },
    $index(_, i) {
      return B.JSString_methods.codeUnitAt$1(this._string, i);
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      return new A.ListIterator(this, this.get$length(this));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return _this.elementAt$1(0, _this.get$length(_this) - 1);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    every$1(_, test) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (!test.call$1(_this.elementAt$1(0, i)))
          return false;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return true;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, test);
    },
    map$1$1(_, toElement, $T) {
      return new A.MappedListIterable(this, toElement, A._instanceType(this)._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    reduce$1(_, combine) {
      var value, i, _this = this,
        $length = _this.get$length(_this);
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$1$2(_, initialValue, combine) {
      var value, i, _this = this,
        $length = _this.get$length(_this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1(_, count) {
      return A.SubListIterable$(this, 0, A.checkNotNullable(count, "count", type$.int), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(_) {
      var i, _this = this,
        result = A.LinkedHashSet_LinkedHashSet(A._instanceType(_this)._eval$1("ListIterable.E"));
      for (i = 0; i < _this.get$length(_this); ++i)
        result.add$1(0, _this.elementAt$1(0, i));
      return result;
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(_this), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this._start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      else {
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        result[i] = t2.elementAt$1(t1, start + i);
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.__internal$_current = null;
        return false;
      }
      _this.__internal$_current = t2.elementAt$1(t1, t3);
      ++_this.__internal$_index;
      return true;
    }
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f);
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.__internal$_current = _this._f.call$1(t1.get$current());
        return true;
      }
      _this.__internal$_current = null;
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? A._instanceType(this)._rest[1]._as(t1) : t1;
    }
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f);
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator);
    }
  };
  A.ExpandIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? A._instanceType(this)._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = _this._iterator, t3 = _this._f; !t1.moveNext$0();) {
        _this.__internal$_current = null;
        if (t2.moveNext$0()) {
          _this._currentExpansion = null;
          t1 = J.get$iterator$ax(t3.call$1(t2.get$current()));
          _this._currentExpansion = t1;
        } else
          return false;
      }
      _this.__internal$_current = _this._currentExpansion.get$current();
      return true;
    }
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return new A.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount);
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current() {
      if (this._remaining < 0) {
        A._instanceType(this)._precomputed1._as(null);
        return null;
      }
      return this._iterator.get$current();
    }
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count");
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount);
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count");
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    every$1(_, test) {
      return true;
    },
    join$1(_, separator) {
      return "";
    },
    where$1(_, test) {
      return this;
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    take$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A.FollowedByIterable.prototype = {
    get$iterator(_) {
      return new A.FollowedByIterator(J.get$iterator$ax(this.__internal$_first), this._second);
    },
    get$length(_) {
      var t1 = this._second;
      return J.get$length$asx(this.__internal$_first) + t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1;
      if (J.get$isEmpty$asx(this.__internal$_first)) {
        t1 = this._second;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      return t1;
    },
    get$isNotEmpty(_) {
      var t1;
      if (!J.get$isNotEmpty$asx(this.__internal$_first)) {
        t1 = this._second;
        t1 = !t1.get$isEmpty(t1);
      } else
        t1 = true;
      return t1;
    },
    contains$1(_, value) {
      return J.contains$1$asx(this.__internal$_first, value) || this._second.contains$1(0, value);
    },
    get$first(_) {
      var t1,
        iterator = J.get$iterator$ax(this.__internal$_first);
      if (iterator.moveNext$0())
        return iterator.get$current();
      t1 = this._second;
      return t1.get$first(t1);
    },
    get$last(_) {
      var last,
        t1 = this._second,
        iterator = t1.get$iterator(t1);
      if (iterator.moveNext$0()) {
        last = iterator.get$current();
        for (; iterator.moveNext$0();)
          last = iterator.get$current();
        return last;
      }
      return J.get$last$ax(this.__internal$_first);
    }
  };
  A.EfficientLengthFollowedByIterable.prototype = {
    elementAt$1(_, index) {
      var t1 = this.__internal$_first,
        t2 = J.getInterceptor$asx(t1),
        firstLength = t2.get$length(t1);
      if (index < firstLength)
        return t2.elementAt$1(t1, index);
      return this._second.elementAt$1(0, index - firstLength);
    },
    get$first(_) {
      var t1 = this.__internal$_first,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1))
        return t2.get$first(t1);
      t1 = this._second;
      return t1.get$first(t1);
    },
    get$last(_) {
      var t1 = this._second;
      if (!t1.get$isEmpty(t1))
        return t1.get$last(t1);
      return J.get$last$ax(this.__internal$_first);
    },
    $isEfficientLengthIterable: 1
  };
  A.FollowedByIterator.prototype = {
    moveNext$0() {
      var t1, _this = this;
      if (_this._currentIterator.moveNext$0())
        return true;
      t1 = _this._nextIterable;
      if (t1 != null) {
        t1 = t1.get$iterator(t1);
        _this._currentIterator = t1;
        _this._nextIterable = null;
        return t1.moveNext$0();
      }
      return false;
    },
    get$current() {
      return this._currentIterator.get$current();
    }
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    }
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1(_, compare) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    fillRange$3(_, start, end, fillValue) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + A.S(this.__internal$_name) + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    putIfAbsent$2(key, ifAbsent) {
      A.ConstantMap__throwUnmodifiable();
    },
    get$entries(_) {
      return this.entries$body$ConstantMap(0, A._instanceType(this)._eval$1("MapEntry<1,2>"));
    },
    entries$body$ConstantMap($async$_, $async$type) {
      var $async$self = this;
      return A._makeSyncStarIterable(function() {
        var _ = $async$_;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, key;
        return function $async$get$entries($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys($async$self), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                $async$goto = 4;
                return new A.MapEntry(key, $async$self.$index(0, key), t2);
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsValue$1(needle) {
      return this.get$values(this).any$1(0, new A.ConstantStringMap_containsValue_closure(this, needle));
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._jsObject[key];
    },
    forEach$1(_, f) {
      var t1, t2, i, key,
        keys = this._keys;
      for (t1 = keys.length, t2 = this._jsObject, i = 0; i < t1; ++i) {
        key = keys[i];
        f.call$2(key, t2[key]);
      }
    },
    get$keys(_) {
      return new A._ConstantMapKeyIterable(this, this.$ti._eval$1("_ConstantMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = this.$ti;
      return A.MappedIterable_MappedIterable(this._keys, new A.ConstantStringMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    }
  };
  A.ConstantStringMap_containsValue_closure.prototype = {
    call$1(value) {
      return J.$eq$(value, this.needle);
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(2)");
    }
  };
  A.ConstantStringMap_values_closure.prototype = {
    call$1(key) {
      return this.$this._jsObject[key];
    },
    $signature() {
      return this.$this.$ti._eval$1("2(1)");
    }
  };
  A._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this.__js_helper$_map._keys;
      return new J.ArrayIterator(t1, t1.length);
    },
    get$length(_) {
      return this.__js_helper$_map._keys.length;
    }
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var t1, t2, t3, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        t2 = t1._precomputed1;
        t3 = A.GeneralConstantMap__typeTest(t2);
        backingMap = A.LinkedHashMap_LinkedHashMap(A._js_helper_GeneralConstantMap__constantMapHashCode$closure(), t3, t2, t1._rest[1]);
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsValue$1(needle) {
      return this._getMap$0().containsValue$1(needle);
    },
    containsKey$1(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this._getMap$0().forEach$1(0, f);
    },
    get$keys(_) {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.GeneralConstantMap__typeTest_closure.prototype = {
    call$1(o) {
      return this.T._is(o);
    },
    $signature: 21
  };
  A.Instantiation.prototype = {
    Instantiation$1(_genericClosure) {
      if (false)
        A.instantiatedGenericFunctionType(0, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeType(this) === A.getRuntimeType(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeType(this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$1(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$4(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this.__js_helper$_memberName;
      return t1;
    },
    get$positionalArguments() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty7;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty7;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t1[index]);
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty0;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty0;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new A.Symbol(t1[i]), t2[namedArgumentsStartIndex + i]);
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    }
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      this.namedArgumentList.push($name);
      this.$arguments.push(argument);
      ++t1.argumentCount;
    },
    $signature: 70
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$keys(_) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    containsValue$1(value) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>")).any$1(0, new A.JsLinkedHashMap_containsValue_closure(this, value));
    },
    addAll$1(_, other) {
      other.forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this;
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var hash, bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1, value, _this = this;
      if (_this.containsKey$1(key)) {
        t1 = _this.$index(0, key);
        return t1 == null ? A._instanceType(_this)._rest[1]._as(t1) : t1;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this.__js_helper$_removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this.__js_helper$_removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this.__js_helper$_unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
      var _this = this,
        cell = _this._first,
        modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this.__js_helper$_unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var t1, _this = this,
        cell = new A.LinkedHashMapCell(key, value);
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    __js_helper$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3fffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    }
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = t1.$index(0, each);
      return t2 == null ? A._instanceType(t1)._rest[1]._as(t2) : t2;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_containsValue_closure.prototype = {
    call$1(each) {
      return J.$eq$(this.$this.$index(0, each), this.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      this.$this.$indexSet(0, key, value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications);
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellKey;
        _this._cell = cell._next;
        return true;
      }
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 35
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 102
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(tag);
    },
    $signature: 103
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (match.pop() != null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    matchAsPrefix$1($receiver, string) {
      return this.matchAsPrefix$2($receiver, string, 0);
    },
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start(_) {
      return this._match.index;
    },
    get$end(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index(_, index) {
      return this._match[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this.__js_helper$_string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this.__js_helper$_string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                t1 = B.JSString_methods.codeUnitAt$1(string, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = B.JSString_methods.codeUnitAt$1(string, t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    }
  };
  A.StringMatch.prototype = {
    get$end(_) {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start(receiver) {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    }
  };
  A._Cell.prototype = {
    _readLocal$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    }
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeInt16List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeInt32List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeInt8List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint16List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint32List.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    }
  };
  A.NativeUint8ClampedList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint8List.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 50
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = callback;
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 87
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._tick = 1;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 10
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t1, _this = this;
      if (value == null)
        _this.$ti._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t1 = _this._future;
        if (_this.$ti._eval$1("Future<1>")._is(value))
          t1._chainFuture$1(value);
        else
          t1._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    }
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 122
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, stackTrace));
    },
    $signature: 127
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(errorCode, result);
    },
    $signature: 143
  };
  A._IterationMarker.prototype = {
    toString$0(_) {
      return "IterationMarker(" + this.state + ", " + A.S(this.value) + ")";
    }
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var nested = this._nestedIterator;
      if (nested == null)
        return this._async$_current;
      return nested.get$current();
    },
    moveNext$0() {
      var t1, value, state, suspendedBodies, inner, _this = this;
      for (; true;) {
        t1 = _this._nestedIterator;
        if (t1 != null)
          if (t1.moveNext$0())
            return true;
          else
            _this._nestedIterator = null;
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._body, 0, 1);
        if (value instanceof A._IterationMarker) {
          state = value.state;
          if (state === 2) {
            suspendedBodies = _this._suspendedBodies;
            if (suspendedBodies == null || suspendedBodies.length === 0) {
              _this._async$_current = null;
              return false;
            }
            _this._body = suspendedBodies.pop();
            continue;
          } else {
            t1 = value.value;
            if (state === 3)
              throw t1;
            else {
              inner = J.get$iterator$ax(t1);
              if (inner instanceof A._SyncStarIterator) {
                t1 = _this._suspendedBodies;
                if (t1 == null)
                  t1 = _this._suspendedBodies = [];
                t1.push(_this._body);
                _this._body = inner._body;
                continue;
              } else {
                _this._nestedIterator = inner;
                continue;
              }
            }
          }
        } else {
          _this._async$_current = value;
          return true;
        }
      }
      return false;
    }
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper());
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var t1, replacement;
      A.checkNotNullable(error, "error", type$.Object);
      t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      }
      t1._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(this.callback, asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception,
        errorCallback = this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(errorCallback, t3, t1, t2);
      try {
        t1 = result;
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(_, f, onError, $R) {
      var result, t1,
        currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), this.$ti._precomputed1);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t1 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t1, f, onError, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1($receiver, f, $R) {
      return this.then$1$2$onError($receiver, f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 3, f, onError, this.$ti._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = _this._resultOrListeners;
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          t1 = _this._resultOrListeners;
          if ((t1._state & 24) === 0) {
            t1._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(t1);
        }
        _this._zone.scheduleMicrotask$1(new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = _this._resultOrListeners;
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          t1 = _this._resultOrListeners;
          if ((t1._state & 24) === 0) {
            t1._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(t1);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = this._resultOrListeners;
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(0, new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _completeWithValue$1(value) {
      var _this = this,
        listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      if (this.$ti._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteWithValue_closure(this, value));
    },
    _chainFuture$1(value) {
      var _this = this;
      if (_this.$ti._is(value)) {
        if ((value._state & 16) !== 0) {
          _this._state ^= 2;
          _this._zone.scheduleMicrotask$1(new A._Future__chainFuture_closure(_this, value));
        } else
          A._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 50
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(error, stackTrace);
    },
    $signature: 167
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__chainFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(t1.callback, type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && _this._box_1.source._resultOrListeners.error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source._resultOrListeners;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = completeResult._resultOrListeners;
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = J.then$1$1$z(completeResult, new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 179
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t2.callback, this.sourceResult, t3._eval$1("2/"), t3._precomputed1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = _this._box_1.source._resultOrListeners;
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this._box_1.source._resultOrListeners;
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.StreamTransformerBase.prototype = {};
  A._StreamIterator.prototype = {};
  A._ZoneFunction.prototype = {};
  A._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  A._ZoneDelegate.prototype = {$isZoneDelegate: 1};
  A._Zone.prototype = {
    _processUncaughtError$3(zone, error, stackTrace) {
      var handler, parentDelegate, parentZone, currentZone, e, s, t1, exception,
        implementation = this.get$_handleUncaughtError(),
        implZone = implementation.zone;
      if (implZone === B.C__RootZone) {
        A._rootHandleError(error, stackTrace);
        return;
      }
      handler = implementation.$function;
      parentDelegate = implZone.get$_parentDelegate();
      t1 = J.get$parent$z(implZone);
      t1.toString;
      parentZone = t1;
      currentZone = $.Zone__current;
      try {
        $.Zone__current = parentZone;
        handler.call$5(implZone, parentDelegate, zone, error, stackTrace);
        $.Zone__current = currentZone;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current = currentZone;
        t1 = error === e ? stackTrace : s;
        parentZone._processUncaughtError$3(implZone, e, t1);
      }
    },
    $isZone: 1
  };
  A._CustomZone.prototype = {
    get$_delegate() {
      var t1 = this._delegateCache;
      return t1 == null ? this._delegateCache = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      return this.parent.get$_delegate();
    },
    get$errorZone() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1(f) {
      var e, s, exception;
      try {
        this.run$1$1(f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, e, s);
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._CustomZone_bindCallback_closure(this, this.registerCallback$1$1(f, $R), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1(f, $R, $T), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(f, type$.void));
    },
    $index(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key))
        return result;
      value = this.parent.$index(0, key);
      if (value != null)
        t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2(error, stackTrace) {
      this._processUncaughtError$3(this, error, stackTrace);
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, specification, zoneValues);
    },
    run$1$1(f) {
      var implementation = this._run,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, f);
    },
    runUnary$2$2(f, arg) {
      var implementation = this._runUnary,
        t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, f, arg);
    },
    runBinary$3$3(f, arg1, arg2) {
      var implementation = this._runBinary,
        t1 = implementation.zone;
      return implementation.$function.call$6(t1, t1.get$_parentDelegate(), this, f, arg1, arg2);
    },
    registerCallback$1$1(callback) {
      var implementation = this._registerCallback,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, callback);
    },
    registerUnaryCallback$2$1(callback) {
      var implementation = this._registerUnaryCallback,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, callback);
    },
    registerBinaryCallback$3$1(callback) {
      var implementation = this._registerBinaryCallback,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, callback);
    },
    errorCallback$2(error, stackTrace) {
      var implementation, implementationZone;
      A.checkNotNullable(error, "error", type$.Object);
      implementation = this._errorCallback;
      implementationZone = implementation.zone;
      if (implementationZone === B.C__RootZone)
        return null;
      return implementation.$function.call$5(implementationZone, implementationZone.get$_parentDelegate(), this, error, stackTrace);
    },
    scheduleMicrotask$1(f) {
      var implementation = this._scheduleMicrotask,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, f);
    },
    print$1(line) {
      var implementation = this._print,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, line);
    },
    get$_run() {
      return this._run;
    },
    get$_runUnary() {
      return this._runUnary;
    },
    get$_runBinary() {
      return this._runBinary;
    },
    get$_registerCallback() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask() {
      return this._scheduleMicrotask;
    },
    get$_createTimer() {
      return this._createTimer;
    },
    get$_createPeriodicTimer() {
      return this._createPeriodicTimer;
    },
    get$_print() {
      return this._print;
    },
    get$_fork() {
      return this._fork;
    },
    get$_handleUncaughtError() {
      return this._handleUncaughtError;
    },
    get$parent(receiver) {
      return this.parent;
    }
  };
  A._CustomZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this;
      return _this.$this.runUnary$2$2(_this.registered, arg, _this.R, _this.T);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.registered);
    },
    $signature: 0
  };
  A._rootHandleError_closure.prototype = {
    call$0() {
      var t1 = this.error,
        t2 = this.stackTrace;
      A.checkNotNullable(t1, "error", type$.Object);
      A.checkNotNullable(t2, "stackTrace", type$.StackTrace);
      A.Error__throw(t1, t2);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    get$_run() {
      return B._ZoneFunction__RootZone__rootRun;
    },
    get$_runUnary() {
      return B._ZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary() {
      return B._ZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback() {
      return B._ZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback() {
      return B._ZoneFunction_Eeh;
    },
    get$_registerBinaryCallback() {
      return B._ZoneFunction_7G2;
    },
    get$_errorCallback() {
      return B._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask() {
      return B._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer() {
      return B._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer() {
      return B._ZoneFunction_3bB;
    },
    get$_print() {
      return B._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork() {
      return B._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError() {
      return B._ZoneFunction_NMc;
    },
    get$parent(_) {
      return null;
    },
    get$_delegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception;
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(e, s);
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._RootZone_bindCallback_closure(this, f, $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._RootZone_bindUnaryCallback_closure(this, f, $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, f);
    },
    $index(_, key) {
      return null;
    },
    handleUncaughtError$2(error, stackTrace) {
      A._rootHandleError(error, stackTrace);
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      return A._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1(f) {
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f);
    },
    runUnary$2$2(f, arg) {
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3$3(f, arg1, arg2) {
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2);
    },
    registerCallback$1$1(f) {
      return f;
    },
    registerUnaryCallback$2$1(f) {
      return f;
    },
    registerBinaryCallback$3$1(f) {
      return f;
    },
    errorCallback$2(error, stackTrace) {
      return null;
    },
    scheduleMicrotask$1(f) {
      A._rootScheduleMicrotask(null, null, this, f);
    },
    print$1(line) {
      A.printString(line);
    }
  };
  A._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._RootZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this;
      return _this.$this.runUnary$2$2(_this.f, arg, _this.R, _this.T);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$keys(_) {
      return new A._HashMapKeyIterable(this, A._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    containsValue$1(value) {
      return B.JSArray_methods.any$1(this._computeKeys$0(), new A._HashMap_containsValue_closure(this, value));
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this;
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var hash, bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._collection$_keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        }
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1, value, _this = this;
      if (_this.containsKey$1(key)) {
        t1 = _this.$index(0, key);
        return t1 == null ? A._instanceType(_this)._rest[1]._as(t1) : t1;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    forEach$1(_, action) {
      var $length, t1, i, key, t2, _this = this,
        keys = _this._computeKeys$0();
      for ($length = keys.length, t1 = A._instanceType(_this)._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2 = _this.$index(0, key);
        action.call$2(key, t2 == null ? t1._as(t2) : t2);
        if (keys !== _this._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    }
  };
  A._HashMap_containsValue_closure.prototype = {
    call$1(each) {
      return J.$eq$(this.$this.$index(0, each), this.value);
    },
    $signature: 14
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._CustomHashMap.prototype = {
    $index(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$_HashMap$_get(key);
    },
    $indexSet(_, key, value) {
      this.super$_HashMap$_set(key, value);
    },
    containsKey$1(key) {
      if (!this._validKey.call$1(key))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    _computeHashCode$1(key) {
      return this._hashCode.call$1(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, t1, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this._equals, i = 0; i < $length; i += 2)
        if (t1.call$2(bucket[i], key))
          return i;
      return -1;
    }
  };
  A._CustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 14
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._collection$_length;
    },
    get$isEmpty(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0());
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._collection$_keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = keys[offset];
        _this._offset = offset + 1;
        return true;
      }
    }
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      this.super$JsLinkedHashMap$internalSet(key, value);
    },
    containsKey$1(key) {
      if (!this._validKey.call$1(key))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this._equals, i = 0; i < $length; ++i)
        if (t1.call$2(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 14
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var t1 = new A._LinkedHashSetIterator(this, this._collection$_modifications);
      t1._collection$_cell = this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    forEach$1(_, action) {
      var _this = this,
        cell = _this._collection$_first,
        modifications = _this._collection$_modifications;
      for (; cell != null;) {
        action.call$1(cell._element);
        if (modifications !== _this._collection$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._collection$_next;
      }
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return first._element;
    },
    get$last(_) {
      var last = this._collection$_last;
      if (last == null)
        throw A.wrapException(A.StateError$("No elements"));
      return last._element;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var hash, bucket, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._unlinkCell$1(cell);
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(element);
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = cell._element;
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    }
  };
  A.UnmodifiableListView.prototype = {
    get$length(_) {
      return J.get$length$asx(this._collection$_source);
    },
    $index(_, index) {
      return J.elementAt$1$ax(this._collection$_source, index);
    }
  };
  A.HashMap_HashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 48
  };
  A.IterableMixin.prototype = {
    map$1$1(_, toElement, $T) {
      return A.MappedIterable_MappedIterable(this, toElement, this.$ti._precomputed1, $T);
    },
    where$1(_, test) {
      return new A.WhereIterable(this, test, this.$ti._eval$1("WhereIterable<1>"));
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this, $T._eval$1("WhereTypeIterable<0>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.$ti, t1 = new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1(_, action) {
      var t1;
      for (t1 = this.$ti, t1 = new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")); t1.moveNext$0();)
        action.call$1(t1.get$current());
    },
    join$1(_, separator) {
      var t1 = this.$ti,
        iterator = new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = "" + A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + A.S(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$length(_) {
      var count,
        t1 = this.$ti,
        it = new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      var t1 = this.$ti;
      return !new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")).moveNext$0();
    },
    get$isNotEmpty(_) {
      return this._root != null;
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, count, this.$ti._precomputed1);
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, this.$ti._precomputed1);
    },
    get$first(_) {
      var t1 = this.$ti,
        it = new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        t1 = this.$ti,
        it = new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element, _this = this, _s5_ = "index";
      A.checkNotNullable(index, _s5_, type$.int);
      A.RangeError_checkNotNegative(index, _s5_);
      for (t1 = _this.$ti, t1 = new A._SplayTreeKeyIterator(_this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), _this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$withLength(index, elementIndex, _this, null, _s5_));
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.IterableBase.prototype = {};
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 48
  };
  A.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  A.ListMixin.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (!test.call$1(this.$index(receiver, i)))
          return false;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    any$1(receiver, test) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i)))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    lastWhere$2$orElse(receiver, test, orElse) {
      var i, element,
        $length = this.get$length(receiver);
      for (i = $length - 1; i >= 0; --i) {
        element = this.$index(receiver, i);
        if (test.call$1(element))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = A.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    where$1(receiver, test) {
      return new A.WhereIterable(receiver, test, A.instanceType(receiver)._eval$1("WhereIterable<ListMixin.E>"));
    },
    map$1$1(receiver, f, $T) {
      return new A.MappedListIterable(receiver, f, A.instanceType(receiver)._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    expand$1$1(receiver, f, $T) {
      return new A.ExpandIterable(receiver, f, A.instanceType(receiver)._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("ExpandIterable<1,2>"));
    },
    fold$1$2(receiver, initialValue, combine) {
      var value, i,
        $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListMixin.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListMixin.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        result[i] = _this.$index(receiver, i);
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    sort$1(receiver, compare) {
      A.Sort_sort(receiver, compare == null ? A.collection_ListMixin__compareAny$closure() : compare);
    },
    fillRange$3(receiver, start, end, fill) {
      var i,
        value = fill == null ? A.instanceType(receiver)._eval$1("ListMixin.E")._as(fill) : fill;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, value);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t1, i;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (A.instanceType(receiver)._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 183
  };
  A.MapMixin.prototype = {
    forEach$1(_, action) {
      var t1, t2, key, t3, _this = this;
      for (t1 = _this.get$keys(_this), t1 = t1.get$iterator(t1), t2 = A._instanceType(_this)._rest[1]; t1.moveNext$0();) {
        key = t1.get$current();
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t2._as(t3) : t3);
      }
    },
    containsValue$1(value) {
      var t1;
      for (t1 = this.get$keys(this), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        if (J.$eq$(this.$index(0, t1.get$current()), value))
          return true;
      return false;
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1, _this = this;
      if (_this.containsKey$1(key)) {
        t1 = _this.$index(0, key);
        return t1 == null ? A._instanceType(_this)._rest[1]._as(t1) : t1;
      }
      t1 = ifAbsent.call$0();
      _this.$indexSet(0, key, t1);
      return t1;
    },
    get$entries(_) {
      var _this = this,
        t1 = _this.get$keys(_this);
      return A.MappedIterable_MappedIterable(t1, new A.MapMixin_entries_closure(_this), A._instanceType(t1)._eval$1("Iterable.E"), A._instanceType(_this)._eval$1("MapEntry<1,2>"));
    },
    containsKey$1(key) {
      return this.get$keys(this).contains$1(0, key);
    },
    get$length(_) {
      var t1 = this.get$keys(this);
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys(this);
      return t1.get$isEmpty(t1);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapMixin_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = t1.$index(0, key);
      if (t2 == null)
        t2 = A._instanceType(t1)._rest[1]._as(t2);
      t1 = A._instanceType(t1);
      return new A.MapEntry(key, t2, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<1,2>(1)");
    }
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    putIfAbsent$2(key, ifAbsent) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    $index(_, key) {
      return this._map.$index(0, key);
    },
    $indexSet(_, key, value) {
      this._map.$indexSet(0, key, value);
    },
    putIfAbsent$2(key, ifAbsent) {
      return this._map.putIfAbsent$2(key, ifAbsent);
    },
    containsKey$1(key) {
      return this._map.containsKey$1(key);
    },
    containsValue$1(value) {
      return this._map.containsValue$1(value);
    },
    forEach$1(_, action) {
      this._map.forEach$1(0, action);
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$keys(_) {
      var t1 = this._map;
      return t1.get$keys(t1);
    },
    toString$0(_) {
      return this._map.toString$0(0);
    },
    get$values(_) {
      var t1 = this._map;
      return t1.get$values(t1);
    },
    get$entries(_) {
      var t1 = this._map;
      return t1.get$entries(t1);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A.ListQueue.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head);
    },
    get$isEmpty(_) {
      return this._head === this._tail;
    },
    get$length(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first(_) {
      var _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = _this._table[t1];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    get$last(_) {
      var _this = this,
        t1 = _this._head,
        t2 = _this._tail;
      if (t1 === t2)
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = _this._table;
      t1 = t1[(t2 - 1 & t1.length - 1) >>> 0];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        t1 = _this.get$length(_this);
      if (0 > index || index >= t1)
        A.throwExpression(A.IndexError$withLength(index, t1, _this, null, "index"));
      t1 = _this._table;
      t1 = t1[(_this._head + index & t1.length - 1) >>> 0];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    toList$1$growable(_, growable) {
      var t1, list, t2, t3, i, t4, _this = this,
        mask = _this._table.length - 1,
        $length = (_this._tail - _this._head & mask) >>> 0;
      if ($length === 0) {
        t1 = J.JSArray_JSArray$growable(0, _this.$ti._precomputed1);
        return t1;
      }
      t1 = _this.$ti._precomputed1;
      list = A.List_List$filled($length, _this.get$first(_this), true, t1);
      for (t2 = _this._table, t3 = _this._head, i = 0; i < $length; ++i) {
        t4 = t2[(t3 + i & mask) >>> 0];
        list[i] = t4 == null ? t1._as(t4) : t4;
      }
      return list;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    addAll$1(_, elements) {
      var addCount, $length, t2, t3, t4, newTable, endSpace, preSpace, _this = this,
        t1 = _this.$ti;
      if (t1._eval$1("List<1>")._is(elements)) {
        addCount = J.get$length$asx(elements);
        $length = _this.get$length(_this);
        t2 = $length + addCount;
        t3 = _this._table;
        t4 = t3.length;
        if (t2 >= t4) {
          newTable = A.List_List$filled(A.ListQueue__nextPowerOf2(t2 + B.JSInt_methods._shrOtherPositive$1(t2, 1)), null, false, t1._eval$1("1?"));
          _this._tail = _this._collection$_writeToList$1(newTable);
          _this._table = newTable;
          _this._head = 0;
          B.JSArray_methods.setRange$4(newTable, $length, t2, elements, 0);
          _this._tail += addCount;
        } else {
          t1 = _this._tail;
          endSpace = t4 - t1;
          if (addCount < endSpace) {
            B.JSArray_methods.setRange$4(t3, t1, t1 + addCount, elements, 0);
            _this._tail += addCount;
          } else {
            preSpace = addCount - endSpace;
            B.JSArray_methods.setRange$4(t3, t1, t1 + endSpace, elements, 0);
            B.JSArray_methods.setRange$4(_this._table, 0, preSpace, elements, endSpace);
            _this._tail = preSpace;
          }
        }
        ++_this._modificationCount;
      } else
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          _this._add$1(t1.get$current());
    },
    clear$0(_) {
      var t2, t3, _this = this,
        i = _this._head,
        t1 = _this._tail;
      if (i !== t1) {
        for (t2 = _this._table, t3 = t2.length - 1; i !== t1; i = (i + 1 & t3) >>> 0)
          t2[i] = null;
        _this._head = _this._tail = 0;
        ++_this._modificationCount;
      }
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    addFirst$1(value) {
      var _this = this,
        t1 = _this._head,
        t2 = _this._table;
      t1 = _this._head = (t1 - 1 & t2.length - 1) >>> 0;
      t2[t1] = value;
      if (t1 === _this._tail)
        _this._collection$_grow$0();
      ++_this._modificationCount;
    },
    removeFirst$0() {
      var t2, result, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._table;
      result = t2[t1];
      if (result == null)
        result = _this.$ti._precomputed1._as(result);
      t2[t1] = null;
      _this._head = (t1 + 1 & t2.length - 1) >>> 0;
      return result;
    },
    removeLast$0(_) {
      var result, _this = this,
        t1 = _this._head,
        t2 = _this._tail;
      if (t1 === t2)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t1 = _this._table;
      t2 = _this._tail = (t2 - 1 & t1.length - 1) >>> 0;
      result = t1[t2];
      if (result == null)
        result = _this.$ti._precomputed1._as(result);
      t1[t2] = null;
      return result;
    },
    _add$1(element) {
      var _this = this,
        t1 = _this._table,
        t2 = _this._tail;
      t1[t2] = element;
      t1 = (t2 + 1 & t1.length - 1) >>> 0;
      _this._tail = t1;
      if (_this._head === t1)
        _this._collection$_grow$0();
      ++_this._modificationCount;
    },
    _collection$_grow$0() {
      var _this = this,
        newTable = A.List_List$filled(_this._table.length * 2, null, false, _this.$ti._eval$1("1?")),
        t1 = _this._table,
        t2 = _this._head,
        split = t1.length - t2;
      B.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      B.JSArray_methods.setRange$4(newTable, split, split + _this._head, _this._table, 0);
      _this._head = 0;
      _this._tail = _this._table.length;
      _this._table = newTable;
    },
    _collection$_writeToList$1(target) {
      var $length, firstPartSize, _this = this,
        t1 = _this._head,
        t2 = _this._tail,
        t3 = _this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        B.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        B.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        B.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this._tail, _this._table, 0);
        return _this._tail + firstPartSize;
      }
    },
    $isQueue: 1
  };
  A._ListQueueIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        A.throwExpression(A.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._collection$_end) {
        _this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      _this._collection$_current = t1[t2];
      _this._collection$_position = (t2 + 1 & t1.length - 1) >>> 0;
      return true;
    }
  };
  A.SetMixin.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this, $T._eval$1("WhereTypeIterable<0>"));
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    map$1$1(_, f, $T) {
      return new A.EfficientLengthMappedIterable(this, f, A._instanceType(this)._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    where$1(_, f) {
      return new A.WhereIterable(this, f, A._instanceType(this)._eval$1("WhereIterable<1>"));
    },
    forEach$1(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = "" + A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + A.S(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    any$1(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()))
          return true;
      return false;
    },
    take$1(_, n) {
      return A.TakeIterable_TakeIterable(this, n, A._instanceType(this)._precomputed1);
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      A.checkNotNullable(index, _s5_, type$.int);
      A.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$withLength(index, elementIndex, this, null, _s5_));
    }
  };
  A._SetBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  A._UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      return A._UnmodifiableSetMixin__throwUnmodifiable();
    },
    remove$1(_, value) {
      return A._UnmodifiableSetMixin__throwUnmodifiable();
    }
  };
  A._UnmodifiableSet.prototype = {
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    },
    get$iterator(_) {
      var t1 = this._map;
      t1 = t1.get$keys(t1);
      return t1.get$iterator(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    }
  };
  A._SplayTreeNode.prototype = {
    get$key() {
      return this.key;
    }
  };
  A._SplayTreeSetNode.prototype = {};
  A._SplayTreeMapNode.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    },
    $isMapEntry: 1,
    get$value(receiver) {
      return this.value;
    }
  };
  A._SplayTree.prototype = {
    _splay$1(key) {
      var compare, comp, current, newTreeLeft, left, newTreeRight, right, currentLeft, currentLeft0, currentRight, currentRight0, _this = this, _null = null,
        root = _this.get$_root();
      if (root == null) {
        _this._compare$2(key, key);
        return -1;
      }
      compare = _this.get$_compare();
      for (comp = _null, current = root, newTreeLeft = comp, left = newTreeLeft, newTreeRight = left, right = newTreeRight; true;) {
        comp = compare.call$2(current.key, key);
        if (comp > 0) {
          currentLeft = current._left;
          if (currentLeft == null)
            break;
          comp = compare.call$2(currentLeft.key, key);
          if (comp > 0) {
            current._left = currentLeft._right;
            currentLeft._right = current;
            currentLeft0 = currentLeft._left;
            if (currentLeft0 == null) {
              current = currentLeft;
              break;
            }
            current = currentLeft;
            currentLeft = currentLeft0;
          }
          if (right == null)
            newTreeRight = current;
          else
            right._left = current;
          right = current;
          current = currentLeft;
        } else {
          if (comp < 0) {
            currentRight = current._right;
            if (currentRight == null)
              break;
            comp = compare.call$2(currentRight.key, key);
            if (comp < 0) {
              current._right = currentRight._left;
              currentRight._left = current;
              currentRight0 = currentRight._right;
              if (currentRight0 == null) {
                current = currentRight;
                break;
              }
              current = currentRight;
              currentRight = currentRight0;
            }
            if (left == null)
              newTreeLeft = current;
            else
              left._right = current;
          } else
            break;
          left = current;
          current = currentRight;
        }
      }
      if (left != null) {
        left._right = current._left;
        current._left = newTreeLeft;
      }
      if (right != null) {
        right._left = current._right;
        current._right = newTreeRight;
      }
      if (_this.get$_root() !== current) {
        _this.set$_root(current);
        ++_this._splayCount;
      }
      return comp;
    },
    _splayMin$1(node) {
      var current, nextLeft0,
        nextLeft = node._left;
      for (current = node; nextLeft != null; current = nextLeft, nextLeft = nextLeft0) {
        current._left = nextLeft._right;
        nextLeft._right = current;
        nextLeft0 = nextLeft._left;
      }
      return current;
    },
    _splayMax$1(node) {
      var current, nextRight0,
        nextRight = node._right;
      for (current = node; nextRight != null; current = nextRight, nextRight = nextRight0) {
        current._right = nextRight._left;
        nextRight._left = current;
        nextRight0 = nextRight._right;
      }
      return current;
    },
    _remove$1(key) {
      var root, left, t1, root0, _this = this;
      if (_this.get$_root() == null)
        return null;
      if (_this._splay$1(key) !== 0)
        return null;
      root = _this.get$_root();
      left = root._left;
      --_this._count;
      t1 = root._right;
      if (left == null)
        _this.set$_root(t1);
      else {
        root0 = _this._splayMax$1(left);
        root0._right = t1;
        _this.set$_root(root0);
      }
      ++_this._modificationCount;
      return root;
    },
    _addNewRoot$2(node, comp) {
      var root, _this = this;
      ++_this._count;
      ++_this._modificationCount;
      root = _this.get$_root();
      if (root == null) {
        _this.set$_root(node);
        return;
      }
      if (comp < 0) {
        node._left = root;
        node._right = root._right;
        root._right = null;
      } else {
        node._right = root;
        node._left = root._left;
        root._left = null;
      }
      _this.set$_root(node);
    },
    get$_collection$_first() {
      var _this = this,
        root = _this.get$_root();
      if (root == null)
        return null;
      _this.set$_root(_this._splayMin$1(root));
      return _this.get$_root();
    },
    get$_collection$_last() {
      var _this = this,
        root = _this.get$_root();
      if (root == null)
        return null;
      _this.set$_root(_this._splayMax$1(root));
      return _this.get$_root();
    },
    _containsKey$1(key) {
      return this._validKey$1(key) && this._splay$1(key) === 0;
    },
    _compare$2(arg0, arg1) {
      return this.get$_compare().call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this.get$_validKey().call$1(arg0);
    }
  };
  A.SplayTreeMap.prototype = {
    $index(_, key) {
      var _this = this;
      if (!_this._validKey.call$1(key))
        return null;
      if (_this._root != null)
        if (_this._splay$1(key) === 0)
          return _this._root.value;
      return null;
    },
    $indexSet(_, key, value) {
      var t1, t2, _this = this,
        comp = _this._splay$1(key);
      if (comp === 0) {
        t1 = _this._root;
        t2 = A._instanceType(t1);
        t2 = new A._SplayTreeMapNode(value, t1.key, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_SplayTreeMapNode<1,2>"));
        t2._left = t1._left;
        t2._right = t1._right;
        _this._root = t2;
        ++_this._splayCount;
        return;
      }
      t1 = _this.$ti;
      _this._addNewRoot$2(new A._SplayTreeMapNode(value, key, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapNode<1,2>")), comp);
    },
    putIfAbsent$2(key, ifAbsent) {
      var modificationCount, splayCount, value, t1, _this = this,
        comp = _this._splay$1(key);
      if (comp === 0)
        return _this._root.value;
      modificationCount = _this._modificationCount;
      splayCount = _this._splayCount;
      value = ifAbsent.call$0();
      if (modificationCount !== _this._modificationCount)
        throw A.wrapException(A.ConcurrentModificationError$(_this));
      if (splayCount !== _this._splayCount)
        comp = _this._splay$1(key);
      t1 = _this.$ti;
      _this._addNewRoot$2(new A._SplayTreeMapNode(value, key, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapNode<1,2>")), comp);
      return value;
    },
    get$isEmpty(_) {
      return this._root == null;
    },
    forEach$1(_, f) {
      var nodes, node,
        t1 = this.$ti;
      t1 = t1._eval$1("@<1>")._bind$1(t1._rest[1]);
      nodes = new A._SplayTreeMapEntryIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeMapNode<1,2>>")), this._splayCount, t1._eval$1("_SplayTreeMapEntryIterator<1,2>"));
      for (; nodes.moveNext$0();) {
        node = nodes.get$current();
        f.call$2(node.get$key(), node.get$value(node));
      }
    },
    get$length(_) {
      return this._count;
    },
    containsKey$1(key) {
      return this._containsKey$1(key);
    },
    containsValue$1(value) {
      return new A.SplayTreeMap_containsValue_visit(this, value, this._splayCount).call$1(this._root);
    },
    get$keys(_) {
      var t1 = this.$ti;
      return new A._SplayTreeKeyIterable(this, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeMapNode<1,2>"))._eval$1("_SplayTreeKeyIterable<1,2>"));
    },
    get$entries(_) {
      var t1 = this.$ti;
      return new A._SplayTreeMapEntryIterable(this, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapEntryIterable<1,2>"));
    },
    $isMap: 1,
    _compare$2(arg0, arg1) {
      return this._compare.call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this._validKey.call$1(arg0);
    },
    get$_root() {
      return this._root;
    },
    get$_compare() {
      return this._compare;
    },
    set$_root(val) {
      return this._root = val;
    }
  };
  A.SplayTreeMap_closure.prototype = {
    call$1(a) {
      return this.K._is(a);
    },
    $signature: 14
  };
  A.SplayTreeMap_containsValue_visit.prototype = {
    call$1(node) {
      var t1, t2, t3, t4, _this = this;
      for (t1 = _this.initialSplayCount, t2 = _this.$this, t3 = _this.value; node != null;) {
        if (J.$eq$(node.value, t3))
          return true;
        if (t1 !== t2._splayCount)
          throw A.wrapException(A.ConcurrentModificationError$(t2));
        t4 = node._right;
        if (t4 != null && _this.call$1(t4))
          return true;
        node = node._left;
      }
      return false;
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(_SplayTreeMapNode<1,2>?)");
    }
  };
  A._SplayTreeIterator.prototype = {
    get$current() {
      var t1 = this._path;
      if (t1.length === 0) {
        A._instanceType(this)._eval$1("_SplayTreeIterator.T")._as(null);
        return null;
      }
      return this._getValue$1(B.JSArray_methods.get$last(t1));
    },
    moveNext$0() {
      var node, next, _this = this,
        t1 = _this._modificationCount,
        t2 = _this._tree,
        t3 = t2._modificationCount;
      if (t1 !== t3) {
        if (t1 == null) {
          _this._modificationCount = t3;
          node = t2.get$_root();
          for (t1 = _this._path; node != null;) {
            t1.push(node);
            node = node._left;
          }
          return t1.length !== 0;
        }
        throw A.wrapException(A.ConcurrentModificationError$(t2));
      }
      t1 = _this._path;
      if (t1.length === 0)
        return false;
      if (_this._splayCount !== t2._splayCount) {
        t3 = B.JSArray_methods.get$last(t1);
        B.JSArray_methods.clear$0(t1);
        t2._splay$1(t3.key);
        t3 = t2.get$_root();
        t3.toString;
        t1.push(t3);
        _this._splayCount = t2._splayCount;
      }
      node = B.JSArray_methods.get$last(t1);
      next = node._right;
      if (next != null) {
        for (; next != null;) {
          t1.push(next);
          next = next._left;
        }
        return true;
      }
      t1.pop();
      while (true) {
        if (!(t1.length !== 0 && B.JSArray_methods.get$last(t1)._right === node))
          break;
        node = t1.pop();
      }
      return t1.length !== 0;
    }
  };
  A._SplayTreeKeyIterable.prototype = {
    get$length(_) {
      return this._tree._count;
    },
    get$isEmpty(_) {
      return this._tree._count === 0;
    },
    get$iterator(_) {
      var t1 = this._tree,
        t2 = this.$ti;
      return new A._SplayTreeKeyIterator(t1, A._setArrayType([], t2._eval$1("JSArray<2>")), t1._splayCount, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_SplayTreeKeyIterator<1,2>"));
    },
    contains$1(_, o) {
      return this._tree._containsKey$1(o);
    }
  };
  A._SplayTreeMapEntryIterable.prototype = {
    get$length(_) {
      return this._map._count;
    },
    get$isEmpty(_) {
      return this._map._count === 0;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = this.$ti;
      t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]);
      return new A._SplayTreeMapEntryIterator(t1, A._setArrayType([], t2._eval$1("JSArray<_SplayTreeMapNode<1,2>>")), t1._splayCount, t2._eval$1("_SplayTreeMapEntryIterator<1,2>"));
    }
  };
  A._SplayTreeKeyIterator.prototype = {
    _getValue$1(node) {
      return node.key;
    }
  };
  A._SplayTreeMapEntryIterator.prototype = {
    _getValue$1(node) {
      return node;
    }
  };
  A.SplayTreeSet.prototype = {
    get$iterator(_) {
      var t1 = this.$ti;
      return new A._SplayTreeKeyIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
    },
    get$length(_) {
      return this._count;
    },
    get$isEmpty(_) {
      return this._root == null;
    },
    get$isNotEmpty(_) {
      return this._root != null;
    },
    get$first(_) {
      if (this._count === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.get$_collection$_first().key;
    },
    get$last(_) {
      if (this._count === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.get$_collection$_last().key;
    },
    contains$1(_, element) {
      return this._validKey.call$1(element) && this._splay$1(this.$ti._precomputed1._as(element)) === 0;
    },
    add$1(_, element) {
      return this._add$1(element);
    },
    _add$1(element) {
      var compare = this._splay$1(element);
      if (compare === 0)
        return false;
      this._addNewRoot$2(new A._SplayTreeSetNode(element, this.$ti._eval$1("_SplayTreeSetNode<1>")), compare);
      return true;
    },
    remove$1(_, object) {
      if (!this._validKey.call$1(object))
        return false;
      return this._remove$1(this.$ti._precomputed1._as(object)) != null;
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1,
    _compare$2(arg0, arg1) {
      return this._compare.call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this._validKey.call$1(arg0);
    },
    get$_root() {
      return this._root;
    },
    get$_compare() {
      return this._compare;
    },
    set$_root(val) {
      return this._root = val;
    }
  };
  A.SplayTreeSet_closure.prototype = {
    call$1(v) {
      return this.E._is(v);
    },
    $signature: 14
  };
  A._ListBase_Object_ListMixin.prototype = {};
  A._SplayTreeMap__SplayTree_MapMixin.prototype = {};
  A._SplayTreeSet__SplayTree_IterableMixin.prototype = {};
  A._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A.__SetBase_Object_SetMixin.prototype = {};
  A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin.prototype = {};
  A.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 33
  };
  A.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 33
  };
  A.Base64Codec.prototype = {
    normalize$3(_, source, start, end) {
      var inverseAlphabet, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t1, t2, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = A.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        char = B.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = A.hexDigitValue(B.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = A.hexDigitValue(B.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = B.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t1 = buffer == null ? null : buffer._contents.length;
                if (t1 == null)
                  t1 = 0;
                firstPadding = t1 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t1 = buffer;
            } else
              t1 = buffer;
            t2 = t1._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t1._contents = t2 + A.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += B.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {};
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.Utf8Codec.prototype = {
    decode$1(codeUnits) {
      return B.Utf8Decoder_false.convert$1(codeUnits);
    },
    get$encoder() {
      return B.C_Utf8Encoder;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var t1, t2, encoder,
        end = A.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = $length * 3;
      t2 = new Uint8Array(t1);
      encoder = new A._Utf8Encoder(t2);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        B.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return new Uint8Array(t2.subarray(0, A._checkValidRange(0, encoder._bufferIndex, t1)));
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1;
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (B.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = B.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, B.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      var t1 = this._allowMalformed,
        result = A.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new A._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var bytes, errorOffset, result, t1, message, _this = this,
        end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this._convertRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var t1, type, t2, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        byte = bytes[start];
      $label0$0:
        for (t1 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = B.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = B.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += A.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t1)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t2 = buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t2 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            byte = bytes[i];
          }
          i0 = i + 1;
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m)
                buffer._contents += A.Primitives_stringFromCharCode(bytes[m]);
            else
              buffer._contents += A.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t1)
          buffer._contents += A.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1 = this.sb,
        t2 = this._box_0,
        t3 = t1._contents += t2.comma;
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += A.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 73
  };
  A.DateTime.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this.isUtc === other.isUtc;
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
    },
    get$hashCode(_) {
      var t1 = this._core$_value;
      return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  A.DateTime_parse_parseIntOrZero.prototype = {
    call$1(matched) {
      if (matched == null)
        return 0;
      return A.int_parse(matched, null);
    },
    $signature: 51
  };
  A.DateTime_parse_parseMilliAndMicroseconds.prototype = {
    call$1(matched) {
      var t1, result, i;
      if (matched == null)
        return 0;
      for (t1 = matched.length, result = 0, i = 0; i < 6; ++i) {
        result *= 10;
        if (i < t1)
          result += B.JSString_methods._codeUnitAt$1(matched, i) ^ 48;
      }
      return result;
    },
    $signature: 51
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && true;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(0);
    },
    compareTo$1(_, other) {
      return 0;
    },
    toString$0(_) {
      return "" + Math.abs(0) + ":00:00." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(0), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.getTraceFromException(this.$thrownJsError);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    },
    $isTypeError: 1
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return this.invalidValue;
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return this.invalidValue;
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (this.invalidValue < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    $isRangeError: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += A.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._memberName.__internal$_name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = B.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = B.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    }
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    followedBy$1(_, other) {
      var _this = this,
        t1 = A._instanceType(_this);
      if (t1._eval$1("EfficientLengthIterable<Iterable.E>")._is(_this))
        return A.FollowedByIterable_FollowedByIterable$firstEfficient(_this, other, t1._eval$1("Iterable.E"));
      return new A.FollowedByIterable(_this, other, t1._eval$1("FollowedByIterable<Iterable.E>"));
    },
    map$1$1(_, toElement, $T) {
      return A.MappedIterable_MappedIterable(this, toElement, A._instanceType(this)._eval$1("Iterable.E"), $T);
    },
    where$1(_, test) {
      return new A.WhereIterable(this, test, A._instanceType(this)._eval$1("WhereIterable<Iterable.E>"));
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this, $T._eval$1("WhereTypeIterable<0>"));
    },
    expand$1$1(_, toElements, $T) {
      return new A.ExpandIterable(this, toElements, A._instanceType(this)._eval$1("@<Iterable.E>")._bind$1($T)._eval$1("ExpandIterable<1,2>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1(_, action) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current());
    },
    fold$1$2(_, initialValue, combine) {
      var t1, value;
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    every$1(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!test.call$1(t1.get$current()))
          return false;
      return true;
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += A.S(J.toString$0$(iterator.get$current()));
        while (iterator.moveNext$0());
      } else {
        t1 = "" + A.S(J.toString$0$(iterator.get$current()));
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + A.S(J.toString$0$(iterator.get$current()));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    any$1(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$of(this, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    firstWhere$2$orElse(_, test, orElse) {
      var t1, element;
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element))
          return element;
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      A.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$withLength(index, elementIndex, this, null, "index"));
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.Iterator.prototype = {};
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    },
    get$key() {
      return this.key;
    },
    get$value(receiver) {
      return this.value;
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      throw A.wrapException(A.NoSuchMethodError$_(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    get$runtimeType(_) {
      return A.getRuntimeType(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1
  };
  A.Runes.prototype = {
    get$iterator(_) {
      return new A.RuneIterator(this.string);
    },
    get$last(_) {
      var code, previousCode,
        t1 = this.string,
        t2 = t1.length;
      if (t2 === 0)
        throw A.wrapException(A.StateError$("No elements."));
      code = B.JSString_methods.codeUnitAt$1(t1, t2 - 1);
      if ((code & 64512) === 56320 && t2 > 1) {
        previousCode = B.JSString_methods.codeUnitAt$1(t1, t2 - 2);
        if ((previousCode & 64512) === 55296)
          return A._combineSurrogatePair(previousCode, code);
      }
      return code;
    }
  };
  A.RuneIterator.prototype = {
    get$current() {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._core$_position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      codeUnit = B.JSString_methods._codeUnitAt$1(t2, t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        nextCodeUnit = B.JSString_methods._codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = A._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    write$1(_, obj) {
      this._contents += A.S(obj);
    },
    writeCharCode$1(charCode) {
      this._contents += A.Primitives_stringFromCharCode(charCode);
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 84
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 85
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 86
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwUnnamedLateFieldADI();
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        if (pathToSplit.length !== 0 && B.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), A.core_Uri_decodeComponent$closure(), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwUnnamedLateFieldADI();
        value = _this.___Uri_pathSegments_FI = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwUnnamedLateFieldADI();
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$userInfo(_) {
      return this._userInfo;
    },
    get$host(_) {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port(_) {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveCompareStart(scheme, thisScheme, 0) >= 0;
    },
    replace$1$path(path) {
      var _this = this,
        scheme = _this.scheme,
        isFile = scheme === "file",
        userInfo = _this._userInfo,
        port = _this._port,
        host = _this._host;
      if (!(host != null))
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      path = A._Uri__makePath(path, 0, path.length, null, scheme, host != null);
      return A._Uri$_internal(scheme, userInfo, host, port, path, _this._query, _this._fragment);
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (B.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || B.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(_, reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, t1, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo(reference);
          targetHost = reference.get$host(reference);
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = A._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo(reference);
          targetHost = reference.get$host(reference);
          targetPort = A._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = A._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$path(reference) === "")
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path(reference)) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path(reference)));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path(reference));
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path(reference) : A._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path(reference));
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path(reference));
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasPort() {
      return this._port != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      t1 = $.$get$_Uri__isWindowsCached();
      if (t1)
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host(_this) !== "")
          A.throwExpression(A.UnsupportedError$(string$.Cannotn));
        pathSegments = _this.get$pathSegments();
        A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo(other))
              if (_this.get$host(_this) === other.get$host(other))
                if (_this.get$port(_this) === other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query()) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path(receiver) {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(B.List_qg40, s, B.C_Utf8Codec, false);
    },
    $signature: 4
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._text;
        t2 = _this._separatorIndices[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t1, "?", t2);
        end = t1.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t1, queryIndex + 1, end, B.List_CVk, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t1, t2, end, B.List_qg4, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t1 = this._text;
      return this._separatorIndices[0] === -1 ? "data:" + t1 : t1;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 88
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i;
      for (t1 = chars.length, i = 0; i < t1; ++i)
        target[B.JSString_methods._codeUnitAt$1(chars, i) ^ 96] = transition;
    },
    $signature: 53
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n;
      for (i = B.JSString_methods._codeUnitAt$1(range, 0), n = B.JSString_methods._codeUnitAt$1(range, 1); i <= n; ++i)
        target[(i ^ 96) >>> 0] = transition;
    },
    $signature: 53
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo(_) {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port(_) {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path(_) {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (B.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return B.List_empty;
      parts = A._setArrayType([], type$.JSArray_String);
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          parts.push(B.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      parts.push(B.JSString_methods.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$1$path(path) {
      var host, t2, query, fragment, _this = this, _null = null,
        scheme = _this.get$scheme(),
        isFile = scheme === "file",
        t1 = _this._hostStart,
        userInfo = t1 > 0 ? B.JSString_methods.substring$2(_this._uri, _this._schemeEnd + 3, t1) : "",
        port = _this.get$hasPort() ? _this.get$port(_this) : _null;
      t1 = _this._hostStart;
      if (t1 > 0)
        host = B.JSString_methods.substring$2(_this._uri, t1, _this._portStart);
      else
        host = userInfo.length !== 0 || port != null || isFile ? "" : _null;
      path = A._Uri__makePath(path, 0, path.length, _null, scheme, host != null);
      t1 = _this._queryStart;
      t2 = _this._fragmentStart;
      query = t1 < t2 ? B.JSString_methods.substring$2(_this._uri, t1 + 1, t2) : _null;
      t1 = _this._fragmentStart;
      t2 = _this._uri;
      fragment = t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    resolve$1(_, reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (B.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, t3, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      }
      t3 = $.$get$_Uri__isWindowsCached();
      if (t3)
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._hostStart < _this._portStart)
          A.throwExpression(A.UnsupportedError$(string$.Cannotn));
        t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(_this),
        t3 = _this._hostStart > 0 ? _this.get$host(_this) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.Expando.prototype = {
    toString$0(_) {
      return "Expando:null";
    }
  };
  A.FileSystemEntityType.prototype = {
    toString$0(_) {
      return B.List_Ucj[this._type];
    }
  };
  A._JSRandom.prototype = {
    nextInt$1(max) {
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0() {
      return Math.random();
    }
  };
  A.CommandRunner.prototype = {
    get$usage() {
      return A.wrapText(this.description + "\n\n", null, this._argParser.usageLineLength) + this.get$_usageWithoutDescription();
    },
    get$_usageWithoutDescription() {
      var t1 = this.executableName,
        t2 = this._argParser,
        t3 = t2.usageLineLength;
      t3 = "" + ("Usage: " + A.wrapText(t1 + " <migrator> [options] <entrypoint.scss...>", 6, t3) + "\n\n") + (A.wrapText("Global options:", null, t3) + "\n") + (new A._Usage(t2._optionsAndSeparators, new A.StringBuffer(""), t3).generate$0() + "\n\n") + (A._getCommandUsage(this._commands, false, t3) + "\n\n") + A.wrapText('Run "' + t1 + ' help <command>" for more information about a command.', null, t3);
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    },
    CommandRunner$4$suggestionDistanceLimit$usageLineLength(executableName, description, suggestionDistanceLimit, usageLineLength, $T) {
      var t1;
      this._argParser.addFlag$4$abbr$help$negatable("help", "h", "Print this usage information.", false);
      t1 = new A.HelpCommand(A.ArgParser_ArgParser(null), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $T._eval$1("Command<0>")), $T._eval$1("HelpCommand<0>"));
      t1.Command$0($T);
      this.addCommand$1(t1);
    },
    usageException$1(message) {
      return A.throwExpression(A.UsageException$(message, this.get$_usageWithoutDescription()));
    },
    addCommand$1(command) {
      var t2, t3, t4, _i, $name, parser, t5,
        t1 = A._setArrayType([command.get$name(command)], type$.JSArray_String);
      B.JSArray_methods.addAll$1(t1, B.List_empty);
      for (t2 = t1.length, t3 = this._commands, t4 = this._argParser, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        $name = t1[_i];
        t3.$indexSet(0, $name, command);
        parser = command.get$argParser();
        t5 = t4._arg_parser$_commands;
        if (t5.containsKey$1($name))
          A.throwExpression(A.ArgumentError$('Duplicate command "' + $name + '".', null));
        t5.$indexSet(0, $name, parser);
      }
      command._runner = this;
    },
    parse$1(_, args) {
      var error, command, commandName, t1, exception, t2, t3, _null = null;
      try {
        t1 = A.Parser$(_null, this._argParser, A.ListQueue_ListQueue$of(args, type$.String), _null, _null).parse$0(0);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.ArgParserException) {
          error = t1;
          if (error.commands.length === 0)
            this.usageException$1(error.message);
          t1 = this._commands.$index(0, B.JSArray_methods.get$first(error.commands));
          t1.toString;
          command = t1;
          for (t1 = error.commands, t1 = A.SubListIterable$(t1, 1, _null, A._arrayInstanceType(t1)._precomputed1), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
            t3 = t1.__internal$_current;
            commandName = t3 == null ? t2._as(t3) : t3;
            t3 = command._subcommands.$index(0, commandName);
            t3.toString;
            command = t3;
          }
          command.usageException$1(error.message);
        } else
          throw exception;
      }
    },
    runCommand$1(topLevelResults) {
      return this.runCommand$body$CommandRunner(topLevelResults, A._instanceType(this)._eval$1("CommandRunner.T?"));
    },
    runCommand$body$CommandRunner(topLevelResults, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, t2, argResults, command, argResults0, t3, line, toZone, requested, similarCommands, t4, commands, commandString, $async$temp1;
      var $async$runCommand$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                commands = $async$self._commands;
                commandString = $async$self.executableName;
                for (t1 = A._instanceType($async$self), t2 = t1._eval$1("Map<String,Command<CommandRunner.T>>"), argResults = topLevelResults, command = null; commands.__js_helper$_length !== 0; command = t4, argResults = argResults0) {
                  argResults0 = argResults.command;
                  if (argResults0 == null) {
                    t3 = argResults.rest;
                    if (t3.get$length(t3) === 0) {
                      if (command == null) {
                        line = A.CommandRunner.prototype.get$usage.call($async$self) + string$.x0a_See_;
                        toZone = $.printToZone;
                        if (toZone == null)
                          A.printString(line);
                        else
                          toZone.call$1(line);
                        $async$returnValue = null;
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      command.usageException$1('Missing subcommand for "' + commandString + '".');
                    } else {
                      requested = J.elementAt$1$ax(t3._collection$_source, 0);
                      similarCommands = $async$self._similarCommandsText$2(requested, commands.get$values(commands));
                      if (command == null)
                        $async$self.usageException$1('Could not find a command named "' + requested + '".' + similarCommands);
                      command.usageException$1('Could not find a subcommand named "' + requested + '" for "' + commandString + '".' + similarCommands);
                    }
                  }
                  t3 = argResults0.name;
                  t4 = commands.$index(0, t3);
                  t4.toString;
                  t4._globalResults = topLevelResults;
                  t4._argResults = argResults0;
                  commands = t2._as(t4._subcommands);
                  commandString += " " + A.S(t3);
                  if (argResults0.get$options(argResults0).contains$1(0, "help") && argResults0.$index(0, "help")) {
                    line = t4.get$usage();
                    toZone = $.printToZone;
                    if (toZone == null)
                      A.printString(line);
                    else
                      toZone.call$1(line);
                    $async$returnValue = null;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                }
                if (topLevelResults.$index(0, "help")) {
                  A.print(command.get$usage());
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$temp1 = t1._eval$1("CommandRunner.T?");
                $async$goto = 3;
                return A._asyncAwait(command.run$0(), $async$runCommand$1);
              case 3:
                // returning from await.
                $async$returnValue = $async$temp1._as($async$result);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$runCommand$1, $async$completer);
    },
    _similarCommandsText$2($name, commands) {
      var t2, t3, t4, t5, t6, _i, distance, t7,
        t1 = A._instanceType(this)._eval$1("Command<CommandRunner.T>"),
        distances = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.int),
        candidates = A.SplayTreeSet$(new A.CommandRunner__similarCommandsText_closure(this, distances), null, t1);
      for (t1 = new A.MappedIterator(J.get$iterator$ax(commands.__internal$_iterable), commands._f), t2 = type$.JSArray_String, t3 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        if (t4.get$hidden())
          continue;
        for (t5 = A._setArrayType([t4.get$name(t4)], t2), B.JSArray_methods.addAll$1(t5, B.List_empty), B.JSArray_methods.addAll$1(t5, B.List_empty), t6 = t5.length, _i = 0; _i < t5.length; t5.length === t6 || (0, A.throwConcurrentModificationError)(t5), ++_i) {
          distance = A._editDistance($name, t5[_i]);
          if (distance <= 2) {
            t7 = distances.$index(0, t4);
            if (t7 == null)
              t7 = distance;
            distances.$indexSet(0, t4, Math.min(t7, distance));
            candidates._add$1(t4);
          }
        }
      }
      if (candidates._root == null)
        return "";
      t1 = "" + "\n\nDid you mean one of these?\n";
      for (t2 = candidates.$ti, t2 = new A._SplayTreeKeyIterator(candidates, A._setArrayType([], t2._eval$1("JSArray<_SplayTreeSetNode<1>>")), candidates._splayCount, t2._eval$1("@<1>")._bind$1(t2._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")); t2.moveNext$0(); t1 = t3) {
        t3 = t2.get$current();
        t3 = t1 + ("  " + t3.get$name(t3) + "\n");
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.CommandRunner__similarCommandsText_closure.prototype = {
    call$2(a, b) {
      var t1 = this.distances,
        t2 = t1.$index(0, a);
      t2.toString;
      t1 = t1.$index(0, b);
      t1.toString;
      return t2 - t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("int(Command<CommandRunner.T>,Command<CommandRunner.T>)");
    }
  };
  A.Command.prototype = {
    get$invocation() {
      var command, invocation, _this = this,
        parents = A._setArrayType([_this.get$name(_this)], type$.JSArray_String);
      for (command = null; false; command = command.get$parent(command))
        parents.push(command.get$name(command));
      parents.push(_this.get$runner().executableName);
      invocation = new A.ReversedListIterable(parents, type$.ReversedListIterable_String).join$1(0, " ");
      return _this._subcommands.__js_helper$_length !== 0 ? invocation + " <subcommand> [arguments]" : invocation + " [arguments]";
    },
    get$runner() {
      var t1 = this._runner;
      return t1;
    },
    get$argParser() {
      return this._argParser;
    },
    get$usage() {
      return A.wrapText(this.get$description() + "\n\n", null, this.get$argParser().usageLineLength) + this.get$_usageWithoutDescription();
    },
    _wrap$2$hangingIndent(text, hangingIndent) {
      return A.wrapText(text, hangingIndent, this.get$argParser().usageLineLength);
    },
    _wrap$1(text) {
      return this._wrap$2$hangingIndent(text, null);
    },
    get$_usageWithoutDescription() {
      var _this = this,
        t1 = _this.get$argParser(),
        t2 = A.wrapText(_this.get$invocation(), 7, _this.get$argParser().usageLineLength),
        t3 = _this.get$argParser();
      t3 = "" + ("Usage: " + t2 + "\n") + (new A._Usage(t3._optionsAndSeparators, new A.StringBuffer(""), t3.usageLineLength).generate$0() + "\n");
      t2 = _this._subcommands;
      t1 = t2.__js_helper$_length !== 0 ? t3 + "\n" + (A._getCommandUsage(t2, true, t1.usageLineLength) + "\n") : t3;
      t1 = t1 + "\n" + A.wrapText('Run "' + _this.get$runner().executableName + ' help" to see global options.', null, _this.get$argParser().usageLineLength);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$hidden() {
      var t1 = this._subcommands;
      if (t1.__js_helper$_length === 0)
        return false;
      return t1.get$values(t1).every$1(0, new A.Command_hidden_closure(this));
    },
    Command$0($T) {
      this.get$argParser();
      this.get$argParser().addFlag$4$abbr$help$negatable("help", "h", "Print this usage information.", false);
    },
    run$0() {
      throw A.wrapException(A.UnimplementedError$(this._wrap$1("Leaf command " + this.toString$0(0) + " must implement run().")));
    },
    usageException$1(message) {
      return A.throwExpression(A.UsageException$(this._wrap$1(message), this.get$_usageWithoutDescription()));
    }
  };
  A.Command_hidden_closure.prototype = {
    call$1(subcommand) {
      return subcommand.get$hidden();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(Command<Command.T>)");
    }
  };
  A._getCommandUsage_closure.prototype = {
    call$1($name) {
      this.commands.$index(0, $name).toString;
      return !B.JSArray_methods.contains$1(B.List_empty, $name);
    },
    $signature: 5
  };
  A._getCommandUsage_closure0.prototype = {
    call$1($name) {
      return !this.commands.$index(0, $name).get$hidden();
    },
    $signature: 5
  };
  A._getCommandUsage_closure1.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_Command_dynamic);
    },
    $signature: 99
  };
  A._getCommandUsage_closure2.prototype = {
    call$1($name) {
      return $name.length;
    },
    $signature: 31
  };
  A.ArgParser.prototype = {
    addFlag$5$abbr$defaultsTo$help$negatable($name, abbr, defaultsTo, help, negatable) {
      var _null = null;
      this._addOption$12$aliases$hide$negatable($name, abbr, help, _null, _null, _null, defaultsTo, _null, B.OptionType_nMZ, B.List_empty, false, negatable);
    },
    addFlag$4$abbr$help$negatable($name, abbr, help, negatable) {
      return this.addFlag$5$abbr$defaultsTo$help$negatable($name, abbr, false, help, negatable);
    },
    addFlag$3$abbr$help($name, abbr, help) {
      return this.addFlag$5$abbr$defaultsTo$help$negatable($name, abbr, false, help, true);
    },
    addFlag$2$help($name, help) {
      return this.addFlag$5$abbr$defaultsTo$help$negatable($name, null, false, help, true);
    },
    addFlag$3$help$negatable($name, help, negatable) {
      return this.addFlag$5$abbr$defaultsTo$help$negatable($name, null, false, help, negatable);
    },
    addFlag$3$defaultsTo$help($name, defaultsTo, help) {
      return this.addFlag$5$abbr$defaultsTo$help$negatable($name, null, defaultsTo, help, true);
    },
    addMultiOption$7$abbr$allowed$allowedHelp$help$splitCommas$valueHelp($name, abbr, allowed, allowedHelp, help, splitCommas, valueHelp) {
      var t1 = A._setArrayType([], type$.JSArray_String);
      this._addOption$12$aliases$hide$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, t1, null, B.OptionType_qyr, B.List_empty, false, splitCommas);
    },
    addMultiOption$5$abbr$help$splitCommas$valueHelp($name, abbr, help, splitCommas, valueHelp) {
      return this.addMultiOption$7$abbr$allowed$allowedHelp$help$splitCommas$valueHelp($name, abbr, null, null, help, splitCommas, valueHelp);
    },
    addMultiOption$4$abbr$help$valueHelp($name, abbr, help, valueHelp) {
      return this.addMultiOption$7$abbr$allowed$allowedHelp$help$splitCommas$valueHelp($name, abbr, null, null, help, true, valueHelp);
    },
    addMultiOption$4$allowed$allowedHelp$help($name, allowed, allowedHelp, help) {
      return this.addMultiOption$7$abbr$allowed$allowedHelp$help$splitCommas$valueHelp($name, null, allowed, allowedHelp, help, true, null);
    },
    addMultiOption$4$abbr$help$splitCommas($name, abbr, help, splitCommas) {
      return this.addMultiOption$7$abbr$allowed$allowedHelp$help$splitCommas$valueHelp($name, abbr, null, null, help, splitCommas, null);
    },
    _addOption$13$aliases$hide$negatable$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, aliases, hide, negatable, splitCommas) {
      var existing, t2, t3, option, _i, _this = this, _null = null,
        t1 = A._setArrayType([$name], type$.JSArray_String);
      B.JSArray_methods.addAll$1(t1, aliases);
      if (B.JSArray_methods.any$1(t1, new A.ArgParser__addOption_closure(_this)))
        throw A.wrapException(A.ArgumentError$('Duplicate option or alias "' + $name + '".', _null));
      t1 = abbr != null;
      if (t1) {
        existing = _this.findByAbbreviation$1(abbr);
        if (existing != null)
          throw A.wrapException(A.ArgumentError$('Abbreviation "' + abbr + '" is already used by "' + existing.name + '".', _null));
      }
      t2 = allowed == null ? _null : A.List_List$unmodifiable(allowed, type$.String);
      if (allowedHelp == null)
        t3 = _null;
      else {
        t3 = type$.String;
        t3 = A.ConstantMap_ConstantMap$from(allowedHelp, t3, t3);
      }
      option = new A.Option($name, abbr, help, valueHelp, t2, t3, defaultsTo, negatable, callback, type, splitCommas == null ? type === B.OptionType_qyr : splitCommas, false, false);
      if ($name.length === 0)
        A.throwExpression(A.ArgumentError$("Name cannot be empty.", _null));
      else if (B.JSString_methods.startsWith$1($name, "-"))
        A.throwExpression(A.ArgumentError$("Name " + $name + ' cannot start with "-".', _null));
      t2 = $.$get$Option__invalidChars()._nativeRegExp;
      if (t2.test($name))
        A.throwExpression(A.ArgumentError$('Name "' + $name + '" contains invalid characters.', _null));
      if (t1) {
        if (abbr.length !== 1)
          A.throwExpression(A.ArgumentError$("Abbreviation must be null or have length 1.", _null));
        else if (abbr === "-")
          A.throwExpression(A.ArgumentError$('Abbreviation cannot be "-".', _null));
        if (t2.test(abbr))
          A.throwExpression(A.ArgumentError$("Abbreviation is an invalid character.", _null));
      }
      _this._options.$indexSet(0, $name, option);
      _this._optionsAndSeparators.push(option);
      for (t1 = _this._aliases, _i = 0; false; ++_i)
        t1.$indexSet(0, aliases[_i], $name);
    },
    _addOption$12$aliases$hide$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, aliases, hide, splitCommas) {
      return this._addOption$13$aliases$hide$negatable$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, aliases, hide, false, splitCommas);
    },
    _addOption$12$aliases$hide$negatable($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, aliases, hide, negatable) {
      return this._addOption$13$aliases$hide$negatable$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, aliases, hide, negatable, null);
    },
    findByAbbreviation$1(abbr) {
      var t1, t2;
      for (t1 = this.options._map, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2.abbr === abbr)
          return t2;
      }
      return null;
    },
    findByNameOrAlias$1($name) {
      var t1 = this._aliases.$index(0, $name);
      if (t1 == null)
        t1 = $name;
      return this.options._map.$index(0, t1);
    }
  };
  A.ArgParser__addOption_closure.prototype = {
    call$1($name) {
      return this.$this.findByNameOrAlias$1($name) != null;
    },
    $signature: 5
  };
  A.ArgParserException.prototype = {};
  A.ArgResults.prototype = {
    $index(_, $name) {
      var t1 = this._parser.options._map;
      if (!t1.containsKey$1($name))
        throw A.wrapException(A.ArgumentError$('Could not find an option named "' + $name + '".', null));
      t1 = t1.$index(0, $name);
      t1.toString;
      return t1.valueOrDefault$1(this._parsed.$index(0, $name));
    },
    get$options(_) {
      var result,
        t1 = this._parsed;
      t1 = t1.get$keys(t1);
      result = A.LinkedHashSet_LinkedHashSet$of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
      this._parser.options._map.forEach$1(0, new A.ArgResults_options_closure(result));
      return result;
    },
    wasParsed$1($name) {
      if (!this._parser.options._map.containsKey$1($name))
        throw A.wrapException(A.ArgumentError$('Could not find an option named "' + $name + '".', null));
      return this._parsed.containsKey$1($name);
    }
  };
  A.ArgResults_options_closure.prototype = {
    call$2($name, option) {
      if (option.defaultsTo != null)
        this.result.add$1(0, $name);
    },
    $signature: 57
  };
  A.HelpCommand.prototype = {
    get$description() {
      return "Display help information for " + this.get$runner().executableName + ".";
    },
    get$invocation() {
      return this.get$runner().executableName + " help [command]";
    },
    get$hidden() {
      return true;
    },
    run$0() {
      var t2, commands, commandString, t3, command, t4, t5, _this = this,
        t1 = _this._argResults.rest;
      if (t1.get$length(t1) === 0) {
        t1 = _this.get$runner();
        t1.toString;
        A.print(A.CommandRunner.prototype.get$usage.call(t1) + string$.x0a_See_);
        return;
      }
      t1 = _this.get$runner();
      t2 = type$.$env_1_1_String;
      commands = new A.UnmodifiableMapView(t1._commands, t2._bind$1(A._instanceType(t1)._eval$1("Command<CommandRunner.T>"))._eval$1("UnmodifiableMapView<1,2>"));
      commandString = _this.get$runner().executableName;
      for (t1 = _this._argResults.rest, t1 = new A.ListIterator(t1, t1.get$length(t1)), t3 = A._instanceType(t1)._precomputed1, command = null; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t5 = commands._map;
        if (t5.get$isEmpty(t5))
          command.usageException$1('Command "' + commandString + '" does not expect a subcommand.');
        if (t5.$index(0, t4) == null) {
          if (command == null)
            _this.get$runner().usageException$1('Could not find a command named "' + t4 + '".');
          command.usageException$1('Could not find a subcommand named "' + t4 + '" for "' + commandString + '".');
        }
        command = t5.$index(0, t4);
        commands = new A.UnmodifiableMapView(command._subcommands, t2._bind$1(A._instanceType(command)._eval$1("Command<Command.T>"))._eval$1("UnmodifiableMapView<1,2>"));
        commandString += " " + t4;
      }
      A.print(command.get$usage());
    },
    get$name() {
      return "help";
    }
  };
  A.Option.prototype = {
    valueOrDefault$1(value) {
      var t1;
      if (value != null)
        return value;
      if (this.type === B.OptionType_qyr) {
        t1 = this.defaultsTo;
        return t1 == null ? A._setArrayType([], type$.JSArray_String) : t1;
      }
      return this.defaultsTo;
    }
  };
  A.OptionType.prototype = {};
  A.Parser1.prototype = {
    parse$0(_) {
      var commandResults, commandName, commandParser, error, t1, t3, t4, t5, t6, t7, t8, command, exception, _this = this,
        t2 = _this._args;
      t2.toList$0(0);
      commandResults = null;
      for (t3 = _this._parser$_rest, t4 = _this._grammar, t5 = t4.commands, t6 = t2.$ti._precomputed1; !t2.get$isEmpty(t2);) {
        t7 = t2._head;
        if (t7 === t2._tail)
          A.throwExpression(A.IterableElementError_noElement());
        t7 = t2._table[t7];
        t8 = t7 == null;
        if ((t8 ? t6._as(t7) : t7) === "--") {
          t2.removeFirst$0();
          break;
        }
        if (t8)
          t7 = t6._as(t7);
        command = t5._map.$index(0, t7);
        if (command != null) {
          if (t3.length !== 0)
            A.throwExpression(A.ArgParserException$("Cannot specify arguments before a command.", null));
          commandName = t2.removeFirst$0();
          t5 = type$.JSArray_String;
          t6 = A._setArrayType([], t5);
          B.JSArray_methods.addAll$1(t6, t3);
          commandParser = new A.Parser1(commandName, _this, command, t2, t6, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
          try {
            commandResults = J.parse$0$z(commandParser);
          } catch (exception) {
            t2 = A.unwrapException(exception);
            if (t2 instanceof A.ArgParserException) {
              error = t2;
              t2 = error.message;
              t1 = A._setArrayType([commandName], t5);
              J.addAll$1$ax(t1, error.commands);
              throw A.wrapException(A.ArgParserException$(t2, t1));
            } else
              throw exception;
          }
          B.JSArray_methods.clear$0(t3);
          break;
        }
        if (_this._parseSoloOption$0())
          continue;
        if (_this._parseAbbreviation$1(_this))
          continue;
        if (_this._parseLongOption$0())
          continue;
        t3.push(t2.removeFirst$0());
      }
      t4.options._map.forEach$1(0, new A.Parser_parse_closure(_this));
      B.JSArray_methods.addAll$1(t3, t2);
      t2.clear$0(0);
      return new A.ArgResults(t4, _this._results, _this._commandName, commandResults, new A.UnmodifiableListView(t3, type$.UnmodifiableListView_String));
    },
    _readNextArgAsValue$1(option) {
      var t1 = this._args;
      if (t1.get$isEmpty(t1))
        A.throwExpression(A.ArgParserException$('Missing argument for "' + option.name + '".', null));
      this._setOption$3(this._results, option, t1.get$first(t1));
      t1.removeFirst$0();
    },
    _parseSoloOption$0() {
      var opt,
        t1 = this._args;
      if (t1.get$first(t1).length !== 2)
        return false;
      if (!B.JSString_methods.startsWith$1(t1.get$first(t1), "-"))
        return false;
      opt = t1.get$first(t1)[1];
      if (!A._isLetterOrDigit(B.JSString_methods._codeUnitAt$1(opt, 0)))
        return false;
      this._handleSoloOption$1(opt);
      return true;
    },
    _handleSoloOption$1(opt) {
      var t1, _this = this,
        option = _this._grammar.findByAbbreviation$1(opt);
      if (option == null) {
        t1 = _this._parent;
        if (t1 == null)
          A.throwExpression(A.ArgParserException$('Could not find an option or flag "-' + opt + '".', null));
        t1._handleSoloOption$1(opt);
        return true;
      }
      _this._args.removeFirst$0();
      if (option.type === B.OptionType_nMZ)
        _this._results.$indexSet(0, option.name, true);
      else
        _this._readNextArgAsValue$1(option);
      return true;
    },
    _parseAbbreviation$1(innermostCommand) {
      var t2, index, t3, t4, lettersAndDigits, rest,
        t1 = this._args;
      if (t1.get$first(t1).length < 2)
        return false;
      if (!B.JSString_methods.startsWith$1(t1.get$first(t1), "-"))
        return false;
      t2 = t1.$ti._precomputed1;
      index = 1;
      while (true) {
        t3 = t1._head;
        if (t3 === t1._tail)
          A.throwExpression(A.IterableElementError_noElement());
        t3 = t1._table[t3];
        t4 = t3 == null;
        if (index < (t4 ? t2._as(t3) : t3).length) {
          t3 = B.JSString_methods._codeUnitAt$1(t4 ? t2._as(t3) : t3, index);
          if (!(t3 >= 65 && t3 <= 90))
            if (!(t3 >= 97 && t3 <= 122))
              t3 = t3 >= 48 && t3 <= 57;
            else
              t3 = true;
          else
            t3 = true;
        } else
          t3 = false;
        if (!t3)
          break;
        ++index;
      }
      if (index === 1)
        return false;
      lettersAndDigits = B.JSString_methods.substring$2(t1.get$first(t1), 1, index);
      rest = B.JSString_methods.substring$1(t1.get$first(t1), index);
      if (B.JSString_methods.contains$1(rest, "\n") || B.JSString_methods.contains$1(rest, "\r"))
        return false;
      this._handleAbbreviation$3(lettersAndDigits, rest, innermostCommand);
      return true;
    },
    _handleAbbreviation$3(lettersAndDigits, rest, innermostCommand) {
      var t1, i, i0, _this = this,
        c = B.JSString_methods.substring$2(lettersAndDigits, 0, 1),
        first = _this._grammar.findByAbbreviation$1(c);
      if (first == null) {
        t1 = _this._parent;
        if (t1 == null)
          A.throwExpression(A.ArgParserException$(string$.Could_ + c + '".', null));
        t1._handleAbbreviation$3(lettersAndDigits, rest, innermostCommand);
        return true;
      } else if (first.type !== B.OptionType_nMZ)
        _this._setOption$3(_this._results, first, B.JSString_methods.substring$1(lettersAndDigits, 1) + rest);
      else {
        t1 = B.JSString_methods.substring$1(lettersAndDigits, 1);
        if (rest !== "")
          A.throwExpression(A.ArgParserException$('Option "-' + c + '" is a flag and cannot handle value "' + t1 + rest + '".', null));
        for (t1 = lettersAndDigits.length, i = 0; i < t1; i = i0) {
          i0 = i + 1;
          innermostCommand._parseShortFlag$1(B.JSString_methods.substring$2(lettersAndDigits, i, i0));
        }
      }
      _this._args.removeFirst$0();
      return true;
    },
    _parseShortFlag$1(c) {
      var t1,
        option = this._grammar.findByAbbreviation$1(c);
      if (option == null) {
        t1 = this._parent;
        if (t1 == null)
          A.throwExpression(A.ArgParserException$(string$.Could_ + c + '".', null));
        t1._parseShortFlag$1(c);
        return;
      }
      if (option.type !== B.OptionType_nMZ)
        A.throwExpression(A.ArgParserException$('Option "-' + c + '" must be a flag to be in a collapsed "-".', null));
      this._results.$indexSet(0, option.name, true);
    },
    _parseLongOption$0() {
      var index, t2, $name, t3, i, t4, t5, value,
        t1 = this._args;
      if (!B.JSString_methods.startsWith$1(t1.get$first(t1), "--"))
        return false;
      index = B.JSString_methods.indexOf$1(t1.get$first(t1), "=");
      t2 = index === -1;
      $name = t2 ? B.JSString_methods.substring$1(t1.get$first(t1), 2) : B.JSString_methods.substring$2(t1.get$first(t1), 2, index);
      for (t3 = $name.length, i = 0; i !== t3; ++i) {
        t4 = B.JSString_methods._codeUnitAt$1($name, i);
        if (!(t4 >= 65 && t4 <= 90))
          if (!(t4 >= 97 && t4 <= 122))
            t5 = t4 >= 48 && t4 <= 57;
          else
            t5 = true;
        else
          t5 = true;
        if (!(t5 || t4 === 45 || t4 === 95))
          return false;
      }
      value = t2 ? null : B.JSString_methods.substring$1(t1.get$first(t1), index + 1);
      if (value != null)
        t1 = B.JSString_methods.contains$1(value, "\n") || B.JSString_methods.contains$1(value, "\r");
      else
        t1 = false;
      if (t1)
        return false;
      this._handleLongOption$2($name, value);
      return true;
    },
    _handleLongOption$2($name, value) {
      var _this = this, _null = null,
        _s32_ = 'Could not find an option named "',
        t1 = _this._grammar,
        option = t1.findByNameOrAlias$1($name);
      if (option != null) {
        _this._args.removeFirst$0();
        if (option.type === B.OptionType_nMZ) {
          if (value != null)
            A.throwExpression(A.ArgParserException$('Flag option "' + $name + '" should not be given a value.', _null));
          _this._results.$indexSet(0, option.name, true);
        } else if (value != null)
          _this._setOption$3(_this._results, option, value);
        else
          _this._readNextArgAsValue$1(option);
      } else if (B.JSString_methods.startsWith$1($name, "no-")) {
        option = t1.findByNameOrAlias$1(B.JSString_methods.substring$1($name, 3));
        if (option == null) {
          t1 = _this._parent;
          if (t1 == null)
            A.throwExpression(A.ArgParserException$(_s32_ + $name + '".', _null));
          t1._handleLongOption$2($name, value);
          return true;
        }
        _this._args.removeFirst$0();
        if (option.type !== B.OptionType_nMZ)
          A.throwExpression(A.ArgParserException$('Cannot negate non-flag option "' + $name + '".', _null));
        if (!option.negatable)
          A.throwExpression(A.ArgParserException$('Cannot negate option "' + $name + '".', _null));
        _this._results.$indexSet(0, option.name, false);
      } else {
        t1 = _this._parent;
        if (t1 == null)
          A.throwExpression(A.ArgParserException$(_s32_ + $name + '".', _null));
        t1._handleLongOption$2($name, value);
        return true;
      }
      return true;
    },
    _setOption$3(results, option, value) {
      var list, t1, t2, t3, _i, element;
      if (option.type !== B.OptionType_qyr) {
        this._validateAllowed$2(option, value);
        results.$indexSet(0, option.name, value);
        return;
      }
      list = type$.List_dynamic._as(results.putIfAbsent$2(option.name, new A.Parser__setOption_closure()));
      if (option.splitCommas)
        for (t1 = value.split(","), t2 = t1.length, t3 = J.getInterceptor$ax(list), _i = 0; _i < t2; ++_i) {
          element = t1[_i];
          this._validateAllowed$2(option, element);
          t3.add$1(list, element);
        }
      else {
        this._validateAllowed$2(option, value);
        J.add$1$ax(list, value);
      }
    },
    _validateAllowed$2(option, value) {
      var t1 = option.allowed;
      if (t1 == null)
        return;
      if (!B.JSArray_methods.contains$1(t1, value))
        A.throwExpression(A.ArgParserException$('"' + value + '" is not an allowed value for option "' + option.name + '".', null));
    }
  };
  A.Parser_parse_closure.prototype = {
    call$2($name, option) {
      var parsedOption = this.$this._results.$index(0, $name),
        callback = option.callback;
      if (callback == null)
        return;
      callback.call$1(option.valueOrDefault$1(parsedOption));
    },
    $signature: 57
  };
  A.Parser__setOption_closure.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_String);
    },
    $signature: 112
  };
  A._Usage.prototype = {
    get$_columnWidths() {
      var result, _this = this,
        value = _this.___Usage__columnWidths_FI;
      if (value === $) {
        result = _this._calculateColumnWidths$0();
        _this.___Usage__columnWidths_FI !== $ && A.throwUnnamedLateFieldADI();
        _this.___Usage__columnWidths_FI = result;
        value = result;
      }
      return value;
    },
    generate$0() {
      var t1, t2, _i, optionOrSeparator;
      for (t1 = this._usage$_optionsAndSeparators, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        optionOrSeparator = t1[_i];
        this._writeOption$1(optionOrSeparator);
      }
      t1 = this._usage$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeOption$1(option) {
      var t2, allowedNames, t3, t4, _i, $name, t5, _this = this,
        t1 = option.abbr;
      _this._write$2(0, t1 == null ? "" : "-" + t1 + ", ");
      t1 = _this._longOption$1(option);
      _this._write$2(1, t1);
      _this._write$2(2, option.help);
      t1 = option.allowedHelp;
      if (t1 != null) {
        t2 = t1.get$keys(t1);
        allowedNames = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("Iterable.E"));
        B.JSArray_methods.sort$0(allowedNames);
        _this._newline$0();
        for (t2 = allowedNames.length, t3 = option.defaultsTo, t4 = type$.List_dynamic._is(t3), _i = 0; _i < allowedNames.length; allowedNames.length === t2 || (0, A.throwConcurrentModificationError)(allowedNames), ++_i) {
          $name = allowedNames[_i];
          t5 = t4 && B.JSArray_methods.contains$1(t3, $name) ? " (default)" : "";
          _this._write$2(1, "      [" + $name + "]" + t5);
          t5 = t1.$index(0, $name);
          t5.toString;
          _this._write$2(2, t5);
        }
        _this._newline$0();
      } else if (option.allowed != null)
        _this._write$2(2, _this._buildAllowedList$1(option));
      else {
        t1 = option.type;
        if (t1 === B.OptionType_nMZ) {
          if (option.defaultsTo === true)
            _this._write$2(2, "(defaults to on)");
        } else if (t1 === B.OptionType_qyr) {
          t1 = option.defaultsTo;
          if (t1 != null && type$.Iterable_dynamic._as(t1).length !== 0) {
            type$.List_dynamic._as(t1);
            _this._write$2(2, "(defaults to " + new A.MappedListIterable(t1, new A._Usage__writeOption_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$1(0, ", ") + ")");
          }
        } else {
          t1 = option.defaultsTo;
          if (t1 != null)
            _this._write$2(2, '(defaults to "' + A.S(t1) + '")');
        }
      }
    },
    _longOption$1(option) {
      var t1 = option.name,
        result = option.negatable ? "--[no-]" + t1 : "--" + t1;
      t1 = option.valueHelp;
      return t1 != null ? result + ("=<" + t1 + ">") : result;
    },
    _calculateColumnWidths$0() {
      var t1, t2, t3, abbr, title, _i, option, t4, t5, t6, t7, t8;
      for (t1 = this._usage$_optionsAndSeparators, t2 = t1.length, t3 = type$.List_dynamic, abbr = 0, title = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        option = t1[_i];
        t4 = option.abbr;
        abbr = Math.max(abbr, (t4 == null ? "" : "-" + t4 + ", ").length);
        t4 = this._longOption$1(option);
        title = Math.max(title, t4.length);
        t4 = option.allowedHelp;
        if (t4 != null)
          for (t4 = t4.get$keys(t4), t4 = t4.get$iterator(t4), t5 = option.defaultsTo, t6 = t3._is(t5); t4.moveNext$0();) {
            t7 = t4.get$current();
            t8 = t6 && B.JSArray_methods.contains$1(t5, t7) ? " (default)" : "";
            title = Math.max(title, ("      [" + t7 + "]" + t8).length);
          }
      }
      return A._setArrayType([abbr, title + 4], type$.JSArray_int);
    },
    _newline$0() {
      ++this._newlinesNeeded;
      this._currentColumn = 0;
    },
    _write$2(column, text) {
      var t1, _i,
        lines = A._setArrayType(text.split("\n"), type$.JSArray_String);
      this.get$_columnWidths();
      while (true) {
        if (!(lines.length !== 0 && J.trim$0$s(B.JSArray_methods.get$first(lines)) === ""))
          break;
        B.JSArray_methods.removeAt$1(lines, 0);
      }
      while (true) {
        if (!(lines.length !== 0 && J.trim$0$s(B.JSArray_methods.get$last(lines)) === ""))
          break;
        lines.pop();
      }
      for (t1 = lines.length, _i = 0; _i < lines.length; lines.length === t1 || (0, A.throwConcurrentModificationError)(lines), ++_i)
        this._writeLine$2(column, lines[_i]);
    },
    _writeLine$2(column, text) {
      var t1, t2, _this = this;
      for (t1 = _this._usage$_buffer; t2 = _this._newlinesNeeded, t2 > 0;) {
        t1._contents += "\n";
        _this._newlinesNeeded = t2 - 1;
      }
      for (; t2 = _this._currentColumn, t2 !== column;) {
        if (t2 < 2)
          t1._contents += B.JSString_methods.$mul(" ", _this.get$_columnWidths()[_this._currentColumn]);
        else
          t1._contents += "\n";
        _this._currentColumn = (_this._currentColumn + 1) % 3;
      }
      _this.get$_columnWidths();
      if (column < 2)
        t1._contents += B.JSString_methods.padRight$1(text, _this.get$_columnWidths()[column]);
      else
        t1._contents += text;
      _this._currentColumn = (_this._currentColumn + 1) % 3;
      if (column === 2)
        ++_this._newlinesNeeded;
    },
    _buildAllowedList$1(option) {
      var t2, t3, first, _i, allowed,
        t1 = option.defaultsTo,
        isDefault = type$.List_dynamic._is(t1) ? B.JSArray_methods.get$contains(t1) : new A._Usage__buildAllowedList_closure(option);
      t1 = "" + "[";
      for (t2 = option.allowed, t3 = t2.length, first = true, _i = 0; _i < t3; ++_i, first = false) {
        allowed = t2[_i];
        if (!first)
          t1 += ", ";
        t1 += A.S(allowed);
        if (isDefault.call$1(allowed))
          t1 += " (default)";
      }
      t1 += "]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._Usage__writeOption_closure.prototype = {
    call$1(value) {
      return '"' + A.S(value) + '"';
    },
    $signature: 58
  };
  A._Usage__buildAllowedList_closure.prototype = {
    call$1(value) {
      return false;
    },
    $signature: 14
  };
  A.UsageException.prototype = {
    toString$0(_) {
      return this.message + "\n\n" + this.usage;
    },
    $isException: 1
  };
  A.DefaultEquality.prototype = {
    equals$2(_, e1, e2) {
      return J.$eq$(e1, e2);
    },
    hash$1(e) {
      return J.get$hashCode$(e);
    },
    isValidKey$1(o) {
      return true;
    }
  };
  A.IterableEquality.prototype = {
    equals$2(_, elements1, elements2) {
      var it1, it2, t1, t2, hasNext, t3, t4;
      if (elements1 === elements2)
        return true;
      it1 = new J.ArrayIterator(elements1, elements1.length);
      it2 = new J.ArrayIterator(elements2, elements2.length);
      for (t1 = A._instanceType(it1)._precomputed1, t2 = A._instanceType(it2)._precomputed1; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        t3 = it1._current;
        if (t3 == null)
          t3 = t1._as(t3);
        t4 = it2._current;
        if (!J.$eq$(t3, t4 == null ? t2._as(t4) : t4))
          return false;
      }
    },
    hash$1(elements) {
      var t1, hash, _i;
      for (t1 = elements.length, hash = 0, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i) {
        hash = hash + J.get$hashCode$(elements[_i]) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  A.ListEquality.prototype = {
    equals$2(_, list1, list2) {
      var t1, $length, t2, i;
      if (list1 === list2)
        return true;
      t1 = J.getInterceptor$asx(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$asx(list2);
      if ($length !== t2.get$length(list2))
        return false;
      for (i = 0; i < $length; ++i)
        if (!J.$eq$(t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    hash$1(list) {
      var t1, hash, i;
      for (t1 = list.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + J.get$hashCode$(list[i]) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  A._UnorderedEquality.prototype = {
    equals$2(_, elements1, elements2) {
      var t1, counts, $length, e, count;
      if (elements1 === elements2)
        return true;
      t1 = this._elementEquality;
      counts = A.HashMap_HashMap(t1.get$equals(t1), t1.get$hash(), t1.get$isValidKey(), A._instanceType(this)._eval$1("_UnorderedEquality.E"), type$.int);
      for (t1 = J.get$iterator$ax(elements1), $length = 0; t1.moveNext$0();) {
        e = t1.get$current();
        count = counts.$index(0, e);
        counts.$indexSet(0, e, (count == null ? 0 : count) + 1);
        ++$length;
      }
      for (t1 = J.get$iterator$ax(elements2); t1.moveNext$0();) {
        e = t1.get$current();
        count = counts.$index(0, e);
        if (count == null || count === 0)
          return false;
        counts.$indexSet(0, e, count - 1);
        --$length;
      }
      return $length === 0;
    },
    hash$1(elements) {
      var t1, hash;
      for (t1 = J.get$iterator$ax(elements), hash = 0; t1.moveNext$0();)
        hash = hash + J.get$hashCode$(t1.get$current()) & 2147483647;
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  A.UnorderedIterableEquality.prototype = {};
  A.SetEquality.prototype = {};
  A._MapEntry.prototype = {
    get$hashCode(_) {
      return 3 * J.get$hashCode$(this.key) + 7 * J.get$hashCode$(this.value) & 2147483647;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._MapEntry && J.$eq$(this.key, other.key) && J.$eq$(this.value, other.value);
    }
  };
  A.MapEquality.prototype = {
    equals$2(_, map1, map2) {
      var equalElementCounts, t1, key, entry, count;
      if (map1 === map2)
        return true;
      if (map1.get$length(map1) !== map2.get$length(map2))
        return false;
      equalElementCounts = A.HashMap_HashMap(null, null, null, type$._MapEntry, type$.int);
      for (t1 = map1.get$keys(map1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        entry = new A._MapEntry(this, key, map1.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        equalElementCounts.$indexSet(0, entry, (count == null ? 0 : count) + 1);
      }
      for (t1 = map2.get$keys(map2), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        entry = new A._MapEntry(this, key, map2.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        if (count == null || count === 0)
          return false;
        equalElementCounts.$indexSet(0, entry, count - 1);
      }
      return true;
    },
    hash$1(map) {
      var t1, t2, hash, key, keyHash, t3;
      for (t1 = map.get$keys(map), t1 = t1.get$iterator(t1), t2 = this.$ti._rest[1], hash = 0; t1.moveNext$0();) {
        key = t1.get$current();
        keyHash = J.get$hashCode$(key);
        t3 = map.$index(0, key);
        hash = hash + 3 * keyHash + 7 * J.get$hashCode$(t3 == null ? t2._as(t3) : t3) & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  A.QueueList.prototype = {
    add$1(_, element) {
      this._queue_list$_add$1(element);
    },
    addAll$1(_, iterable) {
      var addCount, $length, t1, endSpace, t2, preSpace, _this = this;
      if (type$.List_dynamic._is(iterable)) {
        addCount = J.get$length$asx(iterable);
        $length = _this.get$length(_this);
        t1 = $length + addCount;
        if (t1 >= J.get$length$asx(_this._queue_list$_table)) {
          _this._preGrow$1(t1);
          J.setRange$4$ax(_this._queue_list$_table, $length, t1, iterable, 0);
          _this.set$_queue_list$_tail(_this.get$_queue_list$_tail() + addCount);
        } else {
          endSpace = J.get$length$asx(_this._queue_list$_table) - _this.get$_queue_list$_tail();
          t1 = _this._queue_list$_table;
          t2 = J.getInterceptor$ax(t1);
          if (addCount < endSpace) {
            t2.setRange$4(t1, _this.get$_queue_list$_tail(), _this.get$_queue_list$_tail() + addCount, iterable, 0);
            _this.set$_queue_list$_tail(_this.get$_queue_list$_tail() + addCount);
          } else {
            preSpace = addCount - endSpace;
            t2.setRange$4(t1, _this.get$_queue_list$_tail(), _this.get$_queue_list$_tail() + endSpace, iterable, 0);
            J.setRange$4$ax(_this._queue_list$_table, 0, preSpace, iterable, endSpace);
            _this.set$_queue_list$_tail(preSpace);
          }
        }
      } else
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();)
          _this._queue_list$_add$1(t1.get$current());
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    addFirst$1(element) {
      var _this = this;
      _this.set$_queue_list$_head((_this.get$_queue_list$_head() - 1 & J.get$length$asx(_this._queue_list$_table) - 1) >>> 0);
      J.$indexSet$ax(_this._queue_list$_table, _this.get$_queue_list$_head(), element);
      if (_this.get$_queue_list$_head() === _this.get$_queue_list$_tail())
        _this._grow$0();
    },
    removeFirst$0() {
      var result, _this = this;
      if (_this.get$_queue_list$_head() === _this.get$_queue_list$_tail())
        throw A.wrapException(A.StateError$("No element"));
      result = J.$index$asx(_this._queue_list$_table, _this.get$_queue_list$_head());
      if (result == null)
        result = A._instanceType(_this)._eval$1("QueueList.E")._as(result);
      J.$indexSet$ax(_this._queue_list$_table, _this.get$_queue_list$_head(), null);
      _this.set$_queue_list$_head((_this.get$_queue_list$_head() + 1 & J.get$length$asx(_this._queue_list$_table) - 1) >>> 0);
      return result;
    },
    get$length(_) {
      return (this.get$_queue_list$_tail() - this.get$_queue_list$_head() & J.get$length$asx(this._queue_list$_table) - 1) >>> 0;
    },
    set$length(_, value) {
      var delta, newTail, t1, t2, _this = this;
      if (value < 0)
        throw A.wrapException(A.RangeError$("Length " + value + " may not be negative."));
      if (value > _this.get$length(_this) && !A._instanceType(_this)._eval$1("QueueList.E")._is(null))
        throw A.wrapException(A.UnsupportedError$("The length can only be increased when the element type is nullable, but the current element type is `" + A.createRuntimeType(A._instanceType(_this)._eval$1("QueueList.E")).toString$0(0) + "`."));
      delta = value - _this.get$length(_this);
      if (delta >= 0) {
        if (J.get$length$asx(_this._queue_list$_table) <= value)
          _this._preGrow$1(value);
        _this.set$_queue_list$_tail((_this.get$_queue_list$_tail() + delta & J.get$length$asx(_this._queue_list$_table) - 1) >>> 0);
        return;
      }
      newTail = _this.get$_queue_list$_tail() + delta;
      t1 = _this._queue_list$_table;
      if (newTail >= 0)
        J.fillRange$3$ax(t1, newTail, _this.get$_queue_list$_tail(), null);
      else {
        newTail += J.get$length$asx(t1);
        J.fillRange$3$ax(_this._queue_list$_table, 0, _this.get$_queue_list$_tail(), null);
        t1 = _this._queue_list$_table;
        t2 = J.getInterceptor$asx(t1);
        t2.fillRange$3(t1, newTail, t2.get$length(t1), null);
      }
      _this.set$_queue_list$_tail(newTail);
    },
    $index(_, index) {
      var t1, _this = this;
      if (index < 0 || index >= _this.get$length(_this))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(_this) + ")."));
      t1 = J.$index$asx(_this._queue_list$_table, (_this.get$_queue_list$_head() + index & J.get$length$asx(_this._queue_list$_table) - 1) >>> 0);
      return t1 == null ? A._instanceType(_this)._eval$1("QueueList.E")._as(t1) : t1;
    },
    $indexSet(_, index, value) {
      var _this = this;
      if (index < 0 || index >= _this.get$length(_this))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(_this) + ")."));
      J.$indexSet$ax(_this._queue_list$_table, (_this.get$_queue_list$_head() + index & J.get$length$asx(_this._queue_list$_table) - 1) >>> 0, value);
    },
    _queue_list$_add$1(element) {
      var _this = this;
      J.$indexSet$ax(_this._queue_list$_table, _this.get$_queue_list$_tail(), element);
      _this.set$_queue_list$_tail((_this.get$_queue_list$_tail() + 1 & J.get$length$asx(_this._queue_list$_table) - 1) >>> 0);
      if (_this.get$_queue_list$_head() === _this.get$_queue_list$_tail())
        _this._grow$0();
    },
    _grow$0() {
      var _this = this,
        newTable = A.List_List$filled(J.get$length$asx(_this._queue_list$_table) * 2, null, false, A._instanceType(_this)._eval$1("QueueList.E?")),
        split = J.get$length$asx(_this._queue_list$_table) - _this.get$_queue_list$_head();
      B.JSArray_methods.setRange$4(newTable, 0, split, _this._queue_list$_table, _this.get$_queue_list$_head());
      B.JSArray_methods.setRange$4(newTable, split, split + _this.get$_queue_list$_head(), _this._queue_list$_table, 0);
      _this.set$_queue_list$_head(0);
      _this.set$_queue_list$_tail(J.get$length$asx(_this._queue_list$_table));
      _this._queue_list$_table = newTable;
    },
    _writeToList$1(target) {
      var $length, firstPartSize, _this = this;
      if (_this.get$_queue_list$_head() <= _this.get$_queue_list$_tail()) {
        $length = _this.get$_queue_list$_tail() - _this.get$_queue_list$_head();
        B.JSArray_methods.setRange$4(target, 0, $length, _this._queue_list$_table, _this.get$_queue_list$_head());
        return $length;
      } else {
        firstPartSize = J.get$length$asx(_this._queue_list$_table) - _this.get$_queue_list$_head();
        B.JSArray_methods.setRange$4(target, 0, firstPartSize, _this._queue_list$_table, _this.get$_queue_list$_head());
        B.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this.get$_queue_list$_tail(), _this._queue_list$_table, 0);
        return _this.get$_queue_list$_tail() + firstPartSize;
      }
    },
    _preGrow$1(newElementCount) {
      var _this = this,
        newTable = A.List_List$filled(A.QueueList__nextPowerOf2(newElementCount + B.JSInt_methods._shrOtherPositive$1(newElementCount, 1)), null, false, A._instanceType(_this)._eval$1("QueueList.E?"));
      _this.set$_queue_list$_tail(_this._writeToList$1(newTable));
      _this._queue_list$_table = newTable;
      _this.set$_queue_list$_head(0);
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    $isIterable: 1,
    $isList: 1,
    get$_queue_list$_head() {
      return this._queue_list$_head;
    },
    get$_queue_list$_tail() {
      return this._queue_list$_tail;
    },
    set$_queue_list$_head(val) {
      return this._queue_list$_head = val;
    },
    set$_queue_list$_tail(val) {
      return this._queue_list$_tail = val;
    }
  };
  A._QueueList_Object_ListMixin.prototype = {};
  A.UnmodifiableSetView.prototype = {};
  A.UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      return A.UnmodifiableSetMixin__throw();
    },
    remove$1(_, value) {
      return A.UnmodifiableSetMixin__throw();
    }
  };
  A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {};
  A._DelegatingIterableBase.prototype = {
    contains$1(_, element) {
      return this._base.contains$1(0, element);
    },
    elementAt$1(_, index) {
      return this._base.elementAt$1(0, index);
    },
    get$first(_) {
      var t1 = this._base;
      return t1.get$first(t1);
    },
    forEach$1(_, f) {
      return this._base.forEach$1(0, f);
    },
    get$isEmpty(_) {
      var t1 = this._base;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._base;
      return t1.get$isNotEmpty(t1);
    },
    get$iterator(_) {
      var t1 = this._base;
      return t1.get$iterator(t1);
    },
    join$1(_, separator) {
      return this._base.join$1(0, separator);
    },
    get$last(_) {
      var t1 = this._base;
      return t1.get$last(t1);
    },
    get$length(_) {
      var t1 = this._base;
      return t1.get$length(t1);
    },
    map$1$1(_, f, $T) {
      return this._base.map$1$1(0, f, $T);
    },
    skip$1(_, n) {
      return this._base.skip$1(0, n);
    },
    take$1(_, n) {
      return this._base.take$1(0, n);
    },
    where$1(_, test) {
      return this._base.where$1(0, test);
    },
    whereType$1$0(_, $T) {
      return this._base.whereType$1$0(0, $T);
    },
    toString$0(_) {
      return this._base.toString$0(0);
    },
    $isIterable: 1
  };
  A.DelegatingSet.prototype = {
    add$1(_, value) {
      return this._base.add$1(0, value);
    },
    remove$1(_, value) {
      return this._base.remove$1(0, value);
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1
  };
  A.FileSystem.prototype = {
    getPath$1(path) {
      return path;
    }
  };
  A.Glob.prototype = {
    toString$0(_) {
      return this.pattern;
    },
    _listTreeForFileSystem$1(fileSystem) {
      var t1, _this = this;
      if (fileSystem !== _this._previousFileSystem) {
        _this._listTree = null;
        _this._previousFileSystem = fileSystem;
      }
      t1 = _this._listTree;
      return t1 == null ? _this._listTree = A.ListTree_ListTree(_this._ast, fileSystem) : t1;
    }
  };
  A.AstNode.prototype = {
    flattenOptions$0() {
      var t1 = this.caseSensitive;
      return new A.OptionsNode(B.JSArray_methods.toList$0(A._setArrayType([new A.SequenceNode(B.JSArray_methods.toList$0(A._setArrayType([this], type$.JSArray_AstNode)), t1)], type$.JSArray_SequenceNode)), t1);
    },
    matches$1(string) {
      var _this = this,
        t1 = _this._ast$_regExp;
      if (t1 == null)
        t1 = _this._ast$_regExp = A.RegExp_RegExp("^" + _this._toRegExp$0() + "$", _this.caseSensitive);
      return t1._nativeRegExp.test(string);
    }
  };
  A.SequenceNode.prototype = {
    flattenOptions$0() {
      var t2, sequences, t3, _this = this,
        t1 = _this.nodes;
      if (t1.length === 0)
        return new A.OptionsNode(B.JSArray_methods.toList$0(A._setArrayType([_this], type$.JSArray_SequenceNode)), _this.caseSensitive);
      t2 = B.JSArray_methods.get$first(t1).flattenOptions$0().options;
      sequences = new A.MappedListIterable(t2, new A.SequenceNode_flattenOptions_closure(), A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,List<AstNode>>"));
      for (t1 = A.SubListIterable$(t1, 1, null, A._arrayInstanceType(t1)._precomputed1), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        sequences = new A.ExpandIterable(sequences, new A.SequenceNode_flattenOptions_closure0((t3 == null ? t2._as(t3) : t3).flattenOptions$0().options), A._instanceType(sequences)._eval$1("ExpandIterable<Iterable.E,List<AstNode>>"));
      }
      return new A.OptionsNode(sequences.map$1$1(0, new A.SequenceNode_flattenOptions_closure1(_this), type$.SequenceNode).toList$0(0), _this.caseSensitive);
    },
    split$1(_, context) {
      var addNode, finishComponent, t1, t2, t3, t4, _i, node, text, t5, text0, components, root, components0, t6, t7, t8, _null = null, _box_0 = {},
        componentsToReturn = A._setArrayType([], type$.JSArray_SequenceNode);
      _box_0.currentComponent = null;
      addNode = new A.SequenceNode_split_addNode(_box_0);
      finishComponent = new A.SequenceNode_split_finishComponent(_box_0, this, componentsToReturn);
      for (t1 = this.nodes, t2 = t1.length, t3 = this.caseSensitive, t4 = context.style, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        node = t1[_i];
        if (!(node instanceof A.LiteralNode)) {
          addNode.call$1(node);
          continue;
        }
        text = node.text;
        if (!B.JSString_methods.contains$1(text, "/")) {
          addNode.call$1(node);
          continue;
        }
        t5 = t4 === $.$get$Style_windows();
        if (t5)
          text0 = A.stringReplaceAllUnchecked(text, "/", "\\");
        else
          text0 = text;
        components = context.split$1(0, text0);
        if (t4.rootLength$1(B.JSArray_methods.get$first(components)) > 0) {
          if (componentsToReturn.length === 0 && _box_0.currentComponent == null) {
            root = B.JSArray_methods.get$first(components);
            if (t5)
              root = A.stringReplaceAllUnchecked(root, "\\", "/");
            addNode.call$1(new A.LiteralNode(root, _null, t3));
          }
          finishComponent.call$0();
          t5 = A._arrayInstanceType(components);
          components0 = new A.SubListIterable(components, 1, _null, t5._eval$1("SubListIterable<1>"));
          components0.SubListIterable$3(components, 1, _null, t5._precomputed1);
          if (components0.get$length(components0) === 0)
            continue;
          components = components0;
        }
        for (t5 = J.getInterceptor$asx(components), t6 = t5.take$1(components, t5.get$length(components) - 1), t6 = new A.ListIterator(t6, t6.get$length(t6)), t7 = A._instanceType(t6)._precomputed1; t6.moveNext$0();) {
          t8 = t6.__internal$_current;
          addNode.call$1(new A.LiteralNode(t8 == null ? t7._as(t8) : t8, _null, t3));
          finishComponent.call$0();
        }
        addNode.call$1(new A.LiteralNode(t5.get$last(components), _null, t3));
        if (B.JSString_methods.endsWith$1(text, "/"))
          finishComponent.call$0();
      }
      finishComponent.call$0();
      return componentsToReturn;
    },
    _toRegExp$0() {
      var t1 = this.nodes;
      return new A.MappedListIterable(t1, new A.SequenceNode__toRegExp_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SequenceNode && B.C_IterableEquality.equals$2(0, this.nodes, other.nodes);
    },
    get$hashCode(_) {
      return B.C_IterableEquality.hash$1(this.nodes);
    },
    toString$0(_) {
      return B.JSArray_methods.join$0(this.nodes);
    }
  };
  A.SequenceNode_flattenOptions_closure.prototype = {
    call$1(sequence) {
      return sequence.nodes;
    },
    $signature: 60
  };
  A.SequenceNode_flattenOptions_closure0.prototype = {
    call$1(sequence) {
      var t1 = this.nextSequences;
      return new A.MappedListIterable(t1, new A.SequenceNode_flattenOptions__closure0(sequence), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,List<AstNode>>"));
    },
    $signature: 105
  };
  A.SequenceNode_flattenOptions__closure0.prototype = {
    call$1(nextSequence) {
      var t1 = J.toList$0$ax(this.sequence);
      B.JSArray_methods.addAll$1(t1, nextSequence.nodes);
      return t1;
    },
    $signature: 60
  };
  A.SequenceNode_flattenOptions_closure1.prototype = {
    call$1(sequence) {
      var t1 = this.$this;
      return new A.SequenceNode(J.toList$0$ax(J.fold$2$ax(sequence, A._setArrayType([], type$.JSArray_AstNode), new A.SequenceNode_flattenOptions__closure(t1))), t1.caseSensitive);
    },
    $signature: 153
  };
  A.SequenceNode_flattenOptions__closure.prototype = {
    call$2(combined, node) {
      var t1 = J.getInterceptor$asx(combined);
      if (t1.get$isEmpty(combined) || !(t1.get$last(combined) instanceof A.LiteralNode) || !(node instanceof A.LiteralNode)) {
        t1.add$1(combined, node);
        return combined;
      }
      t1.$indexSet(combined, t1.get$length(combined) - 1, new A.LiteralNode(type$.LiteralNode._as(t1.get$last(combined)).text + node.text, null, this.$this.caseSensitive));
      return combined;
    },
    $signature: 156
  };
  A.SequenceNode_split_addNode.prototype = {
    call$1(node) {
      var t1 = this._box_0,
        t2 = t1.currentComponent;
      (t2 == null ? t1.currentComponent = A._setArrayType([], type$.JSArray_AstNode) : t2).push(node);
    },
    $signature: 162
  };
  A.SequenceNode_split_finishComponent.prototype = {
    call$0() {
      var t1 = this._box_0,
        t2 = t1.currentComponent;
      if (t2 == null)
        return;
      this.componentsToReturn.push(new A.SequenceNode(B.JSArray_methods.toList$0(t2), this.$this.caseSensitive));
      t1.currentComponent = null;
    },
    $signature: 0
  };
  A.SequenceNode__toRegExp_closure.prototype = {
    call$1(node) {
      return node._toRegExp$0();
    },
    $signature: 171
  };
  A.StarNode.prototype = {
    _toRegExp$0() {
      return "[^/]*";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.StarNode;
    },
    get$hashCode(_) {
      return 0;
    },
    toString$0(_) {
      return "*";
    }
  };
  A.DoubleStarNode.prototype = {
    _toRegExp$0() {
      var t1 = "" + "(?!^(?:\\.\\./|",
        t2 = this._ast$_context.style;
      if (t2 === $.$get$Style_posix())
        t1 += "/";
      else
        t1 = t2 === $.$get$Style_windows() ? t1 + "//|[A-Za-z]:/" : t1 + "[a-zA-Z][-+.a-zA-Z\\d]*://|/";
      t1 += "))[^]*";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DoubleStarNode;
    },
    get$hashCode(_) {
      return 1;
    },
    toString$0(_) {
      return "**";
    }
  };
  A.AnyCharNode.prototype = {
    _toRegExp$0() {
      return "[^/]";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.AnyCharNode;
    },
    get$hashCode(_) {
      return 2;
    },
    toString$0(_) {
      return "?";
    }
  };
  A.RangeNode.prototype = {
    flattenOptions$0() {
      var t1, _this = this;
      if (_this.negated || _this.ranges.any$1(0, new A.RangeNode_flattenOptions_closure()))
        return _this.super$AstNode$flattenOptions();
      t1 = _this.ranges;
      return new A.OptionsNode(new A.EfficientLengthMappedIterable(t1, new A.RangeNode_flattenOptions_closure0(_this), A._instanceType(t1)._eval$1("EfficientLengthMappedIterable<1,SequenceNode>")).toList$0(0), _this.caseSensitive);
    },
    _toRegExp$0() {
      var t4, t5, t6,
        t1 = this.ranges,
        containsSeparator = t1.any$1(0, new A.RangeNode__toRegExp_closure()),
        t2 = this.negated,
        t3 = (!t2 && containsSeparator ? "" + "(?!/)" : "") + "[";
      if (t2) {
        t2 = t3 + "^";
        if (!containsSeparator)
          t2 += "/";
      } else
        t2 = t3;
      for (t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t3 = type$.JSArray_int, t4 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t5 = t1._collection$_current;
        if (t5 == null)
          t5 = t4._as(t5);
        t6 = t5.min;
        t2 += A.regExpQuote(A.String_String$fromCharCodes(A._setArrayType([t6], t3), 0, null));
        t5 = t5.max;
        if (t6 === t5)
          continue;
        t2 = t2 + "-" + A.regExpQuote(A.String_String$fromCharCodes(A._setArrayType([t5], t3), 0, null));
      }
      t1 = t2 + "]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.RangeNode && other.negated === this.negated && new A.SetEquality(B.C_DefaultEquality, type$.SetEquality_dynamic).equals$2(0, this.ranges, other.ranges);
    },
    get$hashCode(_) {
      var t1 = this.negated ? 1 : 3;
      return t1 * B.SetEquality_DefaultEquality.hash$1(this.ranges);
    },
    toString$0(_) {
      var t2, t3, t4, t5,
        t1 = "" + "[";
      for (t2 = this.ranges, t2 = A._LinkedHashSetIterator$(t2, t2._collection$_modifications), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t5 = t4.min;
        t1 += A.Primitives_stringFromCharCode(t5);
        t4 = t4.max;
        if (t5 === t4)
          continue;
        t1 = t1 + "-" + A.Primitives_stringFromCharCode(t4);
      }
      t1 += "]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.RangeNode_flattenOptions_closure.prototype = {
    call$1(range) {
      return range.min !== range.max;
    },
    $signature: 43
  };
  A.RangeNode_flattenOptions_closure0.prototype = {
    call$1(range) {
      var t1 = this.$this.caseSensitive;
      return new A.SequenceNode(B.JSArray_methods.toList$0(A._setArrayType([new A.LiteralNode(A.String_String$fromCharCodes(A._setArrayType([range.min], type$.JSArray_int), 0, null), null, t1)], type$.JSArray_AstNode)), t1);
    },
    $signature: 191
  };
  A.RangeNode__toRegExp_closure.prototype = {
    call$1(range) {
      return 47 >= range.min && 47 <= range.max;
    },
    $signature: 43
  };
  A.OptionsNode.prototype = {
    flattenOptions$0() {
      var t1 = this.options;
      return new A.OptionsNode(new A.ExpandIterable(t1, new A.OptionsNode_flattenOptions_closure(), A._arrayInstanceType(t1)._eval$1("ExpandIterable<1,SequenceNode>")).toList$0(0), this.caseSensitive);
    },
    _toRegExp$0() {
      var t1 = this.options;
      return "(?:" + new A.MappedListIterable(t1, new A.OptionsNode__toRegExp_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$1(0, "|") + ")";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.OptionsNode && B.UnorderedIterableEquality_DefaultEquality.equals$2(0, this.options, other.options);
    },
    get$hashCode(_) {
      return B.UnorderedIterableEquality_DefaultEquality.hash$1(this.options);
    },
    toString$0(_) {
      return "{" + B.JSArray_methods.join$1(this.options, ",") + "}";
    }
  };
  A.OptionsNode_flattenOptions_closure.prototype = {
    call$1(option) {
      return option.flattenOptions$0().options;
    },
    $signature: 192
  };
  A.OptionsNode__toRegExp_closure.prototype = {
    call$1(option) {
      return option._toRegExp$0();
    },
    $signature: 98
  };
  A.LiteralNode.prototype = {
    _toRegExp$0() {
      return A.regExpQuote(this.text);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.LiteralNode && other.text === this.text;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.text);
    },
    toString$0(_) {
      return this.text;
    }
  };
  A.ListTree.prototype = {
    listSync$2$followLinks$root(followLinks, root) {
      var t2, t3, t4, result, t1 = {};
      t1.root = root;
      t1.root = ".";
      t2 = this._trees;
      t3 = A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>");
      t4 = t3._eval$1("ExpandIterable<Iterable.E,FileSystemEntity>");
      result = new A.ExpandIterable(new A.LinkedHashMapKeyIterable(t2, t3), new A.ListTree_listSync_closure(t1, this, true), t4);
      if (!this._canOverlap)
        return A.List_List$of(result, true, t4._eval$1("Iterable.E"));
      t1 = t4._eval$1("WhereIterable<Iterable.E>");
      return A.List_List$of(new A.WhereIterable(result, new A.ListTree_listSync_closure0(A.LinkedHashSet_LinkedHashSet$_empty(type$.String)), t1), true, t1._eval$1("Iterable.E"));
    }
  };
  A.ListTree__addGlob_closure.prototype = {
    call$1(node) {
      return node instanceof A.DoubleStarNode;
    },
    $signature: 158
  };
  A.ListTree__computeCanOverlap_closure.prototype = {
    call$1(node) {
      return node.get$canOverlap();
    },
    $signature: 44
  };
  A.ListTree_listSync_closure.prototype = {
    call$1(rootDir) {
      var t1, dir;
      if (rootDir === ".") {
        t1 = this._box_0.root;
        t1.toString;
        dir = t1;
      } else
        dir = rootDir;
      t1 = this.$this;
      return t1._trees.$index(0, rootDir).listSync$3$followLinks(dir, t1._fileSystem, this.followLinks);
    },
    $signature: 45
  };
  A.ListTree_listSync_closure0.prototype = {
    call$1(entity) {
      return this.seen.add$1(0, entity.get$path(entity));
    },
    $signature: 29
  };
  A._ListTreeNode.prototype = {
    get$_list_tree$_caseSensitive() {
      var t1 = this._validator;
      if (t1 != null)
        return t1.caseSensitive;
      t1 = this.children;
      if ((t1 == null ? null : t1.__js_helper$_length === 0) !== false)
        return true;
      t1.toString;
      t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      return t1.get$first(t1).caseSensitive;
    },
    get$_isIntermediate() {
      if (this._validator != null)
        return false;
      var t1 = this.children;
      t1.toString;
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).every$1(0, new A._ListTreeNode__isIntermediate_closure());
    },
    get$canOverlap() {
      var _this = this,
        t1 = _this.children;
      if (t1 == null)
        return false;
      if (t1.__js_helper$_length > 1) {
        if (!_this.get$_list_tree$_caseSensitive())
          return true;
        t1 = _this.children;
        t1.toString;
        if (new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).any$1(0, new A._ListTreeNode_canOverlap_closure()))
          return true;
      }
      t1 = _this.children;
      return t1.get$values(t1).any$1(0, new A._ListTreeNode_canOverlap_closure0());
    },
    makeRecursive$0() {
      var t2, _this = this,
        t1 = _this.children;
      if (t1 == null)
        return;
      t1 = t1.get$entries(t1);
      t1 = A.MappedIterable_MappedIterable(t1, new A._ListTreeNode_makeRecursive_closure(), A._instanceType(t1)._eval$1("Iterable.E"), type$.SequenceNode);
      t2 = _this.get$_list_tree$_caseSensitive();
      _this._validator = new A.OptionsNode(t1.toList$0(0), t2);
      _this.children = null;
    },
    listSync$3$followLinks(dir, fileSystem, followLinks) {
      var entities, t1, exception, _this = this;
      if (_this.children == null)
        try {
          t1 = new A.Directory(fileSystem.getPath$1(dir)).listSync$2$followLinks$recursive(true, true);
          return new A.WhereIterable(t1, new A._ListTreeNode_listSync_closure(_this, dir), A._arrayInstanceType(t1)._eval$1("WhereIterable<1>"));
        } catch (exception) {
          throw exception;
        }
      if (_this.get$_isIntermediate() && _this.get$_list_tree$_caseSensitive()) {
        t1 = _this.children;
        t1 = t1.get$entries(t1);
        return new A.ExpandIterable(t1, new A._ListTreeNode_listSync_closure0(dir, fileSystem, true), A._instanceType(t1)._eval$1("ExpandIterable<Iterable.E,FileSystemEntity>"));
      }
      entities = null;
      try {
        entities = new A.Directory(fileSystem.getPath$1(dir)).listSync$1$followLinks(true);
      } catch (exception) {
        throw exception;
      }
      _this._validateIntermediateChildrenSync$3(dir, entities, fileSystem);
      t1 = entities;
      return new A.ExpandIterable(t1, new A._ListTreeNode_listSync_closure1(_this, dir, fileSystem, true), A.instanceType(t1)._eval$1("ExpandIterable<1,FileSystemEntity>"));
    },
    listSync$2(dir, fileSystem) {
      return this.listSync$3$followLinks(dir, fileSystem, true);
    },
    _validateIntermediateChildrenSync$3(dir, entities, fileSystem) {
      if (this.get$_list_tree$_caseSensitive())
        return;
      this.children.forEach$1(0, new A._ListTreeNode__validateIntermediateChildrenSync_closure(entities, dir, fileSystem));
    },
    _matches$1(path) {
      var t1 = this._validator;
      t1 = t1 == null ? null : t1.matches$1(A.toPosixPath($.$get$context(), path));
      return t1 === true;
    },
    toString$0(_) {
      return "(" + A.S(this._validator) + ") " + A.S(this.children);
    }
  };
  A._ListTreeNode__isIntermediate_closure.prototype = {
    call$1(sequence) {
      var t1 = sequence.nodes;
      return t1.length === 1 && B.JSArray_methods.get$first(t1) instanceof A.LiteralNode;
    },
    $signature: 34
  };
  A._ListTreeNode_canOverlap_closure.prototype = {
    call$1(sequence) {
      var t1 = sequence.nodes;
      return t1.length > 1 || !(B.JSArray_methods.get$single(t1) instanceof A.LiteralNode);
    },
    $signature: 34
  };
  A._ListTreeNode_canOverlap_closure0.prototype = {
    call$1(node) {
      return node.get$canOverlap();
    },
    $signature: 44
  };
  A._ListTreeNode_makeRecursive_closure.prototype = {
    call$1(entry) {
      var t1, t2;
      entry.get$value(entry).makeRecursive$0();
      t1 = entry.get$key();
      t2 = entry.get$value(entry)._validator;
      t2.toString;
      return A._join(A._setArrayType([t1, t2], type$.JSArray_AstNode));
    },
    $signature: 71
  };
  A._ListTreeNode_listSync_closure.prototype = {
    call$1(entity) {
      var t1 = entity.get$path(entity);
      return this.$this._matches$1($.$get$context().relative$2$from(0, t1, this.dir));
    },
    $signature: 29
  };
  A._ListTreeNode_listSync_closure0.prototype = {
    call$1(entry) {
      var sequence = entry.get$key();
      return entry.get$value(entry).listSync$3$followLinks(A.join(this.dir, type$.LiteralNode._as(B.JSArray_methods.get$single(sequence.nodes)).text, null), this.fileSystem, this.followLinks);
    },
    $signature: 72
  };
  A._ListTreeNode_listSync_closure1.prototype = {
    call$1(entity) {
      var t3, t4, t5, _this = this,
        entities = A._setArrayType([], type$.JSArray_FileSystemEntity),
        t1 = entity.get$path(entity),
        t2 = _this.dir,
        basename = $.$get$context().relative$2$from(0, t1, t2);
      t1 = _this.$this;
      if (t1._matches$1(basename))
        entities.push(entity);
      if (!type$.Directory._is(entity))
        return entities;
      t3 = t1.children;
      t3.toString;
      t4 = A._instanceType(t3)._eval$1("LinkedHashMapKeyIterable<1>");
      t5 = t4._eval$1("WhereIterable<Iterable.E>");
      B.JSArray_methods.addAll$1(entities, new A.ExpandIterable(new A.WhereIterable(new A.LinkedHashMapKeyIterable(t3, t4), new A._ListTreeNode_listSync__closure(basename), t5), new A._ListTreeNode_listSync__closure0(t1, t2, basename, _this.fileSystem, _this.followLinks), t5._eval$1("ExpandIterable<Iterable.E,FileSystemEntity>")));
      return entities;
    },
    $signature: 76
  };
  A._ListTreeNode_listSync__closure.prototype = {
    call$1(sequence) {
      return sequence.matches$1(this.basename);
    },
    $signature: 34
  };
  A._ListTreeNode_listSync__closure0.prototype = {
    call$1(sequence) {
      var _this = this,
        t1 = _this.$this.children.$index(0, sequence);
      t1.toString;
      return J.toList$0$ax(t1.listSync$3$followLinks(A.join(_this.dir, _this.basename, null), _this.fileSystem, _this.followLinks));
    },
    $signature: 94
  };
  A._ListTreeNode__validateIntermediateChildrenSync_closure.prototype = {
    call$2(sequence, child) {
      var t1;
      if (!child.get$_isIntermediate())
        return;
      t1 = this.dir;
      if (B.JSArray_methods.any$1(this.entities, new A._ListTreeNode__validateIntermediateChildrenSync__closure(sequence, t1)))
        return;
      child.listSync$2(A.join(t1, type$.LiteralNode._as(B.JSArray_methods.get$single(sequence.nodes)).text, null), this.fileSystem);
    },
    $signature: 95
  };
  A._ListTreeNode__validateIntermediateChildrenSync__closure.prototype = {
    call$1(entity) {
      var t1 = entity.get$path(entity);
      return this.sequence.matches$1($.$get$context().relative$2$from(0, t1, this.dir));
    },
    $signature: 29
  };
  A.Parser.prototype = {
    _parseSequence$1$inOptions(inOptions) {
      var t4, t5,
        nodes = A._setArrayType([], type$.JSArray_AstNode),
        t1 = this._scanner,
        t2 = t1.string,
        t3 = t2.length;
      if (t1._position === t3)
        t1.error$3$length$position(0, "expected a glob.", 0, 0);
      for (; t4 = t1._position, t4 !== t3;) {
        if (inOptions) {
          t4 = B.JSString_methods.matchAsPrefix$2(",", t2, t4);
          t1._lastMatch = t4;
          t5 = t1._position;
          t1._lastMatchPosition = t5;
          if (t4 == null) {
            t4 = B.JSString_methods.matchAsPrefix$2("}", t2, t5);
            t1._lastMatch = t4;
            t1._lastMatchPosition = t1._position;
            t4 = t4 != null;
          } else
            t4 = true;
        } else
          t4 = false;
        if (t4)
          break;
        nodes.push(this._parseNode$1$inOptions(inOptions));
      }
      return new A.SequenceNode(B.JSArray_methods.toList$0(nodes), this._caseSensitive);
    },
    _parseSequence$0() {
      return this._parseSequence$1$inOptions(false);
    },
    _parseNode$1$inOptions(inOptions) {
      var anyChar, range, options, _this = this,
        star = _this._parseStar$0();
      if (star != null)
        return star;
      anyChar = _this._parseAnyChar$0();
      if (anyChar != null)
        return anyChar;
      range = _this._parseRange$0();
      if (range != null)
        return range;
      options = _this._parseOptions$0();
      if (options != null)
        return options;
      return _this._parseLiteral$1$inOptions(inOptions);
    },
    _parseStar$0() {
      var t2,
        t1 = this._scanner;
      if (!t1.scan$1("*"))
        return null;
      t2 = this._caseSensitive;
      return t1.scan$1("*") ? new A.DoubleStarNode(this._context, t2) : new A.StarNode(t2);
    },
    _parseAnyChar$0() {
      if (!this._scanner.scan$1("?"))
        return null;
      return new A.AnyCharNode(this._caseSensitive);
    },
    _parseRange$0() {
      var negated, readRangeChar, ranges, t2, success, t3, start, char, end,
        t1 = this._scanner;
      if (!t1.scan$1("["))
        return null;
      if (t1.matches$1("]"))
        t1.error$1(0, 'unexpected "]".');
      negated = t1.scan$1("!") || t1.scan$1("^");
      readRangeChar = new A.Parser__parseRange_readRangeChar(this, negated);
      ranges = A._setArrayType([], type$.JSArray_Range);
      t2 = t1.string;
      while (true) {
        success = t1.matches$1("]");
        if (success) {
          t3 = t1._lastMatch;
          t1._lastMatchPosition = t1._position = t3.get$end(t3);
        }
        if (!!success)
          break;
        c$0: {
          start = t1._position;
          if (t1.matches$1("\\")) {
            t3 = t1._lastMatch;
            t1._lastMatchPosition = t1._position = t3.get$end(t3);
          }
          char = readRangeChar.call$0();
          success = t1.matches$1("-");
          if (success) {
            t3 = t1._lastMatch;
            t1._lastMatchPosition = t1._position = t3.get$end(t3);
          }
          if (success) {
            t3 = B.JSString_methods.matchAsPrefix$2("]", t2, t1._position);
            t1._lastMatch = t3;
            t1._lastMatchPosition = t1._position;
            if (t3 != null) {
              ranges.push(new A.Range(char, char));
              ranges.push(new A.Range(45, 45));
              break c$0;
            }
            if (t1.matches$1("\\")) {
              t3 = t1._lastMatch;
              t1._lastMatchPosition = t1._position = t3.get$end(t3);
            }
            end = readRangeChar.call$0();
            if (end < char)
              t1.error$3$length$position(0, "Range out of order.", t1._position - start, start);
            ranges.push(new A.Range(char, end));
          } else
            ranges.push(new A.Range(char, char));
        }
      }
      return new A.RangeNode(A.LinkedHashSet_LinkedHashSet$from(ranges, type$.Range), negated, this._caseSensitive);
    },
    _parseOptions$0() {
      var options,
        t1 = this._scanner;
      if (!t1.scan$1("{"))
        return null;
      if (t1.matches$1("}"))
        t1.error$1(0, 'unexpected "}".');
      options = A._setArrayType([], type$.JSArray_SequenceNode);
      do
        options.push(this._parseSequence$1$inOptions(true));
      while (t1.scan$1(","));
      if (options.length === 1)
        t1.expect$1(",");
      t1.expect$1("}");
      return new A.OptionsNode(B.JSArray_methods.toList$0(options), this._caseSensitive);
    },
    _parseLiteral$1$inOptions(inOptions) {
      var buffer, t2, success, t3, _i, char,
        regExp = A.RegExp_RegExp(inOptions ? "[^*{[?\\\\}\\],()]*" : "[^*{[?\\\\}\\]()]*", true),
        t1 = this._scanner;
      t1.scan$1(regExp);
      buffer = new A.StringBuffer("");
      t2 = buffer._contents = "" + A.S(t1.get$lastMatch().$index(0, 0));
      while (true) {
        success = t1.matches$1("\\");
        if (success) {
          t3 = t1._lastMatch;
          t1._lastMatchPosition = t1._position = t3.get$end(t3);
        }
        if (!success)
          break;
        t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
        buffer._contents = t2;
        if (t1.matches$1(regExp)) {
          t3 = t1._lastMatch;
          t1._lastMatchPosition = t1._position = t3.get$end(t3);
        }
        if (t1._position !== t1._lastMatchPosition)
          t1._lastMatch = null;
        t2 += A.S(t1._lastMatch.$index(0, 0));
        buffer._contents = t2;
      }
      for (t2 = t1.string, _i = 0; _i < 3; ++_i) {
        char = B.List_JsO[_i];
        t3 = B.JSString_methods.matchAsPrefix$2(char, t2, t1._position);
        t1._lastMatch = t3;
        t1._lastMatchPosition = t1._position;
        if (t3 != null)
          t1.error$1(0, 'unexpected "' + char + '"');
      }
      if (!inOptions && t1.matches$1("}"))
        t1.error$1(0, 'unexpected "}"');
      t1 = buffer._contents;
      return new A.LiteralNode(t1.charCodeAt(0) == 0 ? t1 : t1, this._context, this._caseSensitive);
    }
  };
  A.Parser__parseRange_readRangeChar.prototype = {
    call$0() {
      var t1 = this.$this._scanner,
        char = t1.readChar$0();
      if (this.negated || char !== 47)
        return char;
      t1.error$2$position(0, '"/" may not be used in a range.', t1._position - 1);
    },
    $signature: 41
  };
  A.Range.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Range && other.min === this.min && other.max === this.max;
    },
    get$hashCode(_) {
      return 3 * this.min + 7 * this.max;
    }
  };
  A.regExpQuote_closure.prototype = {
    call$1(char) {
      return "\\" + A.S(char.$index(0, 0));
    },
    $signature: 104
  };
  A.BufferModule.prototype = {};
  A.BufferConstants.prototype = {};
  A.Buffer.prototype = {};
  A.ConsoleModule.prototype = {};
  A.Console.prototype = {};
  A.DNS.prototype = {};
  A.DNSLookupOptions.prototype = {};
  A.DNSAddress.prototype = {};
  A.Resolver.prototype = {};
  A.EventEmitter.prototype = {};
  A.FS.prototype = {};
  A.FSConstants.prototype = {};
  A.FSWatcher.prototype = {};
  A.ReadStream.prototype = {};
  A.ReadStreamOptions.prototype = {};
  A.WriteStream.prototype = {};
  A.WriteStreamOptions.prototype = {};
  A.FileOptions.prototype = {};
  A.StatOptions.prototype = {};
  A.MkdirOptions.prototype = {};
  A.RmdirOptions.prototype = {};
  A.WatchOptions.prototype = {};
  A.WatchFileOptions.prototype = {};
  A.Stats.prototype = {};
  A.HTTP.prototype = {};
  A.HttpAgent.prototype = {};
  A.HttpAgentOptions.prototype = {};
  A.RequestOptions.prototype = {};
  A.ClientRequest.prototype = {};
  A.HttpServer.prototype = {};
  A.ServerResponse.prototype = {};
  A.IncomingMessage.prototype = {};
  A.Promise.prototype = {};
  A.Date.prototype = {};
  A.JsError.prototype = {};
  A.Atomics.prototype = {};
  A.Modules.prototype = {};
  A.Module.prototype = {};
  A.Net.prototype = {};
  A.Socket.prototype = {};
  A.NetAddress.prototype = {};
  A.NetServer.prototype = {};
  A.NodeJsError.prototype = {};
  A.JsAssertionError.prototype = {};
  A.JsRangeError.prototype = {};
  A.JsReferenceError.prototype = {};
  A.JsSyntaxError.prototype = {};
  A.JsTypeError.prototype = {};
  A.JsSystemError.prototype = {};
  A.OS.prototype = {};
  A.CPU.prototype = {};
  A.CPUTimes.prototype = {};
  A.OSConstants.prototype = {};
  A.OSSignalConstants.prototype = {};
  A.OSErrorConstants.prototype = {};
  A.OSDLOpenConstants.prototype = {};
  A.Path.prototype = {};
  A.PathObject.prototype = {};
  A.Process.prototype = {};
  A.CPUUsage.prototype = {};
  A.Release.prototype = {};
  A.StreamModule.prototype = {};
  A.Readable.prototype = {};
  A.Writable.prototype = {};
  A.Duplex.prototype = {};
  A.Transform.prototype = {};
  A.WritableOptions.prototype = {};
  A.ReadableOptions.prototype = {};
  A.Immediate.prototype = {};
  A.Timeout.prototype = {};
  A.TTY.prototype = {};
  A.TTYReadStream.prototype = {};
  A.TTYWriteStream.prototype = {};
  A.Util.prototype = {};
  A.futureToPromise_closure.prototype = {
    call$2(resolve, reject) {
      this.future.then$1$2$onError(0, new A.futureToPromise__closure(resolve, this.T), reject, type$.dynamic);
    },
    $signature: 107
  };
  A.futureToPromise__closure.prototype = {
    call$1(result) {
      return this.resolve.call$1(result);
    },
    $signature() {
      return this.T._eval$1("@(0)");
    }
  };
  A.Directory.prototype = {
    _pathToFsEntity$2(path, followLinks) {
      var stat = J.statSync$1$x(A.fs(), path),
        t1 = J.getInterceptor$x(stat);
      if (t1.isFile$0(stat))
        return new A.File(path);
      if (t1.isDirectory$0(stat))
        return new A.Directory(path);
      if (t1.isSymbolicLink$0(stat))
        return new A.Link(path);
      throw A.wrapException(A.StateError$('Invalid FileSystemEntity "path".'));
    },
    listSync$2$followLinks$recursive(followLinks, recursive) {
      var t1 = new A.Directory_listSync_list(this, true, recursive).call$1(this.path);
      return A.List_List$of(t1, true, A.instanceType(t1)._eval$1("Iterable.E"));
    },
    listSync$1$followLinks(followLinks) {
      return this.listSync$2$followLinks$recursive(followLinks, false);
    },
    toString$0(_) {
      return "Directory: '" + this.path + "'";
    },
    $isDirectory0: 1,
    get$path(receiver) {
      return this.path;
    }
  };
  A.Directory_listSync_list.prototype = {
    $call$body$Directory_listSync_list($async$path) {
      var $async$self = this;
      return A._makeSyncStarIterable(function() {
        var path = $async$path;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, t4, filePath, entity;
        return function $async$call$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = J.get$iterator$ax(J.readdirSync$1$x(A.fs(), path)), t2 = $async$self.recursive, t3 = $async$self.$this, t4 = $async$self.followLinks;
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                filePath = A.join(path, t1.get$current(), null);
                entity = t3._pathToFsEntity$2(filePath, t4);
                $async$goto = 4;
                return entity;
              case 4:
                // after yield
                $async$goto = t2 && entity instanceof A.Directory ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return A._IterationMarker_yieldStar($async$self.call$1(filePath));
              case 7:
                // after yield
              case 6:
                // join
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.FileSystemEntity);
    },
    call$1(path) {
      return this.$call$body$Directory_listSync_list(path);
    },
    $signature: 45
  };
  A.File.prototype = {
    length$0(_) {
      return A.FileStat_stat(this.path).then$1$1(0, new A.File_length_closure(), type$.int);
    },
    toString$0(_) {
      return "File: '" + this.path + "'";
    },
    get$path(receiver) {
      return this.path;
    }
  };
  A.File_length_closure.prototype = {
    call$1(_) {
      return _.size;
    },
    $signature: 113
  };
  A.NodeFileSystem.prototype = {};
  A.FileSystemEntity0.prototype = {
    toString$0(_) {
      return A.getRuntimeType(this).toString$0(0) + ": '" + this.get$path(this) + "'";
    },
    $isFileSystemEntity: 1
  };
  A.FileStat.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = _this.type.toString$0(0),
        t2 = _this.changed.toString$0(0),
        t3 = _this.modified.toString$0(0),
        t4 = _this.accessed.toString$0(0),
        permissions = _this.mode & 4095,
        result = [];
      if ((permissions & 2048) !== 0)
        result.push("(suid) ");
      if ((permissions & 1024) !== 0)
        result.push("(guid) ");
      if ((permissions & 512) !== 0)
        result.push("(sticky) ");
      result.push(B.List_NAl[permissions >>> 6 & 7]);
      result.push(B.List_NAl[permissions >>> 3 & 7]);
      result.push(B.List_NAl[permissions & 7]);
      return "FileStat: type " + t1 + "\n          changed " + t2 + "\n          modified " + t3 + "\n          accessed " + t4 + "\n          mode " + B.JSArray_methods.join$0(result) + "\n          size " + _this.size;
    }
  };
  A.FileStat_stat_callback.prototype = {
    call$2(err, stats) {
      var t1 = this.completer;
      if (err == null)
        t1.complete$1(A.FileStat_FileStat$_fromNodeStats(stats));
      else
        t1.complete$1(A.FileStat$_internalNotFound());
    },
    call$1(err) {
      return this.call$2(err, null);
    },
    "call*": "call$2",
    $requiredArgCount: 1,
    $defaultValues() {
      return [null];
    },
    $signature: 114
  };
  A.Link.prototype = {
    get$path(receiver) {
      return this.path;
    }
  };
  A.Context.prototype = {
    absolute$15(part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15) {
      var t1;
      A._validateArgList("absolute", A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$16(0, t1 == null ? A.current() : t1, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15);
    },
    absolute$1(part1) {
      return this.absolute$15(part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    },
    dirname$1(_, path) {
      var t1, t2,
        parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.removeTrailingSeparators$0();
      t1 = parsed.parts;
      t2 = t1.length;
      if (t2 === 0) {
        t1 = parsed.root;
        return t1 == null ? "." : t1;
      }
      if (t2 === 1) {
        t1 = parsed.root;
        return t1 == null ? "." : t1;
      }
      B.JSArray_methods.removeLast$0(t1);
      parsed.separators.pop();
      parsed.removeTrailingSeparators$0();
      return parsed.toString$0(0);
    },
    join$16(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16) {
      var parts = A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    join$1($receiver, part1) {
      return this.join$16($receiver, part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    },
    join$2($receiver, part1, part2) {
      return this.join$16($receiver, part1, part2, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path;
      for (t1 = parts.get$iterator(parts), t2 = new A.WhereIterator(t1, new A.Context_joinAll_closure()), t3 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t2.moveNext$0();) {
        t5 = t1.get$current();
        if (t3.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t3);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t3.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t3.needsSeparator$1(t4))
            parsed.separators[0] = t3.get$separator();
          t4 = "" + parsed.toString$0(0);
        } else if (t3.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t3.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          if (!(t5.length !== 0 && t3.containsSeparator$1(t5[0])))
            if (needsSeparator)
              t4 += t3.get$separator();
          t4 += t5;
        }
        needsSeparator = t3.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1)._eval$1("WhereIterable<1>");
      t2 = A.List_List$of(new A.WhereIterable(t1, new A.Context_split_closure(), t2), true, t2._eval$1("Iterable.E"));
      parsed.parts = t2;
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(t2, 0, t1);
      return parsed.parts;
    },
    canonicalize$1(path) {
      var t1, parsed;
      path = this.absolute$1(path);
      t1 = this.style;
      if (t1 !== $.$get$Style_windows() && !this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, t1);
      parsed.normalize$1$canonicalize(0, true);
      return parsed.toString$0(0);
    },
    normalize$1(_, path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0(0);
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var i, start, previous, t2, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (B.JSString_methods._codeUnitAt$1(path, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path)._string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        codeUnit = B.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$2$from(_, path, from) {
      var fromParsed, pathParsed, t2, t3, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = from == null;
      if (t1 && _this.style.rootLength$1(path) <= 0)
        return _this.normalize$1(0, path);
      if (t1) {
        t1 = _this._context$_current;
        from = t1 == null ? A.current() : t1;
      } else
        from = _this.absolute$1(from);
      t1 = _this.style;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(0, path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0(0);
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0(0);
      t2 = fromParsed.parts;
      if (t2.length !== 0 && J.$eq$(t2[0], "."))
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        if (t2.length !== 0) {
          t3 = pathParsed.parts;
          t2 = t3.length !== 0 && t1.pathsEqual$2(t2[0], t3[0]);
        } else
          t2 = false;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      if (t2.length !== 0 && J.$eq$(t2[0], ".."))
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(fromParsed.parts.length, "..", false, t2));
      t3 = pathParsed.separators;
      t3[0] = "";
      B.JSArray_methods.insertAll$2(t3, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(B.JSArray_methods.get$last(t1), ".")) {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        t1.pop();
        t1.pop();
        t1.push("");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    relative$1($receiver, path) {
      return this.relative$2$from($receiver, path, null);
    },
    _isWithinOrEquals$2($parent, child) {
      var relative, t1, parentIsAbsolute, childIsAbsolute, childIsRootRelative, parentIsRootRelative, result, exception, _this = this;
      $parent = $parent;
      child = child;
      t1 = _this.style;
      parentIsAbsolute = t1.rootLength$1($parent) > 0;
      childIsAbsolute = t1.rootLength$1(child) > 0;
      if (parentIsAbsolute && !childIsAbsolute) {
        child = _this.absolute$1(child);
        if (t1.isRootRelative$1($parent))
          $parent = _this.absolute$1($parent);
      } else if (childIsAbsolute && !parentIsAbsolute) {
        $parent = _this.absolute$1($parent);
        if (t1.isRootRelative$1(child))
          child = _this.absolute$1(child);
      } else if (childIsAbsolute && parentIsAbsolute) {
        childIsRootRelative = t1.isRootRelative$1(child);
        parentIsRootRelative = t1.isRootRelative$1($parent);
        if (childIsRootRelative && !parentIsRootRelative)
          child = _this.absolute$1(child);
        else if (parentIsRootRelative && !childIsRootRelative)
          $parent = _this.absolute$1($parent);
      }
      result = _this._isWithinOrEqualsFast$2($parent, child);
      if (result !== B._PathRelation_inconclusive)
        return result;
      relative = null;
      try {
        relative = _this.relative$2$from(0, child, $parent);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.PathException)
          return B._PathRelation_different;
        else
          throw exception;
      }
      if (t1.rootLength$1(relative) > 0)
        return B._PathRelation_different;
      if (J.$eq$(relative, "."))
        return B._PathRelation_equal;
      if (J.$eq$(relative, ".."))
        return B._PathRelation_different;
      return J.get$length$asx(relative) >= 3 && J.startsWith$1$s(relative, "..") && t1.isSeparator$1(J.codeUnitAt$1$s(relative, 2)) ? B._PathRelation_different : B._PathRelation_within;
    },
    _isWithinOrEqualsFast$2($parent, child) {
      var t1, parentRootLength, childRootLength, i, t2, t3, childIndex, parentIndex, lastCodeUnit, lastParentSeparator, parentCodeUnit, childCodeUnit, parentIndex0, direction, _this = this;
      if ($parent === ".")
        $parent = "";
      t1 = _this.style;
      parentRootLength = t1.rootLength$1($parent);
      childRootLength = t1.rootLength$1(child);
      if (parentRootLength !== childRootLength)
        return B._PathRelation_different;
      for (i = 0; i < parentRootLength; ++i)
        if (!t1.codeUnitsEqual$2(B.JSString_methods._codeUnitAt$1($parent, i), B.JSString_methods._codeUnitAt$1(child, i)))
          return B._PathRelation_different;
      t2 = child.length;
      t3 = $parent.length;
      childIndex = childRootLength;
      parentIndex = parentRootLength;
      lastCodeUnit = 47;
      lastParentSeparator = null;
      while (true) {
        if (!(parentIndex < t3 && childIndex < t2))
          break;
        c$0: {
          parentCodeUnit = B.JSString_methods.codeUnitAt$1($parent, parentIndex);
          childCodeUnit = B.JSString_methods.codeUnitAt$1(child, childIndex);
          if (t1.codeUnitsEqual$2(parentCodeUnit, childCodeUnit)) {
            if (t1.isSeparator$1(parentCodeUnit))
              lastParentSeparator = parentIndex;
            ++parentIndex;
            ++childIndex;
            lastCodeUnit = parentCodeUnit;
            break c$0;
          }
          if (t1.isSeparator$1(parentCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            parentIndex0 = parentIndex + 1;
            lastParentSeparator = parentIndex;
            parentIndex = parentIndex0;
            break c$0;
          } else if (t1.isSeparator$1(childCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            ++childIndex;
            break c$0;
          }
          if (parentCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++parentIndex;
            if (parentIndex === t3)
              break;
            parentCodeUnit = B.JSString_methods.codeUnitAt$1($parent, parentIndex);
            if (t1.isSeparator$1(parentCodeUnit)) {
              parentIndex0 = parentIndex + 1;
              lastParentSeparator = parentIndex;
              parentIndex = parentIndex0;
              break c$0;
            }
            if (parentCodeUnit === 46) {
              ++parentIndex;
              if (parentIndex === t3 || t1.isSeparator$1(B.JSString_methods.codeUnitAt$1($parent, parentIndex)))
                return B._PathRelation_inconclusive;
            }
          }
          if (childCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++childIndex;
            if (childIndex === t2)
              break;
            childCodeUnit = B.JSString_methods.codeUnitAt$1(child, childIndex);
            if (t1.isSeparator$1(childCodeUnit)) {
              ++childIndex;
              break c$0;
            }
            if (childCodeUnit === 46) {
              ++childIndex;
              if (childIndex === t2 || t1.isSeparator$1(B.JSString_methods.codeUnitAt$1(child, childIndex)))
                return B._PathRelation_inconclusive;
            }
          }
          if (_this._pathDirection$2(child, childIndex) !== B._PathDirection_988)
            return B._PathRelation_inconclusive;
          if (_this._pathDirection$2($parent, parentIndex) !== B._PathDirection_988)
            return B._PathRelation_inconclusive;
          return B._PathRelation_different;
        }
      }
      if (childIndex === t2) {
        if (parentIndex === t3 || t1.isSeparator$1(B.JSString_methods.codeUnitAt$1($parent, parentIndex)))
          lastParentSeparator = parentIndex;
        else if (lastParentSeparator == null)
          lastParentSeparator = Math.max(0, parentRootLength - 1);
        direction = _this._pathDirection$2($parent, lastParentSeparator);
        if (direction === B._PathDirection_8Gl)
          return B._PathRelation_equal;
        return direction === B._PathDirection_ZGD ? B._PathRelation_inconclusive : B._PathRelation_different;
      }
      direction = _this._pathDirection$2(child, childIndex);
      if (direction === B._PathDirection_8Gl)
        return B._PathRelation_equal;
      if (direction === B._PathDirection_ZGD)
        return B._PathRelation_inconclusive;
      return t1.isSeparator$1(B.JSString_methods.codeUnitAt$1(child, childIndex)) || t1.isSeparator$1(lastCodeUnit) ? B._PathRelation_within : B._PathRelation_different;
    },
    _pathDirection$2(path, index) {
      var t1, t2, i, depth, reachedRoot, i0, t3;
      for (t1 = path.length, t2 = this.style, i = index, depth = 0, reachedRoot = false; i < t1;) {
        while (true) {
          if (!(i < t1 && t2.isSeparator$1(B.JSString_methods.codeUnitAt$1(path, i))))
            break;
          ++i;
        }
        if (i === t1)
          break;
        i0 = i;
        while (true) {
          if (!(i0 < t1 && !t2.isSeparator$1(B.JSString_methods.codeUnitAt$1(path, i0))))
            break;
          ++i0;
        }
        t3 = i0 - i;
        if (!(t3 === 1 && B.JSString_methods.codeUnitAt$1(path, i) === 46))
          if (t3 === 2 && B.JSString_methods.codeUnitAt$1(path, i) === 46 && B.JSString_methods.codeUnitAt$1(path, i + 1) === 46) {
            --depth;
            if (depth < 0)
              break;
            if (depth === 0)
              reachedRoot = true;
          } else
            ++depth;
        if (i0 === t1)
          break;
        i = i0 + 1;
      }
      if (depth < 0)
        return B._PathDirection_ZGD;
      if (depth === 0)
        return B._PathDirection_8Gl;
      if (reachedRoot)
        return B._PathDirection_FIw;
      return B._PathDirection_988;
    },
    withoutExtension$1(path) {
      var i,
        parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      for (i = parsed.parts.length - 1; i >= 0; --i)
        if (J.get$length$asx(parsed.parts[i]) !== 0) {
          parsed.parts[i] = parsed._splitExtension$0()[0];
          break;
        }
      return parsed.toString$0(0);
    },
    toUri$1(path) {
      var t2,
        t1 = this.style;
      if (t1.rootLength$1(path) <= 0)
        return t1.relativePathToUri$1(path);
      else {
        t2 = this._context$_current;
        return t1.absolutePathToUri$1(this.join$2(0, t2 == null ? A.current() : t2, path));
      }
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(0, _this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(0, path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return part !== "";
    },
    $signature: 5
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return part.length !== 0;
    },
    $signature: 5
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 129
  };
  A._PathDirection.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A._PathRelation.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      return this.isRootRelative$1(path) ? path[0] : null;
    },
    relativePathToUri$1(path) {
      var segments, _null = null,
        t1 = path.length;
      if (t1 === 0)
        return A._Uri__Uri(_null, _null, _null, _null);
      segments = A.Context_Context(this).split$1(0, path);
      if (this.isSeparator$1(B.JSString_methods.codeUnitAt$1(path, t1 - 1)))
        B.JSArray_methods.add$1(segments, "");
      return A._Uri__Uri(_null, _null, segments, _null);
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      return codeUnit1 === codeUnit2;
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    },
    canonicalizePart$1(part) {
      return part;
    }
  };
  A.ParsedPath.prototype = {
    get$basename(_) {
      var _this = this,
        t1 = type$.String,
        copy = new A.ParsedPath(_this.style, _this.root, _this.isRootRelative, A.List_List$from(_this.parts, true, t1), A.List_List$from(_this.separators, true, t1));
      copy.removeTrailingSeparators$0();
      t1 = copy.parts;
      if (t1.length === 0) {
        t1 = _this.root;
        return t1 == null ? "" : t1;
      }
      return B.JSArray_methods.get$last(t1);
    },
    get$hasTrailingSeparator() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 = J.$eq$(B.JSArray_methods.get$last(t1), "") || !J.$eq$(B.JSArray_methods.get$last(this.separators), "");
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        _this.separators.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        t1[t2 - 1] = "";
    },
    normalize$1$canonicalize(_, canonicalize) {
      var t1, t2, t3, leadingDoubles, _i, part, t4, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, t3 = _this.style, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t4 = J.getInterceptor$(part);
        if (!(t4.$eq(part, ".") || t4.$eq(part, "")))
          if (t4.$eq(part, ".."))
            if (newParts.length !== 0)
              newParts.pop();
            else
              ++leadingDoubles;
          else
            newParts.push(canonicalize ? t3.canonicalizePart$1(part) : part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        newParts.push(".");
      _this.parts = newParts;
      _this.separators = A.List_List$filled(newParts.length + 1, t3.get$separator(), true, type$.String);
      t1 = _this.root;
      if (t1 == null || newParts.length === 0 || !t3.needsSeparator$1(t1))
        _this.separators[0] = "";
      t1 = _this.root;
      if (t1 != null && t3 === $.$get$Style_windows()) {
        if (canonicalize)
          t1 = _this.root = t1.toLowerCase();
        t1.toString;
        _this.root = A.stringReplaceAllUnchecked(t1, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    normalize$0($receiver) {
      return this.normalize$1$canonicalize($receiver, false);
    },
    toString$0(_) {
      var i, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (i = 0; i < _this.parts.length; ++i)
        t1 = t1 + A.S(_this.separators[i]) + A.S(_this.parts[i]);
      t1 += A.S(B.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _kthLastIndexOf$3(path, character, k) {
      var index, count, leftMostIndexedCharacter;
      for (index = path.length - 1, count = 0, leftMostIndexedCharacter = 0; index >= 0; --index)
        if (path[index] === character) {
          ++count;
          if (count === k)
            return index;
          leftMostIndexedCharacter = index;
        }
      return leftMostIndexedCharacter;
    },
    _splitExtension$1(level) {
      var t1, file, lastDot;
      if (level <= 0)
        throw A.wrapException(A.RangeError$value(level, "level", "level's value must be greater than 0"));
      t1 = this.parts;
      t1 = new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("CastList<1,String?>"));
      file = t1.lastWhere$2$orElse(t1, new A.ParsedPath__splitExtension_closure(), new A.ParsedPath__splitExtension_closure0());
      if (file == null)
        return A._setArrayType(["", ""], type$.JSArray_String);
      if (file === "..")
        return A._setArrayType(["..", ""], type$.JSArray_String);
      lastDot = this._kthLastIndexOf$3(file, ".", level);
      if (lastDot <= 0)
        return A._setArrayType([file, ""], type$.JSArray_String);
      return A._setArrayType([B.JSString_methods.substring$2(file, 0, lastDot), B.JSString_methods.substring$1(file, lastDot)], type$.JSArray_String);
    },
    _splitExtension$0() {
      return this._splitExtension$1(1);
    }
  };
  A.ParsedPath__splitExtension_closure.prototype = {
    call$1(p) {
      return p !== "";
    },
    $signature: 131
  };
  A.ParsedPath__splitExtension_closure0.prototype = {
    call$0() {
      return null;
    },
    $signature: 10
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name(this);
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      return t1 !== 0 && B.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive(path, withDrive) {
      if (path.length !== 0 && B.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path(uri);
        return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    absolutePathToUri$1(path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.parts;
      if (t1.length === 0)
        B.JSArray_methods.addAll$1(t1, A._setArrayType(["", ""], type$.JSArray_String));
      else if (parsed.get$hasTrailingSeparator())
        B.JSArray_methods.add$1(parsed.parts, "");
      return A._Uri__Uri(null, null, parsed.parts, "file");
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      if (B.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (B.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!A.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return path.length !== 0 && B.JSString_methods._codeUnitAt$1(path, 0) === 47;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    relativePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    absolutePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      t1 = B.JSString_methods.codeUnitAt$1(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      t2 = B.JSString_methods._codeUnitAt$1(path, 0);
      if (t2 === 47)
        return 1;
      if (t2 === 92) {
        if (t1 < 2 || B.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(t2))
        return 0;
      if (B.JSString_methods._codeUnitAt$1(path, 1) !== 58)
        return 0;
      t1 = B.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path(uri);
      if (uri.get$host(uri) === "") {
        if (path.length >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.isDriveLetter(path, 1))
          path = B.JSString_methods.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + uri.get$host(uri) + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
    },
    absolutePathToUri$1(path) {
      var rootParts, t2,
        parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.root;
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "\\\\")) {
        rootParts = new A.WhereIterable(A._setArrayType(t1.split("\\"), type$.JSArray_String), new A.WindowsStyle_absolutePathToUri_closure(), type$.WhereIterable_String);
        B.JSArray_methods.insert$2(parsed.parts, 0, rootParts.get$last(rootParts));
        if (parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        return A._Uri__Uri(rootParts.get$first(rootParts), null, parsed.parts, "file");
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        t1 = parsed.parts;
        t2 = parsed.root;
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "/", "");
        B.JSArray_methods.insert$2(t1, 0, A.stringReplaceAllUnchecked(t2, "\\", ""));
        return A._Uri__Uri(null, null, parsed.parts, "file");
      }
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(B.JSString_methods._codeUnitAt$1(path1, i), B.JSString_methods._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    canonicalizePart$1(part) {
      return part.toLowerCase();
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1(part) {
      return part !== "";
    },
    $signature: 5
  };
  A.Argument.prototype = {
    get$nameSpan() {
      var t1 = this.span;
      return this.defaultValue == null ? t1 : A.SpanExtensions_initialIdentifier(t1, 1);
    },
    toString$0(_) {
      var t1 = this.defaultValue,
        t2 = this.name;
      return t1 == null ? t2 : t2 + ": " + t1.toString$0(0);
    },
    $isSassDeclaration: 1,
    get$name(receiver) {
      return this.name;
    },
    get$span() {
      return this.span;
    }
  };
  A.ArgumentDeclaration.prototype = {
    toString$0(_) {
      var t2, t3, _i,
        t1 = A._setArrayType([], type$.JSArray_String);
      for (t2 = this.$arguments, t3 = t2.length, _i = 0; _i < t3; ++_i)
        t1.push("$" + A.S(t2[_i]));
      t2 = this.restArgument;
      if (t2 != null)
        t1.push("$" + t2 + "...");
      return B.JSArray_methods.join$1(t1, ", ");
    }
  };
  A.ArgumentInvocation.prototype = {
    get$isEmpty(_) {
      var t1;
      if (this.positional.length === 0) {
        t1 = this.named;
        t1 = t1.get$isEmpty(t1) && this.rest == null;
      } else
        t1 = false;
      return t1;
    },
    toString$0(_) {
      var t2, t3, t4, _this = this,
        t1 = A.List_List$of(_this.positional, true, type$.Object);
      for (t2 = _this.named, t3 = t2.get$keys(t2), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current();
        t1.push("$" + t4 + ": " + A.S(t2.$index(0, t4)));
      }
      t2 = _this.rest;
      if (t2 != null)
        t1.push(t2.toString$0(0) + "...");
      t2 = _this.keywordRest;
      if (t2 != null)
        t1.push(t2.toString$0(0) + "...");
      return "(" + B.JSArray_methods.join$1(t1, ", ") + ")";
    },
    get$span() {
      return this.span;
    }
  };
  A.ConfiguredVariable.prototype = {
    get$nameSpan() {
      return A.SpanExtensions_initialIdentifier(this.span, 1);
    },
    toString$0(_) {
      var t1 = this.expression.toString$0(0),
        t2 = this.isGuarded ? " !default" : "";
      return "$" + this.name + ": " + t1 + t2;
    },
    $isSassDeclaration: 1
  };
  A.BinaryOperationExpression.prototype = {
    get$span() {
      var right,
        left = this.left;
      for (; left instanceof A.BinaryOperationExpression;)
        left = left.left;
      right = this.right;
      for (; right instanceof A.BinaryOperationExpression;)
        right = right.right;
      return left.get$span().expand$1(0, right.get$span());
    },
    accept$1$1(visitor) {
      return visitor.visitBinaryOperationExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2, right, rightNeedsParens, _this = this,
        left = _this.left,
        leftNeedsParens = left instanceof A.BinaryOperationExpression && left.operator.precedence < _this.operator.precedence,
        t1 = leftNeedsParens ? "" + A.Primitives_stringFromCharCode(40) : "";
      t1 += left.toString$0(0);
      if (leftNeedsParens)
        t1 += A.Primitives_stringFromCharCode(41);
      t2 = _this.operator;
      t1 = t1 + A.Primitives_stringFromCharCode(32) + t2.operator + A.Primitives_stringFromCharCode(32);
      right = _this.right;
      rightNeedsParens = right instanceof A.BinaryOperationExpression && right.operator.precedence <= t2.precedence;
      if (rightNeedsParens)
        t1 += A.Primitives_stringFromCharCode(40);
      t1 += right.toString$0(0);
      if (rightNeedsParens)
        t1 += A.Primitives_stringFromCharCode(41);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isExpression: 1
  };
  A.BinaryOperator.prototype = {
    _enumToString$0() {
      return "BinaryOperator." + this._name;
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.BooleanExpression.prototype = {
    accept$1$1(visitor) {
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return String(this.value);
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.CalculationExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCalculationExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.name + "(" + B.JSArray_methods.join$1(this.$arguments, ", ") + ")";
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.CalculationExpression__verifyArguments_closure.prototype = {
    call$1(arg) {
      A.CalculationExpression__verify(arg);
      return arg;
    },
    $signature: 138
  };
  A.ColorExpression.prototype = {
    accept$1$1(visitor) {
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return A.serializeValue(this.value, true, true);
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.FunctionExpression.prototype = {
    get$nameSpan() {
      if (this.namespace == null)
        return A.SpanExtensions_initialIdentifier(this.span, 0);
      return A.SpanExtensions_initialIdentifier(A.FileSpanExtension_subspan(A.SpanExtensions_withoutInitialIdentifier(this.span), 1, null), 0);
    },
    accept$1$1(visitor) {
      return visitor.visitFunctionExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace;
      t1 = t1 != null ? "" + (t1 + ".") : "";
      t1 += this.originalName + this.$arguments.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isExpression: 1,
    $isSassReference: 1,
    get$span() {
      return this.span;
    }
  };
  A.IfExpression.prototype = {
    accept$1$1(visitor) {
      visitor.visitArgumentInvocation$1(this.$arguments);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "if" + this.$arguments.toString$0(0);
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.InterpolatedFunctionExpression.prototype = {
    accept$1$1(visitor) {
      visitor.visitInterpolation$1(this.name);
      visitor.visitArgumentInvocation$1(this.$arguments);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.name.toString$0(0) + this.$arguments.toString$0(0);
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.ListExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitListExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var _this = this,
        t1 = _this.hasBrackets,
        t2 = t1 ? "" + A.Primitives_stringFromCharCode(91) : "",
        t3 = _this.contents,
        t4 = _this.separator === B.ListSeparator_rXA ? ", " : " ";
      t4 = t2 + new A.MappedListIterable(t3, new A.ListExpression_toString_closure(_this), A._arrayInstanceType(t3)._eval$1("MappedListIterable<1,String>")).join$1(0, t4);
      t1 = t1 ? t4 + A.Primitives_stringFromCharCode(93) : t4;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _elementNeedsParens$1(expression) {
      var t1;
      if (expression instanceof A.ListExpression) {
        if (expression.contents.length < 2)
          return false;
        if (expression.hasBrackets)
          return false;
        t1 = expression.separator;
        return this.separator === B.ListSeparator_rXA ? t1 === B.ListSeparator_rXA : t1 !== B.ListSeparator_undecided_null_undecided;
      }
      if (this.separator !== B.ListSeparator_EVt)
        return false;
      if (expression instanceof A.UnaryOperationExpression) {
        t1 = expression.operator;
        return t1 === B.UnaryOperator_gg4 || t1 === B.UnaryOperator_TLI;
      }
      return false;
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.ListExpression_toString_closure.prototype = {
    call$1(element) {
      return this.$this._elementNeedsParens$1(element) ? "(" + element.toString$0(0) + ")" : element.toString$0(0);
    },
    $signature: 141
  };
  A.MapExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitMapExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.pairs;
      return "(" + new A.MappedListIterable(t1, new A.MapExpression_toString_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$1(0, ", ") + ")";
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.MapExpression_toString_closure.prototype = {
    call$1(pair) {
      return A.S(pair.item1) + ": " + A.S(pair.item2);
    },
    $signature: 150
  };
  A.NullExpression.prototype = {
    accept$1$1(visitor) {
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "null";
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.NumberExpression.prototype = {
    accept$1$1(visitor) {
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.unit;
      if (t1 == null)
        t1 = "";
      return A.S(this.value) + t1;
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.ParenthesizedExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitParenthesizedExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "(" + this.expression.toString$0(0) + ")";
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.SelectorExpression.prototype = {
    accept$1$1(visitor) {
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "&";
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.StringExpression.prototype = {
    get$span() {
      return this.text.span;
    },
    accept$1$1(visitor) {
      visitor.visitInterpolation$1(this.text);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    asInterpolation$1$static($static) {
      var t1, t2, quote, t3, t4, buffer, t5, t6, _i, value;
      if (!this.hasQuotes)
        return this.text;
      t1 = this.text;
      t2 = t1.contents;
      quote = A.StringExpression__bestQuote(new A.WhereTypeIterable(t2, type$.WhereTypeIterable_String));
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t3._contents = "" + A.Primitives_stringFromCharCode(quote);
      for (t5 = t2.length, t6 = type$.Expression, _i = 0; _i < t5; ++_i) {
        value = t2[_i];
        if (t6._is(value)) {
          buffer._flushText$0();
          t4.push(value);
        } else if (typeof value == "string")
          A.StringExpression__quoteInnerText(value, quote, buffer, $static);
      }
      t3._contents += A.Primitives_stringFromCharCode(quote);
      return buffer.interpolation$1(t1.span);
    },
    asInterpolation$0() {
      return this.asInterpolation$1$static(false);
    },
    toString$0(_) {
      return this.asInterpolation$0().toString$0(0);
    },
    $isExpression: 1
  };
  A.SupportsExpression.prototype = {
    get$span() {
      return this.condition.get$span();
    },
    accept$1$1(visitor) {
      visitor.visitSupportsCondition$1(this.condition);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.condition.toString$0(0);
    },
    $isExpression: 1
  };
  A.UnaryOperationExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitUnaryOperationExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.operator,
        t2 = t1.operator;
      t1 = t1 === B.UnaryOperator_not_not_not ? t2 + A.Primitives_stringFromCharCode(32) : t2;
      t1 += this.operand.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isExpression: 1,
    get$span() {
      return this.span;
    }
  };
  A.UnaryOperator.prototype = {
    _enumToString$0() {
      return "UnaryOperator." + this._name;
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.VariableExpression.prototype = {
    get$nameSpan() {
      if (this.namespace == null)
        return this.span;
      return A.FileSpanExtension_subspan(A.SpanExtensions_withoutInitialIdentifier(this.span), 1, null);
    },
    accept$1$1(visitor) {
      return visitor.visitVariableExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace,
        t2 = this.name;
      return t1 == null ? "$" + t2 : t1 + ".$" + t2;
    },
    $isExpression: 1,
    $isSassReference: 1,
    get$span() {
      return this.span;
    }
  };
  A.DynamicImport.prototype = {
    get$url(_) {
      return A.Uri_parse(this.urlString);
    },
    toString$0(_) {
      return A.StringExpression_quoteText(this.urlString);
    },
    $isImport: 1
  };
  A.StaticImport.prototype = {
    toString$0(_) {
      var t1 = this.url.toString$0(0),
        t2 = this.modifiers;
      return t1 + (t2 == null ? "" : " " + t2.toString$0(0));
    },
    $isImport: 1
  };
  A.Interpolation.prototype = {
    get$asPlain() {
      var first,
        t1 = this.contents,
        t2 = t1.length;
      if (t2 === 0)
        return "";
      if (t2 > 1)
        return null;
      first = B.JSArray_methods.get$first(t1);
      return typeof first == "string" ? first : null;
    },
    get$initialPlain() {
      var first = B.JSArray_methods.get$first(this.contents);
      return typeof first == "string" ? first : "";
    },
    Interpolation$2(contents, span) {
      var t1, t2, t3, i, t4, t5,
        _s8_ = "contents";
      for (t1 = this.contents, t2 = t1.length, t3 = type$.Expression, i = 0; i < t2; ++i) {
        t4 = t1[i];
        t5 = typeof t4 == "string";
        if (!t5 && !t3._is(t4))
          throw A.wrapException(A.ArgumentError$value(t1, _s8_, "May only contains Strings or Expressions."));
        if (i !== 0 && typeof t1[i - 1] == "string" && t5)
          throw A.wrapException(A.ArgumentError$value(t1, _s8_, "May not contain adjacent Strings."));
      }
    },
    toString$0(_) {
      var t1 = this.contents;
      return new A.MappedListIterable(t1, new A.Interpolation_toString_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$0(0);
    }
  };
  A.Interpolation_toString_closure.prototype = {
    call$1(value) {
      return typeof value == "string" ? value : "#{" + A.S(value) + "}";
    },
    $signature: 151
  };
  A.AtRootRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitAtRootRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var buffer = new A.StringBuffer("@at-root "),
        t1 = this.query;
      if (t1 != null)
        buffer._contents = "@at-root " + (t1.toString$0(0) + " ");
      t1 = this.children;
      return buffer.toString$0(0) + " {" + (t1 && B.JSArray_methods).join$1(t1, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.AtRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitAtRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var children,
        t1 = "@" + this.name.toString$0(0),
        buffer = new A.StringBuffer(t1),
        t2 = this.value;
      if (t2 != null)
        buffer._contents = t1 + (" " + t2.toString$0(0));
      children = this.children;
      return children == null ? buffer.toString$0(0) + ";" : buffer.toString$0(0) + " {" + B.JSArray_methods.join$1(children, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.CallableDeclaration.prototype = {
    get$name(receiver) {
      return this.name;
    },
    get$span() {
      return this.span;
    }
  };
  A.ContentBlock.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCallableDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        t1 = this.$arguments;
      t1 = t1.$arguments.length === 0 && t1.restArgument == null ? "" : " using (" + t1.toString$0(0) + ")";
      t2 = this.children;
      return t1 + (" {" + (t2 && B.JSArray_methods).join$1(t2, " ") + "}");
    }
  };
  A.ContentRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitContentRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.$arguments;
      return t1.get$isEmpty(t1) ? "@content;" : "@content(" + t1.toString$0(0) + ");";
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.DebugRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitDebugRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "@debug " + this.expression.toString$0(0) + ";";
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.Declaration.prototype = {
    accept$1$1(visitor) {
      return visitor.visitDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t3, children,
        buffer = new A.StringBuffer(""),
        t1 = this.name,
        t2 = "" + t1.toString$0(0);
      buffer._contents = t2;
      t2 = buffer._contents = t2 + A.Primitives_stringFromCharCode(58);
      t3 = this.value;
      if (t3 != null) {
        t1 = !B.JSString_methods.startsWith$1(t1.get$initialPlain(), "--") ? buffer._contents = t2 + A.Primitives_stringFromCharCode(32) : t2;
        buffer._contents = t1 + t3.toString$0(0);
      }
      children = this.children;
      return children == null ? buffer.toString$0(0) + ";" : buffer.toString$0(0) + " {" + B.JSArray_methods.join$1(children, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.EachRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitEachRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.variables,
        t2 = this.children;
      return "@each " + new A.MappedListIterable(t1, new A.EachRule_toString_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$1(0, ", ") + " in " + this.list.toString$0(0) + " {" + (t2 && B.JSArray_methods).join$1(t2, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.EachRule_toString_closure.prototype = {
    call$1(variable) {
      return "$" + variable;
    },
    $signature: 4
  };
  A.ErrorRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitErrorRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "@error " + this.expression.toString$0(0) + ";";
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.ExtendRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitExtendRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.selector.toString$0(0),
        t2 = this.isOptional ? " !optional" : "";
      return "@extend " + t1 + t2 + ";";
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.ForRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitForRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var _this = this,
        t1 = _this.from.toString$0(0),
        t2 = _this.isExclusive ? "to" : "through",
        t3 = _this.children;
      return "@for $" + _this.variable + " from " + t1 + " " + t2 + " " + _this.to.toString$0(0) + " {" + (t3 && B.JSArray_methods).join$1(t3, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.ForwardRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitForwardRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2, prefix, _this = this,
        t1 = "@forward " + A.StringExpression_quoteText(_this.url.toString$0(0)),
        shownMixinsAndFunctions = _this.shownMixinsAndFunctions,
        hiddenMixinsAndFunctions = _this.hiddenMixinsAndFunctions;
      if (shownMixinsAndFunctions != null) {
        t2 = _this.shownVariables;
        t2.toString;
        t2 = t1 + " show " + _this._forward_rule$_memberList$2(shownMixinsAndFunctions, t2);
        t1 = t2;
      } else {
        if (hiddenMixinsAndFunctions != null) {
          t2 = hiddenMixinsAndFunctions._base;
          t2 = t2.get$isNotEmpty(t2);
        } else
          t2 = false;
        if (t2) {
          t2 = _this.hiddenVariables;
          t2.toString;
          t2 = t1 + " hide " + _this._forward_rule$_memberList$2(hiddenMixinsAndFunctions, t2);
          t1 = t2;
        }
      }
      prefix = _this.prefix;
      if (prefix != null)
        t1 += " as " + prefix + "*";
      t2 = _this.configuration;
      t1 = (t2.length !== 0 ? t1 + (" with (" + B.JSArray_methods.join$1(t2, ", ") + ")") : t1) + ";";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _forward_rule$_memberList$2(mixinsAndFunctions, variables) {
      var t2,
        t1 = A.List_List$of(mixinsAndFunctions, true, type$.String);
      for (t2 = variables._base, t2 = t2.get$iterator(t2); t2.moveNext$0();)
        t1.push("$" + t2.get$current());
      return B.JSArray_methods.join$1(t1, ", ");
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.FunctionRule.prototype = {
    get$nameSpan() {
      return A.SpanExtensions_initialIdentifier(A.SpanExtensions_withoutInitialAtRule(this.span), 0);
    },
    accept$1$1(visitor) {
      return visitor.visitFunctionRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return "@function " + this.name + "(" + this.$arguments.toString$0(0) + ") {" + (t1 && B.JSArray_methods).join$1(t1, " ") + "}";
    },
    $isSassDeclaration: 1
  };
  A.IfRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitIfRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var result = A.ListExtensions_mapIndexed(this.clauses, new A.IfRule_toString_closure(), type$.IfClause, type$.String).join$1(0, " "),
        lastClause = this.lastClause;
      return lastClause != null ? result + (" " + lastClause.toString$0(0)) : result;
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.IfRule_toString_closure.prototype = {
    call$2(index, clause) {
      var t1 = index === 0 ? "if" : "else if";
      return "@" + t1 + " " + clause.expression.toString$0(0) + " {" + B.JSArray_methods.join$1(clause.children, " ") + "}";
    },
    $signature: 154
  };
  A.IfRuleClause.prototype = {};
  A.IfRuleClause$__closure.prototype = {
    call$1(child) {
      var t1;
      if (!(child instanceof A.VariableDeclaration))
        if (!(child instanceof A.FunctionRule))
          if (!(child instanceof A.MixinRule))
            t1 = child instanceof A.ImportRule && B.JSArray_methods.any$1(child.imports, new A.IfRuleClause$___closure());
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    $signature: 46
  };
  A.IfRuleClause$___closure.prototype = {
    call$1($import) {
      return $import instanceof A.DynamicImport;
    },
    $signature: 47
  };
  A.IfClause.prototype = {
    toString$0(_) {
      return "@if " + this.expression.toString$0(0) + " {" + B.JSArray_methods.join$1(this.children, " ") + "}";
    }
  };
  A.ElseClause.prototype = {
    toString$0(_) {
      return "@else {" + B.JSArray_methods.join$1(this.children, " ") + "}";
    }
  };
  A.ImportRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitImportRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "@import " + B.JSArray_methods.join$1(this.imports, ", ") + ";";
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.IncludeRule.prototype = {
    get$nameSpan() {
      var t1 = this.span,
        startSpan = B.JSString_methods.startsWith$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1.file._decodedChars, t1._file$_start, t1._end), 0, null), "+") ? A.SpanExtensions_trimLeft(A.FileSpanExtension_subspan(t1, 1, null)) : A.SpanExtensions_withoutInitialAtRule(t1);
      return A.SpanExtensions_initialIdentifier(this.namespace != null ? A.FileSpanExtension_subspan(A.SpanExtensions_withoutInitialIdentifier(startSpan), 1, null) : startSpan, 0);
    },
    accept$1$1(visitor) {
      return visitor.visitIncludeRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2, _this = this,
        t1 = _this.namespace;
      t1 = t1 != null ? "@include " + (t1 + ".") : "@include ";
      t1 += _this.name;
      t2 = _this.$arguments;
      if (!t2.get$isEmpty(t2))
        t1 += "(" + t2.toString$0(0) + ")";
      t2 = _this.content;
      t1 += t2 == null ? ";" : " " + t2.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isSassReference: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.LoudComment.prototype = {
    get$span() {
      return this.text.span;
    },
    accept$1$1(visitor) {
      return visitor.visitLoudComment$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.text.toString$0(0);
    },
    $isStatement: 1
  };
  A.MediaRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitMediaRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return "@media " + this.query.toString$0(0) + " {" + (t1 && B.JSArray_methods).join$1(t1, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.MixinRule.prototype = {
    get$nameSpan() {
      var t1 = this.span;
      return A.SpanExtensions_initialIdentifier(B.JSString_methods.startsWith$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1.file._decodedChars, t1._file$_start, t1._end), 0, null), "=") ? A.SpanExtensions_trimLeft(A.FileSpanExtension_subspan(t1, 1, null)) : A.SpanExtensions_withoutInitialAtRule(t1), 0);
    },
    accept$1$1(visitor) {
      return visitor.visitMixinRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = "@mixin " + this.name,
        t2 = this.$arguments;
      if (!(t2.$arguments.length === 0 && t2.restArgument == null))
        t1 += "(" + t2.toString$0(0) + ")";
      t2 = this.children;
      t2 = t1 + (" {" + (t2 && B.JSArray_methods).join$1(t2, " ") + "}");
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    $isSassDeclaration: 1
  };
  A.ParentStatement.prototype = {$isStatement: 1};
  A.ParentStatement_closure.prototype = {
    call$1(child) {
      var t1;
      if (!(child instanceof A.VariableDeclaration))
        if (!(child instanceof A.FunctionRule))
          if (!(child instanceof A.MixinRule))
            t1 = child instanceof A.ImportRule && B.JSArray_methods.any$1(child.imports, new A.ParentStatement__closure());
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    $signature: 46
  };
  A.ParentStatement__closure.prototype = {
    call$1($import) {
      return $import instanceof A.DynamicImport;
    },
    $signature: 47
  };
  A.ReturnRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitReturnRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "@return " + this.expression.toString$0(0) + ";";
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.SilentComment.prototype = {
    accept$1$1(visitor) {
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.text;
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.StyleRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitStyleRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return this.selector.toString$0(0) + " {" + (t1 && B.JSArray_methods).join$1(t1, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.Stylesheet.prototype = {
    Stylesheet$internal$3$plainCss(children, span, plainCss) {
      var t1, t2, t3, t4, _i, child;
      for (t1 = this.children, t2 = t1.length, t3 = this._forwards, t4 = this._uses, _i = 0; _i < t2; ++_i) {
        child = t1[_i];
        if (child instanceof A.UseRule)
          t4.push(child);
        else if (child instanceof A.ForwardRule)
          t3.push(child);
        else if (!(child instanceof A.SilentComment) && !(child instanceof A.LoudComment) && !(child instanceof A.VariableDeclaration))
          break;
      }
    },
    accept$1$1(visitor) {
      return visitor.visitStylesheet$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (t1 && B.JSArray_methods).join$1(t1, " ");
    },
    get$span() {
      return this.span;
    }
  };
  A.SupportsRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitSupportsRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return "@supports " + this.condition.toString$0(0) + " {" + (t1 && B.JSArray_methods).join$1(t1, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.UseRule.prototype = {
    UseRule$4$configuration(url, namespace, span, configuration) {
      var t1, t2, _i, variable;
      for (t1 = this.configuration, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        variable = t1[_i];
        if (variable.isGuarded)
          throw A.wrapException(A.ArgumentError$value(variable, "configured variable", "can't be guarded in a @use rule."));
      }
    },
    accept$1$1(visitor) {
      return visitor.visitUseRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.url,
        t2 = "@use " + A.StringExpression_quoteText(t1.toString$0(0)),
        basename = t1.get$pathSegments().length === 0 ? "" : B.JSArray_methods.get$last(t1.get$pathSegments()),
        dot = B.JSString_methods.indexOf$1(basename, ".");
      t1 = this.namespace;
      if (t1 !== B.JSString_methods.substring$2(basename, 0, dot === -1 ? basename.length : dot))
        t1 = t2 + (" as " + (t1 == null ? "*" : t1));
      else
        t1 = t2;
      t2 = this.configuration;
      t1 = (t2.length !== 0 ? t1 + (" with (" + B.JSArray_methods.join$1(t2, ", ") + ")") : t1) + ";";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.VariableDeclaration.prototype = {
    get$nameSpan() {
      var span = this.span;
      return A.SpanExtensions_initialIdentifier(this.namespace != null ? A.FileSpanExtension_subspan(A.SpanExtensions_withoutInitialIdentifier(span), 1, null) : span, 1);
    },
    accept$1$1(visitor) {
      return visitor.visitVariableDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace;
      t1 = t1 != null ? "" + (t1 + ".") : "";
      t1 += "$" + this.name + ": " + this.expression.toString$0(0) + ";";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isSassDeclaration: 1,
    $isStatement: 1,
    get$name(receiver) {
      return this.name;
    },
    get$span() {
      return this.span;
    }
  };
  A.WarnRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitWarnRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return "@warn " + this.expression.toString$0(0) + ";";
    },
    $isStatement: 1,
    get$span() {
      return this.span;
    }
  };
  A.WhileRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitWhileRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return "@while " + this.condition.toString$0(0) + " {" + (t1 && B.JSArray_methods).join$1(t1, " ") + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.SupportsAnything.prototype = {
    toString$0(_) {
      return "(" + this.contents.toString$0(0) + ")";
    },
    get$span() {
      return this.span;
    }
  };
  A.SupportsDeclaration.prototype = {
    toString$0(_) {
      return "(" + this.name.toString$0(0) + ": " + this.value.toString$0(0) + ")";
    },
    get$span() {
      return this.span;
    }
  };
  A.SupportsFunction.prototype = {
    toString$0(_) {
      return this.name.toString$0(0) + "(" + this.$arguments.toString$0(0) + ")";
    },
    get$span() {
      return this.span;
    }
  };
  A.SupportsInterpolation.prototype = {
    toString$0(_) {
      return "#{" + this.expression.toString$0(0) + "}";
    },
    get$span() {
      return this.span;
    }
  };
  A.SupportsNegation.prototype = {
    toString$0(_) {
      var t1 = this.condition;
      if (t1 instanceof A.SupportsNegation || t1 instanceof A.SupportsOperation)
        return "not (" + t1.toString$0(0) + ")";
      else
        return "not " + t1.toString$0(0);
    },
    get$span() {
      return this.span;
    }
  };
  A.SupportsOperation.prototype = {
    toString$0(_) {
      var _this = this;
      return _this._parenthesize$1(_this.left) + " " + _this.operator + " " + _this._parenthesize$1(_this.right);
    },
    _parenthesize$1(condition) {
      var t1;
      if (!(condition instanceof A.SupportsNegation))
        t1 = condition instanceof A.SupportsOperation && condition.operator === this.operator;
      else
        t1 = true;
      return t1 ? "(" + condition.toString$0(0) + ")" : condition.toString$0(0);
    },
    get$span() {
      return this.span;
    }
  };
  A.Selector.prototype = {
    assertNotBogus$1$name($name) {
      if (!this.accept$1(B._IsBogusVisitor_true))
        return;
      A.warn("$" + $name + ": " + (this.toString$0(0) + " is not valid CSS.\nThis will be an error in Dart Sass 2.0.0.\n\nMore info: https://sass-lang.com/d/bogus-combinators"), true);
    },
    toString$0(_) {
      var visitor = A._SerializeVisitor$(true, true, false);
      this.accept$1(visitor);
      return visitor._serialize$_buffer.toString$0(0);
    }
  };
  A._IsInvisibleVisitor.prototype = {
    visitSelectorList$1(list) {
      return B.JSArray_methods.every$1(list.components, this.get$visitComplexSelector());
    },
    visitComplexSelector$1(complex) {
      var t1;
      if (!this.super$AnySelectorVisitor$visitComplexSelector(complex)) {
        t1 = complex.accept$1(B._IsBogusVisitor_false);
        t1 = t1;
      } else
        t1 = true;
      return t1;
    },
    visitPlaceholderSelector$1(placeholder) {
      return true;
    },
    visitPseudoSelector$1(pseudo) {
      var t1,
        selector = pseudo.selector;
      if (selector == null)
        return false;
      if (pseudo.name === "not") {
        t1 = selector.accept$1(B._IsBogusVisitor_true);
        t1 = t1;
      } else
        t1 = this.visitSelectorList$1(selector);
      return t1;
    }
  };
  A._IsBogusVisitor.prototype = {
    visitComplexSelector$1(complex) {
      var t2, t3,
        t1 = complex.components;
      if (t1.length === 0)
        return complex.leadingCombinators.length !== 0;
      else {
        t2 = complex.leadingCombinators;
        t3 = this.includeLeadingCombinator ? 0 : 1;
        return t2.length > t3 || B.JSArray_methods.get$last(t1).combinators.length !== 0 || B.JSArray_methods.any$1(t1, new A._IsBogusVisitor_visitComplexSelector_closure(this));
      }
    },
    visitPseudoSelector$1(pseudo) {
      var selector = pseudo.selector;
      if (selector == null)
        return false;
      return pseudo.name === "has" ? selector.accept$1(B._IsBogusVisitor_false) : selector.accept$1(B._IsBogusVisitor_true);
    }
  };
  A._IsBogusVisitor_visitComplexSelector_closure.prototype = {
    call$1(component) {
      return component.combinators.length > 1 || this.$this.visitCompoundSelector$1(component.selector);
    },
    $signature: 11
  };
  A._IsUselessVisitor.prototype = {
    visitComplexSelector$1(complex) {
      return complex.leadingCombinators.length > 1 || B.JSArray_methods.any$1(complex.components, new A._IsUselessVisitor_visitComplexSelector_closure(this));
    },
    visitPseudoSelector$1(pseudo) {
      return pseudo.accept$1(B._IsBogusVisitor_true);
    }
  };
  A._IsUselessVisitor_visitComplexSelector_closure.prototype = {
    call$1(component) {
      return component.combinators.length > 1 || this.$this.visitCompoundSelector$1(component.selector);
    },
    $signature: 11
  };
  A.__IsBogusVisitor_Object_AnySelectorVisitor.prototype = {};
  A.__IsInvisibleVisitor_Object_AnySelectorVisitor.prototype = {};
  A.__IsUselessVisitor_Object_AnySelectorVisitor.prototype = {};
  A.AttributeSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitAttributeSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.AttributeSelector && other.name.$eq(0, _this.name) && other.op == _this.op && other.value == _this.value && other.modifier == _this.modifier;
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.name;
      return (B.JSString_methods.get$hashCode(t1.name) ^ J.get$hashCode$(t1.namespace) ^ J.get$hashCode$(_this.op) ^ J.get$hashCode$(_this.value) ^ J.get$hashCode$(_this.modifier)) >>> 0;
    }
  };
  A.AttributeOperator.prototype = {
    _enumToString$0() {
      return "AttributeOperator." + this._name;
    },
    toString$0(_) {
      return this._attribute$_text;
    }
  };
  A.ClassSelector.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ClassSelector && other.name === this.name;
    },
    accept$1$1(visitor) {
      return visitor.visitClassSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new A.ClassSelector(this.name + suffix);
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.name);
    }
  };
  A.Combinator.prototype = {
    _enumToString$0() {
      return "Combinator." + this._name;
    },
    toString$0(_) {
      return this._combinator$_text;
    }
  };
  A.ComplexSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitComplexSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    isSuperselector$1(other) {
      return this.leadingCombinators.length === 0 && other.leadingCombinators.length === 0 && A.complexIsSuperselector(this.components, other.components);
    },
    withAdditionalCombinators$1(combinators) {
      var t1, t2, t3, _this = this;
      if (combinators.length === 0)
        return _this;
      else {
        t1 = _this.components;
        t2 = _this.leadingCombinators;
        if (t1.length === 0) {
          t1 = A.List_List$of(t2, true, type$.Combinator);
          B.JSArray_methods.addAll$1(t1, combinators);
          return A.ComplexSelector$(t1, B.List_empty2, _this.lineBreak || false);
        } else {
          t3 = A.List_List$of(A.IterableExtension_get_exceptLast(t1), true, type$.ComplexSelectorComponent);
          t3.push(B.JSArray_methods.get$last(t1).withAdditionalCombinators$1(combinators));
          return A.ComplexSelector$(t2, t3, _this.lineBreak || false);
        }
      }
    },
    concatenate$2$forceLineBreak(child, forceLineBreak) {
      var t2, t3, t4, t5, _this = this,
        t1 = child.leadingCombinators;
      if (t1.length === 0) {
        t1 = A.List_List$of(_this.components, true, type$.ComplexSelectorComponent);
        B.JSArray_methods.addAll$1(t1, child.components);
        t2 = _this.lineBreak || child.lineBreak || forceLineBreak;
        return A.ComplexSelector$(_this.leadingCombinators, t1, t2);
      } else {
        t2 = _this.components;
        t3 = _this.leadingCombinators;
        t4 = child.components;
        if (t2.length === 0) {
          t2 = A.List_List$of(t3, true, type$.Combinator);
          B.JSArray_methods.addAll$1(t2, t1);
          return A.ComplexSelector$(t2, t4, _this.lineBreak || child.lineBreak || forceLineBreak);
        } else {
          t5 = A.List_List$of(A.IterableExtension_get_exceptLast(t2), true, type$.ComplexSelectorComponent);
          t5.push(B.JSArray_methods.get$last(t2).withAdditionalCombinators$1(t1));
          B.JSArray_methods.addAll$1(t5, t4);
          return A.ComplexSelector$(t3, t5, _this.lineBreak || child.lineBreak || forceLineBreak);
        }
      }
    },
    concatenate$1(child) {
      return this.concatenate$2$forceLineBreak(child, false);
    },
    get$hashCode(_) {
      return B.C_ListEquality0.hash$1(this.leadingCombinators) ^ B.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ComplexSelector && B.C_ListEquality.equals$2(0, this.leadingCombinators, other.leadingCombinators) && B.C_ListEquality.equals$2(0, this.components, other.components);
    }
  };
  A.ComplexSelectorComponent.prototype = {
    withAdditionalCombinators$1(combinators) {
      var t1, t2;
      if (combinators.length === 0)
        t1 = this;
      else {
        t1 = type$.Combinator;
        t2 = A.List_List$of(this.combinators, true, t1);
        B.JSArray_methods.addAll$1(t2, combinators);
        t1 = new A.ComplexSelectorComponent(this.selector, A.List_List$unmodifiable(t2, t1));
      }
      return t1;
    },
    get$hashCode(_) {
      return B.C_ListEquality0.hash$1(this.selector.components) ^ B.C_ListEquality0.hash$1(this.combinators);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.ComplexSelectorComponent) {
        t1 = B.C_ListEquality.equals$2(0, this.selector.components, other.selector.components);
        t1 = t1 && B.C_ListEquality.equals$2(0, this.combinators, other.combinators);
      } else
        t1 = false;
      return t1;
    },
    toString$0(_) {
      var t1 = this.combinators;
      return A.serializeSelector(this.selector, true) + new A.MappedListIterable(t1, new A.ComplexSelectorComponent_toString_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$1(0, "");
    }
  };
  A.ComplexSelectorComponent_toString_closure.prototype = {
    call$1(combinator) {
      return " " + combinator.toString$0(0);
    },
    $signature: 210
  };
  A.CompoundSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCompoundSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    get$hashCode(_) {
      return B.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.CompoundSelector && B.C_ListEquality.equals$2(0, this.components, other.components);
    }
  };
  A.IDSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitIDSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new A.IDSelector(this.name + suffix);
    },
    unify$1(compound) {
      if (B.JSArray_methods.any$1(compound, new A.IDSelector_unify_closure(this)))
        return null;
      return this.super$SimpleSelector$unify(compound);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.IDSelector && other.name === this.name;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.name);
    }
  };
  A.IDSelector_unify_closure.prototype = {
    call$1(simple) {
      var t1;
      if (simple instanceof A.IDSelector) {
        t1 = simple.name;
        t1 = this.$this.name !== t1;
      } else
        t1 = false;
      return t1;
    },
    $signature: 3
  };
  A.SelectorList.prototype = {
    get$asSassList() {
      var t1 = this.components;
      return A.SassList$(new A.MappedListIterable(t1, new A.SelectorList_asSassList_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Value>")), B.ListSeparator_rXA, false);
    },
    accept$1$1(visitor) {
      return visitor.visitSelectorList$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(other) {
      var t3, t4, t5, t6, _i, complex1, _i0, t7,
        t1 = type$.JSArray_ComplexSelector,
        t2 = A._setArrayType([], t1);
      for (t3 = this.components, t4 = t3.length, t5 = other.components, t6 = t5.length, _i = 0; _i < t4; ++_i) {
        complex1 = t3[_i];
        for (_i0 = 0; _i0 < t6; ++_i0) {
          t7 = A.unifyComplex(A._setArrayType([complex1, t5[_i0]], t1));
          if (t7 != null)
            B.JSArray_methods.addAll$1(t2, t7);
        }
      }
      return t2.length === 0 ? null : A.SelectorList$(t2);
    },
    resolveParentSelectors$2$implicitParent($parent, implicitParent) {
      var t1 = this.components;
      return A.SelectorList$(A.flattenVertically(new A.MappedListIterable(t1, new A.SelectorList_resolveParentSelectors_closure(this, implicitParent, $parent), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Iterable<ComplexSelector>>")), type$.ComplexSelector));
    },
    resolveParentSelectors$1($parent) {
      return this.resolveParentSelectors$2$implicitParent($parent, true);
    },
    _complexContainsParentSelector$1(complex) {
      return B.JSArray_methods.any$1(complex.components, new A.SelectorList__complexContainsParentSelector_closure());
    },
    _resolveParentSelectorsCompound$2(component, $parent) {
      var resolvedSimples, parentSelector, t1,
        simples = component.selector.components,
        containsSelectorPseudo = B.JSArray_methods.any$1(simples, new A.SelectorList__resolveParentSelectorsCompound_closure());
      if (!containsSelectorPseudo && !(B.JSArray_methods.get$first(simples) instanceof A.ParentSelector))
        return null;
      resolvedSimples = containsSelectorPseudo ? new A.MappedListIterable(simples, new A.SelectorList__resolveParentSelectorsCompound_closure0($parent), A._arrayInstanceType(simples)._eval$1("MappedListIterable<1,SimpleSelector>")) : simples;
      parentSelector = B.JSArray_methods.get$first(simples);
      if (!(parentSelector instanceof A.ParentSelector))
        return A._setArrayType([A.ComplexSelector$(B.List_empty0, A._setArrayType([new A.ComplexSelectorComponent(A.CompoundSelector$(resolvedSimples), A.List_List$unmodifiable(component.combinators, type$.Combinator))], type$.JSArray_ComplexSelectorComponent), false)], type$.JSArray_ComplexSelector);
      else if (simples.length === 1 && parentSelector.suffix == null)
        return $parent.withAdditionalCombinators$1(component.combinators).components;
      t1 = $parent.components;
      return new A.MappedListIterable(t1, new A.SelectorList__resolveParentSelectorsCompound_closure1(parentSelector, resolvedSimples, component), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,ComplexSelector>"));
    },
    isSuperselector$1(other) {
      return A.listIsSuperselector(this.components, other.components);
    },
    withAdditionalCombinators$1(combinators) {
      var t1;
      if (combinators.length === 0)
        t1 = this;
      else {
        t1 = this.components;
        t1 = A.SelectorList$(new A.MappedListIterable(t1, new A.SelectorList_withAdditionalCombinators_closure(combinators), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,ComplexSelector>")));
      }
      return t1;
    },
    get$hashCode(_) {
      return B.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SelectorList && B.C_ListEquality.equals$2(0, this.components, other.components);
    }
  };
  A.SelectorList_asSassList_closure.prototype = {
    call$1(complex) {
      var t3, t4, _i, component, t5, visitor, t6, t7, _i0,
        t1 = type$.JSArray_Value,
        t2 = A._setArrayType([], t1);
      for (t3 = complex.leadingCombinators, t4 = t3.length, _i = 0; _i < t4; ++_i)
        t2.push(new A.SassString(t3[_i]._combinator$_text, false));
      for (t3 = complex.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
        component = t3[_i];
        t5 = component.selector;
        visitor = A._SerializeVisitor$(true, true, false);
        t5.accept$1(visitor);
        t5 = A._setArrayType([new A.SassString(visitor._serialize$_buffer.toString$0(0), false)], t1);
        for (t6 = component.combinators, t7 = t6.length, _i0 = 0; _i0 < t7; ++_i0)
          t5.push(new A.SassString(t6[_i0]._combinator$_text, false));
        B.JSArray_methods.addAll$1(t2, t5);
      }
      return A.SassList$(t2, B.ListSeparator_EVt, false);
    },
    $signature: 74
  };
  A.SelectorList_resolveParentSelectors_closure.prototype = {
    call$1(complex) {
      var t2, newComplexes, t3, t4, t5, t6, t7, t8, t9, _i, component, resolved, t10, result, t11, i, t12, _i0, newComplex, t13, _this = this,
        _s56_ = string$.leadin,
        t1 = _this.$this;
      if (!t1._complexContainsParentSelector$1(complex)) {
        if (!_this.implicitParent)
          return A._setArrayType([complex], type$.JSArray_ComplexSelector);
        t1 = _this.parent.components;
        return new A.MappedListIterable(t1, new A.SelectorList_resolveParentSelectors__closure(complex), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,ComplexSelector>"));
      }
      t2 = type$.JSArray_ComplexSelector;
      newComplexes = A._setArrayType([], t2);
      for (t3 = complex.components, t4 = t3.length, t5 = _this.parent, t6 = type$.Combinator, t7 = type$.ComplexSelectorComponent, t8 = complex.leadingCombinators, t9 = type$.JSArray_ComplexSelectorComponent, _i = 0; _i < t4; ++_i) {
        component = t3[_i];
        resolved = t1._resolveParentSelectorsCompound$2(component, t5);
        if (resolved == null)
          if (newComplexes.length === 0) {
            t10 = A._setArrayType([component], t9);
            result = A.List_List$from(t8, false, t6);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t11 = result;
            result = A.List_List$from(t10, false, t7);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t10 = result;
            if (t11.length === 0 && t10.length === 0)
              A.throwExpression(A.ArgumentError$(_s56_, null));
            newComplexes.push(new A.ComplexSelector(t11, t10, false));
          } else
            for (i = 0; i < newComplexes.length; ++i) {
              t10 = newComplexes[i];
              t11 = t10.leadingCombinators;
              t12 = A.List_List$of(t10.components, true, t7);
              t12.push(component);
              t10 = t10.lineBreak || false;
              result = A.List_List$from(t11, false, t6);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t11 = result;
              result = A.List_List$from(t12, false, t7);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t12 = result;
              if (t11.length === 0 && t12.length === 0)
                A.throwExpression(A.ArgumentError$(_s56_, null));
              newComplexes[i] = new A.ComplexSelector(t11, t12, t10);
            }
        else if (newComplexes.length === 0)
          B.JSArray_methods.addAll$1(newComplexes, resolved);
        else {
          t10 = A._setArrayType([], t2);
          for (t11 = newComplexes.length, t12 = J.getInterceptor$ax(resolved), _i0 = 0; _i0 < newComplexes.length; newComplexes.length === t11 || (0, A.throwConcurrentModificationError)(newComplexes), ++_i0) {
            newComplex = newComplexes[_i0];
            for (t13 = t12.get$iterator(resolved); t13.moveNext$0();)
              t10.push(newComplex.concatenate$1(t13.get$current()));
          }
          newComplexes = t10;
        }
      }
      return newComplexes;
    },
    $signature: 75
  };
  A.SelectorList_resolveParentSelectors__closure.prototype = {
    call$1(parentComplex) {
      return parentComplex.concatenate$1(this.complex);
    },
    $signature: 22
  };
  A.SelectorList__complexContainsParentSelector_closure.prototype = {
    call$1(component) {
      return B.JSArray_methods.any$1(component.selector.components, new A.SelectorList__complexContainsParentSelector__closure());
    },
    $signature: 11
  };
  A.SelectorList__complexContainsParentSelector__closure.prototype = {
    call$1(simple) {
      var selector;
      if (simple instanceof A.ParentSelector)
        return true;
      if (!(simple instanceof A.PseudoSelector))
        return false;
      selector = simple.selector;
      return selector != null && B.JSArray_methods.any$1(selector.components, selector.get$_complexContainsParentSelector());
    },
    $signature: 3
  };
  A.SelectorList__resolveParentSelectorsCompound_closure.prototype = {
    call$1(simple) {
      var selector;
      if (!(simple instanceof A.PseudoSelector))
        return false;
      selector = simple.selector;
      return selector != null && B.JSArray_methods.any$1(selector.components, selector.get$_complexContainsParentSelector());
    },
    $signature: 3
  };
  A.SelectorList__resolveParentSelectorsCompound_closure0.prototype = {
    call$1(simple) {
      var selector, t1, t2, t3;
      if (!(simple instanceof A.PseudoSelector))
        return simple;
      selector = simple.selector;
      if (selector == null)
        return simple;
      if (!B.JSArray_methods.any$1(selector.components, selector.get$_complexContainsParentSelector()))
        return simple;
      t1 = selector.resolveParentSelectors$2$implicitParent(this.parent, false);
      t2 = simple.name;
      t3 = simple.isClass;
      return A.PseudoSelector$(t2, simple.argument, !t3, t1);
    },
    $signature: 77
  };
  A.SelectorList__resolveParentSelectorsCompound_closure1.prototype = {
    call$1(complex) {
      var suffix, lastSimples, t2, t3, t4, last,
        t1 = complex.components,
        lastComponent = B.JSArray_methods.get$last(t1);
      if (lastComponent.combinators.length !== 0)
        throw A.wrapException(A.SassScriptException$('Parent "' + complex.toString$0(0) + '" is incompatible with this selector.'));
      suffix = this.parentSelector.suffix;
      lastSimples = lastComponent.selector.components;
      t2 = type$.SimpleSelector;
      t3 = this.resolvedSimples;
      t4 = J.getInterceptor$ax(t3);
      if (suffix == null) {
        t2 = A.List_List$of(lastSimples, true, t2);
        B.JSArray_methods.addAll$1(t2, t4.skip$1(t3, 1));
      } else {
        t2 = A.List_List$of(A.IterableExtension_get_exceptLast(lastSimples), true, t2);
        t2.push(B.JSArray_methods.get$last(lastSimples).addSuffix$1(suffix));
        B.JSArray_methods.addAll$1(t2, t4.skip$1(t3, 1));
      }
      last = A.CompoundSelector$(t2);
      t2 = complex.leadingCombinators;
      t1 = A.List_List$of(A.IterableExtension_get_exceptLast(t1), true, type$.ComplexSelectorComponent);
      t1.push(new A.ComplexSelectorComponent(last, A.List_List$unmodifiable(this.component.combinators, type$.Combinator)));
      return A.ComplexSelector$(t2, t1, complex.lineBreak);
    },
    $signature: 22
  };
  A.SelectorList_withAdditionalCombinators_closure.prototype = {
    call$1(complex) {
      return complex.withAdditionalCombinators$1(this.combinators);
    },
    $signature: 22
  };
  A.ParentSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitParentSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(compound) {
      return A.throwExpression(A.UnsupportedError$("& doesn't support unification."));
    }
  };
  A.PlaceholderSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitPlaceholderSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new A.PlaceholderSelector(this.name + suffix);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.PlaceholderSelector && other.name === this.name;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.name);
    }
  };
  A.PseudoSelector.prototype = {
    get$isHostContext() {
      return this.isClass && this.name === "host-context" && this.selector != null;
    },
    addSuffix$1(suffix) {
      var _this = this;
      if (_this.argument != null || _this.selector != null)
        _this.super$SimpleSelector$addSuffix(suffix);
      return A.PseudoSelector$(_this.name + suffix, null, !_this.isClass, null);
    },
    unify$1(compound) {
      var other, result, t2, addedThis, _i, simple, _this = this,
        t1 = _this.name;
      if (t1 === "host" || t1 === "host-context") {
        if (!B.JSArray_methods.every$1(compound, new A.PseudoSelector_unify_closure()))
          return null;
      } else if (compound.length === 1) {
        other = B.JSArray_methods.get$first(compound);
        if (!(other instanceof A.UniversalSelector))
          if (other instanceof A.PseudoSelector)
            t1 = other.isClass && other.name === "host" || other.get$isHostContext();
          else
            t1 = false;
        else
          t1 = true;
        if (t1)
          return other.unify$1(A._setArrayType([_this], type$.JSArray_SimpleSelector));
      }
      if (B.JSArray_methods.contains$1(compound, _this))
        return compound;
      result = A._setArrayType([], type$.JSArray_SimpleSelector);
      for (t1 = compound.length, t2 = !_this.isClass, addedThis = false, _i = 0; _i < compound.length; compound.length === t1 || (0, A.throwConcurrentModificationError)(compound), ++_i) {
        simple = compound[_i];
        if (simple instanceof A.PseudoSelector && !simple.isClass) {
          if (t2)
            return null;
          result.push(_this);
          addedThis = true;
        }
        result.push(simple);
      }
      if (!addedThis)
        result.push(_this);
      return result;
    },
    isSuperselector$1(other) {
      var selector, t1, _this = this;
      if (_this.super$SimpleSelector$isSuperselector(other))
        return true;
      selector = _this.selector;
      if (selector == null)
        return _this.$eq(0, other);
      if (other instanceof A.PseudoSelector && !_this.isClass && !other.isClass && _this.normalizedName === "slotted" && other.name === _this.name) {
        t1 = A.NullableExtension_andThen(other.selector, selector.get$isSuperselector());
        return t1 == null ? false : t1;
      }
      t1 = type$.JSArray_SimpleSelector;
      return A.compoundIsSuperselector(A.CompoundSelector$(A._setArrayType([_this], t1)), A.CompoundSelector$(A._setArrayType([other], t1)), null);
    },
    accept$1$1(visitor) {
      return visitor.visitPseudoSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.PseudoSelector && other.name === _this.name && other.isClass === _this.isClass && other.argument == _this.argument && J.$eq$(other.selector, _this.selector);
    },
    get$hashCode(_) {
      var _this = this,
        t1 = B.JSString_methods.get$hashCode(_this.name),
        t2 = !_this.isClass ? 519018 : 218159;
      return (t1 ^ t2 ^ J.get$hashCode$(_this.argument) ^ J.get$hashCode$(_this.selector)) >>> 0;
    }
  };
  A.PseudoSelector_unify_closure.prototype = {
    call$1(simple) {
      var t1;
      if (simple instanceof A.PseudoSelector)
        t1 = simple.isClass && simple.name === "host" || simple.selector != null;
      else
        t1 = false;
      return t1;
    },
    $signature: 3
  };
  A.QualifiedName.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.QualifiedName && other.name === this.name && other.namespace == this.namespace;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.name) ^ J.get$hashCode$(this.namespace);
    },
    toString$0(_) {
      var t1 = this.namespace,
        t2 = this.name;
      return t1 == null ? t2 : t1 + "|" + t2;
    }
  };
  A.SimpleSelector.prototype = {
    addSuffix$1(suffix) {
      return A.throwExpression(A.SassScriptException$('Invalid parent selector "' + this.toString$0(0) + '"'));
    },
    unify$1(compound) {
      var other, t1, result, addedThis, _i, simple, _this = this;
      if (compound.length === 1) {
        other = B.JSArray_methods.get$first(compound);
        if (!(other instanceof A.UniversalSelector))
          if (other instanceof A.PseudoSelector)
            t1 = other.isClass && other.name === "host" || other.get$isHostContext();
          else
            t1 = false;
        else
          t1 = true;
        if (t1)
          return other.unify$1(A._setArrayType([_this], type$.JSArray_SimpleSelector));
      }
      if (B.JSArray_methods.contains$1(compound, _this))
        return compound;
      result = A._setArrayType([], type$.JSArray_SimpleSelector);
      for (t1 = compound.length, addedThis = false, _i = 0; _i < compound.length; compound.length === t1 || (0, A.throwConcurrentModificationError)(compound), ++_i) {
        simple = compound[_i];
        if (!addedThis && simple instanceof A.PseudoSelector) {
          result.push(_this);
          addedThis = true;
        }
        result.push(simple);
      }
      if (!addedThis)
        result.push(_this);
      return result;
    },
    isSuperselector$1(other) {
      var list;
      if (this.$eq(0, other))
        return true;
      if (other instanceof A.PseudoSelector && other.isClass) {
        list = other.selector;
        if (list != null && $._subselectorPseudos.contains$1(0, other.normalizedName))
          return B.JSArray_methods.every$1(list.components, new A.SimpleSelector_isSuperselector_closure(this));
      }
      return false;
    }
  };
  A.SimpleSelector_isSuperselector_closure.prototype = {
    call$1(complex) {
      var t1 = complex.components;
      return t1.length !== 0 && B.JSArray_methods.any$1(B.JSArray_methods.get$last(t1).selector.components, new A.SimpleSelector_isSuperselector__closure(this.$this));
    },
    $signature: 7
  };
  A.SimpleSelector_isSuperselector__closure.prototype = {
    call$1(simple) {
      return this.$this.isSuperselector$1(simple);
    },
    $signature: 3
  };
  A.TypeSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitTypeSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      var t1 = this.name;
      return new A.TypeSelector(new A.QualifiedName(t1.name + suffix, t1.namespace));
    },
    unify$1(compound) {
      var unified, t1;
      if (B.JSArray_methods.get$first(compound) instanceof A.UniversalSelector || B.JSArray_methods.get$first(compound) instanceof A.TypeSelector) {
        unified = A.unifyUniversalAndElement(this, B.JSArray_methods.get$first(compound));
        if (unified == null)
          return null;
        t1 = A._setArrayType([unified], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t1, A.SubListIterable$(compound, 1, null, A._arrayInstanceType(compound)._precomputed1));
        return t1;
      } else {
        t1 = A._setArrayType([this], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t1, compound);
        return t1;
      }
    },
    isSuperselector$1(other) {
      var t1, t2;
      if (!this.super$SimpleSelector$isSuperselector(other))
        if (other instanceof A.TypeSelector) {
          t1 = this.name;
          t2 = other.name;
          if (t1.name === t2.name) {
            t1 = t1.namespace;
            t1 = t1 === "*" || t1 == t2.namespace;
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.TypeSelector && other.name.$eq(0, this.name);
    },
    get$hashCode(_) {
      var t1 = this.name;
      return B.JSString_methods.get$hashCode(t1.name) ^ J.get$hashCode$(t1.namespace);
    }
  };
  A.UniversalSelector.prototype = {
    accept$1$1(visitor) {
      return visitor.visitUniversalSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(compound) {
      var unified, t1, _this = this,
        first = B.JSArray_methods.get$first(compound);
      if (first instanceof A.UniversalSelector || first instanceof A.TypeSelector) {
        unified = A.unifyUniversalAndElement(_this, first);
        if (unified == null)
          return null;
        t1 = A._setArrayType([unified], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t1, A.SubListIterable$(compound, 1, null, A._arrayInstanceType(compound)._precomputed1));
        return t1;
      } else {
        if (compound.length === 1)
          if (first instanceof A.PseudoSelector)
            t1 = first.isClass && first.name === "host" || first.get$isHostContext();
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          return null;
      }
      t1 = _this.namespace;
      if (t1 != null && t1 !== "*") {
        t1 = A._setArrayType([_this], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t1, compound);
        return t1;
      }
      if (compound.length !== 0)
        return compound;
      return A._setArrayType([_this], type$.JSArray_SimpleSelector);
    },
    isSuperselector$1(other) {
      var t1 = this.namespace;
      if (t1 === "*")
        return true;
      if (other instanceof A.TypeSelector)
        return t1 == other.name.namespace;
      if (other instanceof A.UniversalSelector)
        return t1 == other.namespace;
      return t1 == null || this.super$SimpleSelector$isSuperselector(other);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.UniversalSelector && other.namespace == this.namespace;
    },
    get$hashCode(_) {
      return J.get$hashCode$(this.namespace);
    }
  };
  A.BuiltInCallable.prototype = {
    withName$1($name) {
      return new A.BuiltInCallable($name, this._overloads);
    }
  };
  A.SassException.prototype = {
    get$span() {
      return A.SourceSpanException.prototype.get$span.call(this);
    },
    toString$1$color(_, color) {
      var t2, t3, t4, _i, frame,
        buffer = new A.StringBuffer(""),
        t1 = "" + ("Error: " + this._span_exception$_message + "\n");
      buffer._contents = t1;
      buffer._contents = t1 + A.SourceSpanException.prototype.get$span.call(this).highlight$1$color(color);
      t1 = A.SourceSpanException.prototype.get$span.call(this);
      t2 = t1.file;
      t3 = t2.url;
      if (t3 == null)
        t3 = $.$get$_noSourceUrl();
      t1 = t1._file$_start;
      t4 = A.FileLocation$_(t2, t1);
      t4 = t4.file.getLine$1(t4.offset);
      t1 = A.FileLocation$_(t2, t1);
      t1 = A.List_List$unmodifiable(A._setArrayType([new A.Frame(t3, t4 + 1, t1.file.getColumn$1(t1.offset) + 1, "root stylesheet")], type$.JSArray_Frame), type$.Frame);
      t1 = new A.Trace(t1).toString$0(0).split("\n");
      t2 = t1.length;
      _i = 0;
      for (; _i < t2; ++_i) {
        frame = t1[_i];
        if (J.get$length$asx(frame) === 0)
          continue;
        t3 = buffer._contents += "\n";
        buffer._contents = t3 + ("  " + A.S(frame));
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0($receiver) {
      return this.toString$1$color($receiver, null);
    }
  };
  A.SassFormatException.prototype = {
    get$source() {
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(A.SourceSpanException.prototype.get$span.call(this).file._decodedChars, 0, null), 0, null);
    },
    $isFormatException: 1,
    $isSourceSpanFormatException: 1
  };
  A.SassScriptException.prototype = {
    toString$0(_) {
      return this.message + "\n\nBUG: This should include a source span!";
    }
  };
  A.unifyComplex_closure.prototype = {
    call$1(complex) {
      return complex.lineBreak;
    },
    $signature: 7
  };
  A._weaveParents_closure.prototype = {
    call$2(group1, group2) {
      var unified, t1;
      if (B.C_ListEquality.equals$2(0, group1, group2))
        return group1;
      if (A._complexIsParentSuperselector(group1, group2))
        return group2;
      if (A._complexIsParentSuperselector(group2, group1))
        return group1;
      if (!A._mustUnify(group1, group2))
        return null;
      unified = A.unifyComplex(A._setArrayType([A.ComplexSelector$(B.List_empty0, group1, false), A.ComplexSelector$(B.List_empty0, group2, false)], type$.JSArray_ComplexSelector));
      if (unified == null)
        return null;
      t1 = J.getInterceptor$asx(unified);
      if (t1.get$length(unified) > 1)
        return null;
      return t1.get$first(unified).components;
    },
    $signature: 78
  };
  A._weaveParents_closure0.prototype = {
    call$1(sequence) {
      return A._complexIsParentSuperselector(sequence.get$first(sequence), this.group);
    },
    $signature: 79
  };
  A._weaveParents_closure1.prototype = {
    call$1(sequence) {
      return sequence.get$length(sequence) === 0;
    },
    $signature: 80
  };
  A._weaveParents_closure2.prototype = {
    call$1(choice) {
      return J.get$isNotEmpty$asx(choice);
    },
    $signature: 81
  };
  A._mustUnify_closure.prototype = {
    call$1(component) {
      return B.JSArray_methods.any$1(component.selector.components, new A._mustUnify__closure(this.uniqueSelectors));
    },
    $signature: 11
  };
  A._mustUnify__closure.prototype = {
    call$1(simple) {
      var t1;
      if (!(simple instanceof A.IDSelector))
        t1 = simple instanceof A.PseudoSelector && !simple.isClass;
      else
        t1 = true;
      return t1 && this.uniqueSelectors.contains$1(0, simple);
    },
    $signature: 3
  };
  A.paths_closure.prototype = {
    call$2(paths, choice) {
      var t1 = this.T;
      t1 = J.expand$1$1$ax(choice, new A.paths__closure(paths, t1), t1._eval$1("List<0>"));
      return A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
    },
    $signature() {
      return this.T._eval$1("List<List<0>>(List<List<0>>,List<0>)");
    }
  };
  A.paths__closure.prototype = {
    call$1(option) {
      var t1 = this.T;
      return J.map$1$1$ax(this.paths, new A.paths___closure(option, t1), t1._eval$1("List<0>"));
    },
    $signature() {
      return this.T._eval$1("Iterable<List<0>>(0)");
    }
  };
  A.paths___closure.prototype = {
    call$1(path) {
      var t1 = A.List_List$of(path, true, this.T);
      t1.push(this.option);
      return t1;
    },
    $signature() {
      return this.T._eval$1("List<0>(List<0>)");
    }
  };
  A.listIsSuperselector_closure.prototype = {
    call$1(complex1) {
      return B.JSArray_methods.any$1(this.list1, new A.listIsSuperselector__closure(complex1));
    },
    $signature: 7
  };
  A.listIsSuperselector__closure.prototype = {
    call$1(complex2) {
      return complex2.isSuperselector$1(this.complex1);
    },
    $signature: 7
  };
  A.complexIsSuperselector_closure.prototype = {
    call$1($parent) {
      return $parent.combinators.length > 1;
    },
    $signature: 11
  };
  A.complexIsSuperselector_closure0.prototype = {
    call$1(component) {
      return A._isSupercombinator(this.combinator1, A.IterableExtension_get_firstOrNull(component.combinators));
    },
    $signature: 11
  };
  A._selectorPseudoIsSuperselector_closure.prototype = {
    call$1(selector2) {
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 17
  };
  A._selectorPseudoIsSuperselector_closure0.prototype = {
    call$1(complex1) {
      var t1, t2, t3;
      if (complex1.leadingCombinators.length === 0) {
        t1 = complex1.components;
        t2 = A._setArrayType([], type$.JSArray_ComplexSelectorComponent);
        t3 = this.parents;
        if (t3 != null)
          B.JSArray_methods.addAll$1(t2, t3);
        t2.push(new A.ComplexSelectorComponent(this.compound2, A.List_List$unmodifiable(B.List_empty0, type$.Combinator)));
        t1 = A.complexIsSuperselector(t1, t2);
      } else
        t1 = false;
      return t1;
    },
    $signature: 7
  };
  A._selectorPseudoIsSuperselector_closure1.prototype = {
    call$1(selector2) {
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 17
  };
  A._selectorPseudoIsSuperselector_closure2.prototype = {
    call$1(selector2) {
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 17
  };
  A._selectorPseudoIsSuperselector_closure3.prototype = {
    call$1(complex) {
      if (complex.accept$1(B._IsBogusVisitor_true))
        return false;
      return B.JSArray_methods.any$1(this.compound2.components, new A._selectorPseudoIsSuperselector__closure(complex, this.pseudo1));
    },
    $signature: 7
  };
  A._selectorPseudoIsSuperselector__closure.prototype = {
    call$1(simple2) {
      var selector2, _this = this;
      if (simple2 instanceof A.TypeSelector)
        return B.JSArray_methods.any$1(B.JSArray_methods.get$last(_this.complex.components).selector.components, new A._selectorPseudoIsSuperselector___closure(simple2));
      else if (simple2 instanceof A.IDSelector)
        return B.JSArray_methods.any$1(B.JSArray_methods.get$last(_this.complex.components).selector.components, new A._selectorPseudoIsSuperselector___closure0(simple2));
      else if (simple2 instanceof A.PseudoSelector && simple2.name === _this.pseudo1.name) {
        selector2 = simple2.selector;
        if (selector2 == null)
          return false;
        return A.listIsSuperselector(selector2.components, A._setArrayType([_this.complex], type$.JSArray_ComplexSelector));
      } else
        return false;
    },
    $signature: 3
  };
  A._selectorPseudoIsSuperselector___closure.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof A.TypeSelector) {
        t1 = this.simple2.name.$eq(0, simple1.name);
        t1 = !t1;
      } else
        t1 = false;
      return t1;
    },
    $signature: 3
  };
  A._selectorPseudoIsSuperselector___closure0.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof A.IDSelector) {
        t1 = simple1.name;
        t1 = this.simple2.name !== t1;
      } else
        t1 = false;
      return t1;
    },
    $signature: 3
  };
  A._selectorPseudoIsSuperselector_closure4.prototype = {
    call$1(selector2) {
      var t1 = B.C_ListEquality.equals$2(0, this.selector1.components, selector2.components);
      return t1;
    },
    $signature: 17
  };
  A._selectorPseudoIsSuperselector_closure5.prototype = {
    call$1(pseudo2) {
      var t1, selector2;
      if (!(pseudo2 instanceof A.PseudoSelector))
        return false;
      t1 = this.pseudo1;
      if (pseudo2.name !== t1.name)
        return false;
      if (pseudo2.argument != t1.argument)
        return false;
      selector2 = pseudo2.selector;
      if (selector2 == null)
        return false;
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 3
  };
  A._selectorPseudoArgs_closure.prototype = {
    call$1(pseudo) {
      return pseudo.isClass === this.isClass && pseudo.name === this.name;
    },
    $signature: 82
  };
  A._selectorPseudoArgs_closure0.prototype = {
    call$1(pseudo) {
      return pseudo.selector;
    },
    $signature: 83
  };
  A.globalFunctions_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1.$index($arguments, 0).get$isTruthy() ? t1.$index($arguments, 1) : t1.$index($arguments, 2);
    },
    $signature: 1
  };
  A.global_closure3.prototype = {
    call$1($arguments) {
      return A._rgb("rgb", $arguments);
    },
    $signature: 1
  };
  A.global_closure4.prototype = {
    call$1($arguments) {
      return A._rgb("rgb", $arguments);
    },
    $signature: 1
  };
  A.global_closure5.prototype = {
    call$1($arguments) {
      return A._rgbTwoArg("rgb", $arguments);
    },
    $signature: 1
  };
  A.global_closure6.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("rgb", A._setArrayType(["$red", "$green", "$blue"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._rgb("rgb", type$.List_Value._as(parsed));
    },
    $signature: 1
  };
  A.global_closure7.prototype = {
    call$1($arguments) {
      return A._rgb("rgba", $arguments);
    },
    $signature: 1
  };
  A.global_closure8.prototype = {
    call$1($arguments) {
      return A._rgb("rgba", $arguments);
    },
    $signature: 1
  };
  A.global_closure9.prototype = {
    call$1($arguments) {
      return A._rgbTwoArg("rgba", $arguments);
    },
    $signature: 1
  };
  A.global_closure10.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("rgba", A._setArrayType(["$red", "$green", "$blue"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._rgb("rgba", type$.List_Value._as(parsed));
    },
    $signature: 1
  };
  A.global_closure11.prototype = {
    call$1($arguments) {
      var color, t2,
        t1 = J.getInterceptor$asx($arguments),
        weight = t1.$index($arguments, 1).assertNumber$1("weight");
      if (t1.$index($arguments, 0) instanceof A.SassNumber) {
        if (weight._number$_value !== 100 || !weight.hasUnit$1("%"))
          throw A.wrapException("Only one argument may be passed to the plain-CSS invert() function.");
        return A._functionString("invert", t1.take$1($arguments, 1));
      }
      color = t1.$index($arguments, 0).assertColor$1("color");
      t1 = color.get$red();
      t2 = color.get$green();
      return A._mixColors(color.changeRgb$3$blue$green$red(255 - color.get$blue(), 255 - t2, 255 - t1), color, weight);
    },
    $signature: 1
  };
  A.global_closure12.prototype = {
    call$1($arguments) {
      return A._hsl("hsl", $arguments);
    },
    $signature: 1
  };
  A.global_closure13.prototype = {
    call$1($arguments) {
      return A._hsl("hsl", $arguments);
    },
    $signature: 1
  };
  A.global_closure14.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0).get$isVar() || t1.$index($arguments, 1).get$isVar())
        return A._functionString("hsl", $arguments);
      else
        throw A.wrapException(A.SassScriptException$("Missing argument $lightness."));
    },
    $signature: 2
  };
  A.global_closure15.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("hsl", A._setArrayType(["$hue", "$saturation", "$lightness"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._hsl("hsl", type$.List_Value._as(parsed));
    },
    $signature: 1
  };
  A.global_closure16.prototype = {
    call$1($arguments) {
      return A._hsl("hsla", $arguments);
    },
    $signature: 1
  };
  A.global_closure17.prototype = {
    call$1($arguments) {
      return A._hsl("hsla", $arguments);
    },
    $signature: 1
  };
  A.global_closure18.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0).get$isVar() || t1.$index($arguments, 1).get$isVar())
        return A._functionString("hsla", $arguments);
      else
        throw A.wrapException(A.SassScriptException$("Missing argument $lightness."));
    },
    $signature: 2
  };
  A.global_closure19.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("hsla", A._setArrayType(["$hue", "$saturation", "$lightness"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._hsl("hsla", type$.List_Value._as(parsed));
    },
    $signature: 1
  };
  A.global_closure20.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof A.SassNumber)
        return A._functionString("grayscale", $arguments);
      return t1.$index($arguments, 0).assertColor$1("color").changeHsl$1$saturation(0);
    },
    $signature: 1
  };
  A.global_closure21.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        degrees = t1.$index($arguments, 1).assertNumber$1("degrees");
      A._checkAngle(degrees, "degrees");
      return color.changeHsl$1$hue(color.get$hue() + degrees._number$_value);
    },
    $signature: 8
  };
  A.global_closure22.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$lightness(B.JSNumber_methods.clamp$2(color.get$lightness() + amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 8
  };
  A.global_closure23.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$lightness(B.JSNumber_methods.clamp$2(color.get$lightness() - amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 8
  };
  A.global_closure24.prototype = {
    call$1($arguments) {
      return new A.SassString("saturate(" + A.serializeValue(J.$index$asx($arguments, 0).assertNumber$1("amount"), false, true) + ")", false);
    },
    $signature: 2
  };
  A.global_closure25.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$saturation(B.JSNumber_methods.clamp$2(color.get$saturation() + amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 8
  };
  A.global_closure26.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$saturation(B.JSNumber_methods.clamp$2(color.get$saturation() - amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 8
  };
  A.global_closure27.prototype = {
    call$1($arguments) {
      var color,
        argument = J.$index$asx($arguments, 0);
      if (argument instanceof A.SassString && !argument._hasQuotes && B.JSString_methods.contains$1(argument._string$_text, $.$get$_microsoftFilterStart()))
        return A._functionString("alpha", $arguments);
      color = argument.assertColor$1("color");
      return new A.UnitlessSassNumber(color._alpha, null);
    },
    $signature: 1
  };
  A.global_closure28.prototype = {
    call$1($arguments) {
      var t1,
        argList = J.$index$asx($arguments, 0).get$asList();
      if (argList.length !== 0 && B.JSArray_methods.every$1(argList, new A.global__closure()))
        return A._functionString("alpha", $arguments);
      t1 = argList.length;
      if (t1 === 0)
        throw A.wrapException(A.SassScriptException$("Missing argument $color."));
      else
        throw A.wrapException(A.SassScriptException$("Only 1 argument allowed, but " + t1 + " were passed."));
    },
    $signature: 2
  };
  A.global__closure.prototype = {
    call$1(argument) {
      return argument instanceof A.SassString && !argument._hasQuotes && B.JSString_methods.contains$1(argument._string$_text, $.$get$_microsoftFilterStart());
    },
    $signature: 25
  };
  A.global_closure29.prototype = {
    call$1($arguments) {
      var color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof A.SassNumber)
        return A._functionString("opacity", $arguments);
      color = t1.$index($arguments, 0).assertColor$1("color");
      return new A.UnitlessSassNumber(color._alpha, null);
    },
    $signature: 1
  };
  A._red_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color").get$red();
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 6
  };
  A._green_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color").get$green();
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 6
  };
  A._blue_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color").get$blue();
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 6
  };
  A._mix_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._mixColors(t1.$index($arguments, 0).assertColor$1("color1"), t1.$index($arguments, 1).assertColor$1("color2"), t1.$index($arguments, 2).assertNumber$1("weight"));
    },
    $signature: 8
  };
  A._hue_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color").get$hue();
      return new A.SingleUnitSassNumber("deg", t1, null);
    },
    $signature: 6
  };
  A._saturation_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color").get$saturation();
      return new A.SingleUnitSassNumber("%", t1, null);
    },
    $signature: 6
  };
  A._lightness_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color").get$lightness();
      return new A.SingleUnitSassNumber("%", t1, null);
    },
    $signature: 6
  };
  A._complement_closure.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1("color");
      return color.changeHsl$1$hue(color.get$hue() + 180);
    },
    $signature: 8
  };
  A._adjust_closure.prototype = {
    call$1($arguments) {
      return A._updateComponents($arguments, true, false, false);
    },
    $signature: 8
  };
  A._scale_closure.prototype = {
    call$1($arguments) {
      return A._updateComponents($arguments, false, false, true);
    },
    $signature: 8
  };
  A._change_closure.prototype = {
    call$1($arguments) {
      return A._updateComponents($arguments, false, true, false);
    },
    $signature: 8
  };
  A._ieHexStr_closure.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1("color"),
        t1 = new A._ieHexStr_closure_hexString();
      return new A.SassString("#" + A.S(t1.call$1(A.fuzzyRound(color._alpha * 255))) + A.S(t1.call$1(color.get$red())) + A.S(t1.call$1(color.get$green())) + A.S(t1.call$1(color.get$blue())), false);
    },
    $signature: 2
  };
  A._ieHexStr_closure_hexString.prototype = {
    call$1(component) {
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(component, 16), 2, "0").toUpperCase();
    },
    $signature: 89
  };
  A._updateComponents_getParam.prototype = {
    call$4$assertPercent$checkPercent($name, max, assertPercent, checkPercent) {
      var t2, _this = this,
        t1 = _this.keywords.remove$1(0, $name),
        number = t1 == null ? null : t1.assertNumber$1($name);
      if (number == null)
        return null;
      t1 = _this.scale;
      t2 = !t1;
      if (t2 && checkPercent)
        A._checkPercent(number, $name);
      if (!t2 || assertPercent)
        number.assertUnit$2("%", $name);
      if (t1)
        max = 100;
      if (!t2 || assertPercent)
        t1 = number.valueInRange$3(_this.change ? 0 : -max, max, $name);
      else {
        t1 = _this.change ? 0 : -max;
        t1 = number.valueInRangeWithUnit$4(t1, max, $name, checkPercent ? "%" : "");
      }
      return t1;
    },
    call$2($name, max) {
      return this.call$4$assertPercent$checkPercent($name, max, false, false);
    },
    call$3$checkPercent($name, max, checkPercent) {
      return this.call$4$assertPercent$checkPercent($name, max, false, checkPercent);
    },
    call$3$assertPercent($name, max, assertPercent) {
      return this.call$4$assertPercent$checkPercent($name, max, assertPercent, false);
    },
    $signature: 90
  };
  A._updateComponents_closure.prototype = {
    call$1($name) {
      return "$" + $name;
    },
    $signature: 4
  };
  A._updateComponents_updateValue.prototype = {
    call$3(current, param, max) {
      var t1;
      if (param == null)
        return current;
      if (this.change)
        return param;
      if (this.adjust)
        return B.JSNumber_methods.clamp$2(current + param, 0, max);
      t1 = param > 0 ? max - current : current;
      return current + t1 * (param / 100);
    },
    $signature: 91
  };
  A._updateComponents_updateRgb.prototype = {
    call$2(current, param) {
      return A.fuzzyRound(this.updateValue.call$3(current, param, 255));
    },
    $signature: 92
  };
  A._functionString_closure.prototype = {
    call$1(argument) {
      return A.serializeValue(argument, false, true);
    },
    $signature: 93
  };
  A._rgb_closure.prototype = {
    call$1(alpha) {
      return A._percentageOrUnitless(alpha.assertNumber$1("alpha"), 1, "alpha");
    },
    $signature: 52
  };
  A._hsl_closure.prototype = {
    call$1(alpha) {
      return A._percentageOrUnitless(alpha.assertNumber$1("alpha"), 1, "alpha");
    },
    $signature: 52
  };
  A._removeUnits_closure.prototype = {
    call$1(unit) {
      return " * 1" + unit;
    },
    $signature: 4
  };
  A._removeUnits_closure0.prototype = {
    call$1(unit) {
      return " / 1" + unit;
    },
    $signature: 4
  };
  A._parseChannels_closure.prototype = {
    call$1(value) {
      return value.get$isVar();
    },
    $signature: 25
  };
  A._length_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).get$asList().length;
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 6
  };
  A._nth_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1);
      return list.get$asList()[list.sassIndexToListIndex$2(index, "n")];
    },
    $signature: 1
  };
  A._setNth_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1),
        value = t1.$index($arguments, 2),
        t2 = list.get$asList(),
        newList = A._setArrayType(t2.slice(0), A._arrayInstanceType(t2));
      newList[list.sassIndexToListIndex$2(index, "n")] = value;
      return t1.$index($arguments, 0).withListContents$1(newList);
    },
    $signature: 9
  };
  A._join_closure.prototype = {
    call$1($arguments) {
      var separator, bracketed,
        t1 = J.getInterceptor$asx($arguments),
        list1 = t1.$index($arguments, 0),
        list2 = t1.$index($arguments, 1),
        separatorParam = t1.$index($arguments, 2).assertString$1("separator"),
        bracketedParam = t1.$index($arguments, 3);
      t1 = separatorParam._string$_text;
      if (t1 === "auto")
        if (list1.get$separator() !== B.ListSeparator_undecided_null_undecided)
          separator = list1.get$separator();
        else
          separator = list2.get$separator() !== B.ListSeparator_undecided_null_undecided ? list2.get$separator() : B.ListSeparator_EVt;
      else if (t1 === "space")
        separator = B.ListSeparator_EVt;
      else if (t1 === "comma")
        separator = B.ListSeparator_rXA;
      else {
        if (t1 !== "slash")
          throw A.wrapException(A.SassScriptException$(string$.x24separ));
        separator = B.ListSeparator_zg9;
      }
      bracketed = bracketedParam instanceof A.SassString && bracketedParam._string$_text === "auto" ? list1.get$hasBrackets() : bracketedParam.get$isTruthy();
      t1 = A.List_List$of(list1.get$asList(), true, type$.Value);
      B.JSArray_methods.addAll$1(t1, list2.get$asList());
      return A.SassList$(t1, separator, bracketed);
    },
    $signature: 9
  };
  A._append_closure0.prototype = {
    call$1($arguments) {
      var separator,
        t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        value = t1.$index($arguments, 1);
      t1 = t1.$index($arguments, 2).assertString$1("separator")._string$_text;
      if (t1 === "auto")
        separator = list.get$separator() === B.ListSeparator_undecided_null_undecided ? B.ListSeparator_EVt : list.get$separator();
      else if (t1 === "space")
        separator = B.ListSeparator_EVt;
      else if (t1 === "comma")
        separator = B.ListSeparator_rXA;
      else {
        if (t1 !== "slash")
          throw A.wrapException(A.SassScriptException$(string$.x24separ));
        separator = B.ListSeparator_zg9;
      }
      t1 = A.List_List$of(list.get$asList(), true, type$.Value);
      t1.push(value);
      return list.withListContents$2$separator(t1, separator);
    },
    $signature: 9
  };
  A._zip_closure.prototype = {
    call$1($arguments) {
      var results, result, _box_0 = {},
        t1 = J.$index$asx($arguments, 0).get$asList(),
        t2 = A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,List<Value>>"),
        lists = A.List_List$of(new A.MappedListIterable(t1, new A._zip__closure(), t2), true, t2._eval$1("ListIterable.E"));
      if (lists.length === 0)
        return B.SassList_Sof;
      _box_0.i = 0;
      results = A._setArrayType([], type$.JSArray_SassList);
      for (t1 = A._arrayInstanceType(lists)._eval$1("MappedListIterable<1,Value>"), t2 = type$.Value; B.JSArray_methods.every$1(lists, new A._zip__closure0(_box_0));) {
        result = A.List_List$from(new A.MappedListIterable(lists, new A._zip__closure1(_box_0), t1), false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        results.push(new A.SassList(result, B.ListSeparator_EVt, false));
        ++_box_0.i;
      }
      return A.SassList$(results, B.ListSeparator_rXA, false);
    },
    $signature: 9
  };
  A._zip__closure.prototype = {
    call$1(list) {
      return list.get$asList();
    },
    $signature: 96
  };
  A._zip__closure0.prototype = {
    call$1(list) {
      return this._box_0.i !== J.get$length$asx(list);
    },
    $signature: 97
  };
  A._zip__closure1.prototype = {
    call$1(list) {
      return J.$index$asx(list, this._box_0.i);
    },
    $signature: 1
  };
  A._index_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        index = B.JSArray_methods.indexOf$1(t1.$index($arguments, 0).get$asList(), t1.$index($arguments, 1));
      if (index === -1)
        t1 = B.C__SassNull;
      else
        t1 = new A.UnitlessSassNumber(index + 1, null);
      return t1;
    },
    $signature: 1
  };
  A._separator_closure.prototype = {
    call$1($arguments) {
      switch (J.$index$asx($arguments, 0).get$separator()) {
        case B.ListSeparator_rXA:
          return new A.SassString("comma", false);
        case B.ListSeparator_zg9:
          return new A.SassString("slash", false);
        default:
          return new A.SassString("space", false);
      }
    },
    $signature: 2
  };
  A._isBracketed_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).get$hasBrackets() ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 13
  };
  A._get_closure.prototype = {
    call$1($arguments) {
      var value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        t2 = A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      B.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (t1 = A.IterableExtension_get_exceptLast(t2), t1 = t1.get$iterator(t1); t1.moveNext$0(); map = value) {
        value = map._map$_contents.$index(0, t1.get$current());
        if (!(value instanceof A.SassMap))
          return B.C__SassNull;
      }
      t1 = map._map$_contents.$index(0, B.JSArray_methods.get$last(t2));
      return t1 == null ? B.C__SassNull : t1;
    },
    $signature: 1
  };
  A._merge_closure.prototype = {
    call$1($arguments) {
      var t2,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1("map1"),
        map2 = t1.$index($arguments, 1).assertMap$1("map2");
      t1 = type$.Value;
      t2 = A.LinkedHashMap_LinkedHashMap$of(map1._map$_contents, t1, t1);
      t2.addAll$1(0, map2._map$_contents);
      return new A.SassMap(A.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 23
  };
  A._merge_closure0.prototype = {
    call$1($arguments) {
      var map2,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1("map1"),
        args = t1.$index($arguments, 1).get$asList();
      t1 = args.length;
      if (t1 === 0)
        throw A.wrapException(A.SassScriptException$("Expected $args to contain a key."));
      else if (t1 === 1)
        throw A.wrapException(A.SassScriptException$("Expected $args to contain a map."));
      map2 = B.JSArray_methods.get$last(args).assertMap$1("map2");
      return A._modify(map1, A.IterableExtension_get_exceptLast(args), new A._merge__closure(map2));
    },
    $signature: 1
  };
  A._merge__closure.prototype = {
    call$1(oldValue) {
      var t1, t2,
        nestedMap = oldValue.tryMap$0();
      if (nestedMap == null)
        return this.map2;
      t1 = type$.Value;
      t2 = A.LinkedHashMap_LinkedHashMap$of(nestedMap._map$_contents, t1, t1);
      t2.addAll$1(0, this.map2._map$_contents);
      return new A.SassMap(A.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 100
  };
  A._remove_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).assertMap$1("map");
    },
    $signature: 23
  };
  A._remove_closure0.prototype = {
    call$1($arguments) {
      var mutableMap, t3, _i,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        t2 = A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      B.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      t1 = type$.Value;
      mutableMap = A.LinkedHashMap_LinkedHashMap$of(map._map$_contents, t1, t1);
      for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i)
        mutableMap.remove$1(0, t2[_i]);
      return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 23
  };
  A._keys_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1("map")._map$_contents;
      return A.SassList$(t1.get$keys(t1), B.ListSeparator_rXA, false);
    },
    $signature: 9
  };
  A._values_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1("map")._map$_contents;
      return A.SassList$(t1.get$values(t1), B.ListSeparator_rXA, false);
    },
    $signature: 9
  };
  A._hasKey_closure.prototype = {
    call$1($arguments) {
      var value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        t2 = A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      B.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (t1 = A.IterableExtension_get_exceptLast(t2), t1 = t1.get$iterator(t1); t1.moveNext$0(); map = value) {
        value = map._map$_contents.$index(0, t1.get$current());
        if (!(value instanceof A.SassMap))
          return B.SassBoolean_false;
      }
      return map._map$_contents.containsKey$1(B.JSArray_methods.get$last(t2)) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 13
  };
  A._modify__modifyNestedMap.prototype = {
    call$1(map) {
      var nestedMap, _this = this,
        t1 = type$.Value,
        mutableMap = A.LinkedHashMap_LinkedHashMap$of(map._map$_contents, t1, t1),
        t2 = _this.keyIterator,
        key = t2.get$current();
      if (!t2.moveNext$0()) {
        t2 = mutableMap.$index(0, key);
        if (t2 == null)
          t2 = B.C__SassNull;
        mutableMap.$indexSet(0, key, _this.modify.call$1(t2));
        return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
      }
      t2 = mutableMap.$index(0, key);
      nestedMap = t2 == null ? null : t2.tryMap$0();
      t2 = nestedMap == null;
      if (t2 && !_this.addNesting)
        return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
      mutableMap.$indexSet(0, key, _this.call$1(t2 ? B.SassMap_Map_empty : nestedMap));
      return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 101
  };
  A._ceil_closure.prototype = {
    call$1(value) {
      return B.JSNumber_methods.ceil$0(value);
    },
    $signature: 20
  };
  A._floor_closure.prototype = {
    call$1(value) {
      return B.JSNumber_methods.floor$0(value);
    },
    $signature: 20
  };
  A._max_closure.prototype = {
    call$1($arguments) {
      var t1, t2, max, _i, number;
      for (t1 = J.$index$asx($arguments, 0).get$asList(), t2 = t1.length, max = null, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        number = t1[_i].assertNumber$0();
        if (max == null || max.lessThan$1(number).value)
          max = number;
      }
      if (max != null)
        return max;
      throw A.wrapException(A.SassScriptException$("At least one argument must be passed."));
    },
    $signature: 6
  };
  A._min_closure.prototype = {
    call$1($arguments) {
      var t1, t2, min, _i, number;
      for (t1 = J.$index$asx($arguments, 0).get$asList(), t2 = t1.length, min = null, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        number = t1[_i].assertNumber$0();
        if (min == null || min.greaterThan$1(number).value)
          min = number;
      }
      if (min != null)
        return min;
      throw A.wrapException(A.SassScriptException$("At least one argument must be passed."));
    },
    $signature: 6
  };
  A._abs_closure.prototype = {
    call$1(value) {
      return Math.abs(value);
    },
    $signature: 54
  };
  A._compatible_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1.$index($arguments, 0).assertNumber$1("number1").isComparableTo$1(t1.$index($arguments, 1).assertNumber$1("number2")) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 13
  };
  A._isUnitless_closure.prototype = {
    call$1($arguments) {
      return !J.$index$asx($arguments, 0).assertNumber$1("number").get$hasUnits() ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 13
  };
  A._unit_closure.prototype = {
    call$1($arguments) {
      return new A.SassString(J.$index$asx($arguments, 0).assertNumber$1("number").get$unitString(), true);
    },
    $signature: 2
  };
  A._percentage_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1("number");
      number.assertNoUnits$1("number");
      return new A.SingleUnitSassNumber("%", number._number$_value * 100, null);
    },
    $signature: 6
  };
  A._randomFunction_closure.prototype = {
    call$1($arguments) {
      var limit, limitScalar,
        t1 = J.getInterceptor$asx($arguments);
      if (J.$eq$(t1.$index($arguments, 0), B.C__SassNull)) {
        t1 = $.$get$_random0().nextDouble$0();
        return new A.UnitlessSassNumber(t1, null);
      }
      limit = t1.$index($arguments, 0).assertNumber$1("limit");
      if (limit.get$hasUnits())
        A.warn("math.random() will no longer ignore $limit units (" + limit.toString$0(0) + ") in a future release.\n\nRecommendation: math.random(math.div($limit, 1" + limit.get$unitString() + ")) * 1" + limit.get$unitString() + "\n\nTo preserve current behavior: math.random(math.div($limit, 1" + limit.get$unitString() + "))\n\nMore info: https://sass-lang.com/d/random-with-units", false);
      limitScalar = limit.assertInt$1("limit");
      if (limitScalar < 1)
        throw A.wrapException(A.SassScriptException$("$limit: Must be greater than 0, was " + limit.toString$0(0) + "."));
      t1 = $.$get$_random0().nextInt$1(limitScalar);
      return new A.UnitlessSassNumber(t1 + 1, null);
    },
    $signature: 6
  };
  A._numberFunction_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1("number"),
        t1 = this.transform.call$1(number._number$_value),
        t2 = number.get$numeratorUnits();
      return A.SassNumber_SassNumber$withUnits(t1, number.get$denominatorUnits(), t2);
    },
    $signature: 6
  };
  A.global_closure.prototype = {
    call$1($arguments) {
      return $._features.contains$1(0, J.$index$asx($arguments, 0).assertString$1("feature")._string$_text) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 13
  };
  A.global_closure0.prototype = {
    call$1($arguments) {
      return new A.SassString(A.serializeValue(J.get$first$ax($arguments), true, true), false);
    },
    $signature: 2
  };
  A.global_closure1.prototype = {
    call$1($arguments) {
      var value = J.$index$asx($arguments, 0);
      if (value instanceof A.SassBoolean)
        return new A.SassString("bool", false);
      if (value instanceof A.SassColor)
        return new A.SassString("color", false);
      if (value instanceof A.SassList)
        return new A.SassString("list", false);
      if (value instanceof A.SassMap)
        return new A.SassString("map", false);
      if (value.$eq(0, B.C__SassNull))
        return new A.SassString("null", false);
      if (value instanceof A.SassNumber)
        return new A.SassString("number", false);
      return new A.SassString("string", false);
    },
    $signature: 2
  };
  A.global_closure2.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).toString$0(0);
      throw A.wrapException("$args: " + t1 + " is not an argument list.");
    },
    $signature: 23
  };
  A._nest_closure.prototype = {
    call$1($arguments) {
      var t1 = {},
        selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw A.wrapException(A.SassScriptException$(string$.x24selec));
      t1.first = true;
      return new A.MappedListIterable(selectors, new A._nest__closure(t1), A._arrayInstanceType(selectors)._eval$1("MappedListIterable<1,SelectorList>")).reduce$1(0, new A._nest__closure0()).get$asSassList();
    },
    $signature: 9
  };
  A._nest__closure.prototype = {
    call$1(selector) {
      var t1 = this._box_0,
        result = A.SassApiValue_assertSelector(selector, !t1.first, null);
      t1.first = false;
      return result;
    },
    $signature: 55
  };
  A._nest__closure0.prototype = {
    call$2($parent, child) {
      return child.resolveParentSelectors$1($parent);
    },
    $signature: 42
  };
  A._append_closure.prototype = {
    call$1($arguments) {
      var selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw A.wrapException(A.SassScriptException$(string$.x24selec));
      return new A.MappedListIterable(selectors, new A._append__closure(), A._arrayInstanceType(selectors)._eval$1("MappedListIterable<1,SelectorList>")).reduce$1(0, new A._append__closure0()).get$asSassList();
    },
    $signature: 9
  };
  A._append__closure.prototype = {
    call$1(selector) {
      return A.SassApiValue_assertSelector(selector, false, null);
    },
    $signature: 55
  };
  A._append__closure0.prototype = {
    call$2($parent, child) {
      var t1 = child.components;
      return A.SelectorList$(new A.MappedListIterable(t1, new A._append___closure($parent), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,ComplexSelector>"))).resolveParentSelectors$1($parent);
    },
    $signature: 42
  };
  A._append___closure.prototype = {
    call$1(complex) {
      var t1, component, newCompound, t2;
      if (complex.leadingCombinators.length !== 0)
        throw A.wrapException(A.SassScriptException$("Can't append " + complex.toString$0(0) + " to " + this.parent.toString$0(0) + "."));
      t1 = complex.components;
      component = B.JSArray_methods.get$first(t1);
      newCompound = A._prependParent(component.selector);
      if (newCompound == null)
        throw A.wrapException(A.SassScriptException$("Can't append " + complex.toString$0(0) + " to " + this.parent.toString$0(0) + "."));
      t2 = A._setArrayType([new A.ComplexSelectorComponent(newCompound, A.List_List$unmodifiable(component.combinators, type$.Combinator))], type$.JSArray_ComplexSelectorComponent);
      B.JSArray_methods.addAll$1(t2, A.SubListIterable$(t1, 1, null, A._arrayInstanceType(t1)._precomputed1));
      return A.ComplexSelector$(B.List_empty0, t2, false);
    },
    $signature: 22
  };
  A._extend_closure.prototype = {
    call$1($arguments) {
      var _s8_ = "selector",
        _s8_0 = "extendee",
        _s8_1 = "extender",
        t1 = J.getInterceptor$asx($arguments);
      A.SassApiValue_assertSelector(t1.$index($arguments, 0), false, _s8_).assertNotBogus$1$name(_s8_);
      A.SassApiValue_assertSelector(t1.$index($arguments, 1), false, _s8_0).assertNotBogus$1$name(_s8_0);
      A.SassApiValue_assertSelector(t1.$index($arguments, 2), false, _s8_1).assertNotBogus$1$name(_s8_1);
      A.EvaluationContext_current().get$currentCallableSpan();
      return (void 1).get$asSassList();
    },
    $signature: 9
  };
  A._replace_closure.prototype = {
    call$1($arguments) {
      var _s8_ = "selector",
        _s8_0 = "original",
        _s11_ = "replacement",
        t1 = J.getInterceptor$asx($arguments);
      A.SassApiValue_assertSelector(t1.$index($arguments, 0), false, _s8_).assertNotBogus$1$name(_s8_);
      A.SassApiValue_assertSelector(t1.$index($arguments, 1), false, _s8_0).assertNotBogus$1$name(_s8_0);
      A.SassApiValue_assertSelector(t1.$index($arguments, 2), false, _s11_).assertNotBogus$1$name(_s11_);
      A.EvaluationContext_current().get$currentCallableSpan();
      return (void 1).get$asSassList();
    },
    $signature: 9
  };
  A._unify_closure.prototype = {
    call$1($arguments) {
      var selector2, result,
        _s9_ = "selector1",
        _s9_0 = "selector2",
        t1 = J.getInterceptor$asx($arguments),
        selector1 = A.SassApiValue_assertSelector(t1.$index($arguments, 0), false, _s9_);
      selector1.assertNotBogus$1$name(_s9_);
      selector2 = A.SassApiValue_assertSelector(t1.$index($arguments, 1), false, _s9_0);
      selector2.assertNotBogus$1$name(_s9_0);
      result = selector1.unify$1(selector2);
      return result == null ? B.C__SassNull : result.get$asSassList();
    },
    $signature: 1
  };
  A._isSuperselector_closure.prototype = {
    call$1($arguments) {
      var selector2,
        t1 = J.getInterceptor$asx($arguments),
        selector1 = A.SassApiValue_assertSelector(t1.$index($arguments, 0), false, "super");
      selector1.assertNotBogus$1$name("super");
      selector2 = A.SassApiValue_assertSelector(t1.$index($arguments, 1), false, "sub");
      selector2.assertNotBogus$1$name("sub");
      return A.listIsSuperselector(selector1.components, selector2.components) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 13
  };
  A._simpleSelectors_closure.prototype = {
    call$1($arguments) {
      var t1 = A.SassApiValue_assertCompoundSelector(J.$index$asx($arguments, 0), "selector").components;
      return A.SassList$(new A.MappedListIterable(t1, new A._simpleSelectors__closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Value>")), B.ListSeparator_rXA, false);
    },
    $signature: 9
  };
  A._simpleSelectors__closure.prototype = {
    call$1(simple) {
      return new A.SassString(A.serializeSelector(simple, true), false);
    },
    $signature: 106
  };
  A._parse_closure.prototype = {
    call$1($arguments) {
      return A.SassApiValue_assertSelector(J.$index$asx($arguments, 0), false, "selector").get$asSassList();
    },
    $signature: 9
  };
  A._unquote_closure.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1("string");
      if (!string._hasQuotes)
        return string;
      return new A.SassString(string._string$_text, false);
    },
    $signature: 2
  };
  A._quote_closure.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1("string");
      if (string._hasQuotes)
        return string;
      return new A.SassString(string._string$_text, true);
    },
    $signature: 2
  };
  A._length_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertString$1("string").get$_sassLength();
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 6
  };
  A._insert_closure.prototype = {
    call$1($arguments) {
      var indexInt, codeUnitIndex, _s5_ = "index",
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1("string"),
        insert = t1.$index($arguments, 1).assertString$1("insert"),
        index = t1.$index($arguments, 2).assertNumber$1(_s5_);
      index.assertNoUnits$1(_s5_);
      indexInt = index.assertInt$1(_s5_);
      if (indexInt < 0)
        indexInt = Math.max(string.get$_sassLength() + indexInt + 2, 0);
      t1 = string._string$_text;
      codeUnitIndex = A.codepointIndexToCodeUnitIndex(t1, A._codepointForIndex(indexInt, string.get$_sassLength(), false));
      return new A.SassString(B.JSString_methods.replaceRange$3(t1, codeUnitIndex, codeUnitIndex, insert._string$_text), string._hasQuotes);
    },
    $signature: 2
  };
  A._index_closure.prototype = {
    call$1($arguments) {
      var codepointIndex,
        t1 = J.getInterceptor$asx($arguments),
        t2 = t1.$index($arguments, 0).assertString$1("string")._string$_text,
        codeUnitIndex = B.JSString_methods.indexOf$1(t2, t1.$index($arguments, 1).assertString$1("substring")._string$_text);
      if (codeUnitIndex === -1)
        return B.C__SassNull;
      codepointIndex = A.codeUnitIndexToCodepointIndex(t2, codeUnitIndex);
      return new A.UnitlessSassNumber(codepointIndex + 1, null);
    },
    $signature: 1
  };
  A._slice_closure.prototype = {
    call$1($arguments) {
      var lengthInCodepoints, endInt, startCodepoint, endCodepoint,
        _s8_ = "start-at",
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1("string"),
        start = t1.$index($arguments, 1).assertNumber$1(_s8_),
        end = t1.$index($arguments, 2).assertNumber$1("end-at");
      start.assertNoUnits$1(_s8_);
      end.assertNoUnits$1("end-at");
      lengthInCodepoints = string.get$_sassLength();
      endInt = end.assertInt$0();
      if (endInt === 0)
        return string._hasQuotes ? $.$get$_emptyQuoted() : $.$get$_emptyUnquoted();
      startCodepoint = A._codepointForIndex(start.assertInt$0(), lengthInCodepoints, false);
      endCodepoint = A._codepointForIndex(endInt, lengthInCodepoints, true);
      if (endCodepoint === lengthInCodepoints)
        --endCodepoint;
      if (endCodepoint < startCodepoint)
        return string._hasQuotes ? $.$get$_emptyQuoted() : $.$get$_emptyUnquoted();
      t1 = string._string$_text;
      return new A.SassString(B.JSString_methods.substring$2(t1, A.codepointIndexToCodeUnitIndex(t1, startCodepoint), A.codepointIndexToCodeUnitIndex(t1, endCodepoint + 1)), string._hasQuotes);
    },
    $signature: 2
  };
  A._toUpperCase_closure.prototype = {
    call$1($arguments) {
      var t1, t2, i, t3, t4,
        string = J.$index$asx($arguments, 0).assertString$1("string");
      for (t1 = string._string$_text, t2 = t1.length, i = 0, t3 = ""; i < t2; ++i) {
        t4 = B.JSString_methods._codeUnitAt$1(t1, i);
        t3 += A.Primitives_stringFromCharCode(t4 >= 97 && t4 <= 122 ? t4 & 4294967263 : t4);
      }
      return new A.SassString(t3.charCodeAt(0) == 0 ? t3 : t3, string._hasQuotes);
    },
    $signature: 2
  };
  A._toLowerCase_closure.prototype = {
    call$1($arguments) {
      var t1, t2, i, t3, t4,
        string = J.$index$asx($arguments, 0).assertString$1("string");
      for (t1 = string._string$_text, t2 = t1.length, i = 0, t3 = ""; i < t2; ++i) {
        t4 = B.JSString_methods._codeUnitAt$1(t1, i);
        t3 += A.Primitives_stringFromCharCode(t4 >= 65 && t4 <= 90 ? t4 | 32 : t4);
      }
      return new A.SassString(t3.charCodeAt(0) == 0 ? t3 : t3, string._hasQuotes);
    },
    $signature: 2
  };
  A._uniqueId_closure.prototype = {
    call$1($arguments) {
      var t1 = $.$get$_previousUniqueId() + ($.$get$_random().nextInt$1(36) + 1);
      $._previousUniqueId = t1;
      if (t1 > Math.pow(36, 6))
        $._previousUniqueId = B.JSInt_methods.$mod($.$get$_previousUniqueId(), A._asInt(Math.pow(36, 6)));
      return new A.SassString("u" + B.JSString_methods.padLeft$2(J.toRadixString$1$n($.$get$_previousUniqueId(), 36), 6, "0"), false);
    },
    $signature: 2
  };
  A.ImportCache.prototype = {
    canonicalize$4$baseImporter$baseUrl$forImport(url, baseImporter, baseUrl, forImport) {
      var _this = this,
        relativeResult = _this._relativeCanonicalizeCache.putIfAbsent$2(new A.Tuple4(url, forImport, baseImporter, baseUrl, type$.Tuple4_of_Uri_and_bool_and_Importer_and_nullable_Uri), new A.ImportCache_canonicalize_closure(_this, baseUrl, url, baseImporter, forImport));
      if (relativeResult != null)
        return relativeResult;
      return _this._canonicalizeCache.putIfAbsent$2(new A.Tuple2(url, forImport, type$.Tuple2_Uri_bool), new A.ImportCache_canonicalize_closure0(_this, url, forImport));
    },
    canonicalize$3$baseImporter$baseUrl(url, baseImporter, baseUrl) {
      return this.canonicalize$4$baseImporter$baseUrl$forImport(url, baseImporter, baseUrl, false);
    },
    _canonicalize$3(importer, url, forImport) {
      var t1, result;
      if (forImport) {
        t1 = type$.nullable_Object;
        result = A.runZoned(new A.ImportCache__canonicalize_closure(importer, url), A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol__inImportRule, true], t1, t1), type$.nullable_Uri);
      } else
        result = importer.canonicalize$1(url);
      if ((result == null ? null : result.get$scheme()) === "")
        this._logger.warn$2$deprecation(0, "Importer " + importer.toString$0(0) + " canonicalized " + url.toString$0(0) + " to " + A.S(result) + ".\nRelative canonical URLs are deprecated and will eventually be disallowed.\n", true);
      return result;
    },
    import$4$baseImporter$baseUrl$forImport(url, baseImporter, baseUrl, forImport) {
      var t1, stylesheet,
        tuple = this.canonicalize$4$baseImporter$baseUrl$forImport(url, baseImporter, baseUrl, forImport);
      if (tuple == null)
        return null;
      t1 = tuple.item1;
      stylesheet = this.importCanonical$3$originalUrl(t1, tuple.item2, tuple.item3);
      if (stylesheet == null)
        return null;
      return new A.Tuple2(t1, stylesheet, type$.Tuple2_Importer_Stylesheet);
    },
    import$2$baseImporter(url, baseImporter) {
      return this.import$4$baseImporter$baseUrl$forImport(url, baseImporter, null, false);
    },
    import$3$baseImporter$baseUrl(url, baseImporter, baseUrl) {
      return this.import$4$baseImporter$baseUrl$forImport(url, baseImporter, baseUrl, false);
    },
    importCanonical$3$originalUrl(importer, canonicalUrl, originalUrl) {
      return this._importCache.putIfAbsent$2(canonicalUrl, new A.ImportCache_importCanonical_closure(this, importer, canonicalUrl, originalUrl, false));
    }
  };
  A.ImportCache_canonicalize_closure.prototype = {
    call$0() {
      var canonicalUrl, _this = this,
        t1 = _this.baseUrl,
        resolvedUrl = t1 == null ? null : t1.resolveUri$1(_this.url);
      if (resolvedUrl == null)
        resolvedUrl = _this.url;
      t1 = _this.baseImporter;
      canonicalUrl = _this.$this._canonicalize$3(t1, resolvedUrl, _this.forImport);
      if (canonicalUrl == null)
        return null;
      return new A.Tuple3(t1, canonicalUrl, resolvedUrl, type$.Tuple3_Importer_Uri_Uri);
    },
    $signature: 56
  };
  A.ImportCache_canonicalize_closure0.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, _i, importer, canonicalUrl;
      for (t1 = this.$this, t2 = t1._importers, t3 = t2.length, t4 = this.url, t5 = this.forImport, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        importer = t2[_i];
        canonicalUrl = t1._canonicalize$3(importer, t4, t5);
        if (canonicalUrl != null)
          return new A.Tuple3(importer, canonicalUrl, t4, type$.Tuple3_Importer_Uri_Uri);
      }
      return null;
    },
    $signature: 56
  };
  A.ImportCache__canonicalize_closure.prototype = {
    call$0() {
      return this.importer.canonicalize$1(this.url);
    },
    $signature: 108
  };
  A.ImportCache_importCanonical_closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.canonicalUrl,
        result = _this.importer.load$1(0, t1),
        t2 = _this.$this;
      t2._resultsCache.$indexSet(0, t1, result);
      t1 = _this.originalUrl.resolveUri$1(t1);
      return A.Stylesheet_Stylesheet$parse(result.contents, result.syntax, t2._logger, t1);
    },
    $signature: 109
  };
  A.Importer.prototype = {};
  A.AsyncImporter.prototype = {};
  A.FilesystemImporter.prototype = {
    canonicalize$1(url) {
      if (url.get$scheme() !== "file" && url.get$scheme() !== "")
        return null;
      return A.NullableExtension_andThen(A.resolveImportPath(A.join(this._loadPath, $.$get$context().style.pathFromUri$1(A._parseUri(url)), null)), new A.FilesystemImporter_canonicalize_closure());
    },
    load$1(_, url) {
      var path = $.$get$context().style.pathFromUri$1(A._parseUri(url)),
        t1 = A.readFile(path),
        t2 = A.Syntax_forPath(path),
        t3 = url.get$scheme();
      if (t3 === "")
        A.throwExpression(A.ArgumentError$value(url, "sourceMapUrl", "must be absolute"));
      return new A.ImporterResult(t1, t2);
    },
    toString$0(_) {
      return this._loadPath;
    }
  };
  A.FilesystemImporter_canonicalize_closure.prototype = {
    call$1(resolved) {
      var t1, t2, t0;
      if (J.$eq$(J.get$platform$x(self.process), "win32") || J.$eq$(J.get$platform$x(self.process), "darwin")) {
        t1 = $.$get$context();
        t2 = A._realCasePath(A.absolute(t1.normalize$1(0, resolved)));
        t0 = t2;
        t2 = t1;
        t1 = t0;
      } else {
        t1 = $.$get$context();
        t2 = t1.canonicalize$1(resolved);
        t0 = t2;
        t2 = t1;
        t1 = t0;
      }
      return t2.toUri$1(t1);
    },
    $signature: 110
  };
  A.ImporterResult.prototype = {};
  A.resolveImportPath_closure.prototype = {
    call$0() {
      return A._exactlyOne(A._tryPath($.$get$context().withoutExtension$1(this.path) + ".import" + this.extension));
    },
    $signature: 19
  };
  A.resolveImportPath_closure0.prototype = {
    call$0() {
      return A._exactlyOne(A._tryPathWithExtensions(this.path + ".import"));
    },
    $signature: 19
  };
  A._tryPathAsDirectory_closure.prototype = {
    call$0() {
      return A._exactlyOne(A._tryPathWithExtensions(A.join(this.path, "index.import", null)));
    },
    $signature: 19
  };
  A._exactlyOne_closure.prototype = {
    call$1(path) {
      var t1 = $.$get$context();
      return "  " + t1.prettyUri$1(t1.toUri$1(path));
    },
    $signature: 4
  };
  A.InterpolationBuffer.prototype = {
    writeCharCode$1(character) {
      this._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(character);
      return null;
    },
    addInterpolation$1(interpolation) {
      var first, t1, _this = this,
        toAdd = interpolation.contents;
      if (toAdd.length === 0)
        return;
      first = B.JSArray_methods.get$first(toAdd);
      if (typeof first == "string") {
        _this._interpolation_buffer$_text._contents += first;
        toAdd = A.SubListIterable$(toAdd, 1, null, A._arrayInstanceType(toAdd)._precomputed1);
      }
      _this._flushText$0();
      t1 = _this._interpolation_buffer$_contents;
      B.JSArray_methods.addAll$1(t1, toAdd);
      if (typeof B.JSArray_methods.get$last(t1) == "string")
        _this._interpolation_buffer$_text._contents += A.S(t1.pop());
    },
    _flushText$0() {
      var t1 = this._interpolation_buffer$_text,
        t2 = t1._contents;
      if (t2.length === 0)
        return;
      this._interpolation_buffer$_contents.push(t2.charCodeAt(0) == 0 ? t2 : t2);
      t1._contents = "";
    },
    interpolation$1(span) {
      var t1 = A.List_List$of(this._interpolation_buffer$_contents, true, type$.Object),
        t2 = this._interpolation_buffer$_text._contents;
      if (t2.length !== 0)
        t1.push(t2.charCodeAt(0) == 0 ? t2 : t2);
      return A.Interpolation$(t1, span);
    },
    toString$0(_) {
      var t1, t2, _i, t3, element;
      for (t1 = this._interpolation_buffer$_contents, t2 = t1.length, _i = 0, t3 = ""; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        t3 = typeof element == "string" ? t3 + element : t3 + "#{" + A.S(element) + A.Primitives_stringFromCharCode(125);
      }
      t1 = t3 + this._interpolation_buffer$_text.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._realCasePath_helper.prototype = {
    call$1(path) {
      var dirname = $.$get$context().dirname$1(0, path);
      if (dirname === path)
        return path;
      return $._realCaseCache.putIfAbsent$2(path, new A._realCasePath_helper_closure(this, dirname, path));
    },
    $signature: 4
  };
  A._realCasePath_helper_closure.prototype = {
    call$0() {
      var matches, exception,
        realDirname = this.helper.call$1(this.dirname),
        t1 = this.path,
        t2 = A.ParsedPath_ParsedPath$parse(t1, $.$get$context().style),
        basename = t2.get$basename(t2);
      try {
        matches = J.where$1$ax(A.listDir(realDirname), new A._realCasePath_helper__closure(basename)).toList$0(0);
        t2 = J.get$length$asx(matches) !== 1 ? A.join(realDirname, basename, null) : J.$index$asx(matches, 0);
        return t2;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.FileSystemException)
          return t1;
        else
          throw exception;
      }
    },
    $signature: 12
  };
  A._realCasePath_helper__closure.prototype = {
    call$1(realPath) {
      var t1 = A.ParsedPath_ParsedPath$parse(realPath, $.$get$context().style);
      return A.equalsIgnoreCase(t1.get$basename(t1), this.basename);
    },
    $signature: 5
  };
  A.FileSystemException.prototype = {
    toString$0(_) {
      var t1 = $.$get$context();
      return t1.prettyUri$1(t1.toUri$1(this.path)) + ": " + this.message;
    }
  };
  A.Stderr.prototype = {
    writeln$1(object) {
      var t1 = object == null ? "" : object;
      J.write$1$x(this._stderr, t1 + "\n");
    },
    writeln$0() {
      return this.writeln$1(null);
    }
  };
  A._readFile_closure.prototype = {
    call$0() {
      return J.readFileSync$2$x(A.fs(), this.path, this.encoding);
    },
    $signature: 33
  };
  A.fileExists_closure.prototype = {
    call$0() {
      var error, systemError, exception,
        t1 = this.path;
      if (!J.existsSync$1$x(A.fs(), t1))
        return false;
      try {
        t1 = J.isFile$0$x(J.statSync$1$x(A.fs(), t1));
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), "ENOENT"))
          return false;
        throw exception;
      }
    },
    $signature: 16
  };
  A.dirExists_closure.prototype = {
    call$0() {
      var error, systemError, exception,
        t1 = this.path;
      if (!J.existsSync$1$x(A.fs(), t1))
        return false;
      try {
        t1 = J.isDirectory$0$x(J.statSync$1$x(A.fs(), t1));
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), "ENOENT"))
          return false;
        throw exception;
      }
    },
    $signature: 16
  };
  A.listDir_closure.prototype = {
    call$0() {
      var t1 = this.path;
      if (!this.recursive)
        return J.map$1$1$ax(J.readdirSync$1$x(A.fs(), t1), new A.listDir__closure(t1), type$.String).where$1(0, new A.listDir__closure0());
      else
        return new A.listDir_closure_list().call$1(t1);
    },
    $signature: 59
  };
  A.listDir__closure.prototype = {
    call$1(child) {
      return A.join(this.path, A._asString(child), null);
    },
    $signature: 58
  };
  A.listDir__closure0.prototype = {
    call$1(child) {
      return !A.dirExists(child);
    },
    $signature: 5
  };
  A.listDir_closure_list.prototype = {
    call$1($parent) {
      return J.expand$1$1$ax(J.readdirSync$1$x(A.fs(), $parent), new A.listDir__list_closure($parent, this), type$.String);
    },
    $signature: 115
  };
  A.listDir__list_closure.prototype = {
    call$1(child) {
      var path = A.join(this.parent, A._asString(child), null);
      return A.dirExists(path) ? this.list.call$1(path) : A._setArrayType([path], type$.JSArray_String);
    },
    $signature: 116
  };
  A._QuietLogger.prototype = {
    warn$3$deprecation$span(_, message, deprecation, span) {
    },
    warn$2$span($receiver, message, span) {
      return this.warn$3$deprecation$span($receiver, message, false, span);
    }
  };
  A.StderrLogger.prototype = {
    warn$3$deprecation$span(_, message, deprecation, span) {
      var t1;
      if (deprecation)
        J.write$1$x($.$get$stderr()._stderr, "DEPRECATION ");
      J.write$1$x($.$get$stderr()._stderr, "WARNING");
      if (span == null) {
        t1 = $.$get$stderr();
        t1.writeln$1(": " + message);
      } else {
        t1 = $.$get$stderr();
        t1.writeln$1(" on " + span.message$2$color(0, "\n" + message, false));
      }
      t1.writeln$0();
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$3$deprecation$span($receiver, message, deprecation, null);
    },
    warn$2$span($receiver, message, span) {
      return this.warn$3$deprecation$span($receiver, message, false, span);
    }
  };
  A.JSArray0.prototype = {};
  A.Chokidar.prototype = {};
  A.ChokidarOptions.prototype = {};
  A.ChokidarWatcher.prototype = {};
  A.JSFunction.prototype = {};
  A.NodeImporterResult.prototype = {};
  A.RenderContext.prototype = {};
  A.RenderContextOptions.prototype = {};
  A.RenderContextResult.prototype = {};
  A.RenderContextResultStats.prototype = {};
  A.JSClass.prototype = {};
  A.JSUrl.prototype = {};
  A._PropertyDescriptor.prototype = {};
  A._disallowedFunctionNames_closure.prototype = {
    call$1($function) {
      return $function.name;
    },
    $signature: 117
  };
  A.CssParser.prototype = {
    get$plainCss() {
      return true;
    },
    silentComment$0() {
      var t1 = this.scanner,
        t2 = t1._position;
      this.super$Parser$silentComment();
      this.error$2(0, string$.Silent, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    atRule$2$root(child, root) {
      var $name, urlStart, next, url, urlSpan, modifiers, t2, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      t1.expectChar$1(64);
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      switch ($name.get$asPlain()) {
        case "at-root":
        case "content":
        case "debug":
        case "each":
        case "error":
        case "extend":
        case "for":
        case "function":
        case "if":
        case "include":
        case "mixin":
        case "return":
        case "warn":
        case "while":
          _this.almostAnyValue$0();
          _this.error$2(0, "This at-rule isn't allowed in plain CSS.", t1.spanFrom$1(start));
          break;
        case "import":
          urlStart = new A._SpanScannerState(t1, t1._position);
          next = t1.peekChar$0();
          url = next === 117 || next === 85 ? _this.dynamicUrl$0() : new A.StringExpression(_this.interpolatedString$0().asInterpolation$1$static(true), false);
          urlSpan = t1.spanFrom$1(urlStart);
          _this.whitespace$0();
          modifiers = _this.tryImportModifiers$0();
          _this.expectStatementSeparator$1("@import rule");
          t2 = A._setArrayType([new A.StaticImport(A.Interpolation$(A._setArrayType([url], type$.JSArray_Object), urlSpan), modifiers, t1.spanFrom$1(urlStart))], type$.JSArray_Import);
          t1 = t1.spanFrom$1(start);
          return new A.ImportRule(A.List_List$unmodifiable(t2, type$.Import), t1);
        case "media":
          return _this.mediaRule$1(start);
        case "-moz-document":
          return _this.mozDocumentRule$2(start, $name);
        case "supports":
          return _this.supportsRule$1(start);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    identifierLike$0() {
      var t2, allowEmptySecondArg, $arguments, t3, t4, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        lower = plain.toLowerCase(),
        specialFunction = _this.trySpecialFunction$2(lower, start);
      if (specialFunction != null)
        return specialFunction;
      t2 = t1._position;
      if (!t1.scanChar$1(40))
        return new A.StringExpression(identifier, false);
      allowEmptySecondArg = lower === "var";
      $arguments = A._setArrayType([], type$.JSArray_Expression);
      if (!t1.scanChar$1(41)) {
        do {
          _this.whitespace$0();
          if (allowEmptySecondArg && $arguments.length === 1 && t1.peekChar$0() === 41) {
            t3 = A.FileLocation$_(t1._sourceFile, t1._position);
            t4 = t3.offset;
            t4 = A._FileSpan$(t3.file, t4, t4);
            $arguments.push(new A.StringExpression(A.Interpolation$(A._setArrayType([""], type$.JSArray_Object), t4), false));
            break;
          }
          $arguments.push(_this.expressionUntilComma$1$singleEquals(true));
          _this.whitespace$0();
        } while (t1.scanChar$1(44));
        t1.expectChar$1(41);
      }
      if ($.$get$_disallowedFunctionNames().contains$1(0, plain))
        _this.error$2(0, "This function isn't allowed in plain CSS.", t1.spanFrom$1(start));
      t3 = A.Interpolation$(A._setArrayType([new A.StringExpression(identifier, false)], type$.JSArray_Object), identifier.span);
      t2 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      t4 = type$.Expression;
      return new A.InterpolatedFunctionExpression(t3, new A.ArgumentInvocation(A.List_List$unmodifiable($arguments, t4), A.ConstantMap_ConstantMap$from(B.Map_empty, type$.String, t4), null, null, t2), t1.spanFrom$1(start));
    },
    namespacedExpression$2(namespace, start) {
      this.error$2(0, "Module namespaces aren't allowed in plain CSS.", this.super$StylesheetParser$namespacedExpression(namespace, start).get$span());
    }
  };
  A.Parser0.prototype = {
    _parseIdentifier$0() {
      return this.wrapSpanFormatException$1(new A.Parser__parseIdentifier_closure(this));
    },
    whitespace$0() {
      do
        this.whitespaceWithoutComments$0();
      while (this.scanComment$0());
    },
    whitespaceWithoutComments$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12;
        } else
          t3 = false;
        if (!t3)
          break;
        t1.readChar$0();
      }
    },
    spaces$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9;
        } else
          t3 = false;
        if (!t3)
          break;
        t1.readChar$0();
      }
    },
    scanComment$0() {
      var next,
        t1 = this.scanner;
      if (t1.peekChar$0() !== 47)
        return false;
      next = t1.peekChar$1(1);
      if (next === 47) {
        this.silentComment$0();
        return true;
      } else if (next === 42) {
        this.loudComment$0();
        return true;
      } else
        return false;
    },
    expectWhitespace$0() {
      var t2, t3,
        t1 = this.scanner;
      if (t1._position !== t1.string.length) {
        t2 = t1.peekChar$0();
        t3 = !(t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12 || this.scanComment$0());
        t2 = t3;
      } else
        t2 = true;
      if (t2)
        t1.error$1(0, "Expected whitespace.");
      this.whitespace$0();
    },
    silentComment$0() {
      var t2, t3,
        t1 = this.scanner;
      t1.expect$1("//");
      t2 = t1.string.length;
      while (true) {
        if (t1._position !== t2) {
          t3 = t1.peekChar$0();
          t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
        } else
          t3 = false;
        if (!t3)
          break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1("/*");
      for (; true;) {
        if (t1.readChar$0() !== 42)
          continue;
        do
          next = t1.readChar$0();
        while (next === 42);
        if (next === 47)
          break;
      }
    },
    identifier$2$normalize$unit(normalize, unit) {
      var t2, first, _this = this,
        _s20_ = "Expected identifier.",
        text = new A.StringBuffer(""),
        t1 = _this.scanner;
      if (t1.scanChar$1(45)) {
        t2 = text._contents = "" + A.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          text._contents = t2 + A.Primitives_stringFromCharCode(45);
          _this._identifierBody$3$normalize$unit(text, normalize, unit);
          t1 = text._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      } else
        t2 = "";
      first = t1.peekChar$0();
      if (first == null)
        t1.error$1(0, _s20_);
      else if (normalize && first === 95) {
        t1.readChar$0();
        text._contents = t2 + A.Primitives_stringFromCharCode(45);
      } else if (first === 95 || A.isAlphabetic0(first) || first >= 128)
        text._contents = t2 + A.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        text._contents = t2 + A.S(_this.escape$1$identifierStart(true));
      else
        t1.error$1(0, _s20_);
      _this._identifierBody$3$normalize$unit(text, normalize, unit);
      t1 = text._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    identifier$0() {
      return this.identifier$2$normalize$unit(false, false);
    },
    identifier$1$normalize(normalize) {
      return this.identifier$2$normalize$unit(normalize, false);
    },
    identifier$1$unit(unit) {
      return this.identifier$2$normalize$unit(false, unit);
    },
    _identifierBody$3$normalize$unit(text, normalize, unit) {
      var t1, next, second, t2;
      for (t1 = this.scanner; true;) {
        next = t1.peekChar$0();
        if (next == null)
          break;
        else if (unit && next === 45) {
          second = t1.peekChar$1(1);
          if (second != null)
            if (second !== 46)
              t2 = second >= 48 && second <= 57;
            else
              t2 = true;
          else
            t2 = false;
          if (t2)
            break;
          text._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
        } else if (normalize && next === 95) {
          t1.readChar$0();
          text._contents += A.Primitives_stringFromCharCode(45);
        } else {
          if (next !== 95) {
            if (!(next >= 97 && next <= 122))
              t2 = next >= 65 && next <= 90;
            else
              t2 = true;
            t2 = t2 || next >= 128;
          } else
            t2 = true;
          if (!t2)
            t2 = next >= 48 && next <= 57 || next === 45;
          else
            t2 = true;
          if (t2)
            text._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 92)
            text._contents += A.S(this.escape$0());
          else
            break;
        }
      }
    },
    _identifierBody$1(text) {
      return this._identifierBody$3$normalize$unit(text, false, false);
    },
    string$0() {
      var buffer, next, t2,
        t1 = this.scanner,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(0, "Expected string.", t1._position - 1);
      buffer = new A.StringBuffer("");
      for (; true;) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(0, "Expected " + A.Primitives_stringFromCharCode(quote) + ".");
        else if (next === 92) {
          t2 = t1.peekChar$1(1);
          if (t2 === 10 || t2 === 13 || t2 === 12) {
            t1.readChar$0();
            t1.readChar$0();
          } else
            buffer._contents += A.Primitives_stringFromCharCode(A.consumeEscapedCharacter(t1));
        } else
          buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    naturalNumber$0() {
      var number, t2,
        t1 = this.scanner,
        first = t1.readChar$0();
      if (!A.isDigit(first))
        t1.error$2$position(0, "Expected digit.", t1._position - 1);
      number = first - 48;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57))
          break;
        number = number * 10 + (t1.readChar$0() - 48);
      }
      return number;
    },
    declarationValue$1$allowEmpty(allowEmpty) {
      var t1, t2, t3, wroteNewline, next, start, end, t4, url, _this = this,
        buffer = new A.StringBuffer(""),
        brackets = A._setArrayType([], type$.JSArray_int);
      $label0$1:
        for (t1 = _this.scanner, t2 = _this.get$string(), t3 = t1.string, wroteNewline = false; true;) {
          next = t1.peekChar$0();
          switch (next) {
            case 92:
              buffer._contents += A.S(_this.escape$1$identifierStart(true));
              wroteNewline = false;
              break;
            case 34:
            case 39:
              start = t1._position;
              t2.call$0();
              end = t1._position;
              buffer._contents += B.JSString_methods.substring$2(t3, start, end);
              wroteNewline = false;
              break;
            case 47:
              if (t1.peekChar$1(1) === 42) {
                t4 = _this.get$loudComment();
                start = t1._position;
                t4.call$0();
                end = t1._position;
                buffer._contents += B.JSString_methods.substring$2(t3, start, end);
              } else
                buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 32:
            case 9:
              if (!wroteNewline) {
                t4 = t1.peekChar$1(1);
                t4 = !(t4 === 32 || t4 === 9 || t4 === 10 || t4 === 13 || t4 === 12);
              } else
                t4 = true;
              if (t4)
                buffer._contents += A.Primitives_stringFromCharCode(32);
              t1.readChar$0();
              break;
            case 10:
            case 13:
            case 12:
              t4 = t1.peekChar$1(-1);
              if (!(t4 === 10 || t4 === 13 || t4 === 12))
                buffer._contents += "\n";
              t1.readChar$0();
              wroteNewline = true;
              break;
            case 40:
            case 123:
            case 91:
              next.toString;
              buffer._contents += A.Primitives_stringFromCharCode(next);
              brackets.push(A.opposite(t1.readChar$0()));
              wroteNewline = false;
              break;
            case 41:
            case 125:
            case 93:
              if (brackets.length === 0)
                break $label0$1;
              next.toString;
              buffer._contents += A.Primitives_stringFromCharCode(next);
              t1.expectChar$1(brackets.pop());
              wroteNewline = false;
              break;
            case 59:
              if (brackets.length === 0)
                break $label0$1;
              buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 117:
            case 85:
              url = _this.tryUrl$0();
              if (url != null)
                buffer._contents += url;
              else
                buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            default:
              if (next == null)
                break $label0$1;
              if (_this.lookingAtIdentifier$0())
                buffer._contents += _this.identifier$0();
              else
                buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
          }
        }
      if (brackets.length !== 0)
        t1.expectChar$1(B.JSArray_methods.get$last(brackets));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    tryUrl$0() {
      var buffer, next, t2, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      if (!_this.scanIdentifier$1("url"))
        return null;
      if (!t1.scanChar$1(40)) {
        t1.set$state(start);
        return null;
      }
      _this.whitespace$0();
      buffer = new A.StringBuffer("");
      buffer._contents = "" + "url(";
      for (; true;) {
        next = t1.peekChar$0();
        if (next == null)
          break;
        else if (next === 92)
          buffer._contents += A.S(_this.escape$0());
        else {
          if (next !== 37)
            if (next !== 38)
              if (next !== 35)
                t2 = next >= 42 && next <= 126 || next >= 128;
              else
                t2 = true;
            else
              t2 = true;
          else
            t2 = true;
          if (t2)
            buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 32 || next === 9 || next === 10 || next === 13 || next === 12) {
            _this.whitespace$0();
            if (t1.peekChar$0() !== 41)
              break;
          } else if (next === 41) {
            t2 = buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            return t2.charCodeAt(0) == 0 ? t2 : t2;
          } else
            break;
        }
      }
      t1.set$state(start);
      return null;
    },
    variableName$0() {
      this.scanner.expectChar$1(36);
      return this.identifier$1$normalize(true);
    },
    escape$1$identifierStart(identifierStart) {
      var value, first, i, next, t2, exception,
        _s25_ = "Expected escape sequence.",
        t1 = this.scanner,
        start = t1._position;
      t1.expectChar$1(92);
      value = 0;
      first = t1.peekChar$0();
      if (first == null)
        t1.error$1(0, _s25_);
      else if (first === 10 || first === 13 || first === 12)
        t1.error$1(0, _s25_);
      else if (A.isHex(first)) {
        for (i = 0; i < 6; ++i) {
          next = t1.peekChar$0();
          if (next == null || !A.isHex(next))
            break;
          value *= 16;
          value += A.asHex(t1.readChar$0());
        }
        this.scanCharIf$1(A.character__isWhitespace$closure());
      } else
        value = t1.readChar$0();
      if (identifierStart) {
        t2 = value;
        t2 = t2 === 95 || A.isAlphabetic0(t2) || t2 >= 128;
      } else {
        t2 = value;
        t2 = t2 === 95 || A.isAlphabetic0(t2) || t2 >= 128 || A.isDigit(t2) || t2 === 45;
      }
      if (t2)
        try {
          t2 = A.Primitives_stringFromCharCode(value);
          return t2;
        } catch (exception) {
          if (type$.RangeError._is(A.unwrapException(exception)))
            t1.error$3$length$position(0, "Invalid Unicode code point.", t1._position - start, start);
          else
            throw exception;
        }
      else {
        if (!(value <= 31))
          if (!J.$eq$(value, 127))
            t1 = identifierStart && A.isDigit(value);
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          t1 = "" + A.Primitives_stringFromCharCode(92);
          if (value > 15)
            t1 += A.Primitives_stringFromCharCode(A.hexCharFor(B.JSNumber_methods._shrOtherPositive$1(value, 4)));
          t1 = t1 + A.Primitives_stringFromCharCode(A.hexCharFor(value & 15)) + A.Primitives_stringFromCharCode(32);
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else
          return A.String_String$fromCharCodes(A._setArrayType([92, value], type$.JSArray_int), 0, null);
      }
    },
    escape$0() {
      return this.escape$1$identifierStart(false);
    },
    scanCharIf$1(condition) {
      var t1 = this.scanner;
      if (!condition.call$1(t1.peekChar$0()))
        return false;
      t1.readChar$0();
      return true;
    },
    scanIdentChar$2$caseSensitive(char, caseSensitive) {
      var t3,
        t1 = new A.Parser_scanIdentChar_matches(caseSensitive, char),
        t2 = this.scanner,
        next = t2.peekChar$0();
      if (next != null && t1.call$1(next)) {
        t2.readChar$0();
        return true;
      } else if (next === 92) {
        t3 = t2._position;
        if (t1.call$1(A.consumeEscapedCharacter(t2)))
          return true;
        t2.set$state(new A._SpanScannerState(t2, t3));
      }
      return false;
    },
    scanIdentChar$1(char) {
      return this.scanIdentChar$2$caseSensitive(char, false);
    },
    expectIdentChar$1(letter) {
      var t1;
      if (this.scanIdentChar$2$caseSensitive(letter, false))
        return;
      t1 = this.scanner;
      t1.error$2$position(0, 'Expected "' + A.Primitives_stringFromCharCode(letter) + '".', t1._position);
    },
    lookingAtIdentifier$1($forward) {
      var t1, first, second;
      if ($forward == null)
        $forward = 0;
      t1 = this.scanner;
      first = t1.peekChar$1($forward);
      if (first == null)
        return false;
      if (first === 95 || A.isAlphabetic0(first) || first >= 128 || first === 92)
        return true;
      if (first !== 45)
        return false;
      second = t1.peekChar$1($forward + 1);
      if (second == null)
        return false;
      return second === 95 || A.isAlphabetic0(second) || second >= 128 || second === 92 || second === 45;
    },
    lookingAtIdentifier$0() {
      return this.lookingAtIdentifier$1(null);
    },
    lookingAtIdentifierBody$0() {
      var t1,
        next = this.scanner.peekChar$0();
      if (next != null)
        t1 = next === 95 || A.isAlphabetic0(next) || next >= 128 || A.isDigit(next) || next === 45 || next === 92;
      else
        t1 = false;
      return t1;
    },
    scanIdentifier$2$caseSensitive(text, caseSensitive) {
      var t1, t2, _this = this;
      if (!_this.lookingAtIdentifier$0())
        return false;
      t1 = _this.scanner;
      t2 = t1._position;
      if (_this._consumeIdentifier$2(text, caseSensitive) && !_this.lookingAtIdentifierBody$0())
        return true;
      else {
        t1.set$state(new A._SpanScannerState(t1, t2));
        return false;
      }
    },
    scanIdentifier$1(text) {
      return this.scanIdentifier$2$caseSensitive(text, false);
    },
    matchesIdentifier$1(text) {
      var t1, t2, result, _this = this;
      if (!_this.lookingAtIdentifier$0())
        return false;
      t1 = _this.scanner;
      t2 = t1._position;
      result = _this._consumeIdentifier$2(text, false) && !_this.lookingAtIdentifierBody$0();
      t1.set$state(new A._SpanScannerState(t1, t2));
      return result;
    },
    _consumeIdentifier$2(text, caseSensitive) {
      var t1, t2, t3;
      for (t1 = new A.CodeUnits(text), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (!this.scanIdentChar$2$caseSensitive(t3 == null ? t2._as(t3) : t3, caseSensitive))
          return false;
      }
      return true;
    },
    expectIdentifier$1(text) {
      var t2, t3, t4, t5, t6,
        t1 = this.scanner,
        start = t1._position;
      for (t2 = new A.CodeUnits(text), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = "Expected " + ('"' + text + '"'), t4 = t3 + ".", t5 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t6 = t2.__internal$_current;
        if (this.scanIdentChar$2$caseSensitive(t6 == null ? t5._as(t6) : t6, false))
          continue;
        t1.error$2$position(0, t4, start);
      }
      if (!this.lookingAtIdentifierBody$0())
        return;
      t1.error$2$position(0, t3, start);
    },
    rawText$1(consumer) {
      var t1 = this.scanner,
        start = t1._position;
      consumer.call$0();
      return t1.substring$1(0, start);
    },
    error$3(_, message, span, trace) {
      var exception = new A.StringScannerException(this.scanner.string, message, span);
      if (trace == null)
        throw A.wrapException(exception);
      else
        A.throwWithTrace(exception, trace);
    },
    error$2($receiver, message, span) {
      return this.error$3($receiver, message, span, null);
    },
    withErrorMessage$1$2(message, callback) {
      var error, stackTrace, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = error.get$span();
          A.throwWithTrace(new A.SourceSpanFormatException(error.get$source(), message, t1), stackTrace);
        } else
          throw exception;
      }
    },
    withErrorMessage$2(message, callback) {
      return this.withErrorMessage$1$2(message, callback, type$.dynamic);
    },
    wrapSpanFormatException$1$1(callback) {
      var error, stackTrace, span, startPosition, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          span = error.get$span();
          if (A.startsWithIgnoreCase(error._span_exception$_message, "expected")) {
            t1 = span;
            t1 = t1._end - t1._file$_start === 0;
          } else
            t1 = false;
          if (t1) {
            t1 = span;
            startPosition = this._firstNewlineBefore$1(A.FileLocation$_(t1.file, t1._file$_start).offset);
            t1 = span;
            if (!J.$eq$(startPosition, A.FileLocation$_(t1.file, t1._file$_start).offset))
              span = span.file.span$2(startPosition, startPosition);
          }
          A.throwWithTrace(new A.SassFormatException(error._span_exception$_message, span), stackTrace);
        } else
          throw exception;
      }
    },
    wrapSpanFormatException$1(callback) {
      return this.wrapSpanFormatException$1$1(callback, type$.dynamic);
    },
    _firstNewlineBefore$1(position) {
      var t1, lastNewline, codeUnit,
        index = position - 1;
      for (t1 = this.scanner.string, lastNewline = null; index >= 0;) {
        codeUnit = B.JSString_methods.codeUnitAt$1(t1, index);
        if (!(codeUnit === 32 || codeUnit === 9 || codeUnit === 10 || codeUnit === 13 || codeUnit === 12))
          return lastNewline == null ? position : lastNewline;
        if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12)
          lastNewline = index;
        --index;
      }
      return position;
    }
  };
  A.Parser__parseIdentifier_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        result = t1.identifier$0();
      t1.scanner.expectDone$0();
      return result;
    },
    $signature: 12
  };
  A.Parser_scanIdentChar_matches.prototype = {
    call$1(actual) {
      var t1 = this.char;
      return this.caseSensitive ? actual === t1 : A.characterEqualsIgnoreCase(t1, actual);
    },
    $signature: 118
  };
  A.SassParser.prototype = {
    get$currentIndentation() {
      return this._currentIndentation;
    },
    get$indented() {
      return true;
    },
    styleRuleSelector$0() {
      var t4,
        t1 = this.scanner,
        t2 = t1._position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
      do {
        buffer.addInterpolation$1(this.almostAnyValue$1$omitComments(true));
        t4 = t3._contents += A.Primitives_stringFromCharCode(10);
      } while (B.JSString_methods.endsWith$1(B.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4), ",") && this.scanCharIf$1(A.character__isNewline$closure()));
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    expectStatementSeparator$1($name) {
      var t1, _this = this;
      if (!_this.atEndOfStatement$0())
        _this._expectNewline$0();
      if (_this._peekIndentation$0() <= _this._currentIndentation)
        return;
      t1 = $name == null ? "here" : "beneath a " + $name;
      _this.scanner.error$2$position(0, "Nothing may be indented " + t1 + ".", _this._nextIndentationEnd.position);
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 10 || next === 13 || next === 12;
    },
    lookingAtChildren$0() {
      return this.atEndOfStatement$0() && this._peekIndentation$0() > this._currentIndentation;
    },
    importArgument$0() {
      var url, span, innerError, stackTrace, start, next, t2, exception, _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 117:
        case 85:
          start = new A._SpanScannerState(t1, t1._position);
          if (_this.scanIdentifier$1("url"))
            if (t1.scanChar$1(40)) {
              t1.set$state(start);
              return _this.super$StylesheetParser$importArgument();
            } else
              t1.set$state(start);
          break;
        case 39:
        case 34:
          return _this.super$StylesheetParser$importArgument();
      }
      start = new A._SpanScannerState(t1, t1._position);
      next = t1.peekChar$0();
      while (true) {
        if (next != null)
          if (next !== 44)
            if (next !== 59)
              t2 = !(next === 10 || next === 13 || next === 12);
            else
              t2 = false;
          else
            t2 = false;
        else
          t2 = false;
        if (!t2)
          break;
        t1.readChar$0();
        next = t1.peekChar$0();
      }
      url = t1.substring$1(0, start.position);
      span = t1.spanFrom$1(start);
      if (_this.isPlainImportUrl$1(url))
        return new A.StaticImport(A.Interpolation$(A._setArrayType([A.serializeValue(new A.SassString(url, true), true, true)], type$.JSArray_Object), span), null, span);
      else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new A.DynamicImport(t1, span);
        } catch (exception) {
          t1 = A.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            stackTrace = A.getTraceFromException(exception);
            _this.error$3(0, "Invalid URL: " + J.get$message$x(innerError), span, stackTrace);
          } else
            throw exception;
        }
    },
    scanElse$1(ifIndentation) {
      var t1, t2, startIndentation, startNextIndentation, startNextIndentationEnd, _this = this;
      if (_this._peekIndentation$0() !== ifIndentation)
        return false;
      t1 = _this.scanner;
      t2 = t1._position;
      startIndentation = _this._currentIndentation;
      startNextIndentation = _this._nextIndentation;
      startNextIndentationEnd = _this._nextIndentationEnd;
      _this._readIndentation$0();
      if (t1.scanChar$1(64) && _this.scanIdentifier$1("else"))
        return true;
      t1.set$state(new A._SpanScannerState(t1, t2));
      _this._currentIndentation = startIndentation;
      _this._nextIndentation = startNextIndentation;
      _this._nextIndentationEnd = startNextIndentationEnd;
      return false;
    },
    children$1(_, child) {
      var children = A._setArrayType([], type$.JSArray_Statement);
      this._whileIndentedLower$1(new A.SassParser_children_closure(this, child, children));
      return children;
    },
    statements$1(statement) {
      var statements, t2, child,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first === 9 || first === 32)
        t1.error$3$length$position(0, "Indenting at the beginning of the document is illegal.", t1._position, 0);
      statements = A._setArrayType([], type$.JSArray_Statement);
      for (t2 = t1.string.length; t1._position !== t2;) {
        child = this._child$1(statement);
        if (child != null)
          statements.push(child);
        this._readIndentation$0();
      }
      return statements;
    },
    _child$1(child) {
      var _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
        case 10:
        case 12:
          return null;
        case 36:
          return _this.variableDeclarationWithoutNamespace$0();
        case 47:
          switch (t1.peekChar$1(1)) {
            case 47:
              return _this._sass$_silentComment$0();
            case 42:
              return _this._sass$_loudComment$0();
            default:
              return child.call$0();
          }
        default:
          return child.call$0();
      }
    },
    _sass$_silentComment$0() {
      var buffer, parentIndentation, t3, t4, t5, commentPrefix, i, t6, i0, t7, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      t1.expect$1("//");
      buffer = new A.StringBuffer("");
      parentIndentation = _this._currentIndentation;
      t3 = t1.string.length;
      t4 = 1 + parentIndentation;
      t5 = 2 + parentIndentation;
      $label0$0:
        do {
          commentPrefix = t1.scanChar$1(47) ? "///" : "//";
          for (i = commentPrefix.length; true;) {
            t6 = buffer._contents += commentPrefix;
            for (i0 = i; i0 < _this._currentIndentation - parentIndentation; ++i0) {
              t6 += A.Primitives_stringFromCharCode(32);
              buffer._contents = t6;
            }
            while (true) {
              if (t1._position !== t3) {
                t7 = t1.peekChar$0();
                t7 = !(t7 === 10 || t7 === 13 || t7 === 12);
              } else
                t7 = false;
              if (!t7)
                break;
              t6 += A.Primitives_stringFromCharCode(t1.readChar$0());
              buffer._contents = t6;
            }
            buffer._contents = t6 + "\n";
            if (_this._peekIndentation$0() < parentIndentation)
              break $label0$0;
            if (_this._peekIndentation$0() === parentIndentation) {
              if (t1.peekChar$1(t4) === 47 && t1.peekChar$1(t5) === 47)
                _this._readIndentation$0();
              break;
            }
            _this._readIndentation$0();
          }
        } while (t1.scan$1("//"));
      t3 = buffer._contents;
      return _this.lastSilentComment = new A.SilentComment(t3.charCodeAt(0) == 0 ? t3 : t3, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _sass$_loudComment$0() {
      var t3, t4, buffer, parentIndentation, t5, t6, first, beginningOfComment, t7, end, i, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      t1.expect$1("/*");
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t3._contents = "" + "/*";
      parentIndentation = _this._currentIndentation;
      for (t5 = t1.string, t6 = t5.length, first = true; true; first = false) {
        if (first) {
          beginningOfComment = t1._position;
          _this.spaces$0();
          t7 = t1.peekChar$0();
          if (t7 === 10 || t7 === 13 || t7 === 12) {
            _this._readIndentation$0();
            t7 = t3._contents += A.Primitives_stringFromCharCode(32);
          } else {
            end = t1._position;
            t7 = t3._contents += B.JSString_methods.substring$2(t5, beginningOfComment, end);
          }
        } else {
          t7 = t3._contents += "\n";
          t7 += " * ";
          t3._contents = t7;
        }
        for (i = 3; i < _this._currentIndentation - parentIndentation; ++i) {
          t7 += A.Primitives_stringFromCharCode(32);
          t3._contents = t7;
        }
        $label0$1:
          for (; t1._position !== t6;)
            switch (t1.peekChar$0()) {
              case 10:
              case 13:
              case 12:
                break $label0$1;
              case 35:
                if (t1.peekChar$1(1) === 123) {
                  t7 = _this.singleInterpolation$0();
                  buffer._flushText$0();
                  t4.push(t7);
                } else
                  t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                break;
              default:
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                break;
            }
        if (_this._peekIndentation$0() <= parentIndentation)
          break;
        for (; _this._lookingAtDoubleNewline$0();) {
          _this._expectNewline$0();
          t7 = t3._contents += "\n";
          t3._contents = t7 + " *";
        }
        _this._readIndentation$0();
      }
      t4 = t3._contents;
      if (!B.JSString_methods.endsWith$1(B.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4), "*/"))
        t3._contents += " */";
      return new A.LoudComment(buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2))));
    },
    whitespaceWithoutComments$0() {
      var t1, t2, next;
      for (t1 = this.scanner, t2 = t1.string.length; t1._position !== t2;) {
        next = t1.peekChar$0();
        if (next !== 9 && next !== 32)
          break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1("/*");
      for (; true;) {
        next = t1.readChar$0();
        if (next === 10 || next === 13 || next === 12)
          t1.error$1(0, "expected */.");
        if (next !== 42)
          continue;
        do
          next = t1.readChar$0();
        while (next === 42);
        if (next === 47)
          break;
      }
    },
    _expectNewline$0() {
      var t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 59:
          t1.error$1(0, "semicolons aren't allowed in the indented syntax.");
          break;
        case 13:
          t1.readChar$0();
          if (t1.peekChar$0() === 10)
            t1.readChar$0();
          return;
        case 10:
        case 12:
          t1.readChar$0();
          return;
        default:
          t1.error$1(0, "expected newline.");
      }
    },
    _lookingAtDoubleNewline$0() {
      var nextChar,
        t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
          nextChar = t1.peekChar$1(1);
          if (nextChar === 10) {
            t1 = t1.peekChar$1(2);
            return t1 === 10 || t1 === 13 || t1 === 12;
          }
          return nextChar === 13 || nextChar === 12;
        case 10:
        case 12:
          t1 = t1.peekChar$1(1);
          return t1 === 10 || t1 === 13 || t1 === 12;
        default:
          return false;
      }
    },
    _whileIndentedLower$1(body) {
      var t1, t2, childIndentation, indentation, t3, t4, _this = this,
        parentIndentation = _this._currentIndentation;
      for (t1 = _this.scanner, t2 = t1._sourceFile, childIndentation = null; _this._peekIndentation$0() > parentIndentation;) {
        indentation = _this._readIndentation$0();
        if (childIndentation == null)
          childIndentation = indentation;
        if (childIndentation !== indentation) {
          t3 = t1._position;
          t4 = t2.getColumn$1(t3);
          t1.error$3$length$position(0, "Inconsistent indentation, expected " + childIndentation + " spaces.", t2.getColumn$1(t1._position), t3 - t4);
        }
        body.call$0();
      }
    },
    _readIndentation$0() {
      var t1, _this = this,
        currentIndentation = _this._nextIndentation;
      if (currentIndentation == null)
        currentIndentation = _this._nextIndentation = _this._peekIndentation$0();
      _this._currentIndentation = currentIndentation;
      t1 = _this._nextIndentationEnd;
      t1.toString;
      _this.scanner.set$state(t1);
      _this._nextIndentationEnd = _this._nextIndentation = null;
      return currentIndentation;
    },
    _peekIndentation$0() {
      var t1, t2, t3, start, containsTab, containsSpace, nextIndentation, next, t4, _this = this,
        cached = _this._nextIndentation;
      if (cached != null)
        return cached;
      t1 = _this.scanner;
      t2 = t1._position;
      t3 = t1.string.length;
      if (t2 === t3) {
        _this._nextIndentation = 0;
        _this._nextIndentationEnd = new A._SpanScannerState(t1, t2);
        return 0;
      }
      start = new A._SpanScannerState(t1, t2);
      if (!_this.scanCharIf$1(A.character__isNewline$closure()))
        t1.error$2$position(0, "Expected newline.", t1._position);
      containsTab = A._Cell$();
      containsSpace = A._Cell$();
      nextIndentation = A._Cell$();
      t2 = nextIndentation.__late_helper$_name;
      do {
        containsSpace._value = containsTab._value = false;
        nextIndentation._value = 0;
        for (; true;) {
          next = t1.peekChar$0();
          if (next === 32)
            containsSpace._value = true;
          else if (next === 9)
            containsTab._value = true;
          else
            break;
          t4 = nextIndentation._value;
          if (t4 === nextIndentation)
            A.throwExpression(A.LateError$localNI(t2));
          nextIndentation._value = t4 + 1;
          t1.readChar$0();
        }
        t4 = t1._position;
        if (t4 === t3) {
          _this._nextIndentation = 0;
          _this._nextIndentationEnd = new A._SpanScannerState(t1, t4);
          t1.set$state(start);
          return 0;
        }
      } while (_this.scanCharIf$1(A.character__isNewline$closure()));
      t2 = containsTab._readLocal$0();
      t3 = containsSpace._readLocal$0();
      if (t2) {
        if (t3) {
          t2 = t1._position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(0, "Tabs and spaces may not be mixed.", t3.getColumn$1(t1._position), t2 - t4);
        } else if (_this._spaces === true) {
          t2 = t1._position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(0, "Expected spaces, was tabs.", t3.getColumn$1(t1._position), t2 - t4);
        }
      } else if (t3 && _this._spaces === false) {
        t2 = t1._position;
        t3 = t1._sourceFile;
        t4 = t3.getColumn$1(t2);
        t1.error$3$length$position(0, "Expected tabs, was spaces.", t3.getColumn$1(t1._position), t2 - t4);
      }
      _this._nextIndentation = nextIndentation._readLocal$0();
      if (nextIndentation._readLocal$0() > 0)
        if (_this._spaces == null)
          _this._spaces = containsSpace._readLocal$0();
      _this._nextIndentationEnd = new A._SpanScannerState(t1, t1._position);
      t1.set$state(start);
      return nextIndentation._readLocal$0();
    }
  };
  A.SassParser_children_closure.prototype = {
    call$0() {
      var parsedChild = this.$this._child$1(this.child);
      if (parsedChild != null)
        this.children.push(parsedChild);
    },
    $signature: 0
  };
  A.ScssParser.prototype = {
    get$indented() {
      return false;
    },
    get$currentIndentation() {
      return 0;
    },
    styleRuleSelector$0() {
      return this.almostAnyValue$0();
    },
    expectStatementSeparator$1($name) {
      var t1, next;
      this.whitespaceWithoutComments$0();
      t1 = this.scanner;
      if (t1._position === t1.string.length)
        return;
      next = t1.peekChar$0();
      if (next === 59 || next === 125)
        return;
      t1.expectChar$1(59);
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 59 || next === 125 || next === 123;
    },
    lookingAtChildren$0() {
      return this.scanner.peekChar$0() === 123;
    },
    scanElse$1(ifIndentation) {
      var t3, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      _this.whitespace$0();
      t3 = t1._position;
      if (t1.scanChar$1(64)) {
        if (_this.scanIdentifier$2$caseSensitive("else", true))
          return true;
        if (_this.scanIdentifier$2$caseSensitive("elseif", true)) {
          _this.logger.warn$3$deprecation$span(0, "@elseif is deprecated and will not be supported in future Sass versions.\n\nRecommendation: @else if", true, t1.spanFrom$1(new A._SpanScannerState(t1, t3)));
          t1.set$position(t1._position - 2);
          return true;
        }
      }
      t1.set$state(new A._SpanScannerState(t1, t2));
      return false;
    },
    children$1(_, child) {
      var children, _this = this,
        t1 = _this.scanner;
      t1.expectChar$1(123);
      _this.whitespaceWithoutComments$0();
      children = A._setArrayType([], type$.JSArray_Statement);
      for (; true;)
        switch (t1.peekChar$0()) {
          case 36:
            children.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                children.push(_this._silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                children.push(_this._loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                children.push(child.call$0());
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          case 125:
            t1.expectChar$1(125);
            return children;
          default:
            children.push(child.call$0());
            break;
        }
    },
    statements$1(statement) {
      var t1, t2, child, _this = this,
        statements = A._setArrayType([], type$.JSArray_Statement);
      _this.whitespaceWithoutComments$0();
      for (t1 = _this.scanner, t2 = t1.string.length; t1._position !== t2;)
        switch (t1.peekChar$0()) {
          case 36:
            statements.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                statements.push(_this._silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                statements.push(_this._loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                child = statement.call$0();
                if (child != null)
                  statements.push(child);
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          default:
            child = statement.call$0();
            if (child != null)
              statements.push(child);
            break;
        }
      return statements;
    },
    _silentComment$0() {
      var t2, t3, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      t1.expect$1("//");
      t2 = t1.string.length;
      do {
        while (true) {
          if (t1._position !== t2) {
            t3 = t1.readChar$0();
            t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
          } else
            t3 = false;
          if (!t3)
            break;
        }
        if (t1._position === t2)
          break;
        _this.whitespaceWithoutComments$0();
      } while (t1.scan$1("//"));
      if (_this.get$plainCss())
        _this.error$2(0, string$.Silent, t1.spanFrom$1(start));
      return _this.lastSilentComment = new A.SilentComment(t1.substring$1(0, start.position), t1.spanFrom$1(start));
    },
    _loudComment$0() {
      var t3, t4, buffer, t5, endPosition, t6, result,
        t1 = this.scanner,
        t2 = t1._position;
      t1.expect$1("/*");
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t3._contents = "" + "/*";
      for (; true;)
        switch (t1.peekChar$0()) {
          case 35:
            if (t1.peekChar$1(1) === 123) {
              t5 = this.singleInterpolation$0();
              buffer._flushText$0();
              t4.push(t5);
            } else
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 42:
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            if (t1.peekChar$0() !== 47)
              break;
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._position;
            t5 = t1._sourceFile;
            t6 = new A._SpanScannerState(t1, t2).position;
            t1 = new A._FileSpan(t5, t6, endPosition);
            t1._FileSpan$3(t5, t6, endPosition);
            t6 = type$.Object;
            t5 = A.List_List$of(t4, true, t6);
            t2 = t3._contents;
            if (t2.length !== 0)
              t5.push(t2.charCodeAt(0) == 0 ? t2 : t2);
            result = A.List_List$from(t5, false, t6);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t2 = new A.Interpolation(result, t1);
            t2.Interpolation$2(t5, t1);
            return new A.LoudComment(t2);
          case 13:
            t1.readChar$0();
            if (t1.peekChar$0() !== 10)
              t3._contents += A.Primitives_stringFromCharCode(10);
            break;
          case 12:
            t1.readChar$0();
            t3._contents += A.Primitives_stringFromCharCode(10);
            break;
          default:
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            break;
        }
    }
  };
  A.SelectorParser.prototype = {
    parse$0(_) {
      return this.wrapSpanFormatException$1(new A.SelectorParser_parse_closure(this));
    },
    parseCompoundSelector$0() {
      return this.wrapSpanFormatException$1(new A.SelectorParser_parseCompoundSelector_closure(this));
    },
    _selectorList$0() {
      var t3, t4, lineBreak, _this = this,
        t1 = _this.scanner,
        t2 = t1._sourceFile,
        previousLine = t2.getLine$1(t1._position),
        components = A._setArrayType([_this._complexSelector$0()], type$.JSArray_ComplexSelector);
      _this.whitespace$0();
      for (t3 = t1.string.length; t1.scanChar$1(44);) {
        _this.whitespace$0();
        if (t1.peekChar$0() === 44)
          continue;
        t4 = t1._position;
        if (t4 === t3)
          break;
        lineBreak = t2.getLine$1(t4) !== previousLine;
        if (lineBreak)
          previousLine = t2.getLine$1(t1._position);
        components.push(_this._complexSelector$1$lineBreak(lineBreak));
      }
      return A.SelectorList$(components);
    },
    _complexSelector$1$lineBreak(lineBreak) {
      var t2, t3, t4, lastCompound, initialCombinators, next, t5, result, _this = this,
        t1 = type$.JSArray_Combinator,
        combinators = A._setArrayType([], t1),
        components = A._setArrayType([], type$.JSArray_ComplexSelectorComponent);
      $label0$1:
        for (t2 = _this.scanner, t3 = B.Set_2Vk2._map, t4 = type$.Combinator, lastCompound = null, initialCombinators = null; true;) {
          _this.whitespace$0();
          next = t2.peekChar$0();
          switch (next) {
            case 43:
              t2.readChar$0();
              combinators.push(B.Combinator_4QF);
              break;
            case 62:
              t2.readChar$0();
              combinators.push(B.Combinator_Cht);
              break;
            case 126:
              t2.readChar$0();
              combinators.push(B.Combinator_Htt);
              break;
            default:
              if (next != null)
                t5 = !t3.containsKey$1(next) && !_this.lookingAtIdentifier$0();
              else
                t5 = true;
              if (t5)
                break $label0$1;
              if (lastCompound != null) {
                result = A.List_List$from(combinators, false, t4);
                result.fixed$length = Array;
                result.immutable$list = Array;
                components.push(new A.ComplexSelectorComponent(lastCompound, result));
              } else if (combinators.length !== 0)
                initialCombinators = combinators;
              lastCompound = _this._compoundSelector$0();
              combinators = A._setArrayType([], t1);
              if (t2.peekChar$0() === 38)
                t2.error$1(0, '"&" may only used at the beginning of a compound selector.');
              break;
          }
        }
      if (lastCompound != null)
        components.push(new A.ComplexSelectorComponent(lastCompound, A.List_List$unmodifiable(combinators, t4)));
      else if (combinators.length !== 0)
        initialCombinators = combinators;
      else
        t2.error$1(0, "expected selector.");
      return A.ComplexSelector$(initialCombinators == null ? B.List_empty0 : initialCombinators, components, lineBreak);
    },
    _complexSelector$0() {
      return this._complexSelector$1$lineBreak(false);
    },
    _compoundSelector$0() {
      var t2,
        components = A._setArrayType([this._simpleSelector$0()], type$.JSArray_SimpleSelector),
        t1 = this.scanner;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 === 42 || t2 === 91 || t2 === 46 || t2 === 35 || t2 === 37 || t2 === 58))
          break;
        components.push(this._simpleSelector$1$allowParent(false));
      }
      return A.CompoundSelector$(components);
    },
    _simpleSelector$1$allowParent(allowParent) {
      var $name, text, t3, suffix, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      if (allowParent == null)
        allowParent = _this._allowParent;
      switch (t1.peekChar$0()) {
        case 91:
          return _this._attributeSelector$0();
        case 46:
          t1.expectChar$1(46);
          return new A.ClassSelector(_this.identifier$0());
        case 35:
          t1.expectChar$1(35);
          return new A.IDSelector(_this.identifier$0());
        case 37:
          t1.expectChar$1(37);
          $name = _this.identifier$0();
          return new A.PlaceholderSelector($name);
        case 58:
          return _this._pseudoSelector$0();
        case 38:
          t1.expectChar$1(38);
          if (_this.lookingAtIdentifierBody$0()) {
            text = new A.StringBuffer("");
            _this._identifierBody$1(text);
            if (text._contents.length === 0)
              t1.error$1(0, "Expected identifier body.");
            t3 = text._contents;
            suffix = t3.charCodeAt(0) == 0 ? t3 : t3;
          } else
            suffix = null;
          if (!allowParent)
            _this.error$2(0, "Parent selectors aren't allowed here.", t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
          return new A.ParentSelector(suffix);
        default:
          return _this._typeOrUniversalSelector$0();
      }
    },
    _simpleSelector$0() {
      return this._simpleSelector$1$allowParent(null);
    },
    _attributeSelector$0() {
      var $name, operator, next, value, modifier, _this = this, _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(91);
      _this.whitespace$0();
      $name = _this._attributeName$0();
      _this.whitespace$0();
      if (t1.scanChar$1(93))
        return new A.AttributeSelector($name, _null, _null, _null);
      operator = _this._attributeOperator$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      value = next === 39 || next === 34 ? _this.string$0() : _this.identifier$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      modifier = next != null && A.isAlphabetic0(next) ? A.Primitives_stringFromCharCode(t1.readChar$0()) : _null;
      t1.expectChar$1(93);
      return new A.AttributeSelector($name, operator, value, modifier);
    },
    _attributeName$0() {
      var nameOrNamespace, _this = this,
        t1 = _this.scanner;
      if (t1.scanChar$1(42)) {
        t1.expectChar$1(124);
        return new A.QualifiedName(_this.identifier$0(), "*");
      }
      if (t1.scanChar$1(124))
        return new A.QualifiedName(_this.identifier$0(), "");
      nameOrNamespace = _this.identifier$0();
      if (t1.peekChar$0() !== 124 || t1.peekChar$1(1) === 61)
        return new A.QualifiedName(nameOrNamespace, null);
      t1.readChar$0();
      return new A.QualifiedName(_this.identifier$0(), nameOrNamespace);
    },
    _attributeOperator$0() {
      var t1 = this.scanner,
        t2 = t1._position;
      switch (t1.readChar$0()) {
        case 61:
          return B.AttributeOperator_ES6;
        case 126:
          t1.expectChar$1(61);
          return B.AttributeOperator_r60;
        case 124:
          t1.expectChar$1(61);
          return B.AttributeOperator_ivT;
        case 94:
          t1.expectChar$1(61);
          return B.AttributeOperator_eot;
        case 36:
          t1.expectChar$1(61);
          return B.AttributeOperator_BGd;
        case 42:
          t1.expectChar$1(61);
          return B.AttributeOperator_8aB;
        default:
          t1.error$2$position(0, 'Expected "]".', t2);
      }
    },
    _pseudoSelector$0() {
      var element, $name, unvendored, selector, argument, t2, _this = this, _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(58);
      element = t1.scanChar$1(58);
      $name = _this.identifier$0();
      if (!t1.scanChar$1(40))
        return A.PseudoSelector$($name, _null, element, _null);
      _this.whitespace$0();
      unvendored = A.unvendor($name);
      if (element)
        if ($._selectorPseudoElements.contains$1(0, unvendored)) {
          selector = _this._selectorList$0();
          argument = _null;
        } else {
          argument = _this.declarationValue$1$allowEmpty(true);
          selector = _null;
        }
      else if ($._selectorPseudoClasses.contains$1(0, unvendored)) {
        selector = _this._selectorList$0();
        argument = _null;
      } else if (unvendored === "nth-child" || unvendored === "nth-last-child") {
        argument = _this._aNPlusB$0();
        _this.whitespace$0();
        t2 = t1.peekChar$1(-1);
        if ((t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12) && t1.peekChar$0() !== 41) {
          _this.expectIdentifier$1("of");
          argument += " of";
          _this.whitespace$0();
          selector = _this._selectorList$0();
        } else
          selector = _null;
      } else {
        argument = B.JSString_methods.trimRight$0(_this.declarationValue$1$allowEmpty(true));
        selector = _null;
      }
      t1.expectChar$1(41);
      return A.PseudoSelector$($name, argument, element, selector);
    },
    _aNPlusB$0() {
      var t2, first, t3, next, last, _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 101:
        case 69:
          _this.expectIdentifier$1("even");
          return "even";
        case 111:
        case 79:
          _this.expectIdentifier$1("odd");
          return "odd";
        case 43:
        case 45:
          t2 = "" + A.Primitives_stringFromCharCode(t1.readChar$0());
          break;
        default:
          t2 = "";
      }
      first = t1.peekChar$0();
      if (first != null && A.isDigit(first)) {
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57))
            break;
          t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
        }
        _this.whitespace$0();
        if (!_this.scanIdentChar$1(110))
          return t2.charCodeAt(0) == 0 ? t2 : t2;
      } else
        _this.expectIdentChar$1(110);
      t2 += A.Primitives_stringFromCharCode(110);
      _this.whitespace$0();
      next = t1.peekChar$0();
      if (next !== 43 && next !== 45)
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
      _this.whitespace$0();
      last = t1.peekChar$0();
      if (last == null || !A.isDigit(last))
        t1.error$1(0, "Expected a number.");
      while (true) {
        t3 = t1.peekChar$0();
        if (!(t3 != null && t3 >= 48 && t3 <= 57))
          break;
        t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _typeOrUniversalSelector$0() {
      var nameOrNamespace, _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      if (first === 42) {
        t1.readChar$0();
        if (!t1.scanChar$1(124))
          return new A.UniversalSelector(null);
        if (t1.scanChar$1(42))
          return new A.UniversalSelector("*");
        else
          return new A.TypeSelector(new A.QualifiedName(_this.identifier$0(), "*"));
      } else if (first === 124) {
        t1.readChar$0();
        if (t1.scanChar$1(42))
          return new A.UniversalSelector("");
        else
          return new A.TypeSelector(new A.QualifiedName(_this.identifier$0(), ""));
      }
      nameOrNamespace = _this.identifier$0();
      if (!t1.scanChar$1(124))
        return new A.TypeSelector(new A.QualifiedName(nameOrNamespace, null));
      else if (t1.scanChar$1(42))
        return new A.UniversalSelector(nameOrNamespace);
      else
        return new A.TypeSelector(new A.QualifiedName(_this.identifier$0(), nameOrNamespace));
    }
  };
  A.SelectorParser_parse_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        selector = t1._selectorList$0();
      t1 = t1.scanner;
      if (t1._position !== t1.string.length)
        t1.error$1(0, "expected selector.");
      return selector;
    },
    $signature: 119
  };
  A.SelectorParser_parseCompoundSelector_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        compound = t1._compoundSelector$0();
      t1 = t1.scanner;
      if (t1._position !== t1.string.length)
        t1.error$1(0, "expected selector.");
      return compound;
    },
    $signature: 120
  };
  A.StylesheetParser.prototype = {
    parse$0(_) {
      return this.wrapSpanFormatException$1(new A.StylesheetParser_parse_closure(this));
    },
    parseArgumentDeclaration$0() {
      return this._parseSingleProduction$1$1(new A.StylesheetParser_parseArgumentDeclaration_closure(this), type$.ArgumentDeclaration);
    },
    _parseSingleProduction$1$1(production, $T) {
      return this.wrapSpanFormatException$1(new A.StylesheetParser__parseSingleProduction_closure(this, production, $T));
    },
    _statement$1$root(root) {
      var t2, _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 64:
          return _this.atRule$2$root(new A.StylesheetParser__statement_closure(_this), root);
        case 43:
          if (!_this.get$indented() || !_this.lookingAtIdentifier$1(1))
            return _this._styleRule$0();
          _this._isUseAllowed = false;
          t2 = t1._position;
          t1.readChar$0();
          return _this._includeRule$1(new A._SpanScannerState(t1, t2));
        case 61:
          if (!_this.get$indented())
            return _this._styleRule$0();
          _this._isUseAllowed = false;
          t2 = t1._position;
          t1.readChar$0();
          _this.whitespace$0();
          return _this._mixinRule$1(new A._SpanScannerState(t1, t2));
        case 125:
          t1.error$2$length(0, 'unmatched "}".', 1);
          break;
        default:
          return _this._inStyleRule || _this._inUnknownAtRule || _this._inMixin || _this._inContentBlock ? _this._declarationOrStyleRule$0() : _this._variableDeclarationOrStyleRule$0();
      }
    },
    _statement$0() {
      return this._statement$1$root(false);
    },
    variableDeclarationWithoutNamespace$2(namespace, start_) {
      var t1, start, $name, t2, value, flagStart, t3, guarded, global, flag, endPosition, t4, t5, t6, declaration, _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      if (start_ == null) {
        t1 = _this.scanner;
        start = new A._SpanScannerState(t1, t1._position);
      } else
        start = start_;
      $name = _this.variableName$0();
      t1 = namespace != null;
      if (t1)
        _this._assertPublic$2($name, new A.StylesheetParser_variableDeclarationWithoutNamespace_closure(_this, start));
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t2 = _this.scanner;
      t2.expectChar$1(58);
      _this.whitespace$0();
      value = _this._expression$0();
      flagStart = new A._SpanScannerState(t2, t2._position);
      for (t3 = t2.string, guarded = false, global = false; t2.scanChar$1(33);) {
        flag = _this.identifier$0();
        if (flag === "default")
          guarded = true;
        else if (flag === "global") {
          if (t1) {
            endPosition = t2._position;
            t4 = t2._sourceFile;
            t5 = flagStart.position;
            t6 = new A._FileSpan(t4, t5, endPosition);
            t6._FileSpan$3(t4, t5, endPosition);
            A.throwExpression(new A.StringScannerException(t3, "!global isn't allowed for variables in other modules.", t6));
          }
          global = true;
        } else {
          endPosition = t2._position;
          t4 = t2._sourceFile;
          t5 = flagStart.position;
          t6 = new A._FileSpan(t4, t5, endPosition);
          t6._FileSpan$3(t4, t5, endPosition);
          A.throwExpression(new A.StringScannerException(t3, "Invalid flag name.", t6));
        }
        _this.whitespace$0();
        flagStart = new A._SpanScannerState(t2, t2._position);
      }
      _this.expectStatementSeparator$1("variable declaration");
      declaration = A.VariableDeclaration$($name, value, t2.spanFrom$1(start), precedingComment, global, guarded, namespace);
      if (global)
        _this._globalVariables.putIfAbsent$2($name, new A.StylesheetParser_variableDeclarationWithoutNamespace_closure0(declaration));
      return declaration;
    },
    variableDeclarationWithoutNamespace$0() {
      return this.variableDeclarationWithoutNamespace$2(null, null);
    },
    _variableDeclarationOrStyleRule$0() {
      var t1, t2, variableOrInterpolation, t3, _this = this;
      if (_this.get$plainCss())
        return _this._styleRule$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._styleRule$0();
      if (!_this.lookingAtIdentifier$0())
        return _this._styleRule$0();
      t1 = _this.scanner;
      t2 = t1._position;
      variableOrInterpolation = _this._variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof A.VariableDeclaration)
        return variableOrInterpolation;
      else {
        t3 = new A.InterpolationBuffer(new A.StringBuffer(""), A._setArrayType([], type$.JSArray_Object));
        t3.addInterpolation$1(type$.Interpolation._as(variableOrInterpolation));
        return _this._styleRule$2(t3, new A._SpanScannerState(t1, t2));
      }
    },
    _declarationOrStyleRule$0() {
      var t1, t2, declarationOrBuffer, _this = this;
      if (_this.get$plainCss() && _this._inStyleRule && !_this._inUnknownAtRule)
        return _this._propertyOrVariableDeclaration$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._styleRule$0();
      t1 = _this.scanner;
      t2 = t1._position;
      declarationOrBuffer = _this._declarationOrBuffer$0();
      return type$.Statement._is(declarationOrBuffer) ? declarationOrBuffer : _this._styleRule$2(type$.InterpolationBuffer._as(declarationOrBuffer), new A._SpanScannerState(t1, t2));
    },
    _declarationOrBuffer$0() {
      var midBuffer, couldBeSelector, beforeDeclaration, additional, t3, startsWithPunctuation, variableOrInterpolation, t4, $name, postColonWhitespace, exception, _this = this, t1 = {},
        t2 = _this.scanner,
        start = new A._SpanScannerState(t2, t2._position),
        nameBuffer = new A.InterpolationBuffer(new A.StringBuffer(""), A._setArrayType([], type$.JSArray_Object)),
        first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46)
            t3 = first === 35 && t2.peekChar$1(1) !== 123;
          else
            t3 = true;
        else
          t3 = true;
      else
        t3 = true;
      if (t3) {
        t3 = t2.readChar$0();
        nameBuffer._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(t3);
        t3 = _this.rawText$1(_this.get$whitespace());
        nameBuffer._interpolation_buffer$_text._contents += t3;
        startsWithPunctuation = true;
      } else
        startsWithPunctuation = false;
      if (!_this._lookingAtInterpolatedIdentifier$0())
        return nameBuffer;
      variableOrInterpolation = startsWithPunctuation ? _this.interpolatedIdentifier$0() : _this._variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof A.VariableDeclaration)
        return variableOrInterpolation;
      else
        nameBuffer.addInterpolation$1(type$.Interpolation._as(variableOrInterpolation));
      _this._isUseAllowed = false;
      if (t2.matches$1("/*")) {
        t3 = _this.rawText$1(_this.get$loudComment());
        nameBuffer._interpolation_buffer$_text._contents += t3;
      }
      midBuffer = new A.StringBuffer("");
      t3 = _this.get$whitespace();
      midBuffer._contents += _this.rawText$1(t3);
      t4 = t2._position;
      if (!t2.scanChar$1(58)) {
        if (midBuffer._contents.length !== 0)
          nameBuffer._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(32);
        return nameBuffer;
      }
      midBuffer._contents += A.Primitives_stringFromCharCode(58);
      $name = nameBuffer.interpolation$1(t2.spanFrom$2(start, new A._SpanScannerState(t2, t4)));
      if (B.JSString_methods.startsWith$1($name.get$initialPlain(), "--")) {
        t1 = _this._interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1("custom property");
        return A.Declaration$($name, new A.StringExpression(t1, false), t2.spanFrom$1(start));
      }
      if (t2.scanChar$1(58)) {
        t1 = nameBuffer;
        t2 = t1._interpolation_buffer$_text;
        t3 = t2._contents += A.S(midBuffer);
        t2._contents = t3 + A.Primitives_stringFromCharCode(58);
        return t1;
      } else if (_this.get$indented() && _this._lookingAtInterpolatedIdentifier$0()) {
        t1 = nameBuffer;
        t1._interpolation_buffer$_text._contents += A.S(midBuffer);
        return t1;
      }
      postColonWhitespace = _this.rawText$1(t3);
      if (_this.lookingAtChildren$0())
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__declarationOrBuffer_closure($name));
      midBuffer._contents += postColonWhitespace;
      couldBeSelector = postColonWhitespace.length === 0 && _this._lookingAtInterpolatedIdentifier$0();
      beforeDeclaration = new A._SpanScannerState(t2, t2._position);
      t3 = t1.value = null;
      try {
        t3 = t1.value = _this._expression$0();
        if (_this.lookingAtChildren$0()) {
          if (couldBeSelector)
            _this.expectStatementSeparator$0();
        } else if (!_this.atEndOfStatement$0())
          _this.expectStatementSeparator$0();
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception))) {
          if (!couldBeSelector)
            throw exception;
          t2.set$state(beforeDeclaration);
          additional = _this.almostAnyValue$0();
          if (!_this.get$indented() && t2.peekChar$0() === 59)
            throw exception;
          nameBuffer._interpolation_buffer$_text._contents += A.S(midBuffer);
          nameBuffer.addInterpolation$1(additional);
          return nameBuffer;
        } else
          throw exception;
      }
      if (_this.lookingAtChildren$0())
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__declarationOrBuffer_closure0(t1, $name));
      else {
        _this.expectStatementSeparator$0();
        return A.Declaration$($name, t3, t2.spanFrom$1(start));
      }
    },
    _variableDeclarationOrInterpolation$0() {
      var t1, start, identifier, t2, buffer, _this = this;
      if (!_this.lookingAtIdentifier$0())
        return _this.interpolatedIdentifier$0();
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._position);
      identifier = _this.identifier$0();
      if (t1.matches$1(".$")) {
        t1.readChar$0();
        return _this.variableDeclarationWithoutNamespace$2(identifier, start);
      } else {
        t2 = new A.StringBuffer("");
        buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
        t2._contents = "" + identifier;
        if (_this._lookingAtInterpolatedIdentifierBody$0())
          buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        return buffer.interpolation$1(t1.spanFrom$1(start));
      }
    },
    _styleRule$2(buffer, start_) {
      var t2, start, interpolation, wasInStyleRule, _this = this, t1 = {};
      _this._isUseAllowed = false;
      if (start_ == null) {
        t2 = _this.scanner;
        start = new A._SpanScannerState(t2, t2._position);
      } else
        start = start_;
      interpolation = t1.interpolation = _this.styleRuleSelector$0();
      if (buffer != null) {
        buffer.addInterpolation$1(interpolation);
        t2 = t1.interpolation = buffer.interpolation$1(_this.scanner.spanFrom$1(start));
      } else
        t2 = interpolation;
      if (t2.contents.length === 0)
        _this.scanner.error$1(0, 'expected "}".');
      wasInStyleRule = _this._inStyleRule;
      _this._inStyleRule = true;
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__styleRule_closure(t1, _this, wasInStyleRule, start));
    },
    _styleRule$0() {
      return this._styleRule$2(null, null);
    },
    _propertyOrVariableDeclaration$1$parseCustomProperties(parseCustomProperties) {
      var first, t3, nameBuffer, variableOrInterpolation, $name, value, _this = this,
        _s48_ = "Nested declarations aren't allowed in plain CSS.",
        t1 = {},
        t2 = _this.scanner,
        start = new A._SpanScannerState(t2, t2._position);
      t1.name = null;
      first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46)
            t3 = first === 35 && t2.peekChar$1(1) !== 123;
          else
            t3 = true;
        else
          t3 = true;
      else
        t3 = true;
      if (t3) {
        t3 = new A.StringBuffer("");
        nameBuffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
        t3._contents += A.Primitives_stringFromCharCode(t2.readChar$0());
        t3._contents += _this.rawText$1(_this.get$whitespace());
        nameBuffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        t3 = t1.name = nameBuffer.interpolation$1(t2.spanFrom$1(start));
      } else if (!_this.get$plainCss()) {
        variableOrInterpolation = _this._variableDeclarationOrInterpolation$0();
        if (variableOrInterpolation instanceof A.VariableDeclaration)
          return variableOrInterpolation;
        else {
          type$.Interpolation._as(variableOrInterpolation);
          t1.name = variableOrInterpolation;
        }
        t3 = variableOrInterpolation;
      } else {
        $name = _this.interpolatedIdentifier$0();
        t1.name = $name;
        t3 = $name;
      }
      _this.whitespace$0();
      t2.expectChar$1(58);
      if (parseCustomProperties && B.JSString_methods.startsWith$1(t3.get$initialPlain(), "--")) {
        t1 = _this._interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1("custom property");
        return A.Declaration$(t3, new A.StringExpression(t1, false), t2.spanFrom$1(start));
      }
      _this.whitespace$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss())
          t2.error$1(0, _s48_);
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__propertyOrVariableDeclaration_closure(t1));
      }
      value = _this._expression$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss())
          t2.error$1(0, _s48_);
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__propertyOrVariableDeclaration_closure0(t1, value));
      } else {
        _this.expectStatementSeparator$0();
        return A.Declaration$(t3, value, t2.spanFrom$1(start));
      }
    },
    _propertyOrVariableDeclaration$0() {
      return this._propertyOrVariableDeclaration$1$parseCustomProperties(true);
    },
    _declarationChild$0() {
      if (this.scanner.peekChar$0() === 64)
        return this._declarationAtRule$0();
      return this._propertyOrVariableDeclaration$1$parseCustomProperties(false);
    },
    atRule$2$root(child, root) {
      var $name, wasUseAllowed, value, optional, url, namespace, configuration, span, _this = this,
        _s9_ = "@use rule",
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      t1.expectChar$2$name(64, "@-rule");
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      wasUseAllowed = _this._isUseAllowed;
      _this._isUseAllowed = false;
      switch ($name.get$asPlain()) {
        case "at-root":
          return _this._atRootRule$1(start);
        case "content":
          return _this._contentRule$1(start);
        case "debug":
          return _this._debugRule$1(start);
        case "each":
          return _this._eachRule$2(start, child);
        case "else":
          return _this._disallowedAtRule$1(start);
        case "error":
          return _this._errorRule$1(start);
        case "extend":
          if (!_this._inStyleRule && !_this._inMixin && !_this._inContentBlock)
            _this.error$2(0, "@extend may only be used within style rules.", t1.spanFrom$1(start));
          value = _this.almostAnyValue$0();
          optional = t1.scanChar$1(33);
          if (optional)
            _this.expectIdentifier$1("optional");
          _this.expectStatementSeparator$1("@extend rule");
          return new A.ExtendRule(value, optional, t1.spanFrom$1(start));
        case "for":
          return _this._forRule$2(start, child);
        case "forward":
          _this._isUseAllowed = wasUseAllowed;
          if (!root)
            _this._disallowedAtRule$1(start);
          return _this._forwardRule$1(start);
        case "function":
          return _this._functionRule$1(start);
        case "if":
          return _this._ifRule$2(start, child);
        case "import":
          return _this._importRule$1(start);
        case "include":
          return _this._includeRule$1(start);
        case "media":
          return _this.mediaRule$1(start);
        case "mixin":
          return _this._mixinRule$1(start);
        case "-moz-document":
          return _this.mozDocumentRule$2(start, $name);
        case "return":
          return _this._disallowedAtRule$1(start);
        case "supports":
          return _this.supportsRule$1(start);
        case "use":
          _this._isUseAllowed = wasUseAllowed;
          if (!root)
            _this._disallowedAtRule$1(start);
          url = _this._urlString$0();
          _this.whitespace$0();
          namespace = _this._useNamespace$2(url, start);
          _this.whitespace$0();
          configuration = _this._configuration$0();
          _this.expectStatementSeparator$1(_s9_);
          span = t1.spanFrom$1(start);
          if (!_this._isUseAllowed)
            _this.error$2(0, "@use rules must be written before any other rules.", span);
          _this.expectStatementSeparator$1(_s9_);
          t1 = new A.UseRule(url, namespace, configuration == null ? B.List_empty4 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable), span);
          t1.UseRule$4$configuration(url, namespace, span, configuration);
          return t1;
        case "warn":
          return _this._warnRule$1(start);
        case "while":
          return _this._whileRule$2(start, child);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    _declarationAtRule$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      switch (_this._plainAtRuleName$0()) {
        case "content":
          return _this._contentRule$1(start);
        case "debug":
          return _this._debugRule$1(start);
        case "each":
          return _this._eachRule$2(start, _this.get$_declarationChild());
        case "else":
          return _this._disallowedAtRule$1(start);
        case "error":
          return _this._errorRule$1(start);
        case "for":
          return _this._forRule$2(start, _this.get$_declarationChild());
        case "if":
          return _this._ifRule$2(start, _this.get$_declarationChild());
        case "include":
          return _this._includeRule$1(start);
        case "warn":
          return _this._warnRule$1(start);
        case "while":
          return _this._whileRule$2(start, _this.get$_declarationChild());
        default:
          return _this._disallowedAtRule$1(start);
      }
    },
    _functionChild$0() {
      var state, variableDeclarationError, stackTrace, statement, t2, namespace, exception, t3, start, value, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() !== 64) {
        t2 = t1._position;
        state = new A._SpanScannerState(t1, t2);
        try {
          namespace = _this.identifier$0();
          t1.expectChar$1(46);
          t2 = _this.variableDeclarationWithoutNamespace$2(namespace, new A._SpanScannerState(t1, t2));
          return t2;
        } catch (exception) {
          t2 = A.unwrapException(exception);
          t3 = type$.SourceSpanFormatException;
          if (t3._is(t2)) {
            variableDeclarationError = t2;
            stackTrace = A.getTraceFromException(exception);
            t1.set$state(state);
            statement = null;
            try {
              statement = _this._declarationOrStyleRule$0();
            } catch (exception) {
              if (t3._is(A.unwrapException(exception)))
                throw A.wrapException(variableDeclarationError);
              else
                throw exception;
            }
            t2 = statement instanceof A.StyleRule ? "style rules" : "declarations";
            _this.error$3(0, "@function rules may not contain " + t2 + ".", statement.get$span(), stackTrace);
          } else
            throw exception;
        }
      }
      start = new A._SpanScannerState(t1, t1._position);
      switch (_this._plainAtRuleName$0()) {
        case "debug":
          return _this._debugRule$1(start);
        case "each":
          return _this._eachRule$2(start, _this.get$_functionChild());
        case "else":
          return _this._disallowedAtRule$1(start);
        case "error":
          return _this._errorRule$1(start);
        case "for":
          return _this._forRule$2(start, _this.get$_functionChild());
        case "if":
          return _this._ifRule$2(start, _this.get$_functionChild());
        case "return":
          value = _this._expression$0();
          _this.expectStatementSeparator$1("@return rule");
          return new A.ReturnRule(value, t1.spanFrom$1(start));
        case "warn":
          return _this._warnRule$1(start);
        case "while":
          return _this._whileRule$2(start, _this.get$_functionChild());
        default:
          return _this._disallowedAtRule$1(start);
      }
    },
    _plainAtRuleName$0() {
      this.scanner.expectChar$2$name(64, "@-rule");
      var $name = this.identifier$0();
      this.whitespace$0();
      return $name;
    },
    _atRootRule$1(start) {
      var query, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 40) {
        query = _this._atRootQuery$0();
        _this.whitespace$0();
        return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__atRootRule_closure(query));
      } else if (_this.lookingAtChildren$0())
        return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__atRootRule_closure0());
      else
        return A.AtRootRule$(A._setArrayType([_this._styleRule$0()], type$.JSArray_Statement), t1.spanFrom$1(start), null);
    },
    _atRootQuery$0() {
      var interpolation, t2, t3, t4, buffer, t5, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 35) {
        interpolation = _this.singleInterpolation$0();
        return A.Interpolation$(A._setArrayType([interpolation], type$.JSArray_Object), interpolation.get$span());
      }
      t2 = t1._position;
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t1.expectChar$1(40);
      t3._contents += A.Primitives_stringFromCharCode(40);
      _this.whitespace$0();
      t5 = _this._expression$0();
      buffer._flushText$0();
      t4.push(t5);
      if (t1.scanChar$1(58)) {
        _this.whitespace$0();
        t5 = t3._contents += A.Primitives_stringFromCharCode(58);
        t3._contents = t5 + A.Primitives_stringFromCharCode(32);
        t5 = _this._expression$0();
        buffer._flushText$0();
        t4.push(t5);
      }
      t1.expectChar$1(41);
      _this.whitespace$0();
      t3._contents += A.Primitives_stringFromCharCode(41);
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _contentRule$1(start) {
      var t1, $arguments, t2, t3, _this = this;
      if (!_this._inMixin)
        _this.error$2(0, "@content is only allowed within mixin declarations.", _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentInvocation$1$mixin(true);
      else {
        t2 = A.FileLocation$_(t1._sourceFile, t1._position);
        t3 = t2.offset;
        $arguments = A.ArgumentInvocation$empty(A._FileSpan$(t2.file, t3, t3));
      }
      _this.expectStatementSeparator$1("@content rule");
      return new A.ContentRule($arguments, t1.spanFrom$1(start));
    },
    _debugRule$1(start) {
      var value = this._expression$0();
      this.expectStatementSeparator$1("@debug rule");
      return new A.DebugRule(value, this.scanner.spanFrom$1(start));
    },
    _eachRule$2(start, child) {
      var variables, t1, _this = this,
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      variables = A._setArrayType([_this.variableName$0()], type$.JSArray_String);
      _this.whitespace$0();
      for (t1 = _this.scanner; t1.scanChar$1(44);) {
        _this.whitespace$0();
        t1.expectChar$1(36);
        variables.push(_this.identifier$1$normalize(true));
        _this.whitespace$0();
      }
      _this.expectIdentifier$1("in");
      _this.whitespace$0();
      return _this._withChildren$3(child, start, new A.StylesheetParser__eachRule_closure(_this, wasInControlDirective, variables, _this._expression$0()));
    },
    _errorRule$1(start) {
      var value = this._expression$0();
      this.expectStatementSeparator$1("@error rule");
      return new A.ErrorRule(value, this.scanner.spanFrom$1(start));
    },
    _functionRule$1(start) {
      var $name, $arguments, _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      $arguments = _this._argumentDeclaration$0();
      if (_this._inMixin || _this._inContentBlock)
        _this.error$2(0, "Mixins may not contain function declarations.", _this.scanner.spanFrom$1(start));
      else if (_this._inControlDirective)
        _this.error$2(0, "Functions may not be declared in control directives.", _this.scanner.spanFrom$1(start));
      switch (A.unvendor($name)) {
        case "calc":
        case "element":
        case "expression":
        case "url":
        case "and":
        case "or":
        case "not":
        case "clamp":
          _this.error$2(0, "Invalid function name.", _this.scanner.spanFrom$1(start));
          break;
      }
      _this.whitespace$0();
      return _this._withChildren$3(_this.get$_functionChild(), start, new A.StylesheetParser__functionRule_closure($name, $arguments, precedingComment));
    },
    _forRule$2(start, child) {
      var variable, from, _this = this, t1 = {},
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      variable = _this.variableName$0();
      _this.whitespace$0();
      _this.expectIdentifier$1("from");
      _this.whitespace$0();
      t1.exclusive = null;
      from = _this._expression$1$until(new A.StylesheetParser__forRule_closure(t1, _this));
      if (t1.exclusive == null)
        _this.scanner.error$1(0, 'Expected "to" or "through".');
      _this.whitespace$0();
      return _this._withChildren$3(child, start, new A.StylesheetParser__forRule_closure0(t1, _this, wasInControlDirective, variable, from, _this._expression$0()));
    },
    _forwardRule$1(start) {
      var prefix, members, shownMixinsAndFunctions, shownVariables, hiddenVariables, hiddenMixinsAndFunctions, configuration, span, t1, t2, t3, t4, _this = this, _null = null,
        url = _this._urlString$0();
      _this.whitespace$0();
      if (_this.scanIdentifier$1("as")) {
        _this.whitespace$0();
        prefix = _this.identifier$1$normalize(true);
        _this.scanner.expectChar$1(42);
        _this.whitespace$0();
      } else
        prefix = _null;
      if (_this.scanIdentifier$1("show")) {
        members = _this._memberList$0();
        shownMixinsAndFunctions = members.item1;
        shownVariables = members.item2;
        hiddenVariables = _null;
        hiddenMixinsAndFunctions = hiddenVariables;
      } else {
        if (_this.scanIdentifier$1("hide")) {
          members = _this._memberList$0();
          hiddenMixinsAndFunctions = members.item1;
          hiddenVariables = members.item2;
        } else {
          hiddenVariables = _null;
          hiddenMixinsAndFunctions = hiddenVariables;
        }
        shownVariables = _null;
        shownMixinsAndFunctions = shownVariables;
      }
      configuration = _this._configuration$1$allowGuarded(true);
      _this.expectStatementSeparator$1("@forward rule");
      span = _this.scanner.spanFrom$1(start);
      if (!_this._isUseAllowed)
        _this.error$2(0, "@forward rules must be written before any other rules.", span);
      if (shownMixinsAndFunctions != null) {
        shownVariables.toString;
        t1 = type$.String;
        t2 = A.LinkedHashSet_LinkedHashSet$of(shownMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = A.LinkedHashSet_LinkedHashSet$of(shownVariables, t1);
        t4 = configuration == null ? B.List_empty4 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable);
        return new A.ForwardRule(url, new A.UnmodifiableSetView(t2, t3), new A.UnmodifiableSetView(t1, t3), _null, _null, prefix, t4, span);
      } else if (hiddenMixinsAndFunctions != null) {
        hiddenVariables.toString;
        t1 = type$.String;
        t2 = A.LinkedHashSet_LinkedHashSet$of(hiddenMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = A.LinkedHashSet_LinkedHashSet$of(hiddenVariables, t1);
        t4 = configuration == null ? B.List_empty4 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable);
        return new A.ForwardRule(url, _null, _null, new A.UnmodifiableSetView(t2, t3), new A.UnmodifiableSetView(t1, t3), prefix, t4, span);
      } else
        return new A.ForwardRule(url, _null, _null, _null, _null, prefix, configuration == null ? B.List_empty4 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable), span);
    },
    _memberList$0() {
      var _this = this,
        t1 = type$.String,
        identifiers = A.LinkedHashSet_LinkedHashSet$_empty(t1),
        variables = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      t1 = _this.scanner;
      do {
        _this.whitespace$0();
        _this.withErrorMessage$2("Expected variable, mixin, or function name", new A.StylesheetParser__memberList_closure(_this, variables, identifiers));
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      return new A.Tuple2(identifiers, variables, type$.Tuple2_of_Set_String_and_Set_String);
    },
    _ifRule$2(start, child) {
      var condition, children, clauses, lastClause, span, _this = this,
        ifIndentation = _this.get$currentIndentation(),
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      condition = _this._expression$0();
      children = _this.children$1(0, child);
      _this.whitespaceWithoutComments$0();
      clauses = A._setArrayType([A.IfClause$(condition, children)], type$.JSArray_IfClause);
      while (true) {
        if (!_this.scanElse$1(ifIndentation)) {
          lastClause = null;
          break;
        }
        _this.whitespace$0();
        if (_this.scanIdentifier$1("if")) {
          _this.whitespace$0();
          clauses.push(A.IfClause$(_this._expression$0(), _this.children$1(0, child)));
        } else {
          lastClause = A.ElseClause$(_this.children$1(0, child));
          break;
        }
      }
      _this._inControlDirective = wasInControlDirective;
      span = _this.scanner.spanFrom$1(start);
      _this.whitespaceWithoutComments$0();
      return new A.IfRule(A.List_List$unmodifiable(clauses, type$.IfClause), lastClause, span);
    },
    _importRule$1(start) {
      var argument, _this = this,
        imports = A._setArrayType([], type$.JSArray_Import),
        t1 = _this.scanner;
      do {
        _this.whitespace$0();
        argument = _this.importArgument$0();
        if ((_this._inControlDirective || _this._inMixin) && argument instanceof A.DynamicImport)
          _this._disallowedAtRule$1(start);
        imports.push(argument);
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      _this.expectStatementSeparator$1("@import rule");
      t1 = t1.spanFrom$1(start);
      return new A.ImportRule(A.List_List$unmodifiable(imports, type$.Import), t1);
    },
    importArgument$0() {
      var url, urlSpan, innerError, stackTrace, modifiers, t2, exception, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position),
        next = t1.peekChar$0();
      if (next === 117 || next === 85) {
        url = _this.dynamicUrl$0();
        _this.whitespace$0();
        modifiers = _this.tryImportModifiers$0();
        return new A.StaticImport(A.Interpolation$(A._setArrayType([url], type$.JSArray_Object), t1.spanFrom$1(start)), modifiers, t1.spanFrom$1(start));
      }
      url = _this.string$0();
      urlSpan = t1.spanFrom$1(start);
      _this.whitespace$0();
      modifiers = _this.tryImportModifiers$0();
      if (_this.isPlainImportUrl$1(url) || modifiers != null) {
        t2 = urlSpan;
        return new A.StaticImport(A.Interpolation$(A._setArrayType([A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t2.file._decodedChars, t2._file$_start, t2._end), 0, null)], type$.JSArray_Object), urlSpan), modifiers, t1.spanFrom$1(start));
      } else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new A.DynamicImport(t1, urlSpan);
        } catch (exception) {
          t1 = A.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            stackTrace = A.getTraceFromException(exception);
            _this.error$3(0, "Invalid URL: " + J.get$message$x(innerError), urlSpan, stackTrace);
          } else
            throw exception;
        }
    },
    parseImportUrl$1(url) {
      var t1 = $.$get$windows();
      if (t1.style.rootLength$1(url) > 0 && !$.$get$url().style.isRootRelative$1(url))
        return t1.toUri$1(url).toString$0(0);
      A.Uri_parse(url);
      return url;
    },
    isPlainImportUrl$1(url) {
      var first;
      if (url.length < 5)
        return false;
      if (B.JSString_methods.endsWith$1(url, ".css"))
        return true;
      first = B.JSString_methods._codeUnitAt$1(url, 0);
      if (first === 47)
        return B.JSString_methods._codeUnitAt$1(url, 1) === 47;
      if (first !== 104)
        return false;
      return B.JSString_methods.startsWith$1(url, "http://") || B.JSString_methods.startsWith$1(url, "https://");
    },
    tryImportModifiers$0() {
      var t1, start, t2, t3, buffer, identifier, t4, $name, query, endPosition, t5, result, _this = this;
      if (!_this._lookingAtInterpolatedIdentifier$0() && _this.scanner.peekChar$0() !== 40)
        return null;
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._position);
      t2 = new A.StringBuffer("");
      t3 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t2, t3);
      for (; true;)
        if (_this._lookingAtInterpolatedIdentifier$0()) {
          if (!(t3.length === 0 && t2._contents.length === 0))
            t2._contents += A.Primitives_stringFromCharCode(32);
          identifier = _this.interpolatedIdentifier$0();
          buffer.addInterpolation$1(identifier);
          t4 = identifier.get$asPlain();
          $name = t4 == null ? null : t4.toLowerCase();
          if ($name !== "and" && t1.scanChar$1(40)) {
            if ($name === "supports") {
              query = _this._importSupportsQuery$0();
              t4 = !(query instanceof A.SupportsDeclaration);
              if (t4)
                t2._contents += A.Primitives_stringFromCharCode(40);
              buffer._flushText$0();
              t3.push(new A.SupportsExpression(query));
              if (t4)
                t2._contents += A.Primitives_stringFromCharCode(41);
            } else {
              t2._contents += A.Primitives_stringFromCharCode(40);
              buffer.addInterpolation$1(_this._interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(true, true));
              t2._contents += A.Primitives_stringFromCharCode(41);
            }
            t1.expectChar$1(41);
            _this.whitespace$0();
          } else {
            _this.whitespace$0();
            if (t1.scanChar$1(44)) {
              t2._contents += ", ";
              buffer.addInterpolation$1(_this._mediaQueryList$0());
              endPosition = t1._position;
              t4 = t1._sourceFile;
              t5 = start.position;
              t1 = new A._FileSpan(t4, t5, endPosition);
              t1._FileSpan$3(t4, t5, endPosition);
              t5 = type$.Object;
              t4 = A.List_List$of(t3, true, t5);
              t3 = t2._contents;
              if (t3.length !== 0)
                t4.push(t3.charCodeAt(0) == 0 ? t3 : t3);
              result = A.List_List$from(t4, false, t5);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t2 = new A.Interpolation(result, t1);
              t2.Interpolation$2(t4, t1);
              return t2;
            }
          }
        } else if (t1.peekChar$0() === 40) {
          if (!(t3.length === 0 && t2._contents.length === 0))
            t2._contents += A.Primitives_stringFromCharCode(32);
          buffer.addInterpolation$1(_this._mediaQueryList$0());
          endPosition = t1._position;
          t1 = t1._sourceFile;
          t4 = start.position;
          t5 = new A._FileSpan(t1, t4, endPosition);
          t5._FileSpan$3(t1, t4, endPosition);
          t4 = type$.Object;
          t3 = A.List_List$of(t3, true, t4);
          t1 = t2._contents;
          if (t1.length !== 0)
            t3.push(t1.charCodeAt(0) == 0 ? t1 : t1);
          result = A.List_List$from(t3, false, t4);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t1 = new A.Interpolation(result, t5);
          t1.Interpolation$2(t3, t5);
          return t1;
        } else {
          endPosition = t1._position;
          t1 = t1._sourceFile;
          t4 = start.position;
          t5 = new A._FileSpan(t1, t4, endPosition);
          t5._FileSpan$3(t1, t4, endPosition);
          t4 = type$.Object;
          t3 = A.List_List$of(t3, true, t4);
          t1 = t2._contents;
          if (t1.length !== 0)
            t3.push(t1.charCodeAt(0) == 0 ? t1 : t1);
          result = A.List_List$from(t3, false, t4);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t1 = new A.Interpolation(result, t5);
          t1.Interpolation$2(t3, t5);
          return t1;
        }
    },
    _importSupportsQuery$0() {
      var t1, t2, $function, $name, _this = this;
      if (_this.scanIdentifier$1("not")) {
        _this.whitespace$0();
        t1 = _this.scanner;
        t2 = t1._position;
        return new A.SupportsNegation(_this._supportsConditionInParens$0(), t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      } else {
        t1 = _this.scanner;
        if (t1.peekChar$0() === 40)
          return _this._supportsCondition$0();
        else {
          $function = _this._tryImportSupportsFunction$0();
          if ($function != null)
            return $function;
          t2 = t1._position;
          $name = _this._expression$0();
          t1.expectChar$1(58);
          return _this._supportsDeclarationValue$2($name, new A._SpanScannerState(t1, t2));
        }
      }
    },
    _tryImportSupportsFunction$0() {
      var t1, start, $name, value, _this = this;
      if (!_this._lookingAtInterpolatedIdentifier$0())
        return null;
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._position);
      $name = _this.interpolatedIdentifier$0();
      if (!t1.scanChar$1(40)) {
        t1.set$state(start);
        return null;
      }
      value = _this._interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(true, true);
      t1.expectChar$1(41);
      return new A.SupportsFunction($name, value, t1.spanFrom$1(start));
    },
    _includeRule$1(start) {
      var name0, namespace, $arguments, t2, t3, contentArguments, contentArguments_, wasInContentBlock, $content, _this = this, _null = null,
        $name = _this.identifier$0(),
        t1 = _this.scanner;
      if (t1.scanChar$1(46)) {
        name0 = _this._publicIdentifier$0();
        namespace = $name;
        $name = name0;
      } else {
        $name = A.stringReplaceAllUnchecked($name, "_", "-");
        namespace = _null;
      }
      _this.whitespace$0();
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentInvocation$1$mixin(true);
      else {
        t2 = A.FileLocation$_(t1._sourceFile, t1._position);
        t3 = t2.offset;
        $arguments = A.ArgumentInvocation$empty(A._FileSpan$(t2.file, t3, t3));
      }
      _this.whitespace$0();
      if (_this.scanIdentifier$1("using")) {
        _this.whitespace$0();
        contentArguments = _this._argumentDeclaration$0();
        _this.whitespace$0();
      } else
        contentArguments = _null;
      t2 = contentArguments == null;
      if (!t2 || _this.lookingAtChildren$0()) {
        if (t2) {
          t2 = A.FileLocation$_(t1._sourceFile, t1._position);
          t3 = t2.offset;
          contentArguments_ = new A.ArgumentDeclaration(B.List_empty6, _null, A._FileSpan$(t2.file, t3, t3));
        } else
          contentArguments_ = contentArguments;
        wasInContentBlock = _this._inContentBlock;
        _this._inContentBlock = true;
        $content = _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__includeRule_closure(contentArguments_));
        _this._inContentBlock = wasInContentBlock;
      } else {
        _this.expectStatementSeparator$0();
        $content = _null;
      }
      t1 = t1.spanFrom$2(start, start);
      return new A.IncludeRule(namespace, $name, $arguments, $content, t1.expand$1(0, ($content == null ? $arguments : $content).get$span()));
    },
    mediaRule$1(start) {
      return this._withChildren$3(this.get$_statement(), start, new A.StylesheetParser_mediaRule_closure(this._mediaQueryList$0()));
    },
    _mixinRule$1(start) {
      var $name, t1, $arguments, t2, t3, _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentDeclaration$0();
      else {
        t2 = A.FileLocation$_(t1._sourceFile, t1._position);
        t3 = t2.offset;
        $arguments = new A.ArgumentDeclaration(B.List_empty6, null, A._FileSpan$(t2.file, t3, t3));
      }
      if (_this._inMixin || _this._inContentBlock)
        _this.error$2(0, "Mixins may not contain mixin declarations.", t1.spanFrom$1(start));
      else if (_this._inControlDirective)
        _this.error$2(0, "Mixins may not be declared in control directives.", t1.spanFrom$1(start));
      _this.whitespace$0();
      _this._inMixin = true;
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__mixinRule_closure(_this, $name, $arguments, precedingComment));
    },
    mozDocumentRule$2(start, $name) {
      var t5, t6, t7, identifier, contents, argument, trailing, endPosition, t8, t9, start0, end, _this = this, _box_0 = {},
        t1 = _this.scanner,
        t2 = t1._position,
        t3 = new A.StringBuffer(""),
        t4 = A._setArrayType([], type$.JSArray_Object),
        buffer = new A.InterpolationBuffer(t3, t4);
      _box_0.needsDeprecationWarning = false;
      for (t5 = _this.get$whitespace(), t6 = t1.string; true;) {
        if (t1.peekChar$0() === 35) {
          t7 = _this.singleInterpolation$0();
          buffer._flushText$0();
          t4.push(t7);
          _box_0.needsDeprecationWarning = true;
        } else {
          t7 = t1._position;
          identifier = _this.identifier$0();
          switch (identifier) {
            case "url":
            case "url-prefix":
            case "domain":
              contents = _this._tryUrlContents$2$name(new A._SpanScannerState(t1, t7), identifier);
              if (contents != null)
                buffer.addInterpolation$1(contents);
              else {
                t1.expectChar$1(40);
                _this.whitespace$0();
                argument = _this.interpolatedString$0();
                t1.expectChar$1(41);
                t7 = t3._contents += identifier;
                t3._contents = t7 + A.Primitives_stringFromCharCode(40);
                buffer.addInterpolation$1(argument.asInterpolation$0());
                t3._contents += A.Primitives_stringFromCharCode(41);
              }
              t7 = t3._contents;
              trailing = t7.charCodeAt(0) == 0 ? t7 : t7;
              if (!B.JSString_methods.endsWith$1(trailing, "url-prefix()") && !B.JSString_methods.endsWith$1(trailing, "url-prefix('')") && !B.JSString_methods.endsWith$1(trailing, 'url-prefix("")'))
                _box_0.needsDeprecationWarning = true;
              break;
            case "regexp":
              t3._contents += "regexp(";
              t1.expectChar$1(40);
              buffer.addInterpolation$1(_this.interpolatedString$0().asInterpolation$0());
              t1.expectChar$1(41);
              t3._contents += A.Primitives_stringFromCharCode(41);
              _box_0.needsDeprecationWarning = true;
              break;
            default:
              endPosition = t1._position;
              t8 = t1._sourceFile;
              t9 = new A._FileSpan(t8, t7, endPosition);
              t9._FileSpan$3(t8, t7, endPosition);
              A.throwExpression(new A.StringScannerException(t6, "Invalid function name.", t9));
          }
        }
        _this.whitespace$0();
        if (!t1.scanChar$1(44))
          break;
        t3._contents += A.Primitives_stringFromCharCode(44);
        start0 = t1._position;
        t5.call$0();
        end = t1._position;
        t3._contents += B.JSString_methods.substring$2(t6, start0, end);
      }
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser_mozDocumentRule_closure(_box_0, _this, $name, buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)))));
    },
    supportsRule$1(start) {
      var _this = this,
        condition = _this._supportsCondition$0();
      _this.whitespace$0();
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser_supportsRule_closure(condition));
    },
    _useNamespace$2(url, start) {
      var namespace, basename, dot, t1, exception, _this = this;
      if (_this.scanIdentifier$1("as")) {
        _this.whitespace$0();
        return _this.scanner.scanChar$1(42) ? null : _this.identifier$0();
      }
      basename = url.get$pathSegments().length === 0 ? "" : B.JSArray_methods.get$last(url.get$pathSegments());
      dot = B.JSString_methods.indexOf$1(basename, ".");
      t1 = B.JSString_methods.startsWith$1(basename, "_") ? 1 : 0;
      namespace = B.JSString_methods.substring$2(basename, t1, dot === -1 ? basename.length : dot);
      try {
        t1 = A.SpanScanner$(namespace, null);
        t1 = new A.Parser0(t1, _this.logger)._parseIdentifier$0();
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.SassFormatException)
          _this.error$2(0, 'The default namespace "' + A.S(namespace) + '" is not a valid Sass identifier.\n\nRecommendation: add an "as" clause to define an explicit namespace.', _this.scanner.spanFrom$1(start));
        else
          throw exception;
      }
    },
    _configuration$1$allowGuarded(allowGuarded) {
      var variableNames, configuration, t1, t2, t3, $name, expression, t4, guarded, endPosition, t5, t6, span, _this = this;
      if (!_this.scanIdentifier$1("with"))
        return null;
      variableNames = A.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      configuration = A._setArrayType([], type$.JSArray_ConfiguredVariable);
      _this.whitespace$0();
      t1 = _this.scanner;
      t1.expectChar$1(40);
      for (t2 = t1.string; true;) {
        _this.whitespace$0();
        t3 = t1._position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        t1.expectChar$1(58);
        _this.whitespace$0();
        expression = _this.expressionUntilComma$0();
        t4 = t1._position;
        if (allowGuarded && t1.scanChar$1(33))
          if (_this.identifier$0() === "default") {
            _this.whitespace$0();
            guarded = true;
          } else {
            endPosition = t1._position;
            t5 = t1._sourceFile;
            t6 = new A._FileSpan(t5, t4, endPosition);
            t6._FileSpan$3(t5, t4, endPosition);
            A.throwExpression(new A.StringScannerException(t2, "Invalid flag name.", t6));
            guarded = false;
          }
        else
          guarded = false;
        endPosition = t1._position;
        t4 = t1._sourceFile;
        span = new A._FileSpan(t4, t3, endPosition);
        span._FileSpan$3(t4, t3, endPosition);
        if (variableNames.contains$1(0, $name))
          A.throwExpression(new A.StringScannerException(t2, "The same variable may only be configured once.", span));
        variableNames.add$1(0, $name);
        configuration.push(new A.ConfiguredVariable($name, expression, guarded, span));
        if (!t1.scanChar$1(44))
          break;
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0())
          break;
      }
      t1.expectChar$1(41);
      return configuration;
    },
    _configuration$0() {
      return this._configuration$1$allowGuarded(false);
    },
    _warnRule$1(start) {
      var value = this._expression$0();
      this.expectStatementSeparator$1("@warn rule");
      return new A.WarnRule(value, this.scanner.spanFrom$1(start));
    },
    _whileRule$2(start, child) {
      var _this = this,
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      return _this._withChildren$3(child, start, new A.StylesheetParser__whileRule_closure(_this, wasInControlDirective, _this._expression$0()));
    },
    unknownAtRule$2(start, $name) {
      var t2, t3, rule, _this = this, t1 = {},
        wasInUnknownAtRule = _this._inUnknownAtRule;
      _this._inUnknownAtRule = true;
      t1.value = null;
      t2 = _this.scanner;
      t3 = t2.peekChar$0() !== 33 && !_this.atEndOfStatement$0() ? t1.value = _this.almostAnyValue$0() : null;
      if (_this.lookingAtChildren$0())
        rule = _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser_unknownAtRule_closure(t1, $name));
      else {
        _this.expectStatementSeparator$0();
        rule = A.AtRule$($name, t2.spanFrom$1(start), null, t3);
      }
      _this._inUnknownAtRule = wasInUnknownAtRule;
      return rule;
    },
    _disallowedAtRule$1(start) {
      this.almostAnyValue$0();
      this.error$2(0, "This at-rule is not allowed here.", this.scanner.spanFrom$1(start));
    },
    _argumentDeclaration$0() {
      var $arguments, named, restArgument, t3, t4, $name, defaultValue, endPosition, t5, t6, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      $arguments = A._setArrayType([], type$.JSArray_Argument);
      named = A.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      t3 = t1.string;
      while (true) {
        if (!(t1.peekChar$0() === 36)) {
          restArgument = null;
          break;
        }
        t4 = t1._position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          defaultValue = _this.expressionUntilComma$0();
        } else {
          if (t1.scanChar$1(46)) {
            t1.expectChar$1(46);
            t1.expectChar$1(46);
            _this.whitespace$0();
            restArgument = $name;
            break;
          }
          defaultValue = null;
        }
        endPosition = t1._position;
        t5 = t1._sourceFile;
        t6 = new A._FileSpan(t5, t4, endPosition);
        t6._FileSpan$3(t5, t4, endPosition);
        $arguments.push(new A.Argument($name, defaultValue, t6));
        if (!named.add$1(0, $name))
          A.throwExpression(new A.StringScannerException(t3, "Duplicate argument.", B.JSArray_methods.get$last($arguments).span));
        if (!t1.scanChar$1(44)) {
          restArgument = null;
          break;
        }
        _this.whitespace$0();
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      return new A.ArgumentDeclaration(A.List_List$unmodifiable($arguments, type$.Argument), restArgument, t1);
    },
    _argumentInvocation$2$allowEmptySecondArg$mixin(allowEmptySecondArg, mixin) {
      var positional, t3, t4, named, keywordRest, t5, t6, rest, expression, t7, result, _this = this, _null = null,
        t1 = _this.scanner,
        t2 = t1._position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      positional = A._setArrayType([], type$.JSArray_Expression);
      t3 = type$.String;
      t4 = type$.Expression;
      named = A.LinkedHashMap_LinkedHashMap$_empty(t3, t4);
      t5 = !mixin;
      t6 = t1.string;
      rest = _null;
      while (true) {
        if (!_this._lookingAtExpression$0()) {
          keywordRest = _null;
          break;
        }
        expression = _this.expressionUntilComma$1$singleEquals(t5);
        _this.whitespace$0();
        if (expression instanceof A.VariableExpression && t1.scanChar$1(58)) {
          _this.whitespace$0();
          t7 = expression.name;
          if (named.containsKey$1(t7))
            A.throwExpression(new A.StringScannerException(t6, "Duplicate argument.", expression.span));
          named.$indexSet(0, t7, _this.expressionUntilComma$1$singleEquals(t5));
        } else if (t1.scanChar$1(46)) {
          t1.expectChar$1(46);
          t1.expectChar$1(46);
          if (rest != null) {
            _this.whitespace$0();
            keywordRest = expression;
            break;
          }
          rest = expression;
        } else if (named.__js_helper$_length !== 0)
          A.throwExpression(new A.StringScannerException(t6, "Positional arguments must come before keyword arguments.", expression.get$span()));
        else
          positional.push(expression);
        _this.whitespace$0();
        if (!t1.scanChar$1(44)) {
          keywordRest = _null;
          break;
        }
        _this.whitespace$0();
        if (allowEmptySecondArg && positional.length === 1 && named.__js_helper$_length === 0 && rest == null && t1.peekChar$0() === 41) {
          t5 = t1._sourceFile;
          t6 = t1._position;
          new A.FileLocation(t5, t6).FileLocation$_$2(t5, t6);
          t7 = new A._FileSpan(t5, t6, t6);
          t7._FileSpan$3(t5, t6, t6);
          t6 = A._setArrayType([""], type$.JSArray_Object);
          result = A.List_List$from(t6, false, type$.Object);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t5 = new A.Interpolation(result, t7);
          t5.Interpolation$2(t6, t7);
          positional.push(new A.StringExpression(t5, false));
          keywordRest = _null;
          break;
        }
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      return new A.ArgumentInvocation(A.List_List$unmodifiable(positional, t4), A.ConstantMap_ConstantMap$from(named, t3, t4), rest, keywordRest, t1);
    },
    _argumentInvocation$0() {
      return this._argumentInvocation$2$allowEmptySecondArg$mixin(false, false);
    },
    _argumentInvocation$1$allowEmptySecondArg(allowEmptySecondArg) {
      return this._argumentInvocation$2$allowEmptySecondArg$mixin(allowEmptySecondArg, false);
    },
    _argumentInvocation$1$mixin(mixin) {
      return this._argumentInvocation$2$allowEmptySecondArg$mixin(false, mixin);
    },
    _expression$3$bracketList$singleEquals$until(bracketList, singleEquals, until) {
      var t2, beforeBracket, start, wasInParentheses, resetState, resolveOneOperation, resolveOperations, addSingleExpression, addOperator, resolveSpaceExpressions, t3, first, next, t4, commaExpressions, spaceExpressions, singleExpression, _this = this,
        _s20_ = "Expected expression.",
        _box_0 = {},
        t1 = until != null;
      if (t1 && until.call$0())
        _this.scanner.error$1(0, _s20_);
      if (bracketList) {
        t2 = _this.scanner;
        beforeBracket = new A._SpanScannerState(t2, t2._position);
        t2.expectChar$1(91);
        _this.whitespace$0();
        if (t2.scanChar$1(93)) {
          t1 = A._setArrayType([], type$.JSArray_Expression);
          t2 = t2.spanFrom$1(beforeBracket);
          return new A.ListExpression(A.List_List$unmodifiable(t1, type$.Expression), B.ListSeparator_undecided_null_undecided, true, t2);
        }
      } else
        beforeBracket = null;
      t2 = _this.scanner;
      start = new A._SpanScannerState(t2, t2._position);
      wasInParentheses = _this._inParentheses;
      _box_0.operands_ = _box_0.operators_ = _box_0.spaceExpressions_ = _box_0.commaExpressions_ = null;
      _box_0.allowSlash = true;
      _box_0.singleExpression_ = _this._singleExpression$0();
      resetState = new A.StylesheetParser__expression_resetState(_box_0, _this, start);
      resolveOneOperation = new A.StylesheetParser__expression_resolveOneOperation(_box_0, _this);
      resolveOperations = new A.StylesheetParser__expression_resolveOperations(_box_0, resolveOneOperation);
      addSingleExpression = new A.StylesheetParser__expression_addSingleExpression(_box_0, _this, resetState, resolveOperations);
      addOperator = new A.StylesheetParser__expression_addOperator(_box_0, _this, resolveOneOperation);
      resolveSpaceExpressions = new A.StylesheetParser__expression_resolveSpaceExpressions(_box_0, _this, resolveOperations);
      $label0$0:
        for (t3 = type$.JSArray_Expression; true;) {
          _this.whitespace$0();
          if (t1 && until.call$0())
            break $label0$0;
          first = t2.peekChar$0();
          switch (first) {
            case 40:
              addSingleExpression.call$1(_this._parentheses$0());
              break;
            case 91:
              addSingleExpression.call$1(_this._expression$1$bracketList(true));
              break;
            case 36:
              addSingleExpression.call$1(_this._variable$0());
              break;
            case 38:
              addSingleExpression.call$1(_this._selector$0());
              break;
            case 39:
            case 34:
              addSingleExpression.call$1(_this.interpolatedString$0());
              break;
            case 35:
              addSingleExpression.call$1(_this._hashExpression$0());
              break;
            case 61:
              t2.readChar$0();
              if (singleEquals && t2.peekChar$0() !== 61)
                addOperator.call$1(B.BinaryOperator_axY);
              else {
                t2.expectChar$1(61);
                addOperator.call$1(B.BinaryOperator_nZh);
              }
              break;
            case 33:
              next = t2.peekChar$1(1);
              if (next === 61) {
                t2.readChar$0();
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_Vr9);
              } else {
                if (next != null)
                  if ((next | 32) >>> 0 !== 105)
                    t4 = next === 32 || next === 9 || next === 10 || next === 13 || next === 12;
                  else
                    t4 = true;
                else
                  t4 = true;
                if (t4)
                  addSingleExpression.call$1(_this._importantExpression$0());
                else
                  break $label0$0;
              }
              break;
            case 60:
              t2.readChar$0();
              addOperator.call$1(t2.scanChar$1(61) ? B.BinaryOperator_oqF : B.BinaryOperator_apg);
              break;
            case 62:
              t2.readChar$0();
              addOperator.call$1(t2.scanChar$1(61) ? B.BinaryOperator_Wma : B.BinaryOperator_cw1);
              break;
            case 42:
              t2.readChar$0();
              addOperator.call$1(B.BinaryOperator_6pl);
              break;
            case 43:
              if (_box_0.singleExpression_ == null)
                addSingleExpression.call$1(_this._unaryOperation$0());
              else {
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_qbf);
              }
              break;
            case 45:
              next = t2.peekChar$1(1);
              if (next != null && next >= 48 && next <= 57 || next === 46)
                if (_box_0.singleExpression_ != null) {
                  t4 = t2.peekChar$1(-1);
                  t4 = t4 === 32 || t4 === 9 || t4 === 10 || t4 === 13 || t4 === 12;
                } else
                  t4 = true;
              else
                t4 = false;
              if (t4)
                addSingleExpression.call$1(_this._number$0());
              else if (_this._lookingAtInterpolatedIdentifier$0())
                addSingleExpression.call$1(_this.identifierLike$0());
              else if (_box_0.singleExpression_ == null)
                addSingleExpression.call$1(_this._unaryOperation$0());
              else {
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_KlB);
              }
              break;
            case 47:
              if (_box_0.singleExpression_ == null)
                addSingleExpression.call$1(_this._unaryOperation$0());
              else {
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_qpm);
              }
              break;
            case 37:
              t2.readChar$0();
              addOperator.call$1(B.BinaryOperator_PHH);
              break;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              addSingleExpression.call$1(_this._number$0());
              break;
            case 46:
              if (t2.peekChar$1(1) === 46)
                break $label0$0;
              addSingleExpression.call$1(_this._number$0());
              break;
            case 97:
              if (!_this.get$plainCss() && _this.scanIdentifier$1("and"))
                addOperator.call$1(B.BinaryOperator_and_and_2_and);
              else
                addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 111:
              if (!_this.get$plainCss() && _this.scanIdentifier$1("or"))
                addOperator.call$1(B.BinaryOperator_or_or_1_or);
              else
                addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 117:
            case 85:
              if (t2.peekChar$1(1) === 43)
                addSingleExpression.call$1(_this._unicodeRange$0());
              else
                addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 95:
            case 92:
              addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 44:
              if (_this._inParentheses) {
                _this._inParentheses = false;
                if (_box_0.allowSlash) {
                  resetState.call$0();
                  break;
                }
              }
              commaExpressions = _box_0.commaExpressions_;
              if (commaExpressions == null)
                commaExpressions = _box_0.commaExpressions_ = A._setArrayType([], t3);
              if (_box_0.singleExpression_ == null)
                t2.error$1(0, _s20_);
              resolveSpaceExpressions.call$0();
              t4 = _box_0.singleExpression_;
              t4.toString;
              commaExpressions.push(t4);
              t2.readChar$0();
              _box_0.allowSlash = true;
              _box_0.singleExpression_ = null;
              break;
            default:
              if (first != null && first >= 128) {
                addSingleExpression.call$1(_this.identifierLike$0());
                break;
              } else
                break $label0$0;
          }
        }
      if (bracketList)
        t2.expectChar$1(93);
      commaExpressions = _box_0.commaExpressions_;
      spaceExpressions = _box_0.spaceExpressions_;
      if (commaExpressions != null) {
        resolveSpaceExpressions.call$0();
        _this._inParentheses = wasInParentheses;
        singleExpression = _box_0.singleExpression_;
        if (singleExpression != null)
          commaExpressions.push(singleExpression);
        t1 = t2.spanFrom$1(beforeBracket == null ? start : beforeBracket);
        return new A.ListExpression(A.List_List$unmodifiable(commaExpressions, type$.Expression), B.ListSeparator_rXA, bracketList, t1);
      } else if (bracketList && spaceExpressions != null) {
        resolveOperations.call$0();
        t1 = _box_0.singleExpression_;
        t1.toString;
        spaceExpressions.push(t1);
        beforeBracket.toString;
        t2 = t2.spanFrom$1(beforeBracket);
        return new A.ListExpression(A.List_List$unmodifiable(spaceExpressions, type$.Expression), B.ListSeparator_EVt, true, t2);
      } else {
        resolveSpaceExpressions.call$0();
        if (bracketList) {
          t1 = _box_0.singleExpression_;
          t1.toString;
          t3 = A._setArrayType([t1], t3);
          beforeBracket.toString;
          t2 = t2.spanFrom$1(beforeBracket);
          _box_0.singleExpression_ = new A.ListExpression(A.List_List$unmodifiable(t3, type$.Expression), B.ListSeparator_undecided_null_undecided, true, t2);
        }
        t1 = _box_0.singleExpression_;
        t1.toString;
        return t1;
      }
    },
    _expression$0() {
      return this._expression$3$bracketList$singleEquals$until(false, false, null);
    },
    _expression$1$bracketList(bracketList) {
      return this._expression$3$bracketList$singleEquals$until(bracketList, false, null);
    },
    _expression$2$singleEquals$until(singleEquals, until) {
      return this._expression$3$bracketList$singleEquals$until(false, singleEquals, until);
    },
    _expression$1$until(until) {
      return this._expression$3$bracketList$singleEquals$until(false, false, until);
    },
    expressionUntilComma$1$singleEquals(singleEquals) {
      return this._expression$2$singleEquals$until(singleEquals, new A.StylesheetParser_expressionUntilComma_closure(this));
    },
    expressionUntilComma$0() {
      return this.expressionUntilComma$1$singleEquals(false);
    },
    _isSlashOperand$1(expression) {
      var t1;
      if (!(expression instanceof A.NumberExpression))
        if (!(expression instanceof A.CalculationExpression))
          t1 = expression instanceof A.BinaryOperationExpression && expression.allowsSlash;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _singleExpression$0() {
      var next, _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      switch (first) {
        case 40:
          return _this._parentheses$0();
        case 47:
          return _this._unaryOperation$0();
        case 46:
          return _this._number$0();
        case 91:
          return _this._expression$1$bracketList(true);
        case 36:
          return _this._variable$0();
        case 38:
          return _this._selector$0();
        case 39:
        case 34:
          return _this.interpolatedString$0();
        case 35:
          return _this._hashExpression$0();
        case 43:
          next = t1.peekChar$1(1);
          return A.isDigit(next) || next === 46 ? _this._number$0() : _this._unaryOperation$0();
        case 45:
          return _this._minusExpression$0();
        case 33:
          return _this._importantExpression$0();
        case 117:
        case 85:
          if (t1.peekChar$1(1) === 43)
            return _this._unicodeRange$0();
          else
            return _this.identifierLike$0();
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return _this._number$0();
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 92:
          return _this.identifierLike$0();
        default:
          if (first != null && first >= 128)
            return _this.identifierLike$0();
          t1.error$1(0, "Expected expression.");
      }
    },
    _parentheses$0() {
      var wasInParentheses, start, first, expressions, t1, t2, _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(0, "Parentheses aren't allowed in plain CSS.", 1);
      wasInParentheses = _this._inParentheses;
      _this._inParentheses = true;
      try {
        t1 = _this.scanner;
        start = new A._SpanScannerState(t1, t1._position);
        t1.expectChar$1(40);
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0()) {
          t1.expectChar$1(41);
          t2 = A._setArrayType([], type$.JSArray_Expression);
          t1 = t1.spanFrom$1(start);
          t2 = A.List_List$unmodifiable(t2, type$.Expression);
          return new A.ListExpression(t2, B.ListSeparator_undecided_null_undecided, false, t1);
        }
        first = _this.expressionUntilComma$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          t1 = _this._stylesheet$_map$2(first, start);
          return t1;
        }
        if (!t1.scanChar$1(44)) {
          t1.expectChar$1(41);
          t1 = t1.spanFrom$1(start);
          return new A.ParenthesizedExpression(first, t1);
        }
        _this.whitespace$0();
        expressions = A._setArrayType([first], type$.JSArray_Expression);
        for (; true;) {
          if (!_this._lookingAtExpression$0())
            break;
          J.add$1$ax(expressions, _this.expressionUntilComma$0());
          if (!t1.scanChar$1(44))
            break;
          _this.whitespace$0();
        }
        t1.expectChar$1(41);
        t1 = t1.spanFrom$1(start);
        t2 = A.List_List$unmodifiable(expressions, type$.Expression);
        return new A.ListExpression(t2, B.ListSeparator_rXA, false, t1);
      } finally {
        _this._inParentheses = wasInParentheses;
      }
    },
    _stylesheet$_map$2(first, start) {
      var t2, key, _this = this,
        t1 = type$.Tuple2_Expression_Expression,
        pairs = A._setArrayType([new A.Tuple2(first, _this.expressionUntilComma$0(), t1)], type$.JSArray_Tuple2_Expression_Expression);
      for (t2 = _this.scanner; t2.scanChar$1(44);) {
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0())
          break;
        key = _this.expressionUntilComma$0();
        t2.expectChar$1(58);
        _this.whitespace$0();
        pairs.push(new A.Tuple2(key, _this.expressionUntilComma$0(), t1));
      }
      t2.expectChar$1(41);
      t2 = t2.spanFrom$1(start);
      return new A.MapExpression(A.List_List$unmodifiable(pairs, t1), t2);
    },
    _hashExpression$0() {
      var start, first, t2, identifier, buffer, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$1(1) === 123)
        return _this.identifierLike$0();
      start = new A._SpanScannerState(t1, t1._position);
      t1.expectChar$1(35);
      first = t1.peekChar$0();
      if (first != null && A.isDigit(first))
        return new A.ColorExpression(_this._hexColorContents$1(start), t1.spanFrom$1(start));
      t2 = t1._position;
      identifier = _this.interpolatedIdentifier$0();
      if (_this._isHexColor$1(identifier)) {
        t1.set$state(new A._SpanScannerState(t1, t2));
        return new A.ColorExpression(_this._hexColorContents$1(start), t1.spanFrom$1(start));
      }
      t2 = new A.StringBuffer("");
      buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
      t2._contents = "" + A.Primitives_stringFromCharCode(35);
      buffer.addInterpolation$1(identifier);
      return new A.StringExpression(buffer.interpolation$1(t1.spanFrom$1(start)), false);
    },
    _hexColorContents$1(start) {
      var red, green, blue, alpha, digit4, t2, t3, _this = this,
        digit1 = _this._hexDigit$0(),
        digit2 = _this._hexDigit$0(),
        digit3 = _this._hexDigit$0(),
        t1 = _this.scanner;
      if (!A.isHex(t1.peekChar$0())) {
        red = (digit1 << 4 >>> 0) + digit1;
        green = (digit2 << 4 >>> 0) + digit2;
        blue = (digit3 << 4 >>> 0) + digit3;
        alpha = null;
      } else {
        digit4 = _this._hexDigit$0();
        t2 = digit1 << 4 >>> 0;
        t3 = digit3 << 4 >>> 0;
        if (!A.isHex(t1.peekChar$0())) {
          red = t2 + digit1;
          green = (digit2 << 4 >>> 0) + digit2;
          blue = t3 + digit3;
          alpha = ((digit4 << 4 >>> 0) + digit4) / 255;
        } else {
          red = t2 + digit2;
          green = t3 + digit4;
          blue = (_this._hexDigit$0() << 4 >>> 0) + _this._hexDigit$0();
          alpha = A.isHex(t1.peekChar$0()) ? ((_this._hexDigit$0() << 4 >>> 0) + _this._hexDigit$0()) / 255 : null;
        }
      }
      return A.SassColor$rgbInternal(red, green, blue, alpha, alpha == null ? new A.SpanColorFormat(t1.spanFrom$1(start)) : null);
    },
    _isHexColor$1(interpolation) {
      var t1,
        plain = interpolation.get$asPlain();
      if (plain == null)
        return false;
      t1 = plain.length;
      if (t1 !== 3 && t1 !== 4 && t1 !== 6 && t1 !== 8)
        return false;
      t1 = new A.CodeUnits(plain);
      return t1.every$1(t1, A.character__isHex$closure());
    },
    _hexDigit$0() {
      var t1 = this.scanner,
        char = t1.peekChar$0();
      if (char == null || !A.isHex(char))
        t1.error$1(0, "Expected hex digit.");
      return A.asHex(t1.readChar$0());
    },
    _minusExpression$0() {
      var _this = this,
        next = _this.scanner.peekChar$1(1);
      if (A.isDigit(next) || next === 46)
        return _this._number$0();
      if (_this._lookingAtInterpolatedIdentifier$0())
        return _this.identifierLike$0();
      return _this._unaryOperation$0();
    },
    _importantExpression$0() {
      var t1 = this.scanner,
        t2 = t1._position;
      t1.readChar$0();
      this.whitespace$0();
      this.expectIdentifier$1("important");
      t2 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      return new A.StringExpression(A.Interpolation$(A._setArrayType(["!important"], type$.JSArray_Object), t2), false);
    },
    _unaryOperation$0() {
      var _this = this,
        t1 = _this.scanner,
        t2 = t1._position,
        operator = _this._unaryOperatorFor$1(t1.readChar$0());
      if (operator == null)
        t1.error$2$position(0, "Expected unary operator.", t1._position - 1);
      else if (_this.get$plainCss() && operator !== B.UnaryOperator_Ix1)
        t1.error$3$length$position(0, "Operators aren't allowed in plain CSS.", 1, t1._position - 1);
      _this.whitespace$0();
      return new A.UnaryOperationExpression(operator, _this._singleExpression$0(), t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _unaryOperatorFor$1(character) {
      switch (character) {
        case 43:
          return B.UnaryOperator_gg4;
        case 45:
          return B.UnaryOperator_TLI;
        case 47:
          return B.UnaryOperator_Ix1;
        default:
          return null;
      }
    },
    _number$0() {
      var number, t4, unit, t5, _this = this,
        t1 = _this.scanner,
        t2 = t1._position,
        first = t1.peekChar$0(),
        t3 = first === 45,
        sign = t3 ? -1 : 1;
      if (first === 43 || t3)
        t1.readChar$0();
      number = t1.peekChar$0() === 46 ? 0 : _this.naturalNumber$0();
      t3 = _this._tryDecimal$1$allowTrailingDot(t1._position !== t2);
      t4 = _this._tryExponent$0();
      if (t1.scanChar$1(37))
        unit = "%";
      else {
        if (_this.lookingAtIdentifier$0())
          t5 = t1.peekChar$0() !== 45 || t1.peekChar$1(1) !== 45;
        else
          t5 = false;
        unit = t5 ? _this.identifier$1$unit(true) : null;
      }
      return new A.NumberExpression(sign * ((number + t3) * t4), unit, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _tryDecimal$1$allowTrailingDot(allowTrailingDot) {
      var t2,
        t1 = this.scanner,
        start = t1._position;
      if (t1.peekChar$0() !== 46)
        return 0;
      if (!A.isDigit(t1.peekChar$1(1))) {
        if (allowTrailingDot)
          return 0;
        t1.error$2$position(0, "Expected digit.", t1._position + 1);
      }
      t1.readChar$0();
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57))
          break;
        t1.readChar$0();
      }
      return A.double_parse(t1.substring$1(0, start));
    },
    _tryExponent$0() {
      var next, t2, exponentSign, exponent,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first !== 101 && first !== 69)
        return 1;
      next = t1.peekChar$1(1);
      if (!A.isDigit(next) && next !== 45 && next !== 43)
        return 1;
      t1.readChar$0();
      t2 = next === 45;
      exponentSign = t2 ? -1 : 1;
      if (next === 43 || t2)
        t1.readChar$0();
      if (!A.isDigit(t1.peekChar$0()))
        t1.error$1(0, "Expected digit.");
      exponent = 0;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57))
          break;
        exponent = exponent * 10 + (t1.readChar$0() - 48);
      }
      return Math.pow(10, exponentSign * exponent);
    },
    _unicodeRange$0() {
      var firstRangeLength, hasQuestionMark, t2, secondRangeLength, _this = this,
        _s26_ = "Expected at most 6 digits.",
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      _this.expectIdentChar$1(117);
      t1.expectChar$1(43);
      for (firstRangeLength = 0; _this.scanCharIf$1(new A.StylesheetParser__unicodeRange_closure());)
        ++firstRangeLength;
      for (hasQuestionMark = false; t1.scanChar$1(63); hasQuestionMark = true)
        ++firstRangeLength;
      if (firstRangeLength === 0)
        t1.error$1(0, 'Expected hex digit or "?".');
      else if (firstRangeLength > 6)
        _this.error$2(0, _s26_, t1.spanFrom$1(start));
      else if (hasQuestionMark) {
        t2 = t1.substring$1(0, start.position);
        t1 = t1.spanFrom$1(start);
        return new A.StringExpression(A.Interpolation$(A._setArrayType([t2], type$.JSArray_Object), t1), false);
      }
      if (t1.scanChar$1(45)) {
        t2 = t1._position;
        for (secondRangeLength = 0; _this.scanCharIf$1(new A.StylesheetParser__unicodeRange_closure0());)
          ++secondRangeLength;
        if (secondRangeLength === 0)
          t1.error$1(0, "Expected hex digit.");
        else if (secondRangeLength > 6)
          _this.error$2(0, _s26_, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      }
      if (_this._lookingAtInterpolatedIdentifierBody$0())
        t1.error$1(0, "Expected end of identifier.");
      t2 = t1.substring$1(0, start.position);
      t1 = t1.spanFrom$1(start);
      return new A.StringExpression(A.Interpolation$(A._setArrayType([t2], type$.JSArray_Object), t1), false);
    },
    _variable$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position),
        $name = _this.variableName$0();
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, t1.spanFrom$1(start));
      return new A.VariableExpression(null, $name, t1.spanFrom$1(start));
    },
    _selector$0() {
      var t1, start, _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(0, "The parent selector isn't allowed in plain CSS.", 1);
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._position);
      t1.expectChar$1(38);
      if (t1.scanChar$1(38)) {
        _this.logger.warn$2$span(0, 'In Sass, "&&" means two copies of the parent selector. You probably want to use "and" instead.', t1.spanFrom$1(start));
        t1.set$position(t1._position - 1);
      }
      return new A.SelectorExpression(t1.spanFrom$1(start));
    },
    interpolatedString$0() {
      var t3, t4, buffer, next, second, t5,
        t1 = this.scanner,
        t2 = t1._position,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(0, "Expected string.", t2);
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      for (; true;) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(0, "Expected " + A.Primitives_stringFromCharCode(quote) + ".");
        else if (next === 92) {
          second = t1.peekChar$1(1);
          if (second === 10 || second === 13 || second === 12) {
            t1.readChar$0();
            t1.readChar$0();
            if (second === 13)
              t1.scanChar$1(10);
          } else
            t3._contents += A.Primitives_stringFromCharCode(A.consumeEscapedCharacter(t1));
        } else if (next === 35)
          if (t1.peekChar$1(1) === 123) {
            t5 = this.singleInterpolation$0();
            buffer._flushText$0();
            t4.push(t5);
          } else
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
        else
          t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return new A.StringExpression(buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2))), true);
    },
    identifierLike$0() {
      var invocation, expression, color, specialFunction, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        lower = A._Cell$(),
        t2 = plain == null,
        t3 = !t2;
      if (t3) {
        if (plain === "if" && t1.peekChar$0() === 40) {
          invocation = _this._argumentInvocation$0();
          return new A.IfExpression(invocation, identifier.span.expand$1(0, invocation.span));
        } else if (plain === "not") {
          _this.whitespace$0();
          expression = _this._singleExpression$0();
          return new A.UnaryOperationExpression(B.UnaryOperator_not_not_not, expression, identifier.span.expand$1(0, expression.get$span()));
        }
        lower._value = plain.toLowerCase();
        if (t1.peekChar$0() !== 40) {
          switch (plain) {
            case "false":
              return new A.BooleanExpression(false, identifier.span);
            case "null":
              return new A.NullExpression(identifier.span);
            case "true":
              return new A.BooleanExpression(true, identifier.span);
          }
          color = $.$get$colorsByName().$index(0, lower._readLocal$0());
          if (color != null) {
            t1 = identifier.span;
            return new A.ColorExpression(A.SassColor$rgbInternal(color.get$red(), color.get$green(), color.get$blue(), color._alpha, new A.SpanColorFormat(t1)), t1);
          }
        }
        specialFunction = _this.trySpecialFunction$2(lower._readLocal$0(), start);
        if (specialFunction != null)
          return specialFunction;
      }
      switch (t1.peekChar$0()) {
        case 46:
          if (t1.peekChar$1(1) === 46)
            return new A.StringExpression(identifier, false);
          t1.readChar$0();
          if (t3)
            return _this.namespacedExpression$2(plain, start);
          _this.error$2(0, "Interpolation isn't allowed in namespaces.", identifier.span);
          break;
        case 40:
          if (t2)
            return new A.InterpolatedFunctionExpression(identifier, _this._argumentInvocation$0(), t1.spanFrom$1(start));
          else
            return new A.FunctionExpression(null, plain, _this._argumentInvocation$1$allowEmptySecondArg(J.$eq$(lower._readLocal$0(), "var")), t1.spanFrom$1(start));
        default:
          return new A.StringExpression(identifier, false);
      }
    },
    namespacedExpression$2(namespace, start) {
      var $name, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 36) {
        $name = _this.variableName$0();
        _this._assertPublic$2($name, new A.StylesheetParser_namespacedExpression_closure(_this, start));
        return new A.VariableExpression(namespace, $name, t1.spanFrom$1(start));
      }
      return new A.FunctionExpression(namespace, _this._publicIdentifier$0(), _this._argumentInvocation$0(), t1.spanFrom$1(start));
    },
    trySpecialFunction$2($name, start) {
      var t2, buffer, t3, next, _this = this, _null = null,
        t1 = _this.scanner,
        calculation = t1.peekChar$0() === 40 ? _this._tryCalculation$2($name, start) : _null;
      if (calculation != null)
        return calculation;
      switch (A.unvendor($name)) {
        case "calc":
        case "element":
        case "expression":
          if (!t1.scanChar$1(40))
            return _null;
          t2 = new A.StringBuffer("");
          buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
          t3 = "" + $name;
          t2._contents = t3;
          t2._contents = t3 + A.Primitives_stringFromCharCode(40);
          break;
        case "progid":
          if (!t1.scanChar$1(58))
            return _null;
          t2 = new A.StringBuffer("");
          buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
          t3 = "" + $name;
          t2._contents = t3;
          t2._contents = t3 + A.Primitives_stringFromCharCode(58);
          next = t1.peekChar$0();
          while (true) {
            if (next != null) {
              if (!(next >= 97 && next <= 122))
                t3 = next >= 65 && next <= 90;
              else
                t3 = true;
              t3 = t3 || next === 46;
            } else
              t3 = false;
            if (!t3)
              break;
            t2._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            next = t1.peekChar$0();
          }
          t1.expectChar$1(40);
          t2._contents += A.Primitives_stringFromCharCode(40);
          break;
        case "url":
          return A.NullableExtension_andThen(_this._tryUrlContents$1(start), new A.StylesheetParser_trySpecialFunction_closure());
        default:
          return _null;
      }
      buffer.addInterpolation$1(_this._interpolatedDeclarationValue$1$allowEmpty(true));
      t1.expectChar$1(41);
      buffer._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(41);
      return new A.StringExpression(buffer.interpolation$1(t1.spanFrom$1(start)), false);
    },
    _tryCalculation$2($name, start) {
      var beforeArguments, $arguments, t1, exception, t2, _this = this;
      switch ($name) {
        case "calc":
          $arguments = _this._calculationArguments$1(1);
          t1 = _this.scanner.spanFrom$1(start);
          return new A.CalculationExpression($name, A.CalculationExpression__verifyArguments($arguments), t1);
        case "min":
        case "max":
          t1 = _this.scanner;
          beforeArguments = new A._SpanScannerState(t1, t1._position);
          $arguments = null;
          try {
            $arguments = _this._calculationArguments$0();
          } catch (exception) {
            if (type$.FormatException._is(A.unwrapException(exception))) {
              t1.set$state(beforeArguments);
              return null;
            } else
              throw exception;
          }
          t2 = $arguments;
          t1 = t1.spanFrom$1(start);
          return new A.CalculationExpression($name, A.CalculationExpression__verifyArguments(t2), t1);
        case "clamp":
          $arguments = _this._calculationArguments$1(3);
          t1 = _this.scanner.spanFrom$1(start);
          return new A.CalculationExpression($name, A.CalculationExpression__verifyArguments($arguments), t1);
        default:
          return null;
      }
    },
    _calculationArguments$1(maxArgs) {
      var interpolation, $arguments, t2, _this = this,
        t1 = _this.scanner;
      t1.expectChar$1(40);
      interpolation = _this._containsCalculationInterpolation$0() ? new A.StringExpression(_this._interpolatedDeclarationValue$0(), false) : null;
      if (interpolation != null) {
        t1.expectChar$1(41);
        return A._setArrayType([interpolation], type$.JSArray_Expression);
      }
      _this.whitespace$0();
      $arguments = A._setArrayType([_this._calculationSum$0()], type$.JSArray_Expression);
      t2 = maxArgs != null;
      while (true) {
        if (!((!t2 || $arguments.length < maxArgs) && t1.scanChar$1(44)))
          break;
        _this.whitespace$0();
        $arguments.push(_this._calculationSum$0());
      }
      t1.expectChar$2$name(41, $arguments.length === maxArgs ? '"+", "-", "*", "/", or ")"' : '"+", "-", "*", "/", ",", or ")"');
      return $arguments;
    },
    _calculationArguments$0() {
      return this._calculationArguments$1(null);
    },
    _calculationSum$0() {
      var t1, next, t2, t3, _this = this,
        sum = _this._calculationProduct$0();
      for (t1 = _this.scanner; true;) {
        next = t1.peekChar$0();
        t2 = next === 43;
        if (t2 || next === 45) {
          t3 = t1.peekChar$1(-1);
          if (t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12) {
            t3 = t1.peekChar$1(1);
            t3 = !(t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12);
          } else
            t3 = true;
          if (t3)
            t1.error$1(0, '"+" and "-" must be surrounded by whitespace in calculations.');
          t1.readChar$0();
          _this.whitespace$0();
          t2 = t2 ? B.BinaryOperator_qbf : B.BinaryOperator_KlB;
          sum = new A.BinaryOperationExpression(t2, sum, _this._calculationProduct$0(), false);
        } else
          return sum;
      }
    },
    _calculationProduct$0() {
      var t1, next, t2, _this = this,
        product = _this._calculationValue$0();
      for (t1 = _this.scanner; true;) {
        _this.whitespace$0();
        next = t1.peekChar$0();
        t2 = next === 42;
        if (t2 || next === 47) {
          t1.readChar$0();
          _this.whitespace$0();
          t2 = t2 ? B.BinaryOperator_6pl : B.BinaryOperator_qpm;
          product = new A.BinaryOperationExpression(t2, product, _this._calculationValue$0(), false);
        } else
          return product;
      }
    },
    _calculationValue$0() {
      var t2, value, start, ident, lowerCase, calculation, _this = this,
        t1 = _this.scanner,
        next = t1.peekChar$0();
      if (next === 43 || next === 45 || next === 46 || A.isDigit(next))
        return _this._number$0();
      else if (next === 36)
        return _this._variable$0();
      else if (next === 40) {
        t2 = t1._position;
        t1.readChar$0();
        value = _this._containsCalculationInterpolation$0() ? new A.StringExpression(_this._interpolatedDeclarationValue$0(), false) : null;
        if (value == null) {
          _this.whitespace$0();
          value = _this._calculationSum$0();
        }
        _this.whitespace$0();
        t1.expectChar$1(41);
        return new A.ParenthesizedExpression(value, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      } else if (!_this.lookingAtIdentifier$0())
        t1.error$1(0, "Expected number, variable, function, or calculation.");
      else {
        start = new A._SpanScannerState(t1, t1._position);
        ident = _this.identifier$0();
        if (t1.scanChar$1(46))
          return _this.namespacedExpression$2(ident, start);
        if (t1.peekChar$0() !== 40)
          t1.error$1(0, 'Expected "(" or ".".');
        lowerCase = ident.toLowerCase();
        calculation = _this._tryCalculation$2(lowerCase, start);
        if (calculation != null)
          return calculation;
        else if (lowerCase === "if")
          return new A.IfExpression(_this._argumentInvocation$0(), t1.spanFrom$1(start));
        else
          return new A.FunctionExpression(null, ident, _this._argumentInvocation$0(), t1.spanFrom$1(start));
      }
    },
    _containsCalculationInterpolation$0() {
      var t2, parens, next, target, t3, _null = null,
        _s64_ = string$.The_gi,
        _s17_ = "Invalid position ",
        brackets = A._setArrayType([], type$.JSArray_int),
        t1 = this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      for (t2 = t1.string.length, parens = 0; t1._position !== t2;) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            target = 1;
            break;
          case 47:
            target = 2;
            break;
          case 39:
          case 34:
            target = 3;
            break;
          case 35:
            target = 4;
            break;
          case 40:
            target = 5;
            break;
          case 123:
          case 91:
            target = 6;
            break;
          case 41:
            target = 7;
            break;
          case 125:
          case 93:
            target = 8;
            break;
          default:
            target = 9;
            break;
        }
        c$0:
          for (; true;)
            switch (target) {
              case 1:
                t1.readChar$0();
                t1.readChar$0();
                break c$0;
              case 2:
                if (!this.scanComment$0())
                  t1.readChar$0();
                break c$0;
              case 3:
                this.interpolatedString$0();
                break c$0;
              case 4:
                if (parens === 0 && t1.peekChar$1(1) === 123) {
                  if (start._span_scanner$_scanner !== t1)
                    A.throwExpression(A.ArgumentError$(_s64_, _null));
                  t3 = start.position;
                  if ((t3 === 0 ? 1 / t3 < 0 : t3 < 0) || t3 > t2)
                    A.throwExpression(A.ArgumentError$(_s17_ + t3, _null));
                  t1._position = t3;
                  t1._lastMatch = null;
                  return true;
                }
                t1.readChar$0();
                break c$0;
              case 5:
                ++parens;
                target = 6;
                continue c$0;
              case 6:
                next.toString;
                brackets.push(A.opposite(next));
                t1.readChar$0();
                break c$0;
              case 7:
                --parens;
                target = 8;
                continue c$0;
              case 8:
                if (brackets.length === 0 || brackets.pop() !== next) {
                  if (start._span_scanner$_scanner !== t1)
                    A.throwExpression(A.ArgumentError$(_s64_, _null));
                  t3 = start.position;
                  if ((t3 === 0 ? 1 / t3 < 0 : t3 < 0) || t3 > t2)
                    A.throwExpression(A.ArgumentError$(_s17_ + t3, _null));
                  t1._position = t3;
                  t1._lastMatch = null;
                  return false;
                }
                t1.readChar$0();
                break c$0;
              case 9:
                t1.readChar$0();
                break c$0;
            }
      }
      t1.set$state(start);
      return false;
    },
    _tryUrlContents$2$name(start, $name) {
      var t3, t4, buffer, t5, next, endPosition, result, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      if (!t1.scanChar$1(40))
        return null;
      _this.whitespaceWithoutComments$0();
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t5 = "" + ($name == null ? "url" : $name);
      t3._contents = t5;
      t3._contents = t5 + A.Primitives_stringFromCharCode(40);
      for (; true;) {
        next = t1.peekChar$0();
        if (next == null)
          break;
        else if (next === 92)
          t3._contents += A.S(_this.escape$0());
        else {
          if (next !== 33)
            if (next !== 37)
              if (next !== 38)
                t5 = next >= 42 && next <= 126 || next >= 128;
              else
                t5 = true;
            else
              t5 = true;
          else
            t5 = true;
          if (t5)
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 35)
            if (t1.peekChar$1(1) === 123) {
              t5 = _this.singleInterpolation$0();
              buffer._flushText$0();
              t4.push(t5);
            } else
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 32 || next === 9 || next === 10 || next === 13 || next === 12) {
            _this.whitespaceWithoutComments$0();
            if (t1.peekChar$0() !== 41)
              break;
          } else if (next === 41) {
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._position;
            t2 = t1._sourceFile;
            t5 = start.position;
            t1 = new A._FileSpan(t2, t5, endPosition);
            t1._FileSpan$3(t2, t5, endPosition);
            t5 = type$.Object;
            t2 = A.List_List$of(t4, true, t5);
            t4 = t3._contents;
            if (t4.length !== 0)
              t2.push(t4.charCodeAt(0) == 0 ? t4 : t4);
            result = A.List_List$from(t2, false, t5);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t3 = new A.Interpolation(result, t1);
            t3.Interpolation$2(t2, t1);
            return t3;
          } else
            break;
        }
      }
      t1.set$state(new A._SpanScannerState(t1, t2));
      return null;
    },
    _tryUrlContents$1(start) {
      return this._tryUrlContents$2$name(start, null);
    },
    dynamicUrl$0() {
      var contents, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      _this.expectIdentifier$1("url");
      contents = _this._tryUrlContents$1(start);
      if (contents != null)
        return new A.StringExpression(contents, false);
      return new A.InterpolatedFunctionExpression(A.Interpolation$(A._setArrayType(["url"], type$.JSArray_Object), t1.spanFrom$1(start)), _this._argumentInvocation$0(), t1.spanFrom$1(start));
    },
    almostAnyValue$1$omitComments(omitComments) {
      var t4, t5, t6, next, commentStart, end, t7, contents, _this = this,
        t1 = _this.scanner,
        t2 = t1._position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
      $label0$1:
        for (t4 = t1.string, t5 = t4.length, t6 = !omitComments; true;) {
          next = t1.peekChar$0();
          switch (next) {
            case 92:
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 34:
            case 39:
              buffer.addInterpolation$1(_this.interpolatedString$0().asInterpolation$0());
              break;
            case 47:
              commentStart = t1._position;
              if (_this.scanComment$0()) {
                if (t6) {
                  end = t1._position;
                  t3._contents += B.JSString_methods.substring$2(t4, commentStart, end);
                }
              } else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 35:
              if (t1.peekChar$1(1) === 123)
                buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 13:
            case 10:
            case 12:
              if (_this.get$indented())
                break $label0$1;
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 33:
            case 59:
            case 123:
            case 125:
              break $label0$1;
            case 117:
            case 85:
              t7 = t1._position;
              if (!_this.scanIdentifier$1("url")) {
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                break;
              }
              contents = _this._tryUrlContents$1(new A._SpanScannerState(t1, t7));
              if (contents == null) {
                if ((t7 === 0 ? 1 / t7 < 0 : t7 < 0) || t7 > t5)
                  A.throwExpression(A.ArgumentError$("Invalid position " + t7, null));
                t1._position = t7;
                t1._lastMatch = null;
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              } else
                buffer.addInterpolation$1(contents);
              break;
            default:
              if (next == null)
                break $label0$1;
              if (_this.lookingAtIdentifier$0())
                t3._contents += _this.identifier$0();
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
          }
        }
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    almostAnyValue$0() {
      return this.almostAnyValue$1$omitComments(false);
    },
    _interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(allowColon, allowEmpty, allowSemicolon) {
      var t4, t5, t6, t7, wroteNewline, next, t8, start, end, contents, _this = this,
        t1 = _this.scanner,
        t2 = t1._position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object)),
        brackets = A._setArrayType([], type$.JSArray_int);
      $label0$1:
        for (t4 = t1.string, t5 = t4.length, t6 = !allowColon, t7 = !allowSemicolon, wroteNewline = false; true;) {
          next = t1.peekChar$0();
          switch (next) {
            case 92:
              t3._contents += A.S(_this.escape$1$identifierStart(true));
              wroteNewline = false;
              break;
            case 34:
            case 39:
              buffer.addInterpolation$1(_this.interpolatedString$0().asInterpolation$0());
              wroteNewline = false;
              break;
            case 47:
              if (t1.peekChar$1(1) === 42) {
                t8 = _this.get$loudComment();
                start = t1._position;
                t8.call$0();
                end = t1._position;
                t3._contents += B.JSString_methods.substring$2(t4, start, end);
              } else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 35:
              if (t1.peekChar$1(1) === 123)
                buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 32:
            case 9:
              if (!wroteNewline) {
                t8 = t1.peekChar$1(1);
                t8 = !(t8 === 32 || t8 === 9 || t8 === 10 || t8 === 13 || t8 === 12);
              } else
                t8 = true;
              if (t8)
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              else
                t1.readChar$0();
              break;
            case 10:
            case 13:
            case 12:
              if (_this.get$indented())
                break $label0$1;
              t8 = t1.peekChar$1(-1);
              if (!(t8 === 10 || t8 === 13 || t8 === 12))
                t3._contents += "\n";
              t1.readChar$0();
              wroteNewline = true;
              break;
            case 40:
            case 123:
            case 91:
              next.toString;
              t3._contents += A.Primitives_stringFromCharCode(next);
              brackets.push(A.opposite(t1.readChar$0()));
              wroteNewline = false;
              break;
            case 41:
            case 125:
            case 93:
              if (brackets.length === 0)
                break $label0$1;
              next.toString;
              t3._contents += A.Primitives_stringFromCharCode(next);
              t1.expectChar$1(brackets.pop());
              wroteNewline = false;
              break;
            case 59:
              if (t7 && brackets.length === 0)
                break $label0$1;
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 58:
              if (t6 && brackets.length === 0)
                break $label0$1;
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 117:
            case 85:
              t8 = t1._position;
              if (!_this.scanIdentifier$1("url")) {
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                wroteNewline = false;
                break;
              }
              contents = _this._tryUrlContents$1(new A._SpanScannerState(t1, t8));
              if (contents == null) {
                if ((t8 === 0 ? 1 / t8 < 0 : t8 < 0) || t8 > t5)
                  A.throwExpression(A.ArgumentError$("Invalid position " + t8, null));
                t1._position = t8;
                t1._lastMatch = null;
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              } else
                buffer.addInterpolation$1(contents);
              wroteNewline = false;
              break;
            default:
              if (next == null)
                break $label0$1;
              if (_this.lookingAtIdentifier$0())
                t3._contents += _this.identifier$0();
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
          }
        }
      if (brackets.length !== 0)
        t1.expectChar$1(B.JSArray_methods.get$last(brackets));
      if (!allowEmpty && buffer._interpolation_buffer$_contents.length === 0 && t3._contents.length === 0)
        t1.error$1(0, "Expected token.");
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _interpolatedDeclarationValue$1$allowEmpty(allowEmpty) {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(true, allowEmpty, false);
    },
    _interpolatedDeclarationValue$0() {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(true, false, false);
    },
    _interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(allowEmpty, allowSemicolon) {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(true, allowEmpty, allowSemicolon);
    },
    interpolatedIdentifier$0() {
      var first, _this = this,
        _s20_ = "Expected identifier.",
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position),
        t2 = new A.StringBuffer(""),
        t3 = A._setArrayType([], type$.JSArray_Object),
        buffer = new A.InterpolationBuffer(t2, t3);
      if (t1.scanChar$1(45)) {
        t2._contents += A.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          t2._contents += A.Primitives_stringFromCharCode(45);
          _this._interpolatedIdentifierBody$1(buffer);
          return buffer.interpolation$1(t1.spanFrom$1(start));
        }
      }
      first = t1.peekChar$0();
      if (first == null)
        t1.error$1(0, _s20_);
      else if (first === 95 || A.isAlphabetic0(first) || first >= 128)
        t2._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        t2._contents += A.S(_this.escape$1$identifierStart(true));
      else if (first === 35 && t1.peekChar$1(1) === 123) {
        t2 = _this.singleInterpolation$0();
        buffer._flushText$0();
        t3.push(t2);
      } else
        t1.error$1(0, _s20_);
      _this._interpolatedIdentifierBody$1(buffer);
      return buffer.interpolation$1(t1.spanFrom$1(start));
    },
    _interpolatedIdentifierBody$1(buffer) {
      var t1, t2, t3, next, t4;
      for (t1 = buffer._interpolation_buffer$_contents, t2 = this.scanner, t3 = buffer._interpolation_buffer$_text; true;) {
        next = t2.peekChar$0();
        if (next == null)
          break;
        else {
          if (next !== 95)
            if (next !== 45) {
              if (!(next >= 97 && next <= 122))
                t4 = next >= 65 && next <= 90;
              else
                t4 = true;
              if (!t4)
                t4 = next >= 48 && next <= 57;
              else
                t4 = true;
              t4 = t4 || next >= 128;
            } else
              t4 = true;
          else
            t4 = true;
          if (t4)
            t3._contents += A.Primitives_stringFromCharCode(t2.readChar$0());
          else if (next === 92)
            t3._contents += A.S(this.escape$0());
          else if (next === 35 && t2.peekChar$1(1) === 123) {
            t4 = this.singleInterpolation$0();
            buffer._flushText$0();
            t1.push(t4);
          } else
            break;
        }
      }
    },
    singleInterpolation$0() {
      var contents, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      t1.expect$1("#{");
      _this.whitespace$0();
      contents = _this._expression$0();
      t1.expectChar$1(125);
      if (_this.get$plainCss())
        _this.error$2(0, "Interpolation isn't allowed in plain CSS.", t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      return contents;
    },
    _mediaQueryList$0() {
      var t4, _this = this,
        t1 = _this.scanner,
        t2 = t1._position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
      for (; true;) {
        _this.whitespace$0();
        _this._mediaQuery$1(buffer);
        _this.whitespace$0();
        if (!t1.scanChar$1(44))
          break;
        t4 = t3._contents += A.Primitives_stringFromCharCode(44);
        t3._contents = t4 + A.Primitives_stringFromCharCode(32);
      }
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _mediaQuery$1(buffer) {
      var identifier1, t1, identifier2, _this = this, _s3_ = "and";
      if (_this.scanner.peekChar$0() === 40) {
        _this._mediaInParens$1(buffer);
        _this.whitespace$0();
        if (_this.scanIdentifier$1(_s3_)) {
          buffer._interpolation_buffer$_text._contents += " and ";
          _this.expectWhitespace$0();
          _this._mediaLogicSequence$2(buffer, _s3_);
        } else if (_this.scanIdentifier$1("or")) {
          buffer._interpolation_buffer$_text._contents += " or ";
          _this.expectWhitespace$0();
          _this._mediaLogicSequence$2(buffer, "or");
        }
        return;
      }
      identifier1 = _this.interpolatedIdentifier$0();
      if (A.equalsIgnoreCase(identifier1.get$asPlain(), "not")) {
        _this.expectWhitespace$0();
        if (!_this._lookingAtInterpolatedIdentifier$0()) {
          buffer._interpolation_buffer$_text._contents += "not ";
          _this._mediaOrInterp$1(buffer);
          return;
        }
      }
      _this.whitespace$0();
      buffer.addInterpolation$1(identifier1);
      if (!_this._lookingAtInterpolatedIdentifier$0())
        return;
      t1 = buffer._interpolation_buffer$_text;
      t1._contents += A.Primitives_stringFromCharCode(32);
      identifier2 = _this.interpolatedIdentifier$0();
      if (A.equalsIgnoreCase(identifier2.get$asPlain(), _s3_)) {
        _this.expectWhitespace$0();
        t1._contents += " and ";
      } else {
        _this.whitespace$0();
        buffer.addInterpolation$1(identifier2);
        if (_this.scanIdentifier$1(_s3_)) {
          _this.expectWhitespace$0();
          t1._contents += " and ";
        } else
          return;
      }
      if (_this.scanIdentifier$1("not")) {
        _this.expectWhitespace$0();
        t1._contents += "not ";
        _this._mediaOrInterp$1(buffer);
        return;
      }
      _this._mediaLogicSequence$2(buffer, _s3_);
      return;
    },
    _mediaLogicSequence$2(buffer, operator) {
      var t1, t2, _this = this;
      for (t1 = buffer._interpolation_buffer$_text; true;) {
        _this._mediaOrInterp$1(buffer);
        _this.whitespace$0();
        if (!_this.scanIdentifier$1(operator))
          return;
        _this.expectWhitespace$0();
        t2 = t1._contents += A.Primitives_stringFromCharCode(32);
        t2 += operator;
        t1._contents = t2;
        t1._contents = t2 + A.Primitives_stringFromCharCode(32);
      }
    },
    _mediaOrInterp$1(buffer) {
      var interpolation;
      if (this.scanner.peekChar$0() === 35) {
        interpolation = this.singleInterpolation$0();
        buffer.addInterpolation$1(A.Interpolation$(A._setArrayType([interpolation], type$.JSArray_Object), interpolation.get$span()));
      } else
        this._mediaInParens$1(buffer);
    },
    _mediaInParens$1(buffer) {
      var t2, needsParenDeprecation, needsNotDeprecation, expression, t3, t4, next, t5, _this = this,
        t1 = _this.scanner;
      t1.expectChar$2$name(40, "media condition in parentheses");
      t2 = buffer._interpolation_buffer$_text;
      t2._contents += A.Primitives_stringFromCharCode(40);
      _this.whitespace$0();
      needsParenDeprecation = t1.peekChar$0() === 40;
      needsNotDeprecation = _this.matchesIdentifier$1("not");
      expression = _this._expressionUntilComparison$0();
      if (needsParenDeprecation || needsNotDeprecation) {
        t3 = needsParenDeprecation ? "(" : "not";
        _this.logger.warn$3$deprecation$span(0, 'Starting a @media query with "' + t3 + '" is deprecated because it conflicts with official CSS syntax.\n\nTo preserve existing behavior: #{' + expression.toString$0(0) + '}\nTo migrate to new behavior: #{"' + expression.toString$0(0) + '"}\n\nFor details, see https://sass-lang.com/d/media-logic', true, expression.get$span());
      }
      buffer._flushText$0();
      t3 = buffer._interpolation_buffer$_contents;
      t3.push(expression);
      if (t1.scanChar$1(58)) {
        _this.whitespace$0();
        t4 = t2._contents += A.Primitives_stringFromCharCode(58);
        t2._contents = t4 + A.Primitives_stringFromCharCode(32);
        t4 = _this._expression$0();
        buffer._flushText$0();
        t3.push(t4);
      } else {
        next = t1.peekChar$0();
        t4 = next !== 60;
        if (!t4 || next === 62 || next === 61) {
          t2._contents += A.Primitives_stringFromCharCode(32);
          t2._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          if ((!t4 || next === 62) && t1.scanChar$1(61))
            t2._contents += A.Primitives_stringFromCharCode(61);
          t2._contents += A.Primitives_stringFromCharCode(32);
          _this.whitespace$0();
          t5 = _this._expressionUntilComparison$0();
          buffer._flushText$0();
          t3.push(t5);
          if (!t4 || next === 62) {
            next.toString;
            t4 = t1.scanChar$1(next);
          } else
            t4 = false;
          if (t4) {
            t4 = t2._contents += A.Primitives_stringFromCharCode(32);
            t2._contents = t4 + A.Primitives_stringFromCharCode(next);
            if (t1.scanChar$1(61))
              t2._contents += A.Primitives_stringFromCharCode(61);
            t2._contents += A.Primitives_stringFromCharCode(32);
            _this.whitespace$0();
            t4 = _this._expressionUntilComparison$0();
            buffer._flushText$0();
            t3.push(t4);
          }
        }
      }
      t1.expectChar$1(41);
      _this.whitespace$0();
      t2._contents += A.Primitives_stringFromCharCode(41);
    },
    _expressionUntilComparison$0() {
      return this._expression$1$until(new A.StylesheetParser__expressionUntilComparison_closure(this));
    },
    _supportsCondition$0() {
      var condition, operator, right, endPosition, t3, t4, lowerOperator, _this = this,
        t1 = _this.scanner,
        t2 = t1._position;
      if (_this.scanIdentifier$1("not")) {
        _this.whitespace$0();
        return new A.SupportsNegation(_this._supportsConditionInParens$0(), t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      }
      condition = _this._supportsConditionInParens$0();
      _this.whitespace$0();
      for (operator = null; _this.lookingAtIdentifier$0();) {
        if (operator != null)
          _this.expectIdentifier$1(operator);
        else if (_this.scanIdentifier$1("or"))
          operator = "or";
        else {
          _this.expectIdentifier$1("and");
          operator = "and";
        }
        _this.whitespace$0();
        right = _this._supportsConditionInParens$0();
        endPosition = t1._position;
        t3 = t1._sourceFile;
        t4 = new A._FileSpan(t3, t2, endPosition);
        t4._FileSpan$3(t3, t2, endPosition);
        condition = new A.SupportsOperation(condition, right, operator, t4);
        lowerOperator = operator.toLowerCase();
        if (lowerOperator !== "and" && lowerOperator !== "or")
          A.throwExpression(A.ArgumentError$value(operator, "operator", 'may only be "and" or "or".'));
        _this.whitespace$0();
      }
      return condition;
    },
    _supportsConditionInParens$0() {
      var $name, nameStart, wasInParentheses, identifier, operation, contents, identifier0, t2, $arguments, condition, exception, declaration, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._position);
      if (_this._lookingAtInterpolatedIdentifier$0()) {
        identifier0 = _this.interpolatedIdentifier$0();
        t2 = identifier0.get$asPlain();
        if ((t2 == null ? null : t2.toLowerCase()) === "not")
          _this.error$2(0, '"not" is not a valid identifier here.', identifier0.span);
        if (t1.scanChar$1(40)) {
          $arguments = _this._interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(true, true);
          t1.expectChar$1(41);
          return new A.SupportsFunction(identifier0, $arguments, t1.spanFrom$1(start));
        } else {
          t2 = identifier0.contents;
          if (t2.length !== 1 || !type$.Expression._is(B.JSArray_methods.get$first(t2)))
            _this.error$2(0, "Expected @supports condition.", identifier0.span);
          else
            return new A.SupportsInterpolation(type$.Expression._as(B.JSArray_methods.get$first(t2)), t1.spanFrom$1(start));
        }
      }
      t1.expectChar$1(40);
      _this.whitespace$0();
      if (_this.scanIdentifier$1("not")) {
        _this.whitespace$0();
        condition = _this._supportsConditionInParens$0();
        t1.expectChar$1(41);
        return new A.SupportsNegation(condition, t1.spanFrom$1(start));
      } else if (t1.peekChar$0() === 40) {
        condition = _this._supportsCondition$0();
        t1.expectChar$1(41);
        return condition;
      }
      $name = null;
      nameStart = new A._SpanScannerState(t1, t1._position);
      wasInParentheses = _this._inParentheses;
      try {
        $name = _this._expression$0();
        t1.expectChar$1(58);
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception))) {
          t1.set$state(nameStart);
          _this._inParentheses = wasInParentheses;
          identifier = _this.interpolatedIdentifier$0();
          operation = _this._trySupportsOperation$2(identifier, nameStart);
          if (operation != null) {
            t1.expectChar$1(41);
            return operation;
          }
          t2 = new A.InterpolationBuffer(new A.StringBuffer(""), A._setArrayType([], type$.JSArray_Object));
          t2.addInterpolation$1(identifier);
          t2.addInterpolation$1(_this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(false, true, true));
          contents = t2.interpolation$1(t1.spanFrom$1(nameStart));
          if (t1.peekChar$0() === 58)
            throw exception;
          t1.expectChar$1(41);
          return new A.SupportsAnything(contents, t1.spanFrom$1(start));
        } else
          throw exception;
      }
      declaration = _this._supportsDeclarationValue$2($name, start);
      t1.expectChar$1(41);
      return declaration;
    },
    _supportsDeclarationValue$2($name, start) {
      var value, _this = this;
      if ($name instanceof A.StringExpression && !$name.hasQuotes && B.JSString_methods.startsWith$1($name.text.get$initialPlain(), "--"))
        value = new A.StringExpression(_this._interpolatedDeclarationValue$0(), false);
      else {
        _this.whitespace$0();
        value = _this._expression$0();
      }
      return new A.SupportsDeclaration($name, value, _this.scanner.spanFrom$1(start));
    },
    _trySupportsOperation$2(interpolation, start) {
      var expression, beforeWhitespace, t2, t3, operator, operation, right, t4, endPosition, t5, t6, lowerOperator, _this = this, _null = null,
        t1 = interpolation.contents;
      if (t1.length !== 1)
        return _null;
      expression = B.JSArray_methods.get$first(t1);
      if (!type$.Expression._is(expression))
        return _null;
      t1 = _this.scanner;
      beforeWhitespace = new A._SpanScannerState(t1, t1._position);
      _this.whitespace$0();
      for (t2 = start.position, t3 = interpolation.span, operator = _null, operation = operator; _this.lookingAtIdentifier$0();) {
        if (operator != null)
          _this.expectIdentifier$1(operator);
        else if (_this.scanIdentifier$1("and"))
          operator = "and";
        else {
          if (!_this.scanIdentifier$1("or")) {
            if (beforeWhitespace._span_scanner$_scanner !== t1)
              A.throwExpression(A.ArgumentError$(string$.The_gi, _null));
            t2 = beforeWhitespace.position;
            if ((t2 === 0 ? 1 / t2 < 0 : t2 < 0) || t2 > t1.string.length)
              A.throwExpression(A.ArgumentError$("Invalid position " + t2, _null));
            t1._position = t2;
            return t1._lastMatch = null;
          }
          operator = "or";
        }
        _this.whitespace$0();
        right = _this._supportsConditionInParens$0();
        t4 = operation == null ? new A.SupportsInterpolation(expression, t3) : operation;
        endPosition = t1._position;
        t5 = t1._sourceFile;
        t6 = new A._FileSpan(t5, t2, endPosition);
        t6._FileSpan$3(t5, t2, endPosition);
        operation = new A.SupportsOperation(t4, right, operator, t6);
        lowerOperator = operator.toLowerCase();
        if (lowerOperator !== "and" && lowerOperator !== "or")
          A.throwExpression(A.ArgumentError$value(operator, "operator", 'may only be "and" or "or".'));
        _this.whitespace$0();
      }
      return operation;
    },
    _lookingAtInterpolatedIdentifier$0() {
      var second,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null)
        return false;
      if (first === 95 || A.isAlphabetic0(first) || first >= 128 || first === 92)
        return true;
      if (first === 35)
        return t1.peekChar$1(1) === 123;
      if (first !== 45)
        return false;
      second = t1.peekChar$1(1);
      if (second == null)
        return false;
      if (second === 35)
        return t1.peekChar$1(2) === 123;
      return second === 95 || A.isAlphabetic0(second) || second >= 128 || second === 92 || second === 45;
    },
    _lookingAtInterpolatedIdentifierBody$0() {
      var t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null)
        return false;
      if (first === 95 || A.isAlphabetic0(first) || first >= 128 || A.isDigit(first) || first === 45 || first === 92)
        return true;
      return first === 35 && t1.peekChar$1(1) === 123;
    },
    _lookingAtExpression$0() {
      var next,
        t1 = this.scanner,
        character = t1.peekChar$0();
      if (character == null)
        return false;
      if (character === 46)
        return t1.peekChar$1(1) !== 46;
      if (character === 33) {
        next = t1.peekChar$1(1);
        if (next != null)
          if ((next | 32) >>> 0 !== 105)
            t1 = next === 32 || next === 9 || next === 10 || next === 13 || next === 12;
          else
            t1 = true;
        else
          t1 = true;
        return t1;
      }
      if (character !== 40)
        if (character !== 47)
          if (character !== 91)
            if (character !== 39)
              if (character !== 34)
                if (character !== 35)
                  if (character !== 43)
                    if (character !== 45)
                      if (character !== 92)
                        if (character !== 36)
                          if (character !== 38)
                            t1 = character === 95 || A.isAlphabetic0(character) || character >= 128 || A.isDigit(character);
                          else
                            t1 = true;
                        else
                          t1 = true;
                      else
                        t1 = true;
                    else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _withChildren$1$3(child, start, create) {
      var result = create.call$2(this.children$1(0, child), this.scanner.spanFrom$1(start));
      this.whitespaceWithoutComments$0();
      return result;
    },
    _withChildren$3(child, start, create) {
      return this._withChildren$1$3(child, start, create, type$.dynamic);
    },
    _urlString$0() {
      var innerError, stackTrace, t2, exception,
        t1 = this.scanner,
        start = new A._SpanScannerState(t1, t1._position),
        url = this.string$0();
      try {
        t2 = A.Uri_parse(url);
        return t2;
      } catch (exception) {
        t2 = A.unwrapException(exception);
        if (type$.FormatException._is(t2)) {
          innerError = t2;
          stackTrace = A.getTraceFromException(exception);
          this.error$3(0, "Invalid URL: " + J.get$message$x(innerError), t1.spanFrom$1(start), stackTrace);
        } else
          throw exception;
      }
    },
    _publicIdentifier$0() {
      var _this = this,
        t1 = _this.scanner,
        t2 = t1._position,
        result = _this.identifier$1$normalize(true);
      _this._assertPublic$2(result, new A.StylesheetParser__publicIdentifier_closure(_this, new A._SpanScannerState(t1, t2)));
      return result;
    },
    _assertPublic$2(identifier, span) {
      var first = B.JSString_methods._codeUnitAt$1(identifier, 0);
      if (!(first === 45 || first === 95))
        return;
      this.error$2(0, "Private members can't be accessed from outside their modules.", span.call$0());
    },
    get$plainCss() {
      return false;
    }
  };
  A.StylesheetParser_parse_closure.prototype = {
    call$0() {
      var statements, t4,
        t1 = this.$this,
        t2 = t1.scanner,
        t3 = t2._position;
      t2.scanChar$1(65279);
      statements = t1.statements$1(new A.StylesheetParser_parse__closure(t1));
      t2.expectDone$0();
      t4 = t1._globalVariables;
      t4 = t4.get$values(t4);
      B.JSArray_methods.addAll$1(statements, A.MappedIterable_MappedIterable(t4, new A.StylesheetParser_parse__closure0(), A._instanceType(t4)._eval$1("Iterable.E"), type$.Statement));
      return A.Stylesheet$internal(statements, t2.spanFrom$1(new A._SpanScannerState(t2, t3)), t1.get$plainCss());
    },
    $signature: 123
  };
  A.StylesheetParser_parse__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.scanner.scan$1("@charset")) {
        t1.whitespace$0();
        t1.string$0();
        return null;
      }
      return t1._statement$1$root(true);
    },
    $signature: 124
  };
  A.StylesheetParser_parse__closure0.prototype = {
    call$1(declaration) {
      return A.VariableDeclaration$(declaration.name, new A.NullExpression(declaration.expression.get$span()), declaration.span, null, false, true, null);
    },
    $signature: 125
  };
  A.StylesheetParser_parseArgumentDeclaration_closure.prototype = {
    call$0() {
      var $arguments,
        t1 = this.$this,
        t2 = t1.scanner;
      t2.expectChar$2$name(64, "@-rule");
      t1.identifier$0();
      t1.whitespace$0();
      t1.identifier$0();
      $arguments = t1._argumentDeclaration$0();
      t1.whitespace$0();
      t2.expectChar$1(123);
      return $arguments;
    },
    $signature: 126
  };
  A.StylesheetParser__parseSingleProduction_closure.prototype = {
    call$0() {
      var result = this.production.call$0();
      this.$this.scanner.expectDone$0();
      return result;
    },
    $signature() {
      return this.T._eval$1("0()");
    }
  };
  A.StylesheetParser__statement_closure.prototype = {
    call$0() {
      return this.$this._statement$0();
    },
    $signature: 32
  };
  A.StylesheetParser_variableDeclarationWithoutNamespace_closure.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 24
  };
  A.StylesheetParser_variableDeclarationWithoutNamespace_closure0.prototype = {
    call$0() {
      return this.declaration;
    },
    $signature: 128
  };
  A.StylesheetParser__declarationOrBuffer_closure.prototype = {
    call$2(children, span) {
      return A.Declaration$nested(this.name, children, span, null);
    },
    $signature: 26
  };
  A.StylesheetParser__declarationOrBuffer_closure0.prototype = {
    call$2(children, span) {
      return A.Declaration$nested(this.name, children, span, this._box_0.value);
    },
    $signature: 26
  };
  A.StylesheetParser__styleRule_closure.prototype = {
    call$2(children, span) {
      var _this = this,
        t1 = _this.$this;
      if (t1.get$indented() && children.length === 0)
        t1.logger.warn$2$span(0, "This selector doesn't have any properties and won't be rendered.", _this._box_0.interpolation.span);
      t1._inStyleRule = _this.wasInStyleRule;
      return A.StyleRule$(_this._box_0.interpolation, children, t1.scanner.spanFrom$1(_this.start));
    },
    $signature: 130
  };
  A.StylesheetParser__propertyOrVariableDeclaration_closure.prototype = {
    call$2(children, span) {
      return A.Declaration$nested(this._box_0.name, children, span, null);
    },
    $signature: 26
  };
  A.StylesheetParser__propertyOrVariableDeclaration_closure0.prototype = {
    call$2(children, span) {
      return A.Declaration$nested(this._box_0.name, children, span, this.value);
    },
    $signature: 26
  };
  A.StylesheetParser__atRootRule_closure.prototype = {
    call$2(children, span) {
      return A.AtRootRule$(children, span, this.query);
    },
    $signature: 61
  };
  A.StylesheetParser__atRootRule_closure0.prototype = {
    call$2(children, span) {
      return A.AtRootRule$(children, span, null);
    },
    $signature: 61
  };
  A.StylesheetParser__eachRule_closure.prototype = {
    call$2(children, span) {
      var _this = this;
      _this.$this._inControlDirective = _this.wasInControlDirective;
      return A.EachRule$(_this.variables, _this.list, children, span);
    },
    $signature: 132
  };
  A.StylesheetParser__functionRule_closure.prototype = {
    call$2(children, span) {
      return A.FunctionRule$(this.name, this.$arguments, children, span, this.precedingComment);
    },
    $signature: 133
  };
  A.StylesheetParser__forRule_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1.lookingAtIdentifier$0())
        return false;
      if (t1.scanIdentifier$1("to"))
        return this._box_0.exclusive = true;
      else if (t1.scanIdentifier$1("through")) {
        this._box_0.exclusive = false;
        return true;
      } else
        return false;
    },
    $signature: 16
  };
  A.StylesheetParser__forRule_closure0.prototype = {
    call$2(children, span) {
      var t1, _this = this;
      _this.$this._inControlDirective = _this.wasInControlDirective;
      t1 = _this._box_0.exclusive;
      t1.toString;
      return A.ForRule$(_this.variable, _this.from, _this.to, children, span, t1);
    },
    $signature: 134
  };
  A.StylesheetParser__memberList_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.scanner.peekChar$0() === 36)
        this.variables.add$1(0, t1.variableName$0());
      else
        this.identifiers.add$1(0, t1.identifier$1$normalize(true));
    },
    $signature: 10
  };
  A.StylesheetParser__includeRule_closure.prototype = {
    call$2(children, span) {
      return A.ContentBlock$(this.contentArguments_, children, span);
    },
    $signature: 135
  };
  A.StylesheetParser_mediaRule_closure.prototype = {
    call$2(children, span) {
      return A.MediaRule$(this.query, children, span);
    },
    $signature: 136
  };
  A.StylesheetParser__mixinRule_closure.prototype = {
    call$2(children, span) {
      var _this = this;
      _this.$this._inMixin = false;
      return A.MixinRule$(_this.name, _this.$arguments, children, span, _this.precedingComment);
    },
    $signature: 137
  };
  A.StylesheetParser_mozDocumentRule_closure.prototype = {
    call$2(children, span) {
      var _this = this;
      if (_this._box_0.needsDeprecationWarning)
        _this.$this.logger.warn$3$deprecation$span(0, "@-moz-document is deprecated and support will be removed in Dart Sass 2.0.0.\n\nFor details, see https://sass-lang.com/d/moz-document.", true, span);
      return A.AtRule$(_this.name, span, children, _this.value);
    },
    $signature: 62
  };
  A.StylesheetParser_supportsRule_closure.prototype = {
    call$2(children, span) {
      return A.SupportsRule$(this.condition, children, span);
    },
    $signature: 139
  };
  A.StylesheetParser__whileRule_closure.prototype = {
    call$2(children, span) {
      this.$this._inControlDirective = this.wasInControlDirective;
      return A.WhileRule$(this.condition, children, span);
    },
    $signature: 211
  };
  A.StylesheetParser_unknownAtRule_closure.prototype = {
    call$2(children, span) {
      return A.AtRule$(this.name, span, children, this._box_0.value);
    },
    $signature: 62
  };
  A.StylesheetParser__expression_resetState.prototype = {
    call$0() {
      var t2,
        t1 = this._box_0;
      t1.operands_ = t1.operators_ = t1.spaceExpressions_ = t1.commaExpressions_ = null;
      t2 = this.$this;
      t2.scanner.set$state(this.start);
      t1.allowSlash = true;
      t1.singleExpression_ = t2._singleExpression$0();
    },
    $signature: 0
  };
  A.StylesheetParser__expression_resolveOneOperation.prototype = {
    call$0() {
      var t2, t3,
        t1 = this._box_0,
        operator = t1.operators_.pop(),
        left = t1.operands_.pop(),
        right = t1.singleExpression_;
      if (right == null) {
        t2 = this.$this.scanner;
        t3 = operator.operator.length;
        t2.error$3$length$position(0, "Expected expression.", t3, t2._position - t3);
      }
      if (t1.allowSlash) {
        t2 = this.$this;
        t2 = !t2._inParentheses && operator === B.BinaryOperator_qpm && t2._isSlashOperand$1(left) && t2._isSlashOperand$1(right);
      } else
        t2 = false;
      if (t2)
        t1.singleExpression_ = new A.BinaryOperationExpression(B.BinaryOperator_qpm, left, right, true);
      else {
        t1.singleExpression_ = new A.BinaryOperationExpression(operator, left, right, false);
        t1.allowSlash = false;
      }
    },
    $signature: 0
  };
  A.StylesheetParser__expression_resolveOperations.prototype = {
    call$0() {
      var t1,
        operators = this._box_0.operators_;
      if (operators == null)
        return;
      for (t1 = this.resolveOneOperation; operators.length !== 0;)
        t1.call$0();
    },
    $signature: 0
  };
  A.StylesheetParser__expression_addSingleExpression.prototype = {
    call$1(expression) {
      var t2, spaceExpressions, _this = this,
        t1 = _this._box_0;
      if (t1.singleExpression_ != null) {
        t2 = _this.$this;
        if (t2._inParentheses) {
          t2._inParentheses = false;
          if (t1.allowSlash) {
            _this.resetState.call$0();
            return;
          }
        }
        spaceExpressions = t1.spaceExpressions_;
        if (spaceExpressions == null)
          spaceExpressions = t1.spaceExpressions_ = A._setArrayType([], type$.JSArray_Expression);
        _this.resolveOperations.call$0();
        t2 = t1.singleExpression_;
        t2.toString;
        spaceExpressions.push(t2);
        t1.allowSlash = true;
      }
      t1.singleExpression_ = expression;
    },
    $signature: 63
  };
  A.StylesheetParser__expression_addOperator.prototype = {
    call$1(operator) {
      var t2, t3, operators, operands, t4, singleExpression,
        t1 = this.$this;
      if (t1.get$plainCss() && operator !== B.BinaryOperator_qpm && operator !== B.BinaryOperator_axY) {
        t2 = t1.scanner;
        t3 = operator.operator.length;
        t2.error$3$length$position(0, "Operators aren't allowed in plain CSS.", t3, t2._position - t3);
      }
      t2 = this._box_0;
      t2.allowSlash = t2.allowSlash && operator === B.BinaryOperator_qpm;
      operators = t2.operators_;
      if (operators == null)
        operators = t2.operators_ = A._setArrayType([], type$.JSArray_BinaryOperator);
      operands = t2.operands_;
      if (operands == null)
        operands = t2.operands_ = A._setArrayType([], type$.JSArray_Expression);
      t3 = this.resolveOneOperation;
      t4 = operator.precedence;
      while (true) {
        if (!(operators.length !== 0 && B.JSArray_methods.get$last(operators).precedence >= t4))
          break;
        t3.call$0();
      }
      operators.push(operator);
      singleExpression = t2.singleExpression_;
      if (singleExpression == null) {
        t3 = t1.scanner;
        t4 = operator.operator.length;
        t3.error$3$length$position(0, "Expected expression.", t4, t3._position - t4);
      }
      operands.push(singleExpression);
      t1.whitespace$0();
      t2.singleExpression_ = t1._singleExpression$0();
    },
    $signature: 142
  };
  A.StylesheetParser__expression_resolveSpaceExpressions.prototype = {
    call$0() {
      var t1, spaceExpressions, singleExpression, t2;
      this.resolveOperations.call$0();
      t1 = this._box_0;
      spaceExpressions = t1.spaceExpressions_;
      if (spaceExpressions != null) {
        singleExpression = t1.singleExpression_;
        if (singleExpression == null)
          this.$this.scanner.error$1(0, "Expected expression.");
        spaceExpressions.push(singleExpression);
        t2 = B.JSArray_methods.get$first(spaceExpressions).get$span().expand$1(0, singleExpression.get$span());
        t1.singleExpression_ = new A.ListExpression(A.List_List$unmodifiable(spaceExpressions, type$.Expression), B.ListSeparator_EVt, false, t2);
        t1.spaceExpressions_ = null;
      }
    },
    $signature: 0
  };
  A.StylesheetParser_expressionUntilComma_closure.prototype = {
    call$0() {
      return this.$this.scanner.peekChar$0() === 44;
    },
    $signature: 16
  };
  A.StylesheetParser__unicodeRange_closure.prototype = {
    call$1(char) {
      return char != null && A.isHex(char);
    },
    $signature: 15
  };
  A.StylesheetParser__unicodeRange_closure0.prototype = {
    call$1(char) {
      return char != null && A.isHex(char);
    },
    $signature: 15
  };
  A.StylesheetParser_namespacedExpression_closure.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 24
  };
  A.StylesheetParser_trySpecialFunction_closure.prototype = {
    call$1(contents) {
      return new A.StringExpression(contents, false);
    },
    $signature: 144
  };
  A.StylesheetParser__expressionUntilComparison_closure.prototype = {
    call$0() {
      var t1 = this.$this.scanner,
        next = t1.peekChar$0();
      if (next === 61)
        return t1.peekChar$1(1) !== 61;
      return next === 60 || next === 62;
    },
    $signature: 16
  };
  A.StylesheetParser__publicIdentifier_closure.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 24
  };
  A.Syntax.prototype = {
    _enumToString$0() {
      return "Syntax." + this._name;
    },
    toString$0(_) {
      return this._syntax$_name;
    }
  };
  A.NoSourceMapBuffer.prototype = {
    get$length(_) {
      return this._no_source_map_buffer$_buffer._contents.length;
    },
    write$1(_, object) {
      this._no_source_map_buffer$_buffer._contents += A.S(object);
      return null;
    },
    writeCharCode$1(charCode) {
      this._no_source_map_buffer$_buffer._contents += A.Primitives_stringFromCharCode(charCode);
      return null;
    },
    toString$0(_) {
      var t1 = this._no_source_map_buffer$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.flattenVertically_closure.prototype = {
    call$1(inner) {
      return A.QueueList_QueueList$from(inner, this.T);
    },
    $signature() {
      return this.T._eval$1("QueueList<0>(Iterable<0>)");
    }
  };
  A.flattenVertically_closure0.prototype = {
    call$1(queue) {
      this.result.push(queue.removeFirst$0());
      return queue.get$length(queue) === 0;
    },
    $signature() {
      return this.T._eval$1("bool(QueueList<0>)");
    }
  };
  A.longestCommonSubsequence_backtrack.prototype = {
    call$2(i, j) {
      var selection, t1, _this = this;
      if (i === -1 || j === -1)
        return A._setArrayType([], _this.T._eval$1("JSArray<0>"));
      selection = _this.selections[i][j];
      if (selection != null) {
        t1 = _this.call$2(i - 1, j - 1);
        J.add$1$ax(t1, selection);
        return t1;
      }
      t1 = _this.lengths;
      return t1[i + 1][j] > t1[i][j + 1] ? _this.call$2(i, j - 1) : _this.call$2(i - 1, j);
    },
    $signature() {
      return this.T._eval$1("List<0>(int,int)");
    }
  };
  A.Value.prototype = {
    get$isTruthy() {
      return true;
    },
    get$separator() {
      return B.ListSeparator_undecided_null_undecided;
    },
    get$hasBrackets() {
      return false;
    },
    get$asList() {
      return A._setArrayType([this], type$.JSArray_Value);
    },
    get$lengthAsList() {
      return 1;
    },
    get$isBlank() {
      return false;
    },
    get$isSpecialNumber() {
      return false;
    },
    get$isVar() {
      return false;
    },
    sassIndexToListIndex$2(sassIndex, $name) {
      var _this = this,
        index = sassIndex.assertNumber$1($name).assertInt$1($name);
      if (index === 0)
        throw A.wrapException(_this._value$_exception$2("List index may not be 0.", $name));
      if (Math.abs(index) > _this.get$lengthAsList())
        throw A.wrapException(_this._value$_exception$2("Invalid index " + sassIndex.toString$0(0) + " for a list with " + _this.get$lengthAsList() + " elements.", $name));
      return index < 0 ? _this.get$lengthAsList() + index : index - 1;
    },
    assertColor$1($name) {
      return A.throwExpression(this._value$_exception$2(this.toString$0(0) + " is not a color.", $name));
    },
    assertMap$1($name) {
      return A.throwExpression(this._value$_exception$2(this.toString$0(0) + " is not a map.", $name));
    },
    tryMap$0() {
      return null;
    },
    assertNumber$1($name) {
      return A.throwExpression(this._value$_exception$2(this.toString$0(0) + " is not a number.", $name));
    },
    assertNumber$0() {
      return this.assertNumber$1(null);
    },
    assertString$1($name) {
      return A.throwExpression(this._value$_exception$2(this.toString$0(0) + " is not a string.", $name));
    },
    _selectorString$1($name) {
      var string = this._selectorStringOrNull$0();
      if (string != null)
        return string;
      throw A.wrapException(this._value$_exception$2(this.toString$0(0) + " is not a valid selector: it must be a string,\na list of strings, or a list of lists of strings.", $name));
    },
    _selectorStringOrNull$0() {
      var t1, t2, result, t3, _i, complex, string, compound, _this = this, _null = null;
      if (_this instanceof A.SassString)
        return _this._string$_text;
      if (!(_this instanceof A.SassList))
        return _null;
      t1 = _this._list$_contents;
      t2 = t1.length;
      if (t2 === 0)
        return _null;
      result = A._setArrayType([], type$.JSArray_String);
      t3 = _this._separator;
      switch (t3) {
        case B.ListSeparator_rXA:
          for (_i = 0; _i < t2; ++_i) {
            complex = t1[_i];
            if (complex instanceof A.SassString)
              result.push(complex._string$_text);
            else if (complex instanceof A.SassList && complex._separator === B.ListSeparator_EVt) {
              string = complex._selectorStringOrNull$0();
              if (string == null)
                return _null;
              result.push(string);
            } else
              return _null;
          }
          break;
        case B.ListSeparator_zg9:
          return _null;
        default:
          for (_i = 0; _i < t2; ++_i) {
            compound = t1[_i];
            if (compound instanceof A.SassString)
              result.push(compound._string$_text);
            else
              return _null;
          }
          break;
      }
      return B.JSArray_methods.join$1(result, t3 === B.ListSeparator_rXA ? ", " : " ");
    },
    withListContents$2$separator(contents, separator) {
      var t1 = separator == null ? this.get$separator() : separator,
        t2 = this.get$hasBrackets();
      return A.SassList$(contents, t1, t2);
    },
    withListContents$1(contents) {
      return this.withListContents$2$separator(contents, null);
    },
    toString$0(_) {
      return A.serializeValue(this, true, true);
    },
    _value$_exception$2(message, $name) {
      return new A.SassScriptException($name == null ? message : "$" + $name + ": " + message);
    }
  };
  A.SassBoolean.prototype = {
    get$isTruthy() {
      return this.value;
    },
    accept$1$1(visitor) {
      return visitor._serialize$_buffer.write$1(0, String(this.value));
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    }
  };
  A.SassColor.prototype = {
    get$red() {
      if (this._red == null)
        this._hslToRgb$0();
      var t1 = this._red;
      t1.toString;
      return t1;
    },
    get$green() {
      if (this._green == null)
        this._hslToRgb$0();
      var t1 = this._green;
      t1.toString;
      return t1;
    },
    get$blue() {
      if (this._blue == null)
        this._hslToRgb$0();
      var t1 = this._blue;
      t1.toString;
      return t1;
    },
    get$hue() {
      if (this._hue == null)
        this._rgbToHsl$0();
      var t1 = this._hue;
      t1.toString;
      return t1;
    },
    get$saturation() {
      if (this._saturation == null)
        this._rgbToHsl$0();
      var t1 = this._saturation;
      t1.toString;
      return t1;
    },
    get$lightness() {
      if (this._lightness == null)
        this._rgbToHsl$0();
      var t1 = this._lightness;
      t1.toString;
      return t1;
    },
    get$whiteness() {
      return Math.min(Math.min(this.get$red(), this.get$green()), this.get$blue()) / 255 * 100;
    },
    get$blackness() {
      return 100 - Math.max(Math.max(this.get$red(), this.get$green()), this.get$blue()) / 255 * 100;
    },
    accept$1$1(visitor) {
      var $name, hexLength, t1, format, t2, opaque, _this = this;
      if (visitor._style === B.OutputStyle_1)
        if (!(Math.abs(_this._alpha - 1) < $.$get$epsilon()))
          visitor._writeRgb$1(_this);
        else {
          $name = $.$get$namesByColor().$index(0, _this);
          hexLength = visitor._canUseShortHex$1(_this) ? 4 : 7;
          if ($name != null && $name.length <= hexLength)
            visitor._serialize$_buffer.write$1(0, $name);
          else {
            t1 = visitor._serialize$_buffer;
            if (visitor._canUseShortHex$1(_this)) {
              t1.writeCharCode$1(35);
              t1.writeCharCode$1(A.hexCharFor(_this.get$red() & 15));
              t1.writeCharCode$1(A.hexCharFor(_this.get$green() & 15));
              t1.writeCharCode$1(A.hexCharFor(_this.get$blue() & 15));
            } else {
              t1.writeCharCode$1(35);
              visitor._writeHexComponent$1(_this.get$red());
              visitor._writeHexComponent$1(_this.get$green());
              visitor._writeHexComponent$1(_this.get$blue());
            }
          }
        }
      else {
        format = _this.format;
        if (format != null)
          if (format === B._ColorFormatEnum_rgbFunction)
            visitor._writeRgb$1(_this);
          else {
            t1 = visitor._serialize$_buffer;
            if (format === B._ColorFormatEnum_hslFunction) {
              t2 = _this._alpha;
              opaque = Math.abs(t2 - 1) < $.$get$epsilon();
              t1.write$1(0, opaque ? "hsl(" : "hsla(");
              visitor._writeNumber$1(_this.get$hue());
              t1.write$1(0, "deg");
              t1.write$1(0, ", ");
              visitor._writeNumber$1(_this.get$saturation());
              t1.writeCharCode$1(37);
              t1.write$1(0, ", ");
              visitor._writeNumber$1(_this.get$lightness());
              t1.writeCharCode$1(37);
              if (!opaque) {
                t1.write$1(0, ", ");
                visitor._writeNumber$1(t2);
              }
              t1.writeCharCode$1(41);
            } else {
              t2 = type$.SpanColorFormat._as(format)._color0$_span;
              t1.write$1(0, A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t2.file._decodedChars, t2._file$_start, t2._end), 0, null));
            }
          }
        else {
          t1 = $.$get$namesByColor();
          if (t1.containsKey$1(_this) && !(Math.abs(_this._alpha - 0) < $.$get$epsilon()))
            visitor._serialize$_buffer.write$1(0, t1.$index(0, _this));
          else if (Math.abs(_this._alpha - 1) < $.$get$epsilon()) {
            visitor._serialize$_buffer.writeCharCode$1(35);
            visitor._writeHexComponent$1(_this.get$red());
            visitor._writeHexComponent$1(_this.get$green());
            visitor._writeHexComponent$1(_this.get$blue());
          } else
            visitor._writeRgb$1(_this);
        }
      }
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertColor$1($name) {
      return this;
    },
    changeRgb$4$alpha$blue$green$red(alpha, blue, green, red) {
      return A.SassColor$rgb(red, green, blue, alpha == null ? this._alpha : alpha);
    },
    changeRgb$3$blue$green$red(blue, green, red) {
      return this.changeRgb$4$alpha$blue$green$red(null, blue, green, red);
    },
    changeHsl$4$alpha$hue$lightness$saturation(alpha, hue, lightness, saturation) {
      var _this = this, _null = null,
        t1 = hue == null ? _this.get$hue() : hue,
        t2 = saturation == null ? _this.get$saturation() : saturation,
        t3 = lightness == null ? _this.get$lightness() : lightness,
        t4 = alpha == null ? _this._alpha : alpha;
      t1 = B.JSNumber_methods.$mod(t1, 360);
      t2 = A.fuzzyAssertRange(t2, 0, 100, "saturation");
      t3 = A.fuzzyAssertRange(t3, 0, 100, "lightness");
      t4 = A.fuzzyAssertRange(t4, 0, 1, "alpha");
      return new A.SassColor(_null, _null, _null, t1, t2, t3, t4, _null);
    },
    changeHsl$1$saturation(saturation) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(null, null, null, saturation);
    },
    changeHsl$1$lightness(lightness) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(null, null, lightness, null);
    },
    changeHsl$1$hue(hue) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(null, hue, null, null);
    },
    changeAlpha$1(alpha) {
      var _this = this;
      return new A.SassColor(_this._red, _this._green, _this._blue, _this._hue, _this._saturation, _this._lightness, A.fuzzyAssertRange(alpha, 0, 1, "alpha"), null);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.SassColor && other.get$red() === _this.get$red() && other.get$green() === _this.get$green() && other.get$blue() === _this.get$blue() && other._alpha === _this._alpha;
    },
    get$hashCode(_) {
      var _this = this;
      return B.JSInt_methods.get$hashCode(_this.get$red()) ^ B.JSInt_methods.get$hashCode(_this.get$green()) ^ B.JSInt_methods.get$hashCode(_this.get$blue()) ^ B.JSNumber_methods.get$hashCode(_this._alpha);
    },
    _rgbToHsl$0() {
      var t2, lightness, _this = this,
        scaledRed = _this.get$red() / 255,
        scaledGreen = _this.get$green() / 255,
        scaledBlue = _this.get$blue() / 255,
        max = Math.max(Math.max(scaledRed, scaledGreen), scaledBlue),
        min = Math.min(Math.min(scaledRed, scaledGreen), scaledBlue),
        delta = max - min,
        t1 = max === min;
      if (t1)
        _this._hue = 0;
      else if (max === scaledRed)
        _this._hue = B.JSNumber_methods.$mod(60 * (scaledGreen - scaledBlue) / delta, 360);
      else if (max === scaledGreen)
        _this._hue = B.JSNumber_methods.$mod(120 + 60 * (scaledBlue - scaledRed) / delta, 360);
      else if (max === scaledBlue)
        _this._hue = B.JSNumber_methods.$mod(240 + 60 * (scaledRed - scaledGreen) / delta, 360);
      t2 = max + min;
      lightness = 50 * t2;
      _this._lightness = lightness;
      if (t1)
        _this._saturation = 0;
      else {
        t1 = 100 * delta;
        if (lightness < 50)
          _this._saturation = t1 / t2;
        else
          _this._saturation = t1 / (2 - max - min);
      }
    },
    _hslToRgb$0() {
      var _this = this,
        scaledHue = _this.get$hue() / 360,
        scaledSaturation = _this.get$saturation() / 100,
        scaledLightness = _this.get$lightness() / 100,
        m2 = scaledLightness <= 0.5 ? scaledLightness * (scaledSaturation + 1) : scaledLightness + scaledSaturation - scaledLightness * scaledSaturation,
        m1 = scaledLightness * 2 - m2;
      _this._red = A.fuzzyRound(A.SassColor__hueToRgb(m1, m2, scaledHue + 0.3333333333333333) * 255);
      _this._green = A.fuzzyRound(A.SassColor__hueToRgb(m1, m2, scaledHue) * 255);
      _this._blue = A.fuzzyRound(A.SassColor__hueToRgb(m1, m2, scaledHue - 0.3333333333333333) * 255);
    }
  };
  A.SassColor_SassColor$hwb_toRgb.prototype = {
    call$1(hue) {
      return A.fuzzyRound((A.SassColor__hueToRgb(0, 1, hue) * this.factor + this._box_0.scaledWhiteness) * 255);
    },
    $signature: 20
  };
  A._ColorFormatEnum.prototype = {
    toString$0(_) {
      return this._color0$_name;
    }
  };
  A.SpanColorFormat.prototype = {};
  A.SassList.prototype = {
    get$separator() {
      return this._separator;
    },
    get$hasBrackets() {
      return this._hasBrackets;
    },
    get$isBlank() {
      return !this._hasBrackets && B.JSArray_methods.every$1(this._list$_contents, new A.SassList_isBlank_closure());
    },
    get$asList() {
      return this._list$_contents;
    },
    get$lengthAsList() {
      return this._list$_contents.length;
    },
    accept$1$1(visitor) {
      return visitor.visitList$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertMap$1($name) {
      return this._list$_contents.length === 0 ? B.SassMap_Map_empty : this.super$Value$assertMap($name);
    },
    tryMap$0() {
      return this._list$_contents.length === 0 ? B.SassMap_Map_empty : null;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (!(other instanceof A.SassList && other._separator === _this._separator && other._hasBrackets === _this._hasBrackets && B.C_ListEquality.equals$2(0, other._list$_contents, _this._list$_contents)))
        t1 = _this._list$_contents.length === 0 && other instanceof A.SassMap && other.get$asList().length === 0;
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return B.C_ListEquality0.hash$1(this._list$_contents);
    }
  };
  A.SassList_isBlank_closure.prototype = {
    call$1(element) {
      return element.get$isBlank();
    },
    $signature: 25
  };
  A.ListSeparator.prototype = {
    _enumToString$0() {
      return "ListSeparator." + this._name;
    },
    toString$0(_) {
      return this._list$_name;
    }
  };
  A.SassMap.prototype = {
    get$separator() {
      var t1 = this._map$_contents;
      return t1.get$isEmpty(t1) ? B.ListSeparator_undecided_null_undecided : B.ListSeparator_rXA;
    },
    get$asList() {
      var result = A._setArrayType([], type$.JSArray_Value);
      this._map$_contents.forEach$1(0, new A.SassMap_asList_closure(result));
      return result;
    },
    get$lengthAsList() {
      var t1 = this._map$_contents;
      return t1.get$length(t1);
    },
    accept$1$1(visitor) {
      return visitor.visitMap$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertMap$1($name) {
      return this;
    },
    tryMap$0() {
      return this;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.SassMap && B.C_MapEquality.equals$2(0, other._map$_contents, this._map$_contents))) {
        t1 = this._map$_contents;
        t1 = t1.get$isEmpty(t1) && other instanceof A.SassList && other._list$_contents.length === 0;
      } else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._map$_contents;
      return t1.get$isEmpty(t1) ? B.C_ListEquality0.hash$1(B.List_empty3) : B.C_MapEquality.hash$1(t1);
    }
  };
  A.SassMap_asList_closure.prototype = {
    call$2(key, value) {
      this.result.push(A.SassList$(A._setArrayType([key, value], type$.JSArray_Value), B.ListSeparator_EVt, false));
    },
    $signature: 146
  };
  A._SassNull.prototype = {
    get$isTruthy() {
      return false;
    },
    get$isBlank() {
      return true;
    },
    accept$1$1(visitor) {
      if (visitor._inspect)
        visitor._serialize$_buffer.write$1(0, "null");
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    }
  };
  A.SassNumber.prototype = {
    get$unitString() {
      var _this = this;
      return _this.get$hasUnits() ? _this._unitString$2(_this.get$numeratorUnits(), _this.get$denominatorUnits()) : "";
    },
    accept$1$1(visitor) {
      return visitor.visitNumber$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertNumber$1($name) {
      return this;
    },
    assertNumber$0() {
      return this.assertNumber$1(null);
    },
    assertInt$1($name) {
      var t1 = this._number$_value,
        integer = A.fuzzyIsInt(t1) ? B.JSNumber_methods.round$0(t1) : null;
      if (integer != null)
        return integer;
      throw A.wrapException(this._number$_exception$2(this.toString$0(0) + " is not an int.", $name));
    },
    assertInt$0() {
      return this.assertInt$1(null);
    },
    valueInRange$3(min, max, $name) {
      var _this = this,
        result = A.fuzzyCheckRange(_this._number$_value, min, max);
      if (result != null)
        return result;
      throw A.wrapException(_this._number$_exception$2("Expected " + _this.toString$0(0) + " to be within " + min + _this.get$unitString() + " and " + max + _this.get$unitString() + ".", $name));
    },
    valueInRangeWithUnit$4(min, max, $name, unit) {
      var result = A.fuzzyCheckRange(this._number$_value, min, max);
      if (result != null)
        return result;
      throw A.wrapException(this._number$_exception$2("Expected " + this.toString$0(0) + " to be within " + min + unit + " and " + max + unit + ".", $name));
    },
    assertUnit$2(unit, $name) {
      if (this.hasUnit$1(unit))
        return;
      throw A.wrapException(this._number$_exception$2("Expected " + this.toString$0(0) + ' to have unit "' + unit + '".', $name));
    },
    assertNoUnits$1($name) {
      if (!this.get$hasUnits())
        return;
      throw A.wrapException(this._number$_exception$2("Expected " + this.toString$0(0) + " to have no units.", $name));
    },
    coerce$3(newNumerators, newDenominators, $name) {
      return A.SassNumber_SassNumber$withUnits(this.coerceValue$3(newNumerators, newDenominators, $name), newDenominators, newNumerators);
    },
    coerce$2(newNumerators, newDenominators) {
      return this.coerce$3(newNumerators, newDenominators, null);
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      return this._coerceOrConvertValue$4$coerceUnitless$name(newNumerators, newDenominators, true, $name);
    },
    coerceValueToMatch$3(other, $name, otherName) {
      return this._coerceOrConvertValue$6$coerceUnitless$name$other$otherName(other.get$numeratorUnits(), other.get$denominatorUnits(), true, $name, other, otherName);
    },
    coerceValueToMatch$1(other) {
      return this.coerceValueToMatch$3(other, null, null);
    },
    _coerceOrConvertValue$6$coerceUnitless$name$other$otherName(newNumerators, newDenominators, coerceUnitless, $name, other, otherName) {
      var otherHasUnits, t1, _compatibilityException, oldNumerators, _i, oldDenominators, _this = this, _box_0 = {};
      if (B.C_ListEquality.equals$2(0, _this.get$numeratorUnits(), newNumerators) && B.C_ListEquality.equals$2(0, _this.get$denominatorUnits(), newDenominators))
        return _this._number$_value;
      otherHasUnits = newNumerators.length !== 0 || newDenominators.length !== 0;
      t1 = !_this.get$hasUnits() || !otherHasUnits;
      if (t1)
        return _this._number$_value;
      _compatibilityException = new A.SassNumber__coerceOrConvertValue__compatibilityException(_this, other, otherName, otherHasUnits, $name, newNumerators, newDenominators);
      _box_0.value = _this._number$_value;
      t1 = _this.get$numeratorUnits();
      oldNumerators = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      for (t1 = newNumerators.length, _i = 0; _i < newNumerators.length; newNumerators.length === t1 || (0, A.throwConcurrentModificationError)(newNumerators), ++_i)
        A.removeFirstWhere(oldNumerators, new A.SassNumber__coerceOrConvertValue_closure(_box_0, newNumerators[_i]), new A.SassNumber__coerceOrConvertValue_closure0(_compatibilityException));
      t1 = _this.get$denominatorUnits();
      oldDenominators = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      for (t1 = newDenominators.length, _i = 0; _i < newDenominators.length; newDenominators.length === t1 || (0, A.throwConcurrentModificationError)(newDenominators), ++_i)
        A.removeFirstWhere(oldDenominators, new A.SassNumber__coerceOrConvertValue_closure1(_box_0, newDenominators[_i]), new A.SassNumber__coerceOrConvertValue_closure2(_compatibilityException));
      if (oldNumerators.length !== 0 || oldDenominators.length !== 0)
        throw A.wrapException(_compatibilityException.call$0());
      return _box_0.value;
    },
    _coerceOrConvertValue$4$coerceUnitless$name(newNumerators, newDenominators, coerceUnitless, $name) {
      return this._coerceOrConvertValue$6$coerceUnitless$name$other$otherName(newNumerators, newDenominators, coerceUnitless, $name, null, null);
    },
    isComparableTo$1(other) {
      var exception;
      if (!this.get$hasUnits() || !other.get$hasUnits())
        return true;
      try {
        this.greaterThan$1(other);
        return true;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.SassScriptException)
          return false;
        else
          throw exception;
      }
    },
    greaterThan$1(other) {
      var t1 = this._coerceUnits$2(other, A.number0__fuzzyGreaterThan$closure());
      return t1 ? B.SassBoolean_true : B.SassBoolean_false;
    },
    lessThan$1(other) {
      var t1 = this._coerceUnits$2(other, A.number0__fuzzyLessThan$closure());
      return t1 ? B.SassBoolean_true : B.SassBoolean_false;
    },
    _coerceUnits$1$2(other, operation) {
      var t1, exception;
      try {
        t1 = operation.call$2(this._number$_value, other.coerceValueToMatch$1(this));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.SassScriptException) {
          this.coerceValueToMatch$1(other);
          throw exception;
        } else
          throw exception;
      }
    },
    _coerceUnits$2(other, operation) {
      return this._coerceUnits$1$2(other, operation, type$.dynamic);
    },
    _unitString$2(numerators, denominators) {
      var t1;
      if (numerators.length === 0) {
        t1 = denominators.length;
        if (t1 === 0)
          return "no units";
        if (t1 === 1)
          return J.$add$ns(B.JSArray_methods.get$single(denominators), "^-1");
        return "(" + B.JSArray_methods.join$1(denominators, "*") + ")^-1";
      }
      if (denominators.length === 0)
        return B.JSArray_methods.join$1(numerators, "*");
      return B.JSArray_methods.join$1(numerators, "*") + "/" + B.JSArray_methods.join$1(denominators, "*");
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other instanceof A.SassNumber) {
        if (_this.get$numeratorUnits().length !== other.get$numeratorUnits().length || _this.get$denominatorUnits().length !== other.get$denominatorUnits().length)
          return false;
        if (!_this.get$hasUnits())
          return Math.abs(_this._number$_value - other._number$_value) < $.$get$epsilon();
        if (!B.C_ListEquality.equals$2(0, _this._canonicalizeUnitList$1(_this.get$numeratorUnits()), _this._canonicalizeUnitList$1(other.get$numeratorUnits())) || !B.C_ListEquality.equals$2(0, _this._canonicalizeUnitList$1(_this.get$denominatorUnits()), _this._canonicalizeUnitList$1(other.get$denominatorUnits())))
          return false;
        return Math.abs(_this._number$_value * _this._canonicalMultiplier$1(_this.get$numeratorUnits()) / _this._canonicalMultiplier$1(_this.get$denominatorUnits()) - other._number$_value * _this._canonicalMultiplier$1(other.get$numeratorUnits()) / _this._canonicalMultiplier$1(other.get$denominatorUnits())) < $.$get$epsilon();
      } else
        return false;
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.hashCache;
      return t1 == null ? _this.hashCache = A.fuzzyHashCode(_this._number$_value * _this._canonicalMultiplier$1(_this.get$numeratorUnits()) / _this._canonicalMultiplier$1(_this.get$denominatorUnits())) : t1;
    },
    _canonicalizeUnitList$1(units) {
      var type,
        t1 = units.length;
      if (t1 === 0)
        return units;
      if (t1 === 1) {
        type = $.$get$_typesByUnit().$index(0, B.JSArray_methods.get$first(units));
        if (type == null)
          t1 = units;
        else {
          t1 = B.Map_U8AHF.$index(0, type);
          t1.toString;
          t1 = A._setArrayType([B.JSArray_methods.get$first(t1)], type$.JSArray_String);
        }
        return t1;
      }
      t1 = A._arrayInstanceType(units)._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$of(new A.MappedListIterable(units, new A.SassNumber__canonicalizeUnitList_closure(), t1), true, t1._eval$1("ListIterable.E"));
      B.JSArray_methods.sort$0(t1);
      return t1;
    },
    _canonicalMultiplier$1(units) {
      return B.JSArray_methods.fold$2(units, 1, new A.SassNumber__canonicalMultiplier_closure(this));
    },
    canonicalMultiplierForUnit$1(unit) {
      var t1,
        innerMap = B.Map_K2BWj.$index(0, unit);
      if (innerMap == null)
        t1 = 1;
      else {
        t1 = innerMap.get$values(innerMap);
        t1 = 1 / t1.get$first(t1);
      }
      return t1;
    },
    _number$_exception$2(message, $name) {
      return new A.SassScriptException($name == null ? message : "$" + $name + ": " + message);
    }
  };
  A.SassNumber__coerceOrConvertValue__compatibilityException.prototype = {
    call$0() {
      var t2, t3, message, type, unit, t4, _this = this,
        t1 = _this.other;
      if (t1 != null) {
        t2 = _this.$this;
        t3 = t2.toString$0(0) + " and";
        message = new A.StringBuffer(t3);
        t1 = t3 + (" " + t1.toString$0(0) + " have incompatible units");
        message._contents = t1;
        if (!t2.get$hasUnits() || !_this.otherHasUnits)
          message._contents = t1 + " (one has units and the other doesn't)";
        t1 = message.toString$0(0);
        return new A.SassScriptException(t1 + ".");
      } else if (!_this.otherHasUnits) {
        t1 = _this.$this.toString$0(0);
        return new A.SassScriptException("Expected " + t1 + " to have no units.");
      } else {
        t1 = _this.newNumerators;
        if (t1.length === 1 && _this.newDenominators.length === 0) {
          type = $.$get$_typesByUnit().$index(0, B.JSArray_methods.get$first(t1));
          if (type != null) {
            t1 = _this.$this.toString$0(0);
            t2 = B.JSArray_methods.contains$1(A._setArrayType([97, 101, 105, 111, 117], type$.JSArray_int), B.JSString_methods._codeUnitAt$1(type, 0)) ? "an " + type : "a " + type;
            t3 = B.Map_U8AHF.$index(0, type);
            t3.toString;
            t3 = B.JSArray_methods.join$1(t3, ", ");
            return new A.SassScriptException("Expected " + t1 + " to have " + t2 + " unit (" + t3 + ").");
          }
        }
        t2 = _this.newDenominators;
        unit = A.pluralize("unit", t1.length + t2.length, null);
        t3 = _this.$this;
        t4 = t3.toString$0(0);
        t2 = t3._unitString$2(t1, t2);
        return new A.SassScriptException("Expected " + t4 + " to have " + unit + " " + t2 + ".");
      }
    },
    $signature: 147
  };
  A.SassNumber__coerceOrConvertValue_closure.prototype = {
    call$1(oldNumerator) {
      var factor = A.conversionFactor(this.newNumerator, oldNumerator);
      if (factor == null)
        return false;
      this._box_0.value *= factor;
      return true;
    },
    $signature: 5
  };
  A.SassNumber__coerceOrConvertValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(this._compatibilityException.call$0());
    },
    $signature: 0
  };
  A.SassNumber__coerceOrConvertValue_closure1.prototype = {
    call$1(oldDenominator) {
      var factor = A.conversionFactor(this.newDenominator, oldDenominator);
      if (factor == null)
        return false;
      this._box_0.value /= factor;
      return true;
    },
    $signature: 5
  };
  A.SassNumber__coerceOrConvertValue_closure2.prototype = {
    call$0() {
      return A.throwExpression(this._compatibilityException.call$0());
    },
    $signature: 0
  };
  A.SassNumber__canonicalizeUnitList_closure.prototype = {
    call$1(unit) {
      var t1,
        type = $.$get$_typesByUnit().$index(0, unit);
      if (type == null)
        t1 = unit;
      else {
        t1 = B.Map_U8AHF.$index(0, type);
        t1.toString;
        t1 = B.JSArray_methods.get$first(t1);
      }
      return t1;
    },
    $signature: 4
  };
  A.SassNumber__canonicalMultiplier_closure.prototype = {
    call$2(multiplier, unit) {
      return multiplier * this.$this.canonicalMultiplierForUnit$1(unit);
    },
    $signature: 148
  };
  A.ComplexSassNumber.prototype = {
    get$numeratorUnits() {
      return this._numeratorUnits;
    },
    get$denominatorUnits() {
      return this._denominatorUnits;
    },
    get$hasUnits() {
      return true;
    },
    hasUnit$1(unit) {
      return false;
    },
    compatibleWithUnit$1(unit) {
      return false;
    }
  };
  A.SingleUnitSassNumber.prototype = {
    get$numeratorUnits() {
      return A.List_List$unmodifiable([this._unit], type$.String);
    },
    get$denominatorUnits() {
      return B.List_empty;
    },
    get$hasUnits() {
      return true;
    },
    hasUnit$1(unit) {
      return unit === this._unit;
    },
    compatibleWithUnit$1(unit) {
      return A.conversionFactor(this._unit, unit) != null;
    },
    coerceValueToMatch$1(other) {
      var t1 = other instanceof A.SingleUnitSassNumber ? this._coerceValueToUnit$1(other._unit) : null;
      return t1 == null ? this.super$SassNumber$coerceValueToMatch(other, null, null) : t1;
    },
    coerce$2(newNumerators, newDenominators) {
      var t1 = this._coerceToUnit$1(newNumerators[0]);
      return t1 == null ? this.super$SassNumber$coerce(newNumerators, newDenominators, null) : t1;
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      var t1 = this._coerceValueToUnit$1(newNumerators[0]);
      return t1 == null ? this.super$SassNumber$coerceValue(newNumerators, newDenominators, $name) : t1;
    },
    _coerceToUnit$1(unit) {
      var t1 = this._unit;
      if (t1 === unit)
        return this;
      return A.NullableExtension_andThen(A.conversionFactor(unit, t1), new A.SingleUnitSassNumber__coerceToUnit_closure(this, unit));
    },
    _coerceValueToUnit$1(unit) {
      return A.NullableExtension_andThen(A.conversionFactor(unit, this._unit), new A.SingleUnitSassNumber__coerceValueToUnit_closure(this));
    },
    $eq(_, other) {
      var factor;
      if (other == null)
        return false;
      if (other instanceof A.SingleUnitSassNumber) {
        factor = A.conversionFactor(other._unit, this._unit);
        return factor != null && Math.abs(this._number$_value * factor - other._number$_value) < $.$get$epsilon();
      } else
        return false;
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.hashCache;
      return t1 == null ? _this.hashCache = A.fuzzyHashCode(_this._number$_value * _this.canonicalMultiplierForUnit$1(_this._unit)) : t1;
    }
  };
  A.SingleUnitSassNumber__coerceToUnit_closure.prototype = {
    call$1(factor) {
      return new A.SingleUnitSassNumber(this.unit, this.$this._number$_value * factor, null);
    },
    $signature: 149
  };
  A.SingleUnitSassNumber__coerceValueToUnit_closure.prototype = {
    call$1(factor) {
      return this.$this._number$_value * factor;
    },
    $signature: 54
  };
  A.UnitlessSassNumber.prototype = {
    get$numeratorUnits() {
      return B.List_empty;
    },
    get$denominatorUnits() {
      return B.List_empty;
    },
    get$hasUnits() {
      return false;
    },
    hasUnit$1(unit) {
      return false;
    },
    compatibleWithUnit$1(unit) {
      return true;
    },
    coerceValueToMatch$1(other) {
      return this._number$_value;
    },
    coerce$2(newNumerators, newDenominators) {
      return A.SassNumber_SassNumber$withUnits(this._number$_value, newDenominators, newNumerators);
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      return this._number$_value;
    },
    greaterThan$1(other) {
      var t1 = this._number$_value,
        t2 = other._number$_value;
      return t1 > t2 && !(Math.abs(t1 - t2) < $.$get$epsilon()) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    lessThan$1(other) {
      var t1 = this._number$_value,
        t2 = other._number$_value;
      return t1 < t2 && !(Math.abs(t1 - t2) < $.$get$epsilon()) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.UnitlessSassNumber && Math.abs(this._number$_value - other._number$_value) < $.$get$epsilon();
    },
    get$hashCode(_) {
      var t1 = this.hashCache;
      return t1 == null ? this.hashCache = A.fuzzyHashCode(this._number$_value) : t1;
    }
  };
  A.SassString.prototype = {
    get$_sassLength() {
      var t1, result, _this = this,
        value = _this.__SassString__sassLength_FI;
      if (value === $) {
        t1 = new A.Runes(_this._string$_text);
        result = t1.get$length(t1);
        _this.__SassString__sassLength_FI !== $ && A.throwUnnamedLateFieldADI();
        _this.__SassString__sassLength_FI = result;
        value = result;
      }
      return value;
    },
    get$isSpecialNumber() {
      var t1, t2;
      if (this._hasQuotes)
        return false;
      t1 = this._string$_text;
      if (t1.length < 6)
        return false;
      t2 = B.JSString_methods._codeUnitAt$1(t1, 0) | 32;
      if (t2 === 99) {
        t2 = B.JSString_methods._codeUnitAt$1(t1, 1) | 32;
        if (t2 === 108) {
          if ((B.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 97)
            return false;
          if ((B.JSString_methods._codeUnitAt$1(t1, 3) | 32) !== 109)
            return false;
          if ((B.JSString_methods._codeUnitAt$1(t1, 4) | 32) !== 112)
            return false;
          return B.JSString_methods._codeUnitAt$1(t1, 5) === 40;
        } else if (t2 === 97) {
          if ((B.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 108)
            return false;
          if ((B.JSString_methods._codeUnitAt$1(t1, 3) | 32) !== 99)
            return false;
          return B.JSString_methods._codeUnitAt$1(t1, 4) === 40;
        } else
          return false;
      } else if (t2 === 118) {
        if ((B.JSString_methods._codeUnitAt$1(t1, 1) | 32) !== 97)
          return false;
        if ((B.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 114)
          return false;
        return B.JSString_methods._codeUnitAt$1(t1, 3) === 40;
      } else if (t2 === 101) {
        if ((B.JSString_methods._codeUnitAt$1(t1, 1) | 32) !== 110)
          return false;
        if ((B.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 118)
          return false;
        return B.JSString_methods._codeUnitAt$1(t1, 3) === 40;
      } else if (t2 === 109) {
        t2 = B.JSString_methods._codeUnitAt$1(t1, 1) | 32;
        if (t2 === 97) {
          if ((B.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 120)
            return false;
          return B.JSString_methods._codeUnitAt$1(t1, 3) === 40;
        } else if (t2 === 105) {
          if ((B.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 110)
            return false;
          return B.JSString_methods._codeUnitAt$1(t1, 3) === 40;
        } else
          return false;
      } else
        return false;
    },
    get$isVar() {
      if (this._hasQuotes)
        return false;
      var t1 = this._string$_text;
      if (t1.length < 8)
        return false;
      return (B.JSString_methods._codeUnitAt$1(t1, 0) | 32) === 118 && (B.JSString_methods._codeUnitAt$1(t1, 1) | 32) === 97 && (B.JSString_methods._codeUnitAt$1(t1, 2) | 32) === 114 && B.JSString_methods._codeUnitAt$1(t1, 3) === 40;
    },
    get$isBlank() {
      return !this._hasQuotes && this._string$_text.length === 0;
    },
    accept$1$1(visitor) {
      var t1 = this._string$_text;
      if (this._hasQuotes)
        visitor._visitQuotedString$1(t1);
      else
        visitor._visitUnquotedString$1(t1);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertString$1($name) {
      return this;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SassString && this._string$_text === other._string$_text;
    },
    get$hashCode(_) {
      var t1 = this._hashCache;
      return t1 == null ? this._hashCache = B.JSString_methods.get$hashCode(this._string$_text) : t1;
    }
  };
  A.AnySelectorVisitor.prototype = {
    visitComplexSelector$1(complex) {
      return B.JSArray_methods.any$1(complex.components, new A.AnySelectorVisitor_visitComplexSelector_closure(this));
    },
    visitCompoundSelector$1(compound) {
      return B.JSArray_methods.any$1(compound.components, new A.AnySelectorVisitor_visitCompoundSelector_closure(this));
    },
    visitPseudoSelector$1(pseudo) {
      var selector = pseudo.selector;
      return selector == null ? false : this.visitSelectorList$1(selector);
    },
    visitSelectorList$1(list) {
      return B.JSArray_methods.any$1(list.components, this.get$visitComplexSelector());
    },
    visitAttributeSelector$1(attribute) {
      return false;
    },
    visitClassSelector$1(klass) {
      return false;
    },
    visitIDSelector$1(id) {
      return false;
    },
    visitParentSelector$1($parent) {
      return false;
    },
    visitPlaceholderSelector$1(placeholder) {
      return false;
    },
    visitTypeSelector$1(type) {
      return false;
    },
    visitUniversalSelector$1(universal) {
      return false;
    }
  };
  A.AnySelectorVisitor_visitComplexSelector_closure.prototype = {
    call$1(component) {
      return this.$this.visitCompoundSelector$1(component.selector);
    },
    $signature: 11
  };
  A.AnySelectorVisitor_visitCompoundSelector_closure.prototype = {
    call$1(simple) {
      return simple.accept$1(this.$this);
    },
    $signature: 3
  };
  A.RecursiveAstVisitor.prototype = {
    visitCalculationExpression$1(node) {
      var t1, t2, _i;
      for (t1 = node.$arguments, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].accept$1(this);
    },
    visitContentRule$1(node) {
      this.visitArgumentInvocation$1(node.$arguments);
    },
    visitDebugRule$1(node) {
      node.expression.accept$1(this);
    },
    visitErrorRule$1(node) {
      node.expression.accept$1(this);
    },
    visitExtendRule$1(node) {
      this.visitInterpolation$1(node.selector);
    },
    visitIfRule$1(node) {
      var t1, t2, _i, clause, t3, t4, _i0;
      for (t1 = node.clauses, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        clause = t1[_i];
        clause.expression.accept$1(this);
        for (t3 = clause.children, t4 = t3.length, _i0 = 0; _i0 < t4; ++_i0)
          t3[_i0].accept$1(this);
      }
      A.NullableExtension_andThen(node.lastClause, new A.RecursiveAstVisitor_visitIfRule_closure(this));
    },
    visitImportRule$1(node) {
      var t1, t2, _i, $import, $self, t3;
      for (t1 = node.imports, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        $import = t1[_i];
        if ($import instanceof A.StaticImport) {
          this.visitInterpolation$1($import.url);
          $self = $import.modifiers;
          t3 = this.get$visitInterpolation();
          if ($self != null)
            t3.call$1($self);
        }
      }
    },
    visitLoudComment$1(node) {
      this.visitInterpolation$1(node.text);
    },
    visitMixinRule$1(node) {
      return this.visitCallableDeclaration$1(node);
    },
    visitReturnRule$1(node) {
      node.expression.accept$1(this);
    },
    visitUseRule$1(node) {
      var t1, t2, _i;
      for (t1 = node.configuration, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].expression.accept$1(this);
    },
    visitVariableDeclaration$1(node) {
      node.expression.accept$1(this);
    },
    visitWarnRule$1(node) {
      node.expression.accept$1(this);
    },
    visitExpression$1(expression) {
      expression.accept$1(this);
    },
    visitBinaryOperationExpression$1(node) {
      node.left.accept$1(this);
      node.right.accept$1(this);
    },
    visitForwardRule$1(node) {
      var t1, t2, _i;
      for (t1 = node.configuration, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].expression.accept$1(this);
    },
    visitFunctionExpression$1(node) {
      this.visitArgumentInvocation$1(node.$arguments);
    },
    visitListExpression$1(node) {
      var t1, t2, _i;
      for (t1 = node.contents, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].accept$1(this);
    },
    visitMapExpression$1(node) {
      var t1, t2, _i, pair;
      for (t1 = node.pairs, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        pair = t1[_i];
        pair.item1.accept$1(this);
        pair.item2.accept$1(this);
      }
    },
    visitParenthesizedExpression$1(node) {
      node.expression.accept$1(this);
    },
    visitUnaryOperationExpression$1(node) {
      node.operand.accept$1(this);
    },
    visitVariableExpression$1(node) {
    },
    visitArgumentInvocation$1(invocation) {
      var t1, t2, _i;
      for (t1 = invocation.positional, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].accept$1(this);
      for (t1 = invocation.named, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        t1.get$current().accept$1(this);
      t1 = this.get$visitExpression();
      A.NullableExtension_andThen(invocation.rest, t1);
      A.NullableExtension_andThen(invocation.keywordRest, t1);
    },
    visitSupportsCondition$1(condition) {
      var _this = this;
      if (condition instanceof A.SupportsOperation) {
        _this.visitSupportsCondition$1(condition.left);
        _this.visitSupportsCondition$1(condition.right);
      } else if (condition instanceof A.SupportsNegation)
        _this.visitSupportsCondition$1(condition.condition);
      else if (condition instanceof A.SupportsInterpolation)
        condition.expression.accept$1(_this);
      else if (condition instanceof A.SupportsDeclaration) {
        condition.name.accept$1(_this);
        condition.value.accept$1(_this);
      }
    },
    visitInterpolation$1(interpolation) {
      var t1, t2, t3, _i, node;
      for (t1 = interpolation.contents, t2 = t1.length, t3 = type$.Expression, _i = 0; _i < t2; ++_i) {
        node = t1[_i];
        if (t3._is(node))
          node.accept$1(this);
      }
    }
  };
  A.RecursiveAstVisitor_visitIfRule_closure.prototype = {
    call$1(lastClause) {
      var t1, t2, t3, _i;
      for (t1 = lastClause.children, t2 = t1.length, t3 = this.$this, _i = 0; _i < t2; ++_i)
        t1[_i].accept$1(t3);
    },
    $signature: 65
  };
  A.RecursiveStatementVisitor.prototype = {
    visitAtRootRule$1(node) {
      this.visitChildren$1(node.children);
    },
    visitAtRule$1(node) {
      return A.NullableExtension_andThen(node.children, this.get$visitChildren());
    },
    visitContentBlock$1(node) {
      return this.visitCallableDeclaration$1(node);
    },
    visitContentRule$1(node) {
    },
    visitDebugRule$1(node) {
    },
    visitDeclaration$1(node) {
      return A.NullableExtension_andThen(node.children, this.get$visitChildren());
    },
    visitEachRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitErrorRule$1(node) {
    },
    visitExtendRule$1(node) {
    },
    visitForRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitForwardRule$1(node) {
    },
    visitFunctionRule$1(node) {
      return this.visitCallableDeclaration$1(node);
    },
    visitIfRule$1(node) {
      var t1, t2, _i, t3, t4, _i0;
      for (t1 = node.clauses, t2 = t1.length, _i = 0; _i < t2; ++_i)
        for (t3 = t1[_i].children, t4 = t3.length, _i0 = 0; _i0 < t4; ++_i0)
          t3[_i0].accept$1(this);
      A.NullableExtension_andThen(node.lastClause, new A.RecursiveStatementVisitor_visitIfRule_closure(this));
    },
    visitImportRule$1(node) {
    },
    visitIncludeRule$1(node) {
      return A.NullableExtension_andThen(node.content, this.get$visitContentBlock());
    },
    visitLoudComment$1(node) {
    },
    visitMediaRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitMixinRule$1(node) {
      return this.visitCallableDeclaration$1(node);
    },
    visitReturnRule$1(node) {
    },
    visitStyleRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitStylesheet$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitSupportsRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitUseRule$1(node) {
    },
    visitVariableDeclaration$1(node) {
    },
    visitWarnRule$1(node) {
    },
    visitWhileRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitCallableDeclaration$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitChildren$1(children) {
      var t1;
      for (t1 = J.get$iterator$ax(children); t1.moveNext$0();)
        t1.get$current().accept$1(this);
    }
  };
  A.RecursiveStatementVisitor_visitIfRule_closure.prototype = {
    call$1(lastClause) {
      var t1, t2, t3, _i;
      for (t1 = lastClause.children, t2 = t1.length, t3 = this.$this, _i = 0; _i < t2; ++_i)
        t1[_i].accept$1(t3);
    },
    $signature: 65
  };
  A._SerializeVisitor.prototype = {
    _writeRgb$1(value) {
      var t3,
        t1 = value._alpha,
        opaque = Math.abs(t1 - 1) < $.$get$epsilon(),
        t2 = this._serialize$_buffer;
      t2.write$1(0, opaque ? "rgb(" : "rgba(");
      t2.write$1(0, value.get$red());
      t3 = this._style === B.OutputStyle_1;
      t2.write$1(0, t3 ? "," : ", ");
      t2.write$1(0, value.get$green());
      t2.write$1(0, t3 ? "," : ", ");
      t2.write$1(0, value.get$blue());
      if (!opaque) {
        t2.write$1(0, t3 ? "," : ", ");
        this._writeNumber$1(t1);
      }
      t2.writeCharCode$1(41);
    },
    _canUseShortHex$1(color) {
      var t1 = color.get$red();
      if ((t1 & 15) === B.JSInt_methods._shrOtherPositive$1(t1, 4)) {
        t1 = color.get$green();
        if ((t1 & 15) === B.JSInt_methods._shrOtherPositive$1(t1, 4)) {
          t1 = color.get$blue();
          t1 = (t1 & 15) === B.JSInt_methods._shrOtherPositive$1(t1, 4);
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    _writeHexComponent$1(color) {
      var t1 = this._serialize$_buffer;
      t1.writeCharCode$1(A.hexCharFor(B.JSInt_methods._shrOtherPositive$1(color, 4)));
      t1.writeCharCode$1(A.hexCharFor(color & 15));
    },
    visitList$1(value) {
      var t2, t3, singleton, t4, t5, _this = this,
        t1 = value._hasBrackets;
      if (t1)
        _this._serialize$_buffer.writeCharCode$1(91);
      else if (value._list$_contents.length === 0) {
        if (!_this._inspect)
          throw A.wrapException(A.SassScriptException$("() isn't a valid CSS value."));
        _this._serialize$_buffer.write$1(0, "()");
        return;
      }
      t2 = _this._inspect;
      if (t2)
        if (value._list$_contents.length === 1) {
          t3 = value._separator;
          t3 = t3 === B.ListSeparator_rXA || t3 === B.ListSeparator_zg9;
          singleton = t3;
        } else
          singleton = false;
      else
        singleton = false;
      if (singleton && !t1)
        _this._serialize$_buffer.writeCharCode$1(40);
      t3 = value._list$_contents;
      t3 = t2 ? t3 : new A.WhereIterable(t3, new A._SerializeVisitor_visitList_closure(), A._arrayInstanceType(t3)._eval$1("WhereIterable<1>"));
      t4 = value._separator;
      t5 = _this._separatorString$1(t4);
      _this._writeBetween$3(t3, t5, t2 ? new A._SerializeVisitor_visitList_closure0(_this, value) : new A._SerializeVisitor_visitList_closure1(_this));
      if (singleton) {
        t2 = _this._serialize$_buffer;
        t2.write$1(0, t4.separator);
        if (!t1)
          t2.writeCharCode$1(41);
      }
      if (t1)
        _this._serialize$_buffer.writeCharCode$1(93);
    },
    _separatorString$1(separator) {
      switch (separator) {
        case B.ListSeparator_rXA:
          return this._style === B.OutputStyle_1 ? "," : ", ";
        case B.ListSeparator_zg9:
          return this._style === B.OutputStyle_1 ? "/" : " / ";
        case B.ListSeparator_EVt:
          return " ";
        default:
          return "";
      }
    },
    _serialize$_elementNeedsParens$2(separator, value) {
      var t1;
      if (value instanceof A.SassList) {
        if (value._list$_contents.length < 2)
          return false;
        if (value._hasBrackets)
          return false;
        switch (separator) {
          case B.ListSeparator_rXA:
            return value._separator === B.ListSeparator_rXA;
          case B.ListSeparator_zg9:
            t1 = value._separator;
            return t1 === B.ListSeparator_rXA || t1 === B.ListSeparator_zg9;
          default:
            return value._separator !== B.ListSeparator_undecided_null_undecided;
        }
      }
      return false;
    },
    visitMap$1(map) {
      var t1, t2, _this = this;
      if (!_this._inspect)
        throw A.wrapException(A.SassScriptException$(map.toString$0(0) + " isn't a valid CSS value."));
      t1 = _this._serialize$_buffer;
      t1.writeCharCode$1(40);
      t2 = map._map$_contents;
      _this._writeBetween$3(t2.get$entries(t2), ", ", new A._SerializeVisitor_visitMap_closure(_this));
      t1.writeCharCode$1(41);
    },
    _writeMapElement$1(value) {
      var needsParens = value instanceof A.SassList && value._separator === B.ListSeparator_rXA && !value._hasBrackets;
      if (needsParens)
        this._serialize$_buffer.writeCharCode$1(40);
      value.accept$1(this);
      if (needsParens)
        this._serialize$_buffer.writeCharCode$1(41);
    },
    visitNumber$1(value) {
      var _this = this;
      _this._writeNumber$1(value._number$_value);
      if (!_this._inspect) {
        if (value.get$numeratorUnits().length > 1 || value.get$denominatorUnits().length !== 0)
          throw A.wrapException(A.SassScriptException$(value.toString$0(0) + " isn't a valid CSS value."));
        if (value.get$numeratorUnits().length !== 0)
          _this._serialize$_buffer.write$1(0, B.JSArray_methods.get$first(value.get$numeratorUnits()));
      } else
        _this._serialize$_buffer.write$1(0, value.get$unitString());
    },
    _writeNumber$1(number) {
      var text, _this = this,
        integer = A.fuzzyIsInt(number) ? B.JSNumber_methods.round$0(number) : null;
      if (integer != null) {
        _this._serialize$_buffer.write$1(0, _this._removeExponent$1(B.JSInt_methods.toString$0(integer)));
        return;
      }
      text = _this._removeExponent$1(B.JSNumber_methods.toString$0(number));
      if (text.length < 12) {
        if (_this._style === B.OutputStyle_1 && B.JSString_methods._codeUnitAt$1(text, 0) === 48)
          text = B.JSString_methods.substring$1(text, 1);
        _this._serialize$_buffer.write$1(0, text);
        return;
      }
      _this._writeRounded$1(text);
    },
    _removeExponent$1(text) {
      var buffer, t3, additionalZeroes,
        t1 = B.JSString_methods._codeUnitAt$1(text, 0),
        negative = t1 === 45,
        exponent = A._Cell$(),
        t2 = text.length,
        i = 0;
      while (true) {
        if (!(i < t2)) {
          buffer = null;
          break;
        }
        c$0: {
          if (B.JSString_methods._codeUnitAt$1(text, i) !== 101)
            break c$0;
          buffer = new A.StringBuffer("");
          t1 = buffer._contents = "" + A.Primitives_stringFromCharCode(t1);
          if (negative) {
            t1 += A.Primitives_stringFromCharCode(B.JSString_methods._codeUnitAt$1(text, 1));
            buffer._contents = t1;
            if (i > 3)
              buffer._contents = t1 + B.JSString_methods.substring$2(text, 3, i);
          } else if (i > 2)
            buffer._contents = t1 + B.JSString_methods.substring$2(text, 2, i);
          exponent._value = A.int_parse(B.JSString_methods.substring$2(text, i + 1, t2), null);
          break;
        }
        ++i;
      }
      if (buffer == null)
        return text;
      if (exponent._readLocal$0() > 0) {
        t1 = exponent._readLocal$0();
        t2 = buffer._contents;
        t3 = negative ? 1 : 0;
        additionalZeroes = t1 - (t2.length - 1 - t3);
        for (t1 = t2, i = 0; i < additionalZeroes; ++i) {
          t1 += A.Primitives_stringFromCharCode(48);
          buffer._contents = t1;
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        t1 = (negative ? "" + A.Primitives_stringFromCharCode(45) : "") + "0.";
        t2 = exponent.__late_helper$_name;
        i = -1;
        while (true) {
          t3 = exponent._value;
          if (t3 === exponent)
            A.throwExpression(A.LateError$localNI(t2));
          if (!(i > t3))
            break;
          t1 += A.Primitives_stringFromCharCode(48);
          --i;
        }
        if (negative) {
          t2 = buffer._contents;
          t2 = B.JSString_methods.substring$1(t2.charCodeAt(0) == 0 ? t2 : t2, 1);
        } else
          t2 = buffer;
        t2 = t1 + A.S(t2);
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      }
    },
    _writeRounded$1(text) {
      var t1, digits, negative, textIndex, digitsIndex, textIndex0, codeUnit, digitsIndex0, indexAfterPrecision, digitsIndex1, newDigit, writtenIndex, t2, _this = this;
      if (B.JSString_methods.endsWith$1(text, ".0")) {
        _this._serialize$_buffer.write$1(0, B.JSString_methods.substring$2(text, 0, text.length - 2));
        return;
      }
      t1 = text.length;
      digits = new Uint8Array(t1 + 1);
      negative = B.JSString_methods._codeUnitAt$1(text, 0) === 45;
      textIndex = negative ? 1 : 0;
      for (digitsIndex = 1; true; textIndex = textIndex0, digitsIndex = digitsIndex0) {
        if (textIndex === t1) {
          _this._serialize$_buffer.write$1(0, text);
          return;
        }
        textIndex0 = textIndex + 1;
        codeUnit = B.JSString_methods._codeUnitAt$1(text, textIndex);
        if (codeUnit === 46) {
          textIndex = textIndex0;
          break;
        }
        digitsIndex0 = digitsIndex + 1;
        digits[digitsIndex] = codeUnit - 48;
      }
      indexAfterPrecision = textIndex + 10;
      if (indexAfterPrecision >= t1) {
        _this._serialize$_buffer.write$1(0, text);
        return;
      }
      for (digitsIndex0 = digitsIndex; textIndex < indexAfterPrecision; textIndex = textIndex0, digitsIndex0 = digitsIndex1) {
        digitsIndex1 = digitsIndex0 + 1;
        textIndex0 = textIndex + 1;
        digits[digitsIndex0] = B.JSString_methods._codeUnitAt$1(text, textIndex) - 48;
      }
      if (B.JSString_methods._codeUnitAt$1(text, textIndex) - 48 >= 5)
        for (; true; digitsIndex0 = digitsIndex1) {
          digitsIndex1 = digitsIndex0 - 1;
          newDigit = digits[digitsIndex1] + 1;
          digits[digitsIndex1] = newDigit;
          if (newDigit !== 10)
            break;
        }
      for (; digitsIndex0 < digitsIndex; ++digitsIndex0)
        digits[digitsIndex0] = 0;
      while (true) {
        t1 = digitsIndex0 > digitsIndex;
        if (!(t1 && digits[digitsIndex0 - 1] === 0))
          break;
        --digitsIndex0;
      }
      if (digitsIndex0 === 2 && digits[0] === 0 && digits[1] === 0) {
        _this._serialize$_buffer.writeCharCode$1(48);
        return;
      }
      if (negative)
        _this._serialize$_buffer.writeCharCode$1(45);
      if (digits[0] === 0)
        writtenIndex = _this._style === B.OutputStyle_1 && digits[1] === 0 ? 2 : 1;
      else
        writtenIndex = 0;
      for (t2 = _this._serialize$_buffer; writtenIndex < digitsIndex; ++writtenIndex)
        t2.writeCharCode$1(48 + digits[writtenIndex]);
      if (t1) {
        t2.writeCharCode$1(46);
        for (; writtenIndex < digitsIndex0; ++writtenIndex)
          t2.writeCharCode$1(48 + digits[writtenIndex]);
      }
    },
    _visitQuotedString$2$forceDoubleQuote(string, forceDoubleQuote) {
      var t1, includesSingleQuote, includesDoubleQuote, i, char, newIndex, quote, _this = this,
        buffer = forceDoubleQuote ? _this._serialize$_buffer : new A.StringBuffer("");
      if (forceDoubleQuote)
        buffer.writeCharCode$1(34);
      for (t1 = string.length, includesSingleQuote = false, includesDoubleQuote = false, i = 0; i < t1; ++i) {
        char = B.JSString_methods._codeUnitAt$1(string, i);
        switch (char) {
          case 39:
            if (forceDoubleQuote)
              buffer.writeCharCode$1(39);
            else {
              if (includesDoubleQuote) {
                _this._visitQuotedString$2$forceDoubleQuote(string, true);
                return;
              } else
                buffer.writeCharCode$1(39);
              includesSingleQuote = true;
            }
            break;
          case 34:
            if (forceDoubleQuote) {
              buffer.writeCharCode$1(92);
              buffer.writeCharCode$1(34);
            } else {
              if (includesSingleQuote) {
                _this._visitQuotedString$2$forceDoubleQuote(string, true);
                return;
              } else
                buffer.writeCharCode$1(34);
              includesDoubleQuote = true;
            }
            break;
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            _this._writeEscape$4(buffer, char, string, i);
            break;
          case 92:
            buffer.writeCharCode$1(92);
            buffer.writeCharCode$1(92);
            break;
          default:
            newIndex = _this._tryPrivateUseCharacter$4(buffer, char, string, i);
            if (newIndex != null) {
              i = newIndex;
              break;
            }
            buffer.writeCharCode$1(char);
            break;
        }
      }
      if (forceDoubleQuote)
        buffer.writeCharCode$1(34);
      else {
        quote = includesDoubleQuote ? 39 : 34;
        t1 = _this._serialize$_buffer;
        t1.writeCharCode$1(quote);
        t1.write$1(0, buffer);
        t1.writeCharCode$1(quote);
      }
    },
    _visitQuotedString$1(string) {
      return this._visitQuotedString$2$forceDoubleQuote(string, false);
    },
    _visitUnquotedString$1(string) {
      var t1, t2, afterNewline, i, char, newIndex;
      for (t1 = string.length, t2 = this._serialize$_buffer, afterNewline = false, i = 0; i < t1; ++i) {
        char = B.JSString_methods._codeUnitAt$1(string, i);
        switch (char) {
          case 10:
            t2.writeCharCode$1(32);
            afterNewline = true;
            break;
          case 32:
            if (!afterNewline)
              t2.writeCharCode$1(32);
            break;
          default:
            newIndex = this._tryPrivateUseCharacter$4(t2, char, string, i);
            if (newIndex != null) {
              i = newIndex;
              afterNewline = false;
              break;
            }
            t2.writeCharCode$1(char);
            afterNewline = false;
            break;
        }
      }
    },
    _tryPrivateUseCharacter$4(buffer, codeUnit, string, i) {
      var t1;
      if (this._style === B.OutputStyle_1)
        return null;
      if (codeUnit >= 57344 && codeUnit <= 63743) {
        this._writeEscape$4(buffer, codeUnit, string, i);
        return i;
      }
      if (codeUnit >>> 7 === 439 && string.length > i + 1) {
        t1 = i + 1;
        this._writeEscape$4(buffer, 65536 + ((codeUnit & 1023) << 10) + (B.JSString_methods._codeUnitAt$1(string, t1) & 1023), string, t1);
        return t1;
      }
      return null;
    },
    _writeEscape$4(buffer, character, string, i) {
      var t1, next;
      buffer.writeCharCode$1(92);
      buffer.write$1(0, B.JSInt_methods.toRadixString$1(character, 16));
      t1 = i + 1;
      if (string.length === t1)
        return;
      next = B.JSString_methods._codeUnitAt$1(string, t1);
      if (A.isHex(next) || next === 32 || next === 9)
        buffer.writeCharCode$1(32);
    },
    visitAttributeSelector$1(attribute) {
      var value, t2,
        t1 = this._serialize$_buffer;
      t1.writeCharCode$1(91);
      t1.write$1(0, attribute.name);
      value = attribute.value;
      if (value != null) {
        t1.write$1(0, attribute.op);
        if (A.Parser_isIdentifier(value, null) && !B.JSString_methods.startsWith$1(value, "--")) {
          t1.write$1(0, value);
          t2 = attribute.modifier;
          if (t2 != null)
            t1.writeCharCode$1(32);
        } else {
          this._visitQuotedString$1(value);
          t2 = attribute.modifier;
          if (t2 != null)
            if (this._style !== B.OutputStyle_1)
              t1.writeCharCode$1(32);
        }
        if (t2 != null)
          t1.write$1(0, t2);
      }
      t1.writeCharCode$1(93);
    },
    visitClassSelector$1(klass) {
      var t1 = this._serialize$_buffer;
      t1.writeCharCode$1(46);
      t1.write$1(0, klass.name);
    },
    visitComplexSelector$1(complex) {
      var t2, t3, t4, t5, t6, i, component, t7, t8, t9, _this = this,
        t1 = complex.leadingCombinators;
      _this._writeCombinators$1(t1);
      if (t1.length !== 0 && complex.components.length !== 0)
        if (_this._style !== B.OutputStyle_1)
          _this._serialize$_buffer.writeCharCode$1(32);
      for (t1 = complex.components, t2 = t1.length, t3 = t2 - 1, t4 = _this._serialize$_buffer, t5 = _this._style === B.OutputStyle_1, t6 = !t5, i = 0; i < t2; ++i) {
        component = t1[i];
        _this.visitCompoundSelector$1(component.selector);
        t7 = component.combinators;
        t8 = t7.length === 0;
        if (!t8)
          if (t6)
            t4.writeCharCode$1(32);
        t9 = t5 ? "" : " ";
        _this._writeBetween$3(t7, t9, t4.get$write(t4));
        if (i !== t3)
          t7 = !t5 || t8;
        else
          t7 = false;
        if (t7)
          t4.writeCharCode$1(32);
      }
    },
    _writeCombinators$1(combinators) {
      var t1 = this._style === B.OutputStyle_1 ? "" : " ",
        t2 = this._serialize$_buffer;
      return this._writeBetween$3(combinators, t1, t2.get$write(t2));
    },
    visitCompoundSelector$1(compound) {
      var t2, t3, _i,
        t1 = this._serialize$_buffer,
        start = t1.get$length(t1);
      for (t2 = compound.components, t3 = t2.length, _i = 0; _i < t3; ++_i)
        t2[_i].accept$1(this);
      if (t1.get$length(t1) === start)
        t1.writeCharCode$1(42);
    },
    visitIDSelector$1(id) {
      var t1 = this._serialize$_buffer;
      t1.writeCharCode$1(35);
      t1.write$1(0, id.name);
    },
    visitSelectorList$1(list) {
      var t1, t2, t3, first, t4, _this = this,
        complexes = list.components;
      for (t1 = J.get$iterator$ax(_this._inspect ? complexes : new A.WhereIterable(complexes, new A._SerializeVisitor_visitSelectorList_closure(), A._arrayInstanceType(complexes)._eval$1("WhereIterable<1>"))), t2 = _this._style !== B.OutputStyle_1, t3 = _this._serialize$_buffer, first = true; t1.moveNext$0();) {
        t4 = t1.get$current();
        if (first)
          first = false;
        else {
          t3.writeCharCode$1(44);
          if (t4.lineBreak) {
            if (t2)
              t3.write$1(0, "\n");
          } else if (t2)
            t3.writeCharCode$1(32);
        }
        _this.visitComplexSelector$1(t4);
      }
    },
    visitParentSelector$1($parent) {
      var t2,
        t1 = this._serialize$_buffer;
      t1.writeCharCode$1(38);
      t2 = $parent.suffix;
      if (t2 != null)
        t1.write$1(0, t2);
    },
    visitPlaceholderSelector$1(placeholder) {
      var t1 = this._serialize$_buffer;
      t1.writeCharCode$1(37);
      t1.write$1(0, placeholder.name);
    },
    visitPseudoSelector$1(pseudo) {
      var t3, t4, t5,
        innerSelector = pseudo.selector,
        t1 = innerSelector == null,
        t2 = !t1;
      if (t2 && pseudo.name === "not" && innerSelector.accept$1(B.C__IsInvisibleVisitor))
        return;
      t3 = this._serialize$_buffer;
      t3.writeCharCode$1(58);
      if (!pseudo.isSyntacticClass)
        t3.writeCharCode$1(58);
      t3.write$1(0, pseudo.name);
      t4 = pseudo.argument;
      t5 = t4 == null;
      if (t5 && t1)
        return;
      t3.writeCharCode$1(40);
      if (!t5) {
        t3.write$1(0, t4);
        if (t2)
          t3.writeCharCode$1(32);
      }
      if (t2)
        this.visitSelectorList$1(innerSelector);
      t3.writeCharCode$1(41);
    },
    visitTypeSelector$1(type) {
      this._serialize$_buffer.write$1(0, type.name);
    },
    visitUniversalSelector$1(universal) {
      var t2,
        t1 = universal.namespace;
      if (t1 != null) {
        t2 = this._serialize$_buffer;
        t2.write$1(0, t1);
        t2.writeCharCode$1(124);
      }
      this._serialize$_buffer.writeCharCode$1(42);
    },
    _writeBetween$1$3(iterable, text, callback) {
      var t1, t2, first, value;
      for (t1 = J.get$iterator$ax(iterable), t2 = this._serialize$_buffer, first = true; t1.moveNext$0();) {
        value = t1.get$current();
        if (first)
          first = false;
        else
          t2.write$1(0, text);
        callback.call$1(value);
      }
    },
    _writeBetween$3(iterable, text, callback) {
      return this._writeBetween$1$3(iterable, text, callback, type$.dynamic);
    }
  };
  A._SerializeVisitor_visitList_closure.prototype = {
    call$1(element) {
      return !element.get$isBlank();
    },
    $signature: 25
  };
  A._SerializeVisitor_visitList_closure0.prototype = {
    call$1(element) {
      var t1 = this.$this,
        needsParens = t1._serialize$_elementNeedsParens$2(this.value._separator, element);
      if (needsParens)
        t1._serialize$_buffer.writeCharCode$1(40);
      element.accept$1(t1);
      if (needsParens)
        t1._serialize$_buffer.writeCharCode$1(41);
    },
    $signature: 49
  };
  A._SerializeVisitor_visitList_closure1.prototype = {
    call$1(element) {
      element.accept$1(this.$this);
    },
    $signature: 49
  };
  A._SerializeVisitor_visitMap_closure.prototype = {
    call$1(entry) {
      var t1 = this.$this;
      t1._writeMapElement$1(entry.get$key());
      t1._serialize$_buffer.write$1(0, ": ");
      t1._writeMapElement$1(entry.get$value(entry));
    },
    $signature: 155
  };
  A._SerializeVisitor_visitSelectorList_closure.prototype = {
    call$1(complex) {
      return !complex.accept$1(B.C__IsInvisibleVisitor);
    },
    $signature: 7
  };
  A.OutputStyle.prototype = {
    _enumToString$0() {
      return "OutputStyle." + this._name;
    }
  };
  A.LineFeed.prototype = {
    _enumToString$0() {
      return "LineFeed." + this._name;
    },
    toString$0(_) {
      return "lf";
    }
  };
  A.MigrationException.prototype = {
    toString$0(_) {
      return "Error: " + this.message;
    },
    $isException: 1
  };
  A.MigrationSourceSpanException.prototype = {$isMigrationException: 1};
  A.MigrationVisitor.prototype = {
    run$2(stylesheet, importer) {
      this.__MigrationVisitor__importer_A = importer;
      this.visitStylesheet$1(stylesheet);
      return this._migrated;
    },
    visitStylesheet$1(node) {
      var t1, t2, results, existingResults, _this = this,
        _s7_ = "patches",
        oldPatches = _this.__patches,
        oldUrl = _this._currentUrl;
      _this.__patches = A._setArrayType([], type$.JSArray_Patch);
      t1 = node.span.file.url;
      t1.toString;
      _this._currentUrl = t1;
      _this.super$RecursiveStatementVisitor$visitStylesheet(node);
      _this.beforePatch$1(node);
      t1 = type$.UnmodifiableListView_Patch;
      t2 = new A.UnmodifiableListView(_this.assertInStylesheet$2(_this.__patches, _s7_), t1);
      if (!t2.get$isEmpty(t2)) {
        t2 = new A.UnmodifiableListView(_this.assertInStylesheet$2(_this.__patches, _s7_), t1);
        results = A.Patch_applyAll(t2.get$first(t2).selection.file, new A.UnmodifiableListView(_this.assertInStylesheet$2(_this.__patches, _s7_), t1));
      } else
        results = null;
      if (results != null) {
        t1 = _this._migrated;
        existingResults = t1.$index(0, _this._currentUrl);
        if (existingResults != null && existingResults !== results)
          throw A.wrapException(A.MigrationException$(string$.The_mi + A.prettyUri(_this._currentUrl) + string$.x2c_depe));
        t1.$indexSet(0, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl"), results);
      }
      _this.__patches = oldPatches;
      _this._currentUrl = oldUrl;
    },
    beforePatch$1(node) {
    },
    visitDependency$3$forImport(dependency, context, forImport) {
      var t1, t2, result, _this = this;
      if (dependency.get$scheme() === "sass")
        return;
      t1 = _this.get$importCache();
      t2 = _this.__MigrationVisitor__importer_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      result = t1.import$4$baseImporter$baseUrl$forImport(dependency, t2, _this._currentUrl, forImport);
      if (result != null) {
        t1 = result.item1;
        t2 = _this.__MigrationVisitor__importer_A;
        if (t1 !== t2)
          return;
        _this.__MigrationVisitor__importer_A = t1;
        _this.visitStylesheet$1(result.item2);
        _this.__MigrationVisitor__importer_A = t2;
      } else
        _this._missingDependencies.putIfAbsent$2(context.file.url.resolveUri$1(dependency), new A.MigrationVisitor_visitDependency_closure(context));
    },
    visitDependency$2(dependency, context) {
      return this.visitDependency$3$forImport(dependency, context, false);
    },
    addPatch$2$beforeExisting(patch, beforeExisting) {
      var t1 = this.__patches;
      if (beforeExisting)
        B.JSArray_methods.insert$2(this.assertInStylesheet$2(t1, "patches"), 0, patch);
      else
        this.assertInStylesheet$2(t1, "patches").push(patch);
    },
    addPatch$1(patch) {
      return this.addPatch$2$beforeExisting(patch, false);
    },
    visitImportRule$1(node) {
      var t1, t2, _i, $import;
      this.super$RecursiveAstVisitor$visitImportRule(node);
      if (this.migrateDependencies)
        for (t1 = node.imports, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          $import = t1[_i];
          if ($import instanceof A.DynamicImport)
            this.visitDependency$3$forImport(A.Uri_parse($import.urlString), $import.span, true);
        }
    },
    visitUseRule$1(node) {
      this.super$RecursiveAstVisitor$visitUseRule(node);
      if (this.migrateDependencies)
        this.visitDependency$2(node.url, node.span);
    },
    assertInStylesheet$1$2(value, $name) {
      if (value != null)
        return value;
      throw A.wrapException(A.StateError$("Can't access " + $name + " when not visiting a stylesheet."));
    },
    assertInStylesheet$2(value, $name) {
      return this.assertInStylesheet$1$2(value, $name, type$.dynamic);
    },
    get$importCache() {
      return this.importCache;
    }
  };
  A.MigrationVisitor_visitDependency_closure.prototype = {
    call$0() {
      return this.context;
    },
    $signature: 24
  };
  A._MigrationVisitor_Object_RecursiveStatementVisitor.prototype = {};
  A._MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor.prototype = {
    visitAtRootRule$1(node) {
      A.NullableExtension_andThen(node.query, this.get$visitInterpolation());
      this.super$RecursiveStatementVisitor$visitAtRootRule(node);
    },
    visitAtRule$1(node) {
      this.visitInterpolation$1(node.name);
      A.NullableExtension_andThen(node.value, this.get$visitInterpolation());
      this.super$RecursiveStatementVisitor$visitAtRule(node);
    },
    visitDeclaration$1(node) {
      this.visitInterpolation$1(node.name);
      A.NullableExtension_andThen(node.value, this.get$visitExpression());
      this.super$RecursiveStatementVisitor$visitDeclaration(node);
    },
    visitEachRule$1(node) {
      node.list.accept$1(this);
      this.super$RecursiveStatementVisitor$visitEachRule(node);
    },
    visitForRule$1(node) {
      node.from.accept$1(this);
      node.to.accept$1(this);
      this.super$RecursiveStatementVisitor$visitForRule(node);
    },
    visitIncludeRule$1(node) {
      this.visitArgumentInvocation$1(node.$arguments);
      this.super$RecursiveStatementVisitor$visitIncludeRule(node);
    },
    visitMediaRule$1(node) {
      this.visitInterpolation$1(node.query);
      this.super$RecursiveStatementVisitor$visitMediaRule(node);
    },
    visitStyleRule$1(node) {
      this.visitInterpolation$1(node.selector);
      this.super$RecursiveStatementVisitor$visitStyleRule(node);
    },
    visitSupportsRule$1(node) {
      this.visitSupportsCondition$1(node.condition);
      this.super$RecursiveStatementVisitor$visitSupportsRule(node);
    },
    visitWhileRule$1(node) {
      node.condition.accept$1(this);
      this.super$RecursiveStatementVisitor$visitWhileRule(node);
    },
    visitCallableDeclaration$1(node) {
      var t1, t2, t3, _i, $self;
      for (t1 = node.$arguments.$arguments, t2 = t1.length, t3 = this.get$visitExpression(), _i = 0; _i < t2; ++_i) {
        $self = t1[_i].defaultValue;
        if ($self != null)
          t3.call$1($self);
      }
      this.super$RecursiveStatementVisitor$visitCallableDeclaration(node);
    }
  };
  A.Migrator.prototype = {
    get$invocation() {
      return B.JSString_methods.replaceFirst$2(A.Command.prototype.get$invocation.call(this), "[arguments]", "[options] <entrypoints.scss...>");
    },
    get$usage() {
      return A.Command.prototype.get$usage.call(this) + "\n\nSee also https://sass-lang.com/documentation/cli/migrator#" + this.get$name(this);
    },
    handleDeprecation$2(message, span) {
    },
    run$0() {
      var t3, importCache, t4, context, caseSensitive, t5, _i, entry, entrypoint, tuple, _this = this, _null = null,
        t1 = type$.Uri,
        allMigrated = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.String),
        importer = new A.FilesystemImporter(A.absolute(".")),
        t2 = new A.NodeModulesImporter(A._setArrayType([], type$.JSArray_FilesystemImporter));
      t2.NodeModulesImporter$1(_null);
      t3 = type$.nullable_Tuple3_Importer_Uri_Uri;
      t2 = A.ImportCache__toImporters(A._setArrayType([t2], type$.JSArray_Importer), _this._globalResults.$index(0, "load-path"), _null);
      importCache = new A.ImportCache(t2, new A._DeprecationLogger(_this), A.LinkedHashMap_LinkedHashMap$_empty(type$.Tuple2_Uri_bool, t3), A.LinkedHashMap_LinkedHashMap$_empty(type$.Tuple4_of_Uri_and_bool_and_Importer_and_nullable_Uri, t3), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_Stylesheet), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.ImporterResult));
      t1 = A._setArrayType([], type$.JSArray_String);
      for (t2 = _this._argResults.rest, t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        if (A.FileStat_statSync(t4).type === B.FileSystemEntityType_0)
          t1.push(t4);
        else {
          context = $.$get$context();
          caseSensitive = context.style !== $.$get$Style_windows() || false;
          t4 = new A.Glob(t4, context, new A.Parser(new A.StringScanner(_null, t4), context, caseSensitive)._parseSequence$0());
          t5 = context.style;
          if (t5 !== context.style)
            A.throwExpression(A.StateError$("Can't list glob \"" + t4.toString$0(0) + '"; it matches ' + t5.toString$0(0) + " paths, but this platform uses " + A.style().toString$0(0) + " paths."));
          t4 = t4._listTreeForFileSystem$1(B.C_NodeFileSystem).listSync$2$followLinks$root(true, _null);
          t5 = t4.length;
          _i = 0;
          for (; _i < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i) {
            entry = t4[_i];
            if (entry instanceof A.File)
              t1.push(entry.path);
          }
        }
      }
      for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        entrypoint = t1[_i];
        tuple = importCache.import$2$baseImporter($.$get$context().toUri$1(entrypoint), importer);
        if (tuple == null)
          throw A.wrapException(A.MigrationException$("Could not find Sass file at '" + entrypoint + "'."));
        _this.migrateFile$3(importCache, tuple.item2, tuple.item1).forEach$1(0, new A.Migrator_run_closure(allMigrated));
      }
      if (_this.missingDependencies.__js_helper$_length !== 0)
        _this._warnForMissingDependencies$0();
      return allMigrated;
    },
    _warnForMissingDependencies$0() {
      var t1, t2, t3, t4, count;
      if (A._asBool(this._globalResults.$index(0, "verbose")))
        for (t1 = this.missingDependencies, t2 = A.LinkedHashMapKeyIterator$(t1, t1._modifications); t2.moveNext$0();) {
          t3 = t2.__js_helper$_current;
          t4 = "Could not find Sass file at '" + $.$get$context().prettyUri$1(t3) + "'.";
          t3 = t1.$index(0, t3);
          if (t3 == null)
            J.write$1$x(J.get$stderr$x(self.process), "WARNING: " + t4 + "\n");
          else {
            t3 = t3.message$1(0, t4);
            J.write$1$x(J.get$stderr$x(self.process), "WARNING on " + t3 + "\n");
          }
        }
      else {
        t1 = this.missingDependencies;
        count = t1.__js_helper$_length;
        t2 = count === 1 ? "y" : "ies";
        A.emitWarning("" + count + " dependenc" + t2 + " could not be found.", null);
        t1.forEach$1(0, new A.Migrator__warnForMissingDependencies_closure());
      }
    }
  };
  A.Migrator_run_closure.prototype = {
    call$2(file, contents) {
      var t1 = this.allMigrated;
      if (t1.containsKey$1(file) && contents !== t1.$index(0, file))
        throw A.wrapException(A.MigrationException$(string$.The_mi + file.toString$0(0) + string$.x2c_depe));
      t1.$indexSet(0, file, contents);
    },
    $signature: 37
  };
  A.Migrator__warnForMissingDependencies_closure.prototype = {
    call$2(url, context) {
      var t1 = $.$get$context(),
        t2 = t1.prettyUri$1(url),
        t3 = context.file;
      t1 = t1.prettyUri$1(t3.url);
      t3 = A.FileLocation$_(t3, context._file$_start);
      t3 = t3.file.getLine$1(t3.offset);
      J.write$1$x(J.get$stderr$x(self.process), "  " + t2 + " @" + t1 + ":" + (t3 + 1) + "\n");
    },
    $signature: 157
  };
  A._DeprecationLogger.prototype = {
    warn$3$deprecation$span(_, message, deprecation, span) {
      if (deprecation)
        this.migrator.handleDeprecation$2(message, span);
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$3$deprecation$span($receiver, message, deprecation, null);
    },
    warn$2$span($receiver, message, span) {
      return this.warn$3$deprecation$span($receiver, message, false, span);
    }
  };
  A.DivisionMigrator.prototype = {
    migrateFile$3(importCache, stylesheet, importer) {
      var _this = this,
        t1 = type$.Uri,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.FileSpan),
        result = new A._DivisionMigrationVisitor(A._asBool(_this._argResults.$index(0, "pessimistic")), A._asBool(_this._argResults.$index(0, "multiplication")), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.String), A._asBool(_this._globalResults.$index(0, "migrate-deps")), importCache, t2).run$2(stylesheet, importer);
      _this.missingDependencies.addAll$1(0, new A.UnmodifiableMapView(t2, type$.UnmodifiableMapView_Uri_FileSpan));
      return result;
    },
    get$name() {
      return "division";
    },
    get$description() {
      return "Use the math.div() function instead of the / division operator\n\nMore info: https://sass-lang.com/d/slash-div";
    },
    get$argParser() {
      return this.argParser;
    }
  };
  A._DivisionMigrationVisitor.prototype = {
    visitStylesheet$1(node) {
      var t2, t3, t4, _this = this,
        oldNamespaces = _this.__existingNamespaces,
        oldUseRules = _this.__useRulesToInsert,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.Uri, type$.nullable_String);
      for (t2 = new A.UnmodifiableListView(node._uses, type$.UnmodifiableListView_UseRule), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t1.$indexSet(0, t4.url, t4.namespace);
      }
      _this.__existingNamespaces = t1;
      _this.__useRulesToInsert = A._setArrayType([], type$.JSArray_String);
      _this.super$MigrationVisitor$visitStylesheet(node);
      _this.__existingNamespaces = oldNamespaces;
      _this.__useRulesToInsert = oldUseRules;
    },
    beforePatch$1(node) {
      var useRules, t1, insertionPoint, t2, _i, child, _this = this,
        _s17_ = "_useRulesToInsert";
      if (_this.assertInStylesheet$2(_this.__useRulesToInsert, _s17_).length === 0)
        return;
      useRules = B.JSArray_methods.join$1(_this.assertInStylesheet$2(_this.__useRulesToInsert, _s17_), "\n");
      t1 = node.span;
      insertionPoint = A.FileLocation$_(t1.file, t1._file$_start);
      for (t1 = node.children, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        child = t1[_i];
        if (child instanceof A.LoudComment || child instanceof A.SilentComment)
          continue;
        t1 = child.get$span();
        t2 = t1.file;
        t1 = t1._file$_start;
        insertionPoint = new A.FileLocation(t2, t1);
        insertionPoint.FileLocation$_$2(t2, t1);
        break;
      }
      t1 = insertionPoint.offset;
      _this.addPatch$1(new A.Patch(A._FileSpan$(insertionPoint.file, t1, t1), useRules + "\n\n"));
    },
    _builtInPrefix$1(module) {
      var t1, namespace, asClause, t2, _this = this,
        _s19_ = "_existingNamespaces",
        url = A.Uri_parse("sass:" + module);
      if (_this.assertInStylesheet$2(_this.__existingNamespaces, _s19_).containsKey$1(url)) {
        t1 = A.NullableExtension_andThen0(_this.assertInStylesheet$2(_this.__existingNamespaces, _s19_).$index(0, url), new A._DivisionMigrationVisitor__builtInPrefix_closure());
        return t1 == null ? "" : t1;
      }
      namespace = J.firstWhere$1$ax(new A._DivisionMigrationVisitor__builtInPrefix_options(module).call$0(), new A._DivisionMigrationVisitor__builtInPrefix_closure0(_this));
      _this.assertInStylesheet$2(_this.__existingNamespaces, _s19_).$indexSet(0, url, namespace);
      asClause = module === namespace ? "" : " as " + namespace;
      t1 = _this.assertInStylesheet$2(_this.__useRulesToInsert, "_useRulesToInsert");
      t2 = _this.assertInStylesheet$2(_this._currentUrl, "currentUrl");
      t2 = B.JSString_methods.endsWith$1(t2.get$path(t2), ".sass") ? "" : ";";
      t1.push('@use "sass:' + module + '"' + asClause + t2);
      return namespace + ".";
    },
    visitArgumentInvocation$1(invocation) {
      this._withContext$3$inCalcContext$isDivisionAllowed(new A._DivisionMigrationVisitor_visitArgumentInvocation_closure(this, invocation), false, true);
    },
    visitBinaryOperationExpression$1(node) {
      var _this = this,
        t1 = node.operator;
      if (t1 === B.BinaryOperator_qpm)
        _this._visitSlashOperation$1(node);
      else {
        if (!_this._expectsNumericResult)
          t1 = t1 === B.BinaryOperator_6pl || t1 === B.BinaryOperator_PHH || t1 === B.BinaryOperator_apg || t1 === B.BinaryOperator_oqF || t1 === B.BinaryOperator_cw1 || t1 === B.BinaryOperator_Wma;
        else
          t1 = true;
        _this._withContext$3$expectsNumericResult$isDivisionAllowed(new A._DivisionMigrationVisitor_visitBinaryOperationExpression_closure(_this, node), t1, true);
      }
    },
    visitCalculationExpression$1(node) {
      this._withContext$2$inCalcContext(new A._DivisionMigrationVisitor_visitCalculationExpression_closure(this, node), true);
    },
    visitFunctionExpression$1(node) {
      if (this._tryColorFunction$1(node))
        return;
      this.visitArgumentInvocation$1(node.$arguments);
    },
    visitInterpolation$1(node) {
      this._withContext$3$inCalcContext$isDivisionAllowed(new A._DivisionMigrationVisitor_visitInterpolation_closure(this, node), false, false);
    },
    visitListExpression$1(node) {
      this._withContext$3$expectsNumericResult$isDivisionAllowed(new A._DivisionMigrationVisitor_visitListExpression_closure(this, node), false, false);
    },
    visitParenthesizedExpression$2$negated(node, negated) {
      this._withContext$2$isDivisionAllowed(new A._DivisionMigrationVisitor_visitParenthesizedExpression_closure(this, node, negated), true);
    },
    visitParenthesizedExpression$1(node) {
      return this.visitParenthesizedExpression$2$negated(node, false);
    },
    visitUnaryOperationExpression$1(node) {
      var operand = node.operand;
      if (node.operator === B.UnaryOperator_TLI && operand instanceof A.ParenthesizedExpression) {
        this.visitParenthesizedExpression$2$negated(operand, true);
        return;
      }
      this.super$RecursiveAstVisitor$visitUnaryOperationExpression(node);
    },
    visitReturnRule$1(node) {
      this._withContext$2$isDivisionAllowed(new A._DivisionMigrationVisitor_visitReturnRule_closure(this, node), true);
    },
    visitVariableDeclaration$1(node) {
      this._withContext$2$isDivisionAllowed(new A._DivisionMigrationVisitor_visitVariableDeclaration_closure(this, node), true);
    },
    _tryColorFunction$1(node) {
      var t3, t4, t5, channels, last, _this = this,
        _s9_ = "$channels",
        t1 = {},
        t2 = A._setArrayType(["rgb", "rgba", "hsl", "hsla"], type$.JSArray_String);
      if (!B.JSArray_methods.contains$1(t2, A.stringReplaceAllUnchecked(node.originalName, "_", "-")))
        return false;
      t1.channels = null;
      t2 = node.$arguments;
      t3 = t2.positional;
      t4 = t3.length;
      if (t4 === 1) {
        t5 = t2.named;
        t5 = t5.get$isEmpty(t5) && B.JSArray_methods.get$first(t3) instanceof A.ListExpression;
      } else
        t5 = false;
      if (t5)
        t2 = t1.channels = type$.nullable_ListExpression._as(B.JSArray_methods.get$first(t3));
      else {
        if (t4 === 0) {
          t3 = t2.named;
          t3 = t3.containsKey$1(_s9_) && t3.get$length(t3) === 1 && t3.$index(0, _s9_) instanceof A.ListExpression;
        } else
          t3 = false;
        if (t3) {
          channels = type$.nullable_ListExpression._as(t2.named.$index(0, _s9_));
          t1.channels = channels;
          t2 = channels;
        } else
          t2 = null;
      }
      if (t2 != null)
        if (!t2.hasBrackets)
          if (t2.separator === B.ListSeparator_EVt) {
            t3 = t2.contents;
            t3 = t3.length !== 3 || !(B.JSArray_methods.get$last(t3) instanceof A.BinaryOperationExpression);
          } else
            t3 = true;
        else
          t3 = true;
      else
        t3 = true;
      if (t3)
        return false;
      last = type$.BinaryOperationExpression._as(B.JSArray_methods.get$last(t2.contents));
      if (!(last.left instanceof A.NumberExpression) || !(last.right instanceof A.NumberExpression)) {
        _this._patchSpacesToCommas$1(t2);
        _this._patchOperatorToComma$1(last);
      }
      _this._withContext$2$isDivisionAllowed(new A._DivisionMigrationVisitor__tryColorFunction_closure(t1, _this, last), true);
      last.right.accept$1(_this);
      return true;
    },
    _visitSlashOperation$1(node) {
      var t1, t2, t3, _this = this;
      if (_this._inCalcContext) {
        node.left.accept$1(_this);
        node.right.accept$1(_this);
        return false;
      }
      if (!_this._isDivisionAllowed && _this._onlySlash$1(node) || _this._isDefinitelyNotNumber$1(node)) {
        if (_this._isDivisionAllowed || _this._containsInterpolation$1(node)) {
          t1 = _this._builtInPrefix$1("list");
          t2 = node.get$span();
          t2 = A.FileLocation$_(t2.file, t2._file$_start);
          t3 = t2.offset;
          _this.addPatch$1(new A.Patch(A._FileSpan$(t2.file, t3, t3), t1 + "slash("));
          t1 = node.get$span();
          t1 = A.FileLocation$_(t1.file, t1._end);
          t3 = t1.offset;
          _this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t3, t3), ")"));
          _this._visitSlashListArguments$1(node);
        }
        return true;
      }
      if (_this._expectsNumericResult || _this._isDefinitelyNumber$1(node) || !_this.isPessimistic) {
        _this._withContext$2$expectsNumericResult(new A._DivisionMigrationVisitor__visitSlashOperation_closure(_this, node), true);
        if (_this._tryMultiplication$1(node))
          return false;
        t1 = _this._builtInPrefix$1("math");
        t2 = node.get$span();
        t2 = A.FileLocation$_(t2.file, t2._file$_start);
        t3 = t2.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t2.file, t3, t3), t1 + "div("));
        t1 = node.get$span();
        t1 = A.FileLocation$_(t1.file, t1._end);
        t3 = t1.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t3, t3), ")"));
        _this._patchParensIfAny$1(node.left);
        _this._patchOperatorToComma$1(node);
        _this._patchParensIfAny$1(node.right);
        return true;
      } else {
        A.emitWarning("Could not determine whether this is division", node.get$span());
        _this.super$RecursiveAstVisitor$visitBinaryOperationExpression(node);
        return false;
      }
    },
    _tryMultiplication$1(node) {
      var divisor, t1, t2, t3;
      if (!this.useMultiplication)
        return false;
      divisor = node.right;
      if (!(divisor instanceof A.NumberExpression))
        return false;
      if (divisor.unit != null)
        return false;
      t1 = divisor.value;
      if (!B.Set_2Vk20._map.containsKey$1(t1))
        return false;
      t2 = A.ExtendSpan_extendThroughWhitespace(node.left.get$span());
      t2 = A.FileLocation$_(t2.file, t2._end);
      t3 = t2.offset;
      this.addPatch$1(new A.Patch(A.ExtendSpan_extendIfMatches(A._FileSpan$(t2.file, t3, t3), "/"), "*"));
      this.addPatch$1(new A.Patch(divisor.span, A.S(1 / t1)));
      return true;
    },
    _visitSlashListArguments$1(node) {
      var t1, t2, _this = this;
      if (node instanceof A.BinaryOperationExpression && node.operator === B.BinaryOperator_qpm) {
        _this._visitSlashListArguments$1(node.left);
        _this._patchOperatorToComma$1(node);
        _this._visitSlashListArguments$1(node.right);
      } else {
        if (node instanceof A.StringExpression) {
          t1 = node.text.contents;
          t1 = t1.length === 1 && type$.Expression._is(B.JSArray_methods.get$first(t1));
        } else
          t1 = false;
        if (t1) {
          t1 = node.text;
          t2 = t1.span;
          _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t2, 0, 2), ""));
          _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t2, t2._end - t2._file$_start - 1, null), ""));
          type$.Expression._as(B.JSArray_methods.get$first(t1.contents)).accept$1(_this);
        } else
          node.accept$1(_this);
      }
    },
    _onlySlash$1(node) {
      if (node instanceof A.NumberExpression)
        return true;
      if (node instanceof A.BinaryOperationExpression)
        return node.operator === B.BinaryOperator_qpm && this._onlySlash$1(node.left) && this._onlySlash$1(node.right);
      return false;
    },
    _isDefinitelyNumber$1(node) {
      var t1, _this = this;
      if (node instanceof A.NumberExpression)
        return true;
      if (node instanceof A.ParenthesizedExpression)
        return _this._isDefinitelyNumber$1(node.expression);
      else if (node instanceof A.UnaryOperationExpression)
        return _this._isDefinitelyNumber$1(node.operand);
      else if (node instanceof A.BinaryOperationExpression) {
        t1 = node.operator;
        if (!(t1 === B.BinaryOperator_6pl || t1 === B.BinaryOperator_PHH))
          t1 = _this._isDefinitelyNumber$1(node.left) && _this._isDefinitelyNumber$1(node.right);
        else
          t1 = true;
        return t1;
      }
      return false;
    },
    _isDefinitelyNotNumber$1(node) {
      if (node instanceof A.ParenthesizedExpression)
        return this._isDefinitelyNotNumber$1(node.expression);
      if (node instanceof A.BinaryOperationExpression)
        return this._isDefinitelyNotNumber$1(node.left) || this._isDefinitelyNotNumber$1(node.right);
      return node instanceof A.BooleanExpression || node instanceof A.ColorExpression || node instanceof A.ListExpression || node instanceof A.MapExpression || node instanceof A.NullExpression || node instanceof A.StringExpression;
    },
    _containsInterpolation$1(node) {
      if (node instanceof A.ParenthesizedExpression)
        return this._containsInterpolation$1(node.expression);
      if (node instanceof A.BinaryOperationExpression)
        return this._containsInterpolation$1(node.left) || this._containsInterpolation$1(node.right);
      return node instanceof A.StringExpression && node.text.get$asPlain() == null;
    },
    _patchSpacesToCommas$1(node) {
      var t1, t2, i, t3, t4, t5, t6;
      for (t1 = node.contents, t2 = t1.length - 1, i = 0; i < t2;) {
        t3 = t1[i].get$span();
        t4 = t3.file;
        t3 = t3._end;
        new A.FileLocation(t4, t3).FileLocation$_$2(t4, t3);
        ++i;
        t5 = t1[i].get$span();
        t6 = t5.file;
        t5 = t5._file$_start;
        new A.FileLocation(t6, t5).FileLocation$_$2(t6, t5);
        t6 = new A._FileSpan(t4, t3, t5);
        t6._FileSpan$3(t4, t3, t5);
        t3 = this.assertInStylesheet$2(this.__patches, "patches");
        t3.push(new A.Patch(t6, ", "));
      }
    },
    _patchOperatorToComma$1(node) {
      var t1 = node.left.get$span(),
        start = A.FileLocation$_(t1.file, t1._end);
      t1 = node.right.get$span();
      this.addPatch$1(new A.Patch(start.file.span$2(start.offset, A.FileLocation$_(t1.file, t1._file$_start).offset), ", "));
    },
    _patchParensIfAny$1(node) {
      var expression, t1;
      if (!(node instanceof A.ParenthesizedExpression))
        return;
      expression = node.expression;
      if (expression instanceof A.BinaryOperationExpression && expression.operator === B.BinaryOperator_qpm)
        return;
      t1 = node.span;
      this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t1, 0, 1), ""));
      this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t1, t1._end - t1._file$_start - 1, null), ""));
    },
    _withContext$4$expectsNumericResult$inCalcContext$isDivisionAllowed(operation, expectsNumericResult, inCalcContext, isDivisionAllowed) {
      var _this = this,
        previousDivisionAllowed = _this._isDivisionAllowed,
        previousNumericResult = _this._expectsNumericResult,
        previousCalcContext = _this._inCalcContext;
      _this._isDivisionAllowed = isDivisionAllowed == null ? previousDivisionAllowed : isDivisionAllowed;
      _this._expectsNumericResult = expectsNumericResult == null ? previousNumericResult : expectsNumericResult;
      _this._inCalcContext = inCalcContext == null ? previousCalcContext : inCalcContext;
      operation.call$0();
      _this._isDivisionAllowed = previousDivisionAllowed;
      _this._expectsNumericResult = previousNumericResult;
      _this._inCalcContext = previousCalcContext;
    },
    _withContext$2$isDivisionAllowed(operation, isDivisionAllowed) {
      return this._withContext$4$expectsNumericResult$inCalcContext$isDivisionAllowed(operation, null, null, isDivisionAllowed);
    },
    _withContext$2$expectsNumericResult(operation, expectsNumericResult) {
      return this._withContext$4$expectsNumericResult$inCalcContext$isDivisionAllowed(operation, expectsNumericResult, null, null);
    },
    _withContext$3$expectsNumericResult$isDivisionAllowed(operation, expectsNumericResult, isDivisionAllowed) {
      return this._withContext$4$expectsNumericResult$inCalcContext$isDivisionAllowed(operation, expectsNumericResult, null, isDivisionAllowed);
    },
    _withContext$3$inCalcContext$isDivisionAllowed(operation, inCalcContext, isDivisionAllowed) {
      return this._withContext$4$expectsNumericResult$inCalcContext$isDivisionAllowed(operation, null, inCalcContext, isDivisionAllowed);
    },
    _withContext$2$inCalcContext(operation, inCalcContext) {
      return this._withContext$4$expectsNumericResult$inCalcContext$isDivisionAllowed(operation, null, inCalcContext, null);
    }
  };
  A._DivisionMigrationVisitor__builtInPrefix_closure.prototype = {
    call$1(ns) {
      return ns + ".";
    },
    $signature: 4
  };
  A._DivisionMigrationVisitor__builtInPrefix_options.prototype = {
    call$0() {
      var $async$self = this;
      return A._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, i, i0, t1;
        return function $async$call$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.module;
                $async$goto = 2;
                return t1;
              case 2:
                // after yield
                $async$goto = 3;
                return "sass-" + t1;
              case 3:
                // after yield
                i = 2;
              case 4:
                // for condition
                // trivial condition
                i0 = i + 1;
                $async$goto = 7;
                return t1 + i;
              case 7:
                // after yield
              case 5:
                // for update
                i = i0;
                // goto for condition
                $async$goto = 4;
                break;
              case 6:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.String);
    },
    $signature: 59
  };
  A._DivisionMigrationVisitor__builtInPrefix_closure0.prototype = {
    call$1(option) {
      var t1 = this.$this;
      return !t1.assertInStylesheet$2(t1.__existingNamespaces, "_existingNamespaces").containsValue$1(option);
    },
    $signature: 5
  };
  A._DivisionMigrationVisitor_visitArgumentInvocation_closure.prototype = {
    call$0() {
      return this.$this.super$RecursiveAstVisitor$visitArgumentInvocation(this.invocation);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor_visitBinaryOperationExpression_closure.prototype = {
    call$0() {
      return this.$this.super$RecursiveAstVisitor$visitBinaryOperationExpression(this.node);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor_visitCalculationExpression_closure.prototype = {
    call$0() {
      this.$this.super$RecursiveAstVisitor$visitCalculationExpression(this.node);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor_visitInterpolation_closure.prototype = {
    call$0() {
      this.$this.super$RecursiveAstVisitor$visitInterpolation(this.node);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor_visitListExpression_closure.prototype = {
    call$0() {
      return this.$this.super$RecursiveAstVisitor$visitListExpression(this.node);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor_visitParenthesizedExpression_closure.prototype = {
    call$0() {
      var t2, _this = this,
        t1 = _this.node,
        expression = t1.expression;
      if (expression instanceof A.BinaryOperationExpression && expression.operator === B.BinaryOperator_qpm) {
        t2 = _this.$this;
        if (t2._visitSlashOperation$1(expression) && !_this.negated) {
          t1 = t1.span;
          t2.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t1, 0, 1), ""));
          t2.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t1, t1._end - t1._file$_start - 1, null), ""));
        }
      } else
        _this.$this.super$RecursiveAstVisitor$visitParenthesizedExpression(t1);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor_visitReturnRule_closure.prototype = {
    call$0() {
      return this.$this.super$RecursiveAstVisitor$visitReturnRule(this.node);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor_visitVariableDeclaration_closure.prototype = {
    call$0() {
      return this.$this.super$RecursiveAstVisitor$visitVariableDeclaration(this.node);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor__tryColorFunction_closure.prototype = {
    call$0() {
      var t1 = this._box_0,
        t2 = this.$this;
      t1.channels.contents[0].accept$1(t2);
      t1.channels.contents[1].accept$1(t2);
      this.last.left.accept$1(t2);
    },
    $signature: 0
  };
  A._DivisionMigrationVisitor__visitSlashOperation_closure.prototype = {
    call$0() {
      return this.$this.super$RecursiveAstVisitor$visitBinaryOperationExpression(this.node);
    },
    $signature: 0
  };
  A.MediaLogicMigrator.prototype = {
    handleDeprecation$2(message, span) {
      var t1;
      if (span == null)
        return;
      if (!B.JSString_methods.startsWith$1(message, "Starting a @media query with "))
        return;
      t1 = span.file.url;
      t1.toString;
      J.add$1$ax(this._expressionsToMigrate.putIfAbsent$2(t1, new A.MediaLogicMigrator_handleDeprecation_closure()), span);
    },
    migrateFile$3(importCache, stylesheet, importer) {
      var t1 = type$.Uri,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.FileSpan),
        result = new A._MediaLogicVisitor(this._expressionsToMigrate, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.String), A._asBool(this._globalResults.$index(0, "migrate-deps")), importCache, t2).run$2(stylesheet, importer);
      this.missingDependencies.addAll$1(0, new A.UnmodifiableMapView(t2, type$.UnmodifiableMapView_Uri_FileSpan));
      return result;
    },
    get$name() {
      return "media-logic";
    },
    get$description() {
      return "Migrates deprecated `@media` query syntax.\\nSee https://sass-lang.com/d/media-logic.";
    }
  };
  A.MediaLogicMigrator_handleDeprecation_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.FileSpan);
    },
    $signature: 67
  };
  A._MediaLogicVisitor.prototype = {
    beforePatch$1(node) {
      var t1, t2, t3, t4, t5, _this = this,
        expressions = _this._expressionsToMigrate.$index(0, node.span.file.url);
      if (expressions == null)
        expressions = A.LinkedHashSet_LinkedHashSet$_empty(type$.FileSpan);
      for (t1 = expressions.get$iterator(expressions); t1.moveNext$0();) {
        t2 = t1.get$current();
        t3 = t2.file;
        t4 = t2._file$_start;
        new A.FileLocation(t3, t4).FileLocation$_$2(t3, t4);
        t5 = new A._FileSpan(t3, t4, t4);
        t5._FileSpan$3(t3, t4, t4);
        t4 = _this.assertInStylesheet$2(_this.__patches, "patches");
        t4.push(new A.Patch(t5, "#{"));
        t2 = t2._end;
        new A.FileLocation(t3, t2).FileLocation$_$2(t3, t2);
        t4 = new A._FileSpan(t3, t2, t2);
        t4._FileSpan$3(t3, t2, t2);
        t2 = _this.assertInStylesheet$2(_this.__patches, "patches");
        t2.push(new A.Patch(t4, "}"));
      }
    }
  };
  A.ModuleMigrator.prototype = {
    run$0() {
      var t1, t2, t3,
        results = this.super$Migrator$run();
      for (t1 = this._filesWithRenamedDeclarations, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (!results.containsKey$1(t3))
          throw A.wrapException(A.MigrationException$("The migrator wants to rename a member in " + A.prettyUri(t3) + ", but it is not being migrated. You should re-run the migrator with --migrate-deps or with " + A.prettyUri(t3) + " as one of your entrypoints."));
      }
      return results;
    },
    migrateFile$3(importCache, stylesheet, importer) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, visitor, migrated, importOnlyUrl, results, _this = this,
        _s13_ = "remove-prefix",
        t1 = A.LinkedHashSet_LinkedHashSet$_empty(type$.ForwardType);
      for (t2 = J.get$iterator$ax(_this._argResults.$index(0, "forward")); t2.moveNext$0();)
        t1.add$1(0, A.ForwardType_ForwardType(t2.get$current()));
      if (t1.contains$1(0, B.C_ForwardType) && !_this._argResults.wasParsed$1(_s13_))
        throw A.wrapException(A.MigrationException$("You must provide --remove-prefix with --forward=prefixed so we know which prefixed members to forward."));
      t2 = type$.MemberDeclaration_SassDeclaration;
      t3 = type$.MemberDeclaration_VariableDeclaration;
      t4 = type$.MemberDeclaration_MixinRule;
      t5 = type$.FunctionExpression;
      t6 = type$.MemberDeclaration_FunctionRule;
      t7 = type$.Set_FunctionExpression;
      t8 = type$.BidirectionalMap_of_FunctionExpression_and_MemberDeclaration_FunctionRule;
      t9 = type$.SassReference;
      t10 = type$.Uri;
      t11 = type$.Scope;
      t12 = type$.String;
      t13 = type$.List_String;
      visitor = A._ModuleMigrationVisitor$(importCache, new A._ReferenceVisitor(new A.BidirectionalMap(A.LinkedHashMap_LinkedHashMap$_empty(type$.VariableExpression, t2), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Set_VariableExpression), type$.BidirectionalMap_of_VariableExpression_and_MemberDeclaration_SassDeclaration), new A.BidirectionalMap(A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Set_MemberDeclaration_VariableDeclaration), type$.BidirectionalMap_of_MemberDeclaration_VariableDeclaration_and_MemberDeclaration_SassDeclaration), A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), new A.BidirectionalMap(A.LinkedHashMap_LinkedHashMap$_empty(type$.IncludeRule, t4), A.LinkedHashMap_LinkedHashMap$_empty(t4, type$.Set_IncludeRule), type$.BidirectionalMap_of_IncludeRule_and_MemberDeclaration_MixinRule), new A.BidirectionalMap(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6), A.LinkedHashMap_LinkedHashMap$_empty(t6, t7), t8), new A.BidirectionalMap(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6), A.LinkedHashMap_LinkedHashMap$_empty(t6, t7), t8), A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Set_Uri), A.LinkedHashMap_LinkedHashMap$_empty(t9, type$.ReferenceSource), A.LinkedHashMap_LinkedHashMap$_empty(t10, type$.nullable_ForwardRule), A.LinkedHashMap_LinkedHashMap$_empty(t10, t11), A.LinkedHashMap_LinkedHashMap$_empty(t10, type$.Map_of_MemberDeclaration_SassDeclaration_and_ReferenceSource), A.LinkedHashMap_LinkedHashMap$_empty(t9, t11), A.LinkedHashMap_LinkedHashMap$_empty(t12, t10), importCache).build$2(stylesheet, importer), t13._as(_this._globalResults.$index(0, "load-path")), A._asBool(_this._globalResults.$index(0, "migrate-deps")), t1, J.map$1$1$ax(t13._as(_this._argResults.$index(0, _s13_)), new A.ModuleMigrator_migrateFile_closure(), t12));
      visitor.references.globalDeclarations._base.forEach$1(0, visitor.get$_renameDeclaration());
      migrated = visitor.super$MigrationVisitor$run(stylesheet, importer);
      if (visitor.forwards.contains$1(0, B.C_ForwardType0) || visitor._needsImportOnly) {
        t1 = stylesheet.span.file.url;
        t1.toString;
        importOnlyUrl = A.getImportOnlyUrl(t1);
        results = visitor._generateImportOnly$2(t1, importOnlyUrl);
        if (results != null)
          migrated.$indexSet(0, importOnlyUrl, results);
      }
      t1 = A.LinkedHashSet_LinkedHashSet$_empty(t10);
      for (t2 = visitor.renamedMembers, t2 = A.LinkedHashMapKeyIterator$(t2, t2._modifications); t2.moveNext$0();)
        t1.add$1(0, t2.__js_helper$_current.sourceUrl);
      _this._filesWithRenamedDeclarations.addAll$1(0, t1);
      return migrated;
    },
    get$name() {
      return "module";
    },
    get$description() {
      return "Use the new module system.";
    },
    get$argParser() {
      return this.argParser;
    }
  };
  A.ModuleMigrator_migrateFile_closure.prototype = {
    call$1(prefix) {
      return A.stringReplaceAllUnchecked(prefix, "_", "-");
    },
    $signature: 4
  };
  A._ModuleMigrationVisitor.prototype = {
    get$_configuredVariables() {
      var t1 = this.__configuredVariables;
      return t1 == null ? A.throwExpression(A.StateError$("Can't access _configuredVariables when not visiting a dependency.")) : t1;
    },
    _generateImportOnly$2(entrypoint, importOnlyUrl) {
      var t2, t3, t4, shouldBeVisible, visibleAtEntrypoint, url, prefix, newName, dependency, forwards, entrypointForwards, t5, _i, tuple, t6, t7, _this = this,
        t1 = type$.Uri,
        forwardsByUrl = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_of_String_and_Set_MemberDeclaration_SassDeclaration),
        hiddenByUrl = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_MemberDeclaration_SassDeclaration);
      for (t1 = _this.references.globalDeclarations._base, t1 = t1.get$iterator(t1), t2 = _this.renamedMembers; t1.moveNext$0();) {
        t3 = t1.get$current();
        t4 = t3.name;
        shouldBeVisible = !B.JSString_methods.startsWith$1(t4, "-");
        if (shouldBeVisible)
          visibleAtEntrypoint = t3.sourceUrl.$eq(0, entrypoint) || _this._shouldForward$1(t4);
        else
          visibleAtEntrypoint = false;
        shouldBeVisible = _this._shouldForward$2$forImportOnly(t4, true) && shouldBeVisible;
        if (!visibleAtEntrypoint && !shouldBeVisible)
          continue;
        if (visibleAtEntrypoint)
          url = entrypoint;
        else
          url = t3 instanceof A.ImportOnlyMemberDeclaration ? t3.importOnlyUrl : t3.sourceUrl;
        if (t3 instanceof A.ImportOnlyMemberDeclaration && url.$eq(0, t3.sourceUrl))
          prefix = t3.importOnlyPrefix;
        else {
          newName = t2.$index(0, t3);
          if (newName != null)
            prefix = B.JSString_methods.substring$2(t4, 0, t4.length - newName.length);
          else if (visibleAtEntrypoint) {
            prefix = _this._prefixFor$1(t4);
            if (prefix == null)
              prefix = "";
          } else
            prefix = "";
        }
        J.add$1$ax(forwardsByUrl.putIfAbsent$2(url, new A._ModuleMigrationVisitor__generateImportOnly_closure()).putIfAbsent$2(prefix, new A._ModuleMigrationVisitor__generateImportOnly_closure0()), t3);
        if (visibleAtEntrypoint && !t3.sourceUrl.$eq(0, entrypoint))
          J.add$1$ax(hiddenByUrl.putIfAbsent$2(t3.sourceUrl, new A._ModuleMigrationVisitor__generateImportOnly_closure1()), t3);
      }
      t1 = forwardsByUrl.__js_helper$_length;
      if (t1 !== 0)
        if (t1 === 1) {
          t1 = forwardsByUrl.$index(0, entrypoint);
          t1 = (t1 == null ? null : J.get$keys$z(t1).join$0(0)) === "";
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return null;
      dependency = _this._absoluteUrlToDependency$2$relativeTo(entrypoint, importOnlyUrl).item1;
      forwards = forwardsByUrl.remove$1(0, entrypoint);
      entrypointForwards = forwards != null ? _this._forwardRulesForShown$4(entrypoint, '"' + dependency.toString$0(0) + '"', forwards, A.LinkedHashSet_LinkedHashSet$_empty(type$.MemberDeclaration_SassDeclaration)) : A._setArrayType(['@forward "' + dependency.toString$0(0) + '"'], type$.JSArray_String);
      t1 = A._setArrayType([], type$.JSArray_Tuple3_of_Uri_and_Uri_and_Map_of_String_and_Set_MemberDeclaration_SassDeclaration);
      for (t2 = forwardsByUrl.get$entries(forwardsByUrl), t2 = new A.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f), t3 = type$.Tuple3_of_Uri_and_Uri_and_Map_of_String_and_Set_MemberDeclaration_SassDeclaration, t4 = A._instanceType(t2)._rest[1]; t2.moveNext$0();) {
        t5 = t2.__internal$_current;
        if (t5 == null)
          t5 = t4._as(t5);
        t1.push(new A.Tuple3(t5.get$key(), _this._absoluteUrlToDependency$2$relativeTo(t5.get$key(), importOnlyUrl).item1, t5.get$value(t5), t3));
      }
      t2 = A._setArrayType([], type$.JSArray_String);
      for (t3 = t1.length, t4 = type$.MemberDeclaration_SassDeclaration, _i = 0; _i < t1.length; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        tuple = t1[_i];
        t5 = tuple.item1;
        t6 = A.S(tuple.item2);
        t7 = hiddenByUrl.$index(0, t5);
        if (t7 == null)
          t7 = A.LinkedHashSet_LinkedHashSet$_empty(t4);
        B.JSArray_methods.addAll$1(t2, _this._forwardRulesForShown$4(t5, '"' + t6 + '"', tuple.item3, t7));
      }
      B.JSArray_methods.addAll$1(t2, entrypointForwards);
      t1 = (B.JSString_methods.endsWith$1(entrypoint.get$path(entrypoint), ".sass") ? "" : ";") + "\n";
      return B.JSArray_methods.join$1(t2, t1) + t1;
    },
    _renameDeclaration$1(declaration) {
      var $name, name0, _this = this;
      if (declaration.get$isForwarded())
        return;
      $name = declaration.name;
      name0 = _this._unprefix$1(B.JSString_methods.startsWith$1($name, "-") && _this.references.referencedOutsideDeclaringStylesheet$1(declaration) ? B.JSString_methods.substring$1($name, 1) : $name);
      if (name0 !== $name) {
        _this.renamedMembers.$indexSet(0, declaration, name0);
        if (_this._upstreamStylesheets._collection$_length === 0)
          _this._needsImportOnly = true;
      }
    },
    _shouldForward$2$forImportOnly($name, forImportOnly) {
      var t1 = this.forwards;
      if (t1.contains$1(0, B.C_ForwardType1))
        return true;
      if (forImportOnly && t1.contains$1(0, B.C_ForwardType0))
        return true;
      return t1.contains$1(0, B.C_ForwardType) && this._prefixFor$1($name) != null;
    },
    _shouldForward$1($name) {
      return this._shouldForward$2$forImportOnly($name, false);
    },
    _getAdditionalForwardRules$0() {
      var t1, loadPathForwards, relativeForwards, t2, t3, t4, forwards, t5, t6, _i, rule, t7, _this = this,
        _s10_ = "currentUrl";
      if (_this._upstreamStylesheets._collection$_length !== 0)
        return "";
      t1 = type$.JSArray_String;
      loadPathForwards = A._setArrayType([], t1);
      relativeForwards = A._setArrayType([], t1);
      for (t2 = _this.references.globalDeclarations._base.map$1$1(0, new A._ModuleMigrationVisitor__getAdditionalForwardRules_closure(), type$.Uri), t2 = A.LinkedHashSet_LinkedHashSet$of(t2, A._instanceType(t2)._eval$1("Iterable.E")), t2 = A._LinkedHashSetIterator$(t2, t2._collection$_modifications), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        if (t4.$eq(0, _this.assertInStylesheet$2(_this._currentUrl, _s10_)) || _this.assertInStylesheet$2(_this.__forwardedUrls, "_forwardedUrls").contains$1(0, t4))
          continue;
        forwards = _this._makeForwardRules$2(t4, '"' + A.S(_this._absoluteUrlToDependency$1(t4).item1) + '"');
        if (forwards == null)
          continue;
        t4 = _this._absoluteUrlToDependency$1(t4).item2 ? relativeForwards : loadPathForwards;
        t5 = A._setArrayType([], t1);
        for (t6 = forwards.length, _i = 0; _i < forwards.length; forwards.length === t6 || (0, A.throwConcurrentModificationError)(forwards), ++_i) {
          rule = forwards[_i];
          t7 = _this.assertInStylesheet$2(_this._currentUrl, _s10_);
          t5.push(rule + (B.JSString_methods.endsWith$1(t7.get$path(t7), ".sass") ? "" : ";") + "\n");
        }
        B.JSArray_methods.addAll$1(t4, t5);
      }
      B.JSArray_methods.sort$0(loadPathForwards);
      t1 = A.List_List$of(loadPathForwards, true, type$.String);
      B.JSArray_methods.sort$0(relativeForwards);
      B.JSArray_methods.addAll$1(t1, relativeForwards);
      return t1.length === 0 ? "" : "\n" + B.JSArray_methods.join$1(t1, "");
    },
    visitStylesheet$1(node) {
      var t3, t4, t5, t6, t7, t8, t9, _this = this,
        oldNamespaces = _this.__namespaces,
        oldForwardedUrls = _this.__forwardedUrls,
        oldUsedUrls = _this.__usedUrls,
        oldBuiltInUseRules = _this.__builtInUseRules,
        oldLoadPathUseRules = _this.__additionalLoadPathUseRules,
        oldRelativeUseRules = _this.__additionalRelativeUseRules,
        oldBeforeFirstImport = _this._beforeFirstImport,
        oldAfterLastImport = _this._afterLastImport,
        oldUseAllowed = _this._useAllowed,
        t1 = type$.Uri,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_String);
      for (t3 = new A.UnmodifiableListView(node._uses, type$.UnmodifiableListView_UseRule), t3 = new A.ListIterator(t3, t3.get$length(t3)), t4 = _this._ModuleMigrationVisitor_importCache, t5 = node.span.file.url, t6 = A._instanceType(t3)._precomputed1; t3.moveNext$0();) {
        t7 = t3.__internal$_current;
        if (t7 == null)
          t7 = t6._as(t7);
        t8 = t7.url;
        t9 = _this.__MigrationVisitor__importer_A;
        t9 === $ && A.throwUnnamedLateFieldNI();
        t9 = t4.canonicalize$3$baseImporter$baseUrl(t8, t9, t5);
        t9 = t9 == null ? null : t9.item2;
        t8 = t9 == null ? t8 : t9;
        t2.$indexSet(0, t8, t7.namespace);
      }
      _this.__namespaces = t2;
      t5.toString;
      _this._determineNamespaces$2(t5, _this.assertInStylesheet$2(t2, "_namespaces"));
      _this.__usedUrls = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this.__forwardedUrls = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      t1 = type$.String;
      _this.__builtInUseRules = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this.__additionalLoadPathUseRules = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this.__additionalRelativeUseRules = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this._afterLastImport = _this._beforeFirstImport = null;
      _this._useAllowed = true;
      _this.super$MigrationVisitor$visitStylesheet(node);
      _this.__namespaces = oldNamespaces;
      _this.__forwardedUrls = oldForwardedUrls;
      _this.__usedUrls = oldUsedUrls;
      _this.__builtInUseRules = oldBuiltInUseRules;
      _this.__additionalLoadPathUseRules = oldLoadPathUseRules;
      _this.__additionalRelativeUseRules = oldRelativeUseRules;
      _this._beforeFirstImport = oldBeforeFirstImport;
      _this._afterLastImport = oldAfterLastImport;
      _this._useAllowed = oldUseAllowed;
    },
    beforePatch$1(node) {
      var t2, t3, t4, extras, insertionPoint, whitespace, t5, _this = this,
        _s16_ = "_builtInUseRules",
        t1 = new A._ModuleMigrationVisitor_beforePatch_useRulesToString(_this);
      if (_this.assertInStylesheet$2(_this.__builtInUseRules, _s16_)._collection$_length !== 0) {
        t2 = _this._beforeFirstImport;
        if (t2 == null) {
          t2 = node.span;
          t2 = A.FileLocation$_(t2.file, t2._file$_start);
        }
        t3 = t1.call$1(_this.assertInStylesheet$2(_this.__builtInUseRules, _s16_));
        t4 = t2.offset;
        _this.addPatch$2$beforeExisting(new A.Patch(A._FileSpan$(t2.file, t4, t4), t3), true);
      }
      extras = J.$add$ns(t1.call$1(_this.assertInStylesheet$2(_this.__additionalLoadPathUseRules, "_additionalLoadPathUseRules")), t1.call$1(_this.assertInStylesheet$2(_this.__additionalRelativeUseRules, "_additionalRelativeUseRules"))) + _this._getAdditionalForwardRules$0();
      if (extras === "")
        return;
      insertionPoint = _this._afterLastImport;
      if (insertionPoint == null) {
        t1 = node.span;
        insertionPoint = A.FileLocation$_(t1.file, t1._file$_start);
      }
      t1 = insertionPoint.file;
      t2 = insertionPoint.offset;
      if (t1.getColumn$1(t2) !== 0)
        extras = "\n" + extras;
      whitespace = A.ExtendSpan_extendThroughWhitespace(A._FileSpan$(t1, t2, t2));
      t3 = whitespace.file;
      t4 = whitespace._end;
      if (!B.JSString_methods.contains$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t3._decodedChars, whitespace._file$_start, t4), 0, null), "\n\n")) {
        t5 = node.span;
        t5 = !A.FileLocation$_(t3, t4).$eq(0, A.FileLocation$_(t5.file, t5._end));
        t3 = t5;
      } else
        t3 = false;
      if (t3)
        extras += "\n";
      _this.addPatch$1(new A.Patch(A._FileSpan$(t1, t2, t2), extras));
    },
    _determineNamespaces$2(url, namespaces) {
      var conflictingNamespaces,
        t1 = type$.String,
        t2 = type$.Set_ReferenceSource,
        sourcesByNamespace = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      this.references.sources._map.forEach$1(0, new A._ModuleMigrationVisitor__determineNamespaces_closure(url, namespaces, sourcesByNamespace));
      conflictingNamespaces = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      sourcesByNamespace.forEach$1(0, new A._ModuleMigrationVisitor__determineNamespaces_closure0(namespaces, conflictingNamespaces));
      conflictingNamespaces.forEach$1(0, new A._ModuleMigrationVisitor__determineNamespaces_closure1(this, namespaces, url));
    },
    _resolveNamespaceConflict$4(namespace, sources, namespaces, currentUrl) {
      var t1, t2, t3, t4, t5, t6, t7, _i, t8, t9, t10, t11, aliases, t12, _this = this,
        builtIns = sources.whereType$1$0(0, type$.BuiltInSource);
      if (!builtIns.get$isEmpty(builtIns))
        namespaces.$indexSet(0, builtIns.get$first(builtIns).url, _this._resolveBuiltInNamespace$2(namespace, namespaces));
      t1 = type$.ImportSource;
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Uri);
      for (t3 = sources.whereType$1$0(0, t1), t4 = J.get$iterator$ax(t3._source), t3 = t3.$ti, t5 = new A.WhereTypeIterator(t4, t3._eval$1("WhereTypeIterator<1>")), t3 = t3._precomputed1; t5.moveNext$0();) {
        t6 = t3._as(t4.get$current());
        t7 = t6.originalRuleUrl;
        t2.$indexSet(0, t6, t7 == null ? _this._absoluteUrlToDependency$2$relativeTo(t6.url, currentUrl).item1 : t7);
      }
      for (t3 = _this._orderSources$1(t2), t4 = t3.length, t5 = type$.String, t6 = namespaces.get$containsValue(), t7 = type$.List_String, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
        sources = t3[_i];
        t8 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t7);
        for (t9 = sources.get$iterator(sources); t9.moveNext$0();) {
          t10 = t9.get$current();
          t11 = t2.$index(0, t10).get$pathSegments();
          t11 = A._setArrayType(t11.slice(0), A._arrayInstanceType(t11));
          t11.pop();
          if (!!t11.fixed$length)
            A.throwExpression(A.UnsupportedError$("removeWhere"));
          B.JSArray_methods._removeWhere$2(t11, new A._ModuleMigrationVisitor__resolveNamespaceConflict_closure(), true);
          t8.$indexSet(0, t10, t11);
        }
        t9 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t5);
        for (t10 = sources.get$iterator(sources); t10.moveNext$0();)
          t9.$indexSet(0, t10.get$current(), namespace);
        aliases = t9;
        while (true) {
          t9 = aliases.get$values(aliases);
          t10 = A.LinkedHashSet_LinkedHashSet(A._instanceType(t9)._eval$1("Iterable.E"));
          t10.addAll$1(0, t9);
          if (!(t10._collection$_length !== aliases.__js_helper$_length || aliases.get$values(aliases).any$1(0, t6)))
            break;
          if (t8.get$values(t8).any$1(0, new A._ModuleMigrationVisitor__resolveNamespaceConflict_closure0())) {
            for (t1 = sources.get$iterator(sources); t1.moveNext$0();)
              namespaces.$indexSet(0, t1.get$current().url, _this._incrementUntilAvailable$2(namespace, namespaces));
            return;
          }
          t9 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t5);
          for (t10 = sources.get$iterator(sources); t10.moveNext$0();) {
            t11 = t10.get$current();
            t12 = t8.$index(0, t11);
            t12.toString;
            t9.$indexSet(0, t11, A.S(B.JSArray_methods.removeLast$0(t12)) + "-" + A.S(aliases.$index(0, t11)));
          }
          aliases = t9;
        }
        for (t8 = sources.get$iterator(sources); t8.moveNext$0();) {
          t9 = t8.get$current();
          namespaces.$indexSet(0, t9.url, aliases.$index(0, t9));
        }
      }
    },
    _resolveBuiltInNamespace$2(module, existingNamespaces) {
      return existingNamespaces.containsValue$1(module) && !existingNamespaces.containsValue$1("sass-" + module) ? "sass-" + module : this._incrementUntilAvailable$2(module, existingNamespaces);
    },
    _incrementUntilAvailable$2(defaultNamespace, existingNamespaces) {
      var namespace, count;
      for (namespace = defaultNamespace, count = 1; existingNamespaces.containsValue$1(namespace);) {
        ++count;
        namespace = defaultNamespace + count;
      }
      return namespace;
    },
    _orderSources$1(ruleUrlsForSources) {
      var t1, t2, t3, _i,
        byPathLength = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Set_ImportSource);
      for (t1 = ruleUrlsForSources.get$entries(ruleUrlsForSources), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        J.add$1$ax(byPathLength.putIfAbsent$2(t3.get$value(t3).get$pathSegments().length, new A._ModuleMigrationVisitor__orderSources_closure()), t3.get$key());
      }
      t1 = A._setArrayType([], type$.JSArray_Set_ImportSource);
      for (t2 = A.List_List$of(byPathLength.get$entries(byPathLength), true, type$.MapEntry_of_int_and_Set_ImportSource), B.JSArray_methods.sort$1(t2, new A._ModuleMigrationVisitor__orderSources_closure0()), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i)
        t1.push(J.get$value$z(t2[_i]));
      return t1;
    },
    visitChildren$1(children) {
      var _this = this,
        oldUnreferencable = _this._unreferencable;
      _this._unreferencable = new A.UnreferencableMembers(oldUnreferencable, A.LinkedHashMap_LinkedHashMap$_empty(type$.MemberDeclaration_SassDeclaration, type$.UnreferencableType));
      _this.super$RecursiveStatementVisitor$visitChildren(children);
      _this._unreferencable = oldUnreferencable;
    },
    visitFunctionExpression$1(node) {
      var t1, declaration, fnNameSpan, span, t2, moduleArg, nameArg, _this = this;
      if (node.namespace != null) {
        _this.super$RecursiveAstVisitor$visitFunctionExpression(node);
        return;
      }
      t1 = _this.references;
      if (t1.sources._map.containsKey$1(node)) {
        declaration = t1.functions._map.$index(0, node);
        fnNameSpan = A.nameSpan(node);
        if (declaration != null) {
          _this._unreferencable.check$2(declaration, node);
          _this._renameReference$2(fnNameSpan, declaration);
        }
        _this._patchNamespaceForFunction$3(node, declaration, new A._ModuleMigrationVisitor_visitFunctionExpression_closure(_this, fnNameSpan));
      }
      if (A.stringReplaceAllUnchecked(node.originalName, "_", "-") === "get-function") {
        declaration = t1.getFunctionReferences._map.$index(0, node);
        if (declaration != null) {
          _this._unreferencable.check$2(declaration, node);
          span = A.getStaticNameForGetFunctionCall(node);
          if (span != null)
            _this._renameReference$2(span, declaration);
        }
        t1 = node.$arguments;
        t2 = t1.named;
        moduleArg = t2.$index(0, "module");
        if ((moduleArg == null && t1.positional.length > 2 ? t1.positional[2] : moduleArg) != null)
          return;
        nameArg = t2.$index(0, "name");
        if (nameArg == null)
          nameArg = B.JSArray_methods.get$first(t1.positional);
        if (!(nameArg instanceof A.StringExpression) || nameArg.text.get$asPlain() == null) {
          A.emitWarning("get-function call may require $module parameter", nameArg.get$span());
          return;
        }
        _this._patchNamespaceForFunction$4$getFunctionCall(node, declaration, new A._ModuleMigrationVisitor_visitFunctionExpression_closure0(_this, node), true);
      }
      _this.super$RecursiveAstVisitor$visitFunctionExpression(node);
    },
    _patchNamespaceForFunction$4$getFunctionCall(node, declaration, patchNamespace, getFunctionCall) {
      var t1, t2, t3, t4, $name, namespace, name0, parameter, t5, amountArg, _this = this,
        span = getFunctionCall ? A.getStaticNameForGetFunctionCall(node) : A.nameSpan(node);
      if (span == null)
        return;
      t1 = span.file;
      t2 = span._file$_start;
      t3 = span._end;
      t1 = t1._decodedChars;
      t4 = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1, t2, t3), 0, null);
      $name = A.stringReplaceAllUnchecked(t4, "_", "-");
      namespace = A.NullableExtension_andThen0(declaration, _this.get$_namespaceForDeclaration());
      if (namespace != null) {
        patchNamespace.call$1(namespace);
        return;
      }
      namespace = B.Map_gk3Sx.$index(0, $name);
      if (namespace == null)
        return;
      name0 = B.Map_5qkWM.$index(0, $name);
      $name = name0 == null ? $name : name0;
      parameter = B.Map_M5m3E.$index(0, $name);
      t4 = node.$arguments;
      t5 = t4.named;
      amountArg = t5.$index(0, "amount");
      if (namespace === "color" && parameter != null) {
        if (getFunctionCall) {
          A.emitWarning($name + " is not available in the module system and should be manually migrated to color.adjust", span);
          return;
        } else {
          t4 = t4.positional;
          if (t4.length === 2 && t5.get$isEmpty(t5))
            _this._patchRemovedColorFunction$2(parameter, B.JSArray_methods.get$last(t4));
          else if (amountArg != null)
            _this._patchRemovedColorFunction$3$existingArgName(parameter, amountArg, _this._findArgNameSpan$1(amountArg));
          else {
            A.emitWarning("Could not migrate malformed '" + $name + "' call", node.span);
            return;
          }
        }
        $name = "adjust";
      }
      namespace = _this._findOrAddBuiltInNamespace$1(namespace);
      if (namespace != null)
        patchNamespace.call$1(namespace);
      t1 = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1, t2, t3), 0, null);
      if ($name !== A.stringReplaceAllUnchecked(t1, "_", "-"))
        _this.addPatch$1(new A.Patch(span, $name));
    },
    _patchNamespaceForFunction$3(node, declaration, patchNamespace) {
      return this._patchNamespaceForFunction$4$getFunctionCall(node, declaration, patchNamespace, false);
    },
    _findArgNameSpan$1(arg) {
      var t2,
        t1 = arg.get$span(),
        start = A.FileLocation$_(t1.file, t1._file$_start).offset - 1;
      for (; t1 = arg.get$span().file._decodedChars, A.String_String$fromCharCodes(new Uint32Array(t1.subarray(start, A._checkValidRange(start, start + 1, t1.length))), 0, null) !== "$";)
        --start;
      t1 = arg.get$span();
      t2 = arg.get$span();
      return t1.file.span$2(start, A.FileLocation$_(t2.file, t2._file$_start).offset);
    },
    _patchRemovedColorFunction$3$existingArgName(parameter, arg, existingArgName) {
      var t1, needsParens, t2, t3, _this = this;
      if (B.JSString_methods.endsWith$1(parameter, "-"))
        if (!(arg instanceof A.BinaryOperationExpression)) {
          if (!(arg instanceof A.FunctionExpression))
            if (arg instanceof A.VariableExpression) {
              t1 = _this.references.variables._map.$index(0, arg);
              t1 = t1 == null ? null : t1.sourceUrl;
              t1 = !J.$eq$(t1, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl"));
            } else
              t1 = false;
          else
            t1 = true;
          needsParens = t1;
        } else
          needsParens = true;
      else
        needsParens = false;
      t1 = parameter + (needsParens ? "(" : "");
      if (existingArgName == null) {
        t2 = arg.get$span();
        t2 = A.FileLocation$_(t2.file, t2._file$_start);
        t3 = t2.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t2.file, t3, t3), t1));
      } else
        _this.addPatch$1(new A.Patch(existingArgName, t1));
      if (needsParens) {
        t1 = arg.get$span();
        t1 = A.FileLocation$_(t1.file, t1._end);
        t2 = t1.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t2, t2), ")"));
      }
    },
    _patchRemovedColorFunction$2(parameter, arg) {
      return this._patchRemovedColorFunction$3$existingArgName(parameter, arg, null);
    },
    visitFunctionRule$1(node) {
      this._useAllowed = false;
      this._renameReference$2(A.nameSpan(node), A.MemberDeclaration$(node, type$.SassDeclaration));
      this.super$RecursiveStatementVisitor$visitFunctionRule(node);
    },
    visitImportRule$1(node) {
      var migratedRules, t2, t3, t4, t5, indent, t6, t7, t8, ruleUrl, t9, tuple, canonicalImport, t10, url, rulesText, _this = this, _null = null,
        _s10_ = "currentUrl",
        _s5_ = ".sass",
        imports = A.partitionOnType(node.imports, type$.Import, type$.StaticImport, type$.DynamicImport),
        staticImports = imports.item1,
        dynamicImports = imports.item2,
        t1 = J.getInterceptor$asx(dynamicImports);
      if (t1.get$isEmpty(dynamicImports)) {
        _this._useAllowed = false;
        return;
      }
      migratedRules = A._setArrayType([], type$.JSArray_String);
      t2 = node.span;
      t3 = t2.file;
      t4 = t2._file$_start;
      t5 = A.FileLocation$_(t3, t4);
      indent = B.JSString_methods.$mul(" ", t5.file.getColumn$1(t5.offset));
      for (t1 = t1.get$iterator(dynamicImports), t5 = _this._ModuleMigrationVisitor_importCache, t6 = _this.references.orphanImportOnlyFiles._map, t7 = "\n" + indent; t1.moveNext$0();) {
        t8 = t1.get$current();
        ruleUrl = A.Uri_parse(t8.urlString);
        t9 = _this.__MigrationVisitor__importer_A;
        t9 === $ && A.throwUnnamedLateFieldNI();
        tuple = t5.canonicalize$4$baseImporter$baseUrl$forImport(ruleUrl, t9, _this.assertInStylesheet$2(_this._currentUrl, _s10_), true);
        t9 = tuple == null;
        canonicalImport = t9 ? _null : tuple.item2;
        if (canonicalImport != null && t6.containsKey$1(canonicalImport)) {
          t10 = t6.$index(0, canonicalImport);
          url = t10 == null ? _null : t10.url;
          ruleUrl = url != null && !t9 ? _this._absoluteUrlToDependency$1(t5.canonicalize$3$baseImporter$baseUrl(url, tuple.item1, canonicalImport).item2).item1 : _null;
        }
        if (ruleUrl != null) {
          t9 = _this._useAllowed;
          t8 = t8.span;
          if (t9)
            B.JSArray_methods.addAll$1(migratedRules, _this._migrateImportToRules$2(ruleUrl, t8));
          else {
            t8 = _this._migrateImportToLoadCss$2(ruleUrl, t8);
            migratedRules.push(A.stringReplaceAllUnchecked(t8, "\n", t7));
          }
        }
      }
      t1 = _this.assertInStylesheet$2(_this._currentUrl, _s10_);
      rulesText = B.JSArray_methods.join$1(migratedRules, (B.JSString_methods.endsWith$1(t1.get$path(t1), _s5_) ? "" : ";") + "\n" + indent);
      if (rulesText.length === 0) {
        t1 = _this.assertInStylesheet$2(_this._currentUrl, _s10_);
        _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(A.ExtendSpan_extendIfMatches(t2, A.RegExp_RegExp(" *" + (B.JSString_methods.endsWith$1(t1.get$path(t1), _s5_) ? "" : ";") + "\n?", true)), 0, _null), ""));
      } else
        _this.addPatch$1(new A.Patch(t2, rulesText));
      if (_this._useAllowed) {
        if (_this._beforeFirstImport == null)
          _this._beforeFirstImport = A.FileLocation$_(t3, t4);
        t1 = _this.assertInStylesheet$2(_this._currentUrl, _s10_);
        _this._afterLastImport = A.afterImport(node, !B.JSString_methods.endsWith$1(t1.get$path(t1), _s5_));
      }
      t1 = J.getInterceptor$asx(staticImports);
      if (t1.get$isNotEmpty(staticImports)) {
        _this._useAllowed = false;
        t2 = _this._afterLastImport;
        if (t2 == null)
          t2 = A.FileLocation$_(t3, 0);
        t1 = t1.map$1$1(staticImports, new A._ModuleMigrationVisitor_visitImportRule_closure(), type$.String).join$1(0, ", ");
        t3 = _this.assertInStylesheet$2(_this._currentUrl, _s10_);
        t3 = B.JSString_methods.endsWith$1(t3.get$path(t3), _s5_) ? "" : ";";
        t4 = t2.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t2.file, t4, t4), indent + "@import " + t1 + (t3 + "\n")));
      }
    },
    _migrateImportToRules$2(ruleUrl, context) {
      var normalForwardRules, _this = this,
        tuple = _this._migrateImportCommon$2(ruleUrl, context),
        canonicalUrl = tuple.item1,
        config = tuple.item2,
        forwardForConfig = tuple.item3,
        defaultNamespace = A.namespaceForPath(ruleUrl.get$path(ruleUrl)),
        namespace = _this.assertInStylesheet$2(_this.__namespaces, "_namespaces").putIfAbsent$2(canonicalUrl, new A._ModuleMigrationVisitor__migrateImportToRules_closure(_this, defaultNamespace)),
        asClause = namespace !== defaultNamespace ? " as " + A.S(namespace) : "",
        quote = B.JSString_methods.startsWith$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(context.file._decodedChars, context._file$_start, context._end), 0, null), "'") ? "'" : '"',
        quotedUrl = quote + ruleUrl.toString$0(0) + quote,
        withClause = config == null ? "" : " with " + config,
        rules = A._setArrayType([], type$.JSArray_String);
      if (forwardForConfig != null) {
        rules.push("@forward " + quotedUrl + " show " + forwardForConfig + withClause);
        withClause = "";
      }
      normalForwardRules = _this._upstreamStylesheets._collection$_length === 0 ? _this._makeForwardRules$2(canonicalUrl, quotedUrl) : null;
      if (rules.length === 0 && normalForwardRules == null || withClause.length !== 0 || _this.references.anyMemberReferenced$2(canonicalUrl, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl"))) {
        _this.assertInStylesheet$2(_this.__usedUrls, "_usedUrls").add$1(0, canonicalUrl);
        rules.push("@use " + quotedUrl + asClause + withClause);
      }
      if (normalForwardRules != null)
        B.JSArray_methods.addAll$1(rules, normalForwardRules);
      return rules;
    },
    _migrateImportToLoadCss$2(ruleUrl, context) {
      var t1, t2, t3, tuple, canonicalUrl, config, meta, configuration, quote, _this = this,
        oldUnreferencable = _this._unreferencable;
      _this._unreferencable = new A.UnreferencableMembers(oldUnreferencable, A.LinkedHashMap_LinkedHashMap$_empty(type$.MemberDeclaration_SassDeclaration, type$.UnreferencableType));
      for (t1 = _this.references, t2 = t1.get$allDeclarations(), t2 = new A.FollowedByIterator(J.get$iterator$ax(t2.__internal$_first), t2._second); t2.moveNext$0();) {
        t3 = t2._currentIterator.get$current();
        if (!t3.sourceUrl.$eq(0, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl")))
          continue;
        _this._unreferencable._unreferencable_members$_unreferencable.$indexSet(0, t3, B.C_UnreferencableType);
      }
      tuple = _this._migrateImportCommon$2(ruleUrl, context);
      canonicalUrl = tuple.item1;
      config = tuple.item2;
      if (tuple.item3 != null) {
        t1 = A.prettyUri(canonicalUrl);
        t2 = _this.get$_configuredVariables();
        throw A.wrapException(A.MigrationSourceSpanException$("This declaration attempts to override a default value in an indirect, nested import of " + t1 + ", which is not possible in the module system.", t2.get$last(t2).member.span));
      }
      _this._unreferencable = oldUnreferencable;
      for (t1 = t1.get$allDeclarations(), t1 = new A.FollowedByIterator(J.get$iterator$ax(t1.__internal$_first), t1._second); t1.moveNext$0();) {
        t2 = t1._currentIterator.get$current();
        if (!t2.sourceUrl.$eq(0, canonicalUrl))
          continue;
        _this._unreferencable._unreferencable_members$_unreferencable.$indexSet(0, t2, B.C_UnreferencableType0);
      }
      meta = _this._findOrAddBuiltInNamespace$1("meta");
      configuration = config == null ? "" : ", $with: " + config;
      quote = B.JSString_methods.startsWith$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(context.file._decodedChars, context._file$_start, context._end), 0, null), "'") ? "'" : '"';
      return "@include " + A.S(meta) + ".load-css(" + (quote + ruleUrl.toString$0(0) + quote) + configuration + ")";
    },
    _migrateImportCommon$2(ruleUrl, context) {
      var t2, t3, tuple, canonicalUrl, locallyConfiguredVariables, externallyConfiguredVariables, t4, t5, t6, extraForward, configured, normalConfig, _this = this,
        _s10_ = "currentUrl",
        oldConfiguredVariables = _this.__configuredVariables,
        t1 = type$.MemberDeclaration_VariableDeclaration;
      _this.__configuredVariables = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      t2 = _this._upstreamStylesheets;
      t2.add$1(0, _this.assertInStylesheet$2(_this._currentUrl, _s10_));
      if (_this.migrateDependencies)
        _this.visitDependency$2(ruleUrl, context);
      t2.remove$1(0, _this.assertInStylesheet$2(_this._currentUrl, _s10_));
      t3 = _this.__MigrationVisitor__importer_A;
      t3 === $ && A.throwUnnamedLateFieldNI();
      tuple = _this._ModuleMigrationVisitor_importCache.canonicalize$3$baseImporter$baseUrl(ruleUrl, t3, _this.assertInStylesheet$2(_this._currentUrl, _s10_));
      if (tuple == null)
        throw A.wrapException(A.MigrationSourceSpanException$("Could not find Sass file at '" + A.prettyUri(ruleUrl) + "'.", context));
      canonicalUrl = tuple.item2;
      _this._originalImports.putIfAbsent$2(canonicalUrl, new A._ModuleMigrationVisitor__migrateImportCommon_closure(ruleUrl, tuple));
      t3 = type$.String;
      locallyConfiguredVariables = A.LinkedHashMap_LinkedHashMap$_empty(t3, t1);
      externallyConfiguredVariables = A.LinkedHashMap_LinkedHashMap$_empty(t3, t1);
      for (t1 = _this.get$_configuredVariables(), t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t4 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t5 = t1._collection$_current;
        if (t5 == null)
          t5 = t4._as(t5);
        t6 = t5.sourceUrl;
        if (t6.$eq(0, _this.assertInStylesheet$2(_this._currentUrl, _s10_)))
          locallyConfiguredVariables.$indexSet(0, t5.name, t5);
        else if (t2.contains$1(0, t6)) {
          externallyConfiguredVariables.$indexSet(0, t5.name, t5);
          oldConfiguredVariables.add$1(0, t5);
        }
      }
      _this.__configuredVariables = oldConfiguredVariables;
      if (externallyConfiguredVariables.__js_helper$_length !== 0) {
        t1 = externallyConfiguredVariables.$ti._eval$1("LinkedHashMapKeyIterable<1>");
        extraForward = A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(externallyConfiguredVariables, t1), new A._ModuleMigrationVisitor__migrateImportCommon_closure0(), t1._eval$1("Iterable.E"), t3).join$1(0, ", ");
      } else
        extraForward = null;
      configured = A._setArrayType([], type$.JSArray_String);
      locallyConfiguredVariables.forEach$1(0, new A._ModuleMigrationVisitor__migrateImportCommon_closure1(_this, configured));
      t1 = configured.length;
      if (t1 === 1)
        normalConfig = "(" + B.JSArray_methods.get$first(configured) + ")";
      else
        normalConfig = t1 !== 0 ? "(\n  " + B.JSArray_methods.join$1(configured, ",\n  ") + "\n)" : null;
      return new A.Tuple3(canonicalUrl, normalConfig, extraForward, type$.Tuple3_of_Uri_and_nullable_String_and_nullable_String);
    },
    _makeForwardRules$2(url, quotedUrl) {
      var t1, t2, t3, newName, importOnlyPrefix, t4, prefix, subprefix, _this = this,
        shownByPrefix = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Set_MemberDeclaration_SassDeclaration),
        hidden = A.LinkedHashSet_LinkedHashSet$_empty(type$.MemberDeclaration_SassDeclaration);
      for (t1 = _this.references.globalDeclarations._base, t1 = t1.get$iterator(t1), t2 = _this.renamedMembers; t1.moveNext$0();) {
        t3 = t1.get$current();
        if (!t3.sourceUrl.$eq(0, url))
          continue;
        newName = t2.$index(0, t3);
        if (newName == null)
          newName = t3.name;
        if (t3 instanceof A.ImportOnlyMemberDeclaration) {
          importOnlyPrefix = t3.importOnlyPrefix;
          newName = B.JSString_methods.substring$1(t3.name, importOnlyPrefix.length);
        } else
          importOnlyPrefix = null;
        t4 = t3.name;
        if (_this._shouldForward$1(t4) && !B.JSString_methods.startsWith$1(t4, "-")) {
          if (importOnlyPrefix != null) {
            prefix = _this._prefixFor$1(t4);
            subprefix = prefix != null ? B.JSString_methods.substring$1(importOnlyPrefix, prefix.length) : "";
          } else
            subprefix = "";
          if (t4 !== newName)
            _this._needsImportOnly = true;
          J.add$1$ax(shownByPrefix.putIfAbsent$2(subprefix, new A._ModuleMigrationVisitor__makeForwardRules_closure()), t3);
        } else if (!B.JSString_methods.startsWith$1(newName, "-"))
          hidden.add$1(0, t3);
      }
      if (shownByPrefix.__js_helper$_length === 0)
        return null;
      _this.assertInStylesheet$2(_this.__forwardedUrls, "_forwardedUrls").add$1(0, url);
      return _this._forwardRulesForShown$4(url, quotedUrl, shownByPrefix, hidden);
    },
    _forwardRulesForShown$4(url, quotedUrl, shownByPrefix, hidden) {
      var t1, t2, t3, t4, _i, subprefix, t5, t6, t7, allHidden, t8, $name, $forward, sorted,
        forwards = A._setArrayType([], type$.JSArray_String),
        forwardBase = "@forward " + quotedUrl;
      for (t1 = shownByPrefix.get$keys(shownByPrefix), t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("Iterable.E")), B.JSArray_methods.sort$0(t1), t2 = t1.length, t3 = type$.String, t4 = type$.MemberDeclaration_SassDeclaration, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        subprefix = t1[_i];
        t5 = A.LinkedHashSet_LinkedHashSet(t4);
        t5.addAll$1(0, hidden);
        for (t6 = shownByPrefix.get$entries(shownByPrefix), t6 = t6.get$iterator(t6); t6.moveNext$0();) {
          t7 = t6.get$current();
          if (!J.$eq$(t7.get$key(), subprefix))
            for (t7 = J.get$iterator$ax(t7.get$value(t7)); t7.moveNext$0();)
              t5.add$1(0, t7.get$current());
        }
        allHidden = A.LinkedHashSet_LinkedHashSet$_empty(t3);
        for (t6 = new A._LinkedHashSetIterator(t5, t5._collection$_modifications), t6._collection$_cell = t5._collection$_first, t5 = J.getInterceptor$asx(subprefix), t7 = A._instanceType(t6)._precomputed1; t6.moveNext$0();) {
          t8 = t6._collection$_current;
          if (t8 == null)
            t8 = t7._as(t8);
          $name = t8.name;
          if (t8 instanceof A.ImportOnlyMemberDeclaration)
            $name = B.JSString_methods.substring$1($name, t8.importOnlyPrefix.length);
          $name = this._unprefix$1(B.JSString_methods.startsWith$1($name, "-") ? B.JSString_methods.substring$1($name, 1) : $name);
          if (t5.get$length(subprefix) !== 0)
            $name = A.S(subprefix) + $name;
          allHidden.add$1(0, t8.member instanceof A.VariableDeclaration ? "$" + $name : $name);
        }
        $forward = forwardBase + (t5.get$length(subprefix) === 0 ? "" : " as " + A.S(subprefix) + "*");
        if (allHidden._collection$_length !== 0) {
          sorted = A.List_List$of(allHidden, true, allHidden.$ti._precomputed1);
          if (!!sorted.immutable$list)
            A.throwExpression(A.UnsupportedError$("sort"));
          t5 = sorted.length - 1;
          if (t5 - 0 <= 32)
            A.Sort__insertionSort(sorted, 0, t5, J._interceptors_JSArray__compareAny$closure());
          else
            A.Sort__dualPivotQuicksort(sorted, 0, t5, J._interceptors_JSArray__compareAny$closure());
          $forward += " hide " + B.JSArray_methods.join$1(sorted, ", ");
        }
        forwards.push($forward);
      }
      return forwards;
    },
    visitIncludeRule$1(node) {
      var declaration, namespace, t1, t2, _this = this;
      _this._useAllowed = false;
      _this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitIncludeRule(node);
      if (node.namespace != null)
        return;
      declaration = _this.references.mixins._map.$index(0, node);
      if (declaration == null)
        return;
      _this._unreferencable.check$2(declaration, node);
      _this._renameReference$2(A.nameSpan(node), declaration);
      namespace = _this._namespaceForDeclaration$1(declaration);
      if (namespace != null) {
        t1 = A.nameSpan(node);
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t2, t2), namespace + "."));
      }
    },
    visitMixinRule$1(node) {
      this._useAllowed = false;
      this._renameReference$2(A.nameSpan(node), A.MemberDeclaration$(node, type$.SassDeclaration));
      this.super$RecursiveAstVisitor$visitMixinRule(node);
    },
    visitUseRule$1(node) {
      var _this = this,
        t1 = _this.assertInStylesheet$2(_this.__usedUrls, "_usedUrls"),
        t2 = node.url,
        t3 = _this.__MigrationVisitor__importer_A;
      t3 === $ && A.throwUnnamedLateFieldNI();
      t3 = _this._ModuleMigrationVisitor_importCache.canonicalize$3$baseImporter$baseUrl(t2, t3, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl"));
      t3 = t3 == null ? null : t3.item2;
      t1.add$1(0, t3 == null ? t2 : t3);
    },
    visitForwardRule$1(node) {
      var _this = this,
        t1 = _this.assertInStylesheet$2(_this.__forwardedUrls, "_forwardedUrls"),
        t2 = node.url,
        t3 = _this.__MigrationVisitor__importer_A;
      t3 === $ && A.throwUnnamedLateFieldNI();
      t3 = _this._ModuleMigrationVisitor_importCache.canonicalize$3$baseImporter$baseUrl(t2, t3, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl"));
      t3 = t3 == null ? null : t3.item2;
      t1.add$1(0, t3 == null ? t2 : t3);
    },
    visitVariableExpression$1(node) {
      var t1, declaration, declaration0, namespace, negated, t2, t3, t4, _this = this;
      if (node.namespace != null)
        return;
      t1 = _this.references;
      declaration = t1.variables._map.$index(0, node);
      if (declaration == null)
        return;
      _this._unreferencable.check$2(declaration, node);
      if (_this._reassignedVariables.contains$1(0, declaration)) {
        declaration0 = t1.variableReassignments._map.$index(0, declaration);
        declaration = declaration0 == null ? declaration : declaration0;
      }
      _this._renameReference$2(A.nameSpan(node), declaration);
      namespace = _this._namespaceForDeclaration$1(declaration);
      if (namespace != null) {
        t1 = node.span;
        negated = A.ExtendSpan_matchesBefore(t1, "-");
        if (negated) {
          t2 = A.FileLocation$_(t1.file, t1._file$_start);
          t3 = t2.offset;
          _this.addPatch$1(new A.Patch(A._FileSpan$(t2.file, t3, t3), "("));
        }
        t2 = t1.file;
        t3 = A.FileLocation$_(t2, t1._file$_start);
        t4 = t3.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t3.file, t4, t4), namespace + "."));
        if (negated) {
          t1 = A.FileLocation$_(t2, t1._end);
          t2 = t1.offset;
          _this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t2, t2), ")"));
        }
      }
    },
    visitVariableDeclaration$1(node) {
      var existingNode, t2, originalUrl, namespace, _this = this,
        declaration = A.MemberDeclaration$(node, type$.VariableDeclaration),
        t1 = _this.references,
        defaultDeclaration = t1.defaultVariableDeclarations._map.$index(0, declaration);
      if (type$.MemberDeclaration_VariableDeclaration._is(defaultDeclaration))
        _this.get$_configuredVariables().add$1(0, defaultDeclaration);
      existingNode = t1.variableReassignments._map.$index(0, declaration);
      t1 = A.nameSpan(node);
      t2 = existingNode == null;
      _this._renameReference$2(t1, t2 ? declaration : existingNode);
      originalUrl = t2 ? null : existingNode.sourceUrl;
      if (!t2 && !J.$eq$(originalUrl, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl")) && !node.isGuarded && !_this._upstreamStylesheets.contains$1(0, originalUrl)) {
        namespace = _this._namespaceForDeclaration$1(existingNode);
        t1 = node.span;
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t2, t2), A.S(namespace) + "."));
        _this._reassignedVariables.add$1(0, declaration);
      }
      _this.super$RecursiveAstVisitor$visitVariableDeclaration(node);
    },
    _renameReference$2(span, declaration) {
      var t1, _this = this,
        newName = _this.renamedMembers.$index(0, declaration);
      if (newName != null) {
        if (B.JSString_methods.startsWith$1(newName, "-") && B.JSString_methods.endsWith$1(declaration.name, B.JSString_methods.substring$1(newName, 1)))
          _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(span, 1, declaration.name.length - newName.length + 1), ""));
        else {
          t1 = declaration.name;
          if (B.JSString_methods.endsWith$1(t1, newName))
            _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(span, 0, t1.length - newName.length), ""));
          else
            _this.addPatch$1(new A.Patch(span, newName));
        }
        return;
      }
      if (declaration instanceof A.ImportOnlyMemberDeclaration)
        _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(span, 0, declaration.importOnlyPrefix.length), ""));
    },
    _unprefix$1($name) {
      var t1,
        isPrivate = B.JSString_methods.startsWith$1($name, "-"),
        unprivateName = isPrivate ? B.JSString_methods.substring$1($name, 1) : $name,
        prefix = this._prefixFor$1(unprivateName);
      if (prefix == null)
        return $name;
      t1 = isPrivate ? "-" : "";
      return t1 + B.JSString_methods.substring$1(unprivateName, prefix.length);
    },
    _findOrAddBuiltInNamespace$1(module) {
      var namespace, asClause, _this = this,
        _s11_ = "_namespaces",
        _s9_ = "_usedUrls",
        url = A.Uri_parse("sass:" + module);
      _this.assertInStylesheet$2(_this.__namespaces, _s11_).putIfAbsent$2(url, new A._ModuleMigrationVisitor__findOrAddBuiltInNamespace_closure(_this, module));
      namespace = _this.assertInStylesheet$2(_this.__namespaces, _s11_).$index(0, url);
      if (!_this.assertInStylesheet$2(_this.__usedUrls, _s9_).contains$1(0, url)) {
        _this.assertInStylesheet$2(_this.__usedUrls, _s9_).add$1(0, url);
        asClause = namespace === module ? "" : " as " + A.S(namespace);
        _this.assertInStylesheet$2(_this.__builtInUseRules, "_builtInUseRules").add$1(0, '@use "sass:' + module + '"' + asClause);
      }
      return namespace;
    },
    _namespaceForDeclaration$1(declaration) {
      var libraryUrls, minUrl, tuple, t1, defaultNamespace, namespace, asClause, t2, _this = this,
        _s9_ = "_usedUrls",
        _s11_ = "_namespaces",
        url = declaration.sourceUrl;
      if (url.$eq(0, _this.assertInStylesheet$2(_this._currentUrl, "currentUrl")))
        return null;
      libraryUrls = _this.references.libraries._map.$index(0, declaration);
      if (libraryUrls != null && libraryUrls.get$isNotEmpty(libraryUrls)) {
        minUrl = A.minBy(libraryUrls, new A._ModuleMigrationVisitor__namespaceForDeclaration_closure());
        url = minUrl == null ? url : minUrl;
      }
      if (!_this.assertInStylesheet$2(_this.__usedUrls, _s9_).contains$1(0, url)) {
        tuple = _this._absoluteUrlToDependency$1(url);
        t1 = tuple.item1;
        defaultNamespace = A.namespaceForPath(J.get$path$x(t1));
        _this.assertInStylesheet$2(_this.__namespaces, _s11_).putIfAbsent$2(url, new A._ModuleMigrationVisitor__namespaceForDeclaration_closure0(_this, defaultNamespace));
        namespace = _this.assertInStylesheet$2(_this.__namespaces, _s11_).$index(0, url);
        asClause = defaultNamespace === namespace ? "" : " as " + A.S(namespace);
        _this.assertInStylesheet$2(_this.__usedUrls, _s9_).add$1(0, url);
        t2 = tuple.item2 ? _this.assertInStylesheet$2(_this.__additionalRelativeUseRules, "_additionalRelativeUseRules") : _this.assertInStylesheet$2(_this.__additionalLoadPathUseRules, "_additionalLoadPathUseRules");
        t2.add$1(0, '@use "' + A.S(t1) + '"' + asClause);
      }
      return _this.assertInStylesheet$2(_this.__namespaces, _s11_).$index(0, url);
    },
    _absoluteUrlToDependency$2$relativeTo(url, relativeTo) {
      var tuple, t1, t2, t3, basename, t4, _i, loadPath, _this = this;
      if (relativeTo == null)
        relativeTo = _this.assertInStylesheet$2(_this._currentUrl, "currentUrl");
      tuple = _this._originalImports.$index(0, url);
      if (tuple != null && tuple.item2 instanceof A.NodeModulesImporter)
        return new A.Tuple2(tuple.item1, false, type$.Tuple2_Uri_bool);
      t1 = $.$get$url();
      t2 = url.get$path(url);
      t3 = t1.style;
      basename = A.ParsedPath_ParsedPath$parse(t2, t3)._splitExtension$0()[0];
      if (basename === "index" || basename === "_index")
        t2 = !(B.JSString_methods.endsWith$1(relativeTo.get$path(relativeTo), ".import.scss") || B.JSString_methods.endsWith$1(relativeTo.get$path(relativeTo), ".import.sass"));
      else
        t2 = false;
      if (t2) {
        url = url.replace$1$path(t1.dirname$1(0, url.get$path(url)));
        t2 = A.ParsedPath_ParsedPath$parse(url.path, t3);
        basename = t2.get$basename(t2);
      } else if (B.JSString_methods.startsWith$1(basename, "_"))
        basename = B.JSString_methods.substring$1(basename, 1);
      t2 = A._setArrayType([t1.relative$2$from(0, url.get$path(url), t1.dirname$1(0, relativeTo.get$path(relativeTo)))], type$.JSArray_String);
      for (t3 = _this.loadPaths, t4 = t3.length, _i = 0; _i < t4; ++_i) {
        loadPath = t3[_i];
        if (t1._isWithinOrEquals$2(loadPath, url.get$path(url)) === B._PathRelation_within)
          t2.push(t1.relative$2$from(0, url.get$path(url), loadPath));
      }
      t3 = A.minBy(t2, new A._ModuleMigrationVisitor__absoluteUrlToDependency_closure());
      t3.toString;
      t2 = B.JSArray_methods.get$first(t2);
      return new A.Tuple2(A._Uri__Uri(null, t1.relative$1(0, t1.join$2(0, t1.dirname$1(0, t3), basename)), null, null), t3 === t2, type$.Tuple2_Uri_bool);
    },
    _absoluteUrlToDependency$1(url) {
      return this._absoluteUrlToDependency$2$relativeTo(url, null);
    },
    _prefixFor$1(identifier) {
      return A.maxBy(this.prefixesToRemove._base.where$1(0, new A._ModuleMigrationVisitor__prefixFor_closure(identifier)), new A._ModuleMigrationVisitor__prefixFor_closure0());
    },
    visitAtRootRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitAtRootRule(node);
    },
    visitAtRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitAtRule(node);
    },
    visitDebugRule$1(node) {
      this._useAllowed = false;
      this.super$RecursiveAstVisitor$visitDebugRule(node);
    },
    visitEachRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitEachRule(node);
    },
    visitErrorRule$1(node) {
      this._useAllowed = false;
      this.super$RecursiveAstVisitor$visitErrorRule(node);
    },
    visitForRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitForRule(node);
    },
    visitIfRule$1(node) {
      this._useAllowed = false;
      this.super$RecursiveAstVisitor$visitIfRule(node);
    },
    visitMediaRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitMediaRule(node);
    },
    visitStyleRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitStyleRule(node);
    },
    visitSupportsRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitSupportsRule(node);
    },
    visitWarnRule$1(node) {
      this._useAllowed = false;
      this.super$RecursiveAstVisitor$visitWarnRule(node);
    },
    visitWhileRule$1(node) {
      this._useAllowed = false;
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitWhileRule(node);
    },
    get$importCache() {
      return this._ModuleMigrationVisitor_importCache;
    }
  };
  A._ModuleMigrationVisitor_closure.prototype = {
    call$1(path) {
      var t1 = A.absolute(path);
      t1 = $.$get$context().toUri$1(t1);
      return t1.get$path(t1);
    },
    $signature: 4
  };
  A._ModuleMigrationVisitor__generateImportOnly_closure.prototype = {
    call$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Set_MemberDeclaration_SassDeclaration);
    },
    $signature: 161
  };
  A._ModuleMigrationVisitor__generateImportOnly_closure0.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.MemberDeclaration_SassDeclaration);
    },
    $signature: 38
  };
  A._ModuleMigrationVisitor__generateImportOnly_closure1.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.MemberDeclaration_SassDeclaration);
    },
    $signature: 38
  };
  A._ModuleMigrationVisitor__getAdditionalForwardRules_closure.prototype = {
    call$1(declaration) {
      return declaration.sourceUrl;
    },
    $signature: 163
  };
  A._ModuleMigrationVisitor_beforePatch_useRulesToString.prototype = {
    call$1(useRules) {
      var t1 = A.List_List$of(useRules, true, A._instanceType(useRules)._precomputed1);
      B.JSArray_methods.sort$0(t1);
      return new A.MappedListIterable(t1, new A._ModuleMigrationVisitor_beforePatch_useRulesToString_closure(this.$this), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $signature: 164
  };
  A._ModuleMigrationVisitor_beforePatch_useRulesToString_closure.prototype = {
    call$1(use) {
      var t1 = this.$this;
      t1 = t1.assertInStylesheet$2(t1._currentUrl, "currentUrl");
      return use + (B.JSString_methods.endsWith$1(t1.get$path(t1), ".sass") ? "" : ";") + "\n";
    },
    $signature: 4
  };
  A._ModuleMigrationVisitor__determineNamespaces_closure.prototype = {
    call$2(reference, source) {
      var namespace;
      if (!J.$eq$(reference.get$span().file.url, this.url))
        return;
      if (source instanceof A.UseSource)
        return;
      if (this.namespaces.containsKey$1(source.get$url(source)))
        return;
      namespace = source.get$preferredNamespace();
      if (namespace == null)
        return;
      J.add$1$ax(this.sourcesByNamespace.putIfAbsent$2(namespace, new A._ModuleMigrationVisitor__determineNamespaces__closure()), source);
    },
    $signature: 165
  };
  A._ModuleMigrationVisitor__determineNamespaces__closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.ReferenceSource);
    },
    $signature: 166
  };
  A._ModuleMigrationVisitor__determineNamespaces_closure0.prototype = {
    call$2(namespace, sources) {
      if (sources.get$length(sources) === 1 && !this.namespaces.containsValue$1(namespace))
        this.namespaces.$indexSet(0, J.get$url$z(sources.get$first(sources)), namespace);
      else
        this.conflictingNamespaces.$indexSet(0, namespace, sources);
    },
    $signature: 68
  };
  A._ModuleMigrationVisitor__determineNamespaces_closure1.prototype = {
    call$2(namespace, sources) {
      this.$this._resolveNamespaceConflict$4(namespace, sources, this.namespaces, this.url);
    },
    $signature: 68
  };
  A._ModuleMigrationVisitor__resolveNamespaceConflict_closure.prototype = {
    call$1(segment) {
      return B.JSString_methods.contains$1(segment, ".");
    },
    $signature: 5
  };
  A._ModuleMigrationVisitor__resolveNamespaceConflict_closure0.prototype = {
    call$1(segments) {
      return J.get$isEmpty$asx(segments);
    },
    $signature: 168
  };
  A._ModuleMigrationVisitor__orderSources_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.ImportSource);
    },
    $signature: 169
  };
  A._ModuleMigrationVisitor__orderSources_closure0.prototype = {
    call$2(a, b) {
      return a.get$key() - b.get$key();
    },
    $signature: 170
  };
  A._ModuleMigrationVisitor_visitFunctionExpression_closure.prototype = {
    call$1(namespace) {
      var t2,
        t1 = this.fnNameSpan;
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      t2 = t1.offset;
      this.$this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t2, t2), namespace + "."));
    },
    $signature: 39
  };
  A._ModuleMigrationVisitor_visitFunctionExpression_closure0.prototype = {
    call$1(namespace) {
      var t1 = this.node.span,
        t2 = t1.file,
        beforeParen = A.FileLocation$_(t2, t1._end).offset - 1;
      this.$this.addPatch$1(new A.Patch(t2.span$2(beforeParen, beforeParen), ', $module: "' + namespace + '"'));
    },
    $signature: 39
  };
  A._ModuleMigrationVisitor_visitImportRule_closure.prototype = {
    call$1($import) {
      var t1 = $import.span;
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1.file._decodedChars, t1._file$_start, t1._end), 0, null);
    },
    $signature: 172
  };
  A._ModuleMigrationVisitor__migrateImportToRules_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._incrementUntilAvailable$2(this.defaultNamespace, t1.assertInStylesheet$2(t1.__namespaces, "_namespaces"));
    },
    $signature: 12
  };
  A._ModuleMigrationVisitor__migrateImportCommon_closure.prototype = {
    call$0() {
      return new A.Tuple2(this.ruleUrl, this.tuple.item1, type$.Tuple2_Uri_Importer);
    },
    $signature: 173
  };
  A._ModuleMigrationVisitor__migrateImportCommon_closure0.prototype = {
    call$1(variable) {
      return "$" + variable;
    },
    $signature: 4
  };
  A._ModuleMigrationVisitor__migrateImportCommon_closure1.prototype = {
    call$2($name, variable) {
      var span, t2, t3, before, beforeDeclaration, start, t4, end, end0, nameFormat, _this = this, _null = null,
        t1 = variable.member;
      if (t1.isGuarded || _this.$this.references.variables._map.containsValue$1(variable))
        _this.configured.push("$" + $name + ": $" + $name);
      else {
        span = t1.span;
        t2 = span.file;
        t3 = span._file$_start;
        before = A.FileLocation$_(t2, t3).offset;
        t3 = A.FileLocation$_(t2, t3);
        beforeDeclaration = t2.span$2(before - t3.file.getColumn$1(t3.offset), before);
        if (B.JSString_methods.trim$0(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(beforeDeclaration.file._decodedChars, beforeDeclaration._file$_start, beforeDeclaration._end), 0, _null)) === "")
          _this.$this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(beforeDeclaration, 0, _null), ""));
        t3 = _this.$this;
        t3.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(span, 0, _null), ""));
        start = A.FileLocation$_(t2, span._end).offset;
        t4 = t3.assertInStylesheet$2(t3._currentUrl, "currentUrl");
        end = start + (B.JSString_methods.endsWith$1(t4.get$path(t4), ".sass") ? "" : ";").length;
        end0 = end + 1;
        t4 = t2.span$2(end, end0);
        t3.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t2.span$2(start, A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t4.file._decodedChars, t4._file$_start, t4._end), 0, _null) === "\n" ? end0 : end), 0, _null), ""));
        nameFormat = t3._useAllowed ? "$" + $name : '"' + $name + '"';
        _this.configured.push(nameFormat + ": " + t1.expression.toString$0(0));
      }
    },
    $signature: 174
  };
  A._ModuleMigrationVisitor__makeForwardRules_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.MemberDeclaration_SassDeclaration);
    },
    $signature: 38
  };
  A._ModuleMigrationVisitor__findOrAddBuiltInNamespace_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._resolveBuiltInNamespace$2(this.module, t1.assertInStylesheet$2(t1.__namespaces, "_namespaces"));
    },
    $signature: 12
  };
  A._ModuleMigrationVisitor__namespaceForDeclaration_closure.prototype = {
    call$1(url) {
      return url.get$pathSegments().length;
    },
    $signature: 175
  };
  A._ModuleMigrationVisitor__namespaceForDeclaration_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._incrementUntilAvailable$2(this.defaultNamespace, t1.assertInStylesheet$2(t1.__namespaces, "_namespaces"));
    },
    $signature: 12
  };
  A._ModuleMigrationVisitor__absoluteUrlToDependency_closure.prototype = {
    call$1(url) {
      return url.length;
    },
    $signature: 31
  };
  A._ModuleMigrationVisitor__prefixFor_closure.prototype = {
    call$1(prefix) {
      var t1 = prefix.length,
        t2 = this.identifier;
      return t1 < t2.length && B.JSString_methods.startsWith$1(t2, prefix) && A.Parser_isIdentifier(B.JSString_methods.substring$1(t2, t1), $.$get$Logger_quiet());
    },
    $signature: 5
  };
  A._ModuleMigrationVisitor__prefixFor_closure0.prototype = {
    call$1(prefix) {
      return prefix.length;
    },
    $signature: 31
  };
  A.ForwardType.prototype = {};
  A.MemberDeclaration.prototype = {
    get$isForwarded() {
      return !this.sourceUrl.$eq(0, this.member.get$span().file.url);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.MemberDeclaration && this.member === other.member && this.name === other.name && this.sourceUrl.$eq(0, other.sourceUrl);
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      return (A.Primitives_objectHashCode(this.member) ^ B.JSString_methods.get$hashCode(this.name) ^ t1.get$hashCode(t1)) >>> 0;
    },
    toString$0(_) {
      var t1 = this.member;
      if (t1 instanceof A.MixinRule)
        t1 = "" + "@mixin ";
      else
        t1 = t1 instanceof A.FunctionRule ? "" + "@function " : "" + "$";
      t1 += this.name + " from " + $.$get$context().prettyUri$1(this.sourceUrl);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.ImportOnlyMemberDeclaration.prototype = {
    get$isForwarded() {
      return true;
    },
    toString$0(_) {
      return this.super$MemberDeclaration$toString(0) + " through " + $.$get$context().prettyUri$1(this.importOnlyUrl);
    }
  };
  A.ReferenceSource.prototype = {};
  A.ImportSource.prototype = {
    get$preferredNamespace() {
      var t1 = this.url,
        path = t1.get$path(t1),
        t2 = $.$get$url(),
        basename = A.ParsedPath_ParsedPath$parse(t1.get$path(t1), t2.style)._splitExtension$0()[0];
      return A.namespaceForPath(basename === "index" || basename === "_index" ? t2.dirname$1(0, path) : path);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ImportSource && this.url.$eq(0, other.url) && J.$eq$(this.originalRuleUrl, other.originalRuleUrl);
    },
    get$hashCode(_) {
      var t1 = this.url;
      return t1.get$hashCode(t1);
    },
    get$url(receiver) {
      return this.url;
    }
  };
  A.UseSource.prototype = {
    get$preferredNamespace() {
      return this.use.namespace;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.UseSource && this.url.$eq(0, other.url) && this.use === other.use;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.use);
    },
    get$url(receiver) {
      return this.url;
    }
  };
  A.BuiltInSource.prototype = {
    get$preferredNamespace() {
      var t1 = this.url;
      return t1.get$path(t1);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.BuiltInSource && this.url.$eq(0, other.url);
    },
    get$hashCode(_) {
      var t1 = this.url;
      return t1.get$hashCode(t1);
    },
    get$url(receiver) {
      return this.url;
    }
  };
  A.CurrentSource.prototype = {
    get$preferredNamespace() {
      return null;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.CurrentSource && this.url.$eq(0, other.url);
    },
    get$hashCode(_) {
      var t1 = this.url;
      return t1.get$hashCode(t1);
    },
    get$url(receiver) {
      return this.url;
    }
  };
  A.ForwardSource.prototype = {
    get$preferredNamespace() {
      return null;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ForwardSource && this.url.$eq(0, other.url) && this.forward === other.forward;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.forward);
    },
    get$url(receiver) {
      return this.url;
    }
  };
  A.ImportOnlySource.prototype = {
    get$preferredNamespace() {
      return null;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ImportOnlySource && this.url.$eq(0, other.url) && this.realSourceUrl.$eq(0, other.realSourceUrl) && J.$eq$(this.originalRuleUrl, other.originalRuleUrl);
    },
    get$hashCode(_) {
      var t1 = this.realSourceUrl;
      return t1.get$hashCode(t1);
    },
    get$url(receiver) {
      return this.url;
    }
  };
  A.References.prototype = {
    get$allDeclarations() {
      var t1 = this.variables._map,
        t2 = this.mixins._map,
        t3 = this.functions._map;
      return t1.get$values(t1).followedBy$1(0, t2.get$values(t2)).followedBy$1(0, t3.get$values(t3));
    },
    referencesTo$1(declaration) {
      var _this = this;
      if (type$.MemberDeclaration_FunctionRule._is(declaration))
        return _this.functions._unmodifiable_bidirectional_map_view$_map.keysForValue$1(declaration).followedBy$1(0, _this.getFunctionReferences._unmodifiable_bidirectional_map_view$_map.keysForValue$1(declaration));
      else if (type$.MemberDeclaration_MixinRule._is(declaration))
        return _this.mixins._unmodifiable_bidirectional_map_view$_map.keysForValue$1(declaration);
      return _this.variables._unmodifiable_bidirectional_map_view$_map.keysForValue$1(declaration);
    },
    referencedOutsideDeclaringStylesheet$1(declaration) {
      return this.referencesTo$1(declaration).any$1(0, new A.References_referencedOutsideDeclaringStylesheet_closure(declaration));
    },
    anyMemberReferenced$2(declaringUrl, referencingUrl) {
      var t1, t2;
      for (t1 = this.get$allDeclarations(), t1 = new A.FollowedByIterator(J.get$iterator$ax(t1.__internal$_first), t1._second); t1.moveNext$0();) {
        t2 = t1._currentIterator.get$current();
        if (!t2.sourceUrl.$eq(0, declaringUrl))
          continue;
        for (t2 = this.referencesTo$1(t2), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          if (J.$eq$(t2.get$current().get$span().file.url, referencingUrl))
            return true;
      }
      return false;
    }
  };
  A.References_referencedOutsideDeclaringStylesheet_closure.prototype = {
    call$1(reference) {
      return !J.$eq$(reference.get$span().file.url, this.declaration.sourceUrl);
    },
    $signature: 176
  };
  A._ReferenceVisitor.prototype = {
    build$2(stylesheet, importer) {
      var t1, t2, t3, t4, t5, t6, original, original0, _this = this;
      _this.___ReferenceVisitor__importer_A = importer;
      _this.___ReferenceVisitor__scope_A = A.Scope$(null);
      t1 = stylesheet.span.file.url;
      t1.toString;
      _this.___ReferenceVisitor__currentUrl_A = t1;
      _this.___ReferenceVisitor__isOrphanImportOnly_A = B.JSString_methods.endsWith$1(t1.get$path(t1), ".import.scss") || B.JSString_methods.endsWith$1(t1.get$path(t1), ".import.sass");
      _this._moduleScopes.$indexSet(0, _this.___ReferenceVisitor__currentUrl_A, _this.___ReferenceVisitor__scope_A);
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.MemberDeclaration_SassDeclaration, type$.ReferenceSource);
      _this.___ReferenceVisitor__declarationSources_A = t1;
      _this._moduleSources.$indexSet(0, _this.___ReferenceVisitor__currentUrl_A, t1);
      _this.visitStylesheet$1(stylesheet);
      for (t1 = _this.___ReferenceVisitor__scope_A.variables, t1 = t1.get$values(t1), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = _this._globalDeclarations, t3 = _this._variableReassignments, t4 = t3._valueForKey, t5 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
        t6 = t1.__internal$_current;
        original = t6 == null ? t5._as(t6) : t6;
        original0 = t4.$index(0, original);
        original = original0 == null ? original : original0;
        t2.add$1(0, original);
        t2.addAll$1(0, t3.keysForValue$1(original));
      }
      t1 = _this.___ReferenceVisitor__scope_A.mixins;
      t2.addAll$1(0, t1.get$values(t1));
      t1 = _this.___ReferenceVisitor__scope_A.functions;
      t2.addAll$1(0, t1.get$values(t1));
      _this._checkUnresolvedReferences$1(_this.___ReferenceVisitor__scope_A);
      _this._resolveBuiltInFunctionReferences$0();
      return A.References$_(_this._variables, t3, _this._defaultVariableDeclarations, _this._mixins, _this._functions, _this._getFunctionReferences, t2, _this._libraries, _this._sources, _this._orphanImportOnlyFiles);
    },
    _resolveBuiltInFunctionReferences$0() {
      var t2, t3, t4, t5, t6, module,
        t1 = this._unresolvedReferences;
      t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      for (t1 = t1.get$iterator(t1), t2 = new A.WhereTypeIterator(t1, type$.WhereTypeIterator_FunctionExpression), t3 = type$.FunctionExpression, t4 = this._sources; t2.moveNext$0();) {
        t5 = t3._as(t1.get$current());
        if (this._isCssCompatibilityOverload$1(t5))
          continue;
        t6 = t5.originalName;
        module = B.Map_gk3Sx.$index(0, A.stringReplaceAllUnchecked(t6, "_", "-"));
        if (module != null)
          t4.$indexSet(0, t5, new A.BuiltInSource(A.Uri_parse("sass:" + module)));
      }
    },
    _isCssCompatibilityOverload$1(node) {
      var t2,
        t1 = node.$arguments,
        argument = A.getOnlyArgument(t1);
      switch (A.stringReplaceAllUnchecked(node.originalName, "_", "-")) {
        case "grayscale":
        case "invert":
        case "opacity":
          return argument instanceof A.NumberExpression;
        case "saturate":
          return argument != null;
        case "alpha":
          t2 = t1.named;
          if (t1.positional.length + t2.get$length(t2) > 1)
            return true;
          return argument instanceof A.BinaryOperationExpression && argument.operator === B.BinaryOperator_axY;
        default:
          return false;
      }
    },
    visitStylesheet$1(node) {
      var t2, t3, t4, _this = this,
        oldNamespaces = _this._namespaces,
        t1 = _this.___ReferenceVisitor__currentUrl_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t2 = _this.___ReferenceVisitor__isOrphanImportOnly_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      _this._namespaces = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Uri);
      t3 = node.span.file.url;
      t3.toString;
      _this.___ReferenceVisitor__currentUrl_A = t3;
      _this.___ReferenceVisitor__isOrphanImportOnly_A = B.JSString_methods.endsWith$1(t3.get$path(t3), ".import.scss") || B.JSString_methods.endsWith$1(t3.get$path(t3), ".import.sass");
      _this.super$RecursiveStatementVisitor$visitChildren(node.children);
      if (_this.___ReferenceVisitor__isOrphanImportOnly_A) {
        t3 = _this.___ReferenceVisitor__currentUrl_A;
        t4 = _this._lastRegularForward;
        t4 = J.$eq$(t4 == null ? null : t4.span.file.url, t3) ? _this._lastRegularForward : null;
        _this._orphanImportOnlyFiles.$indexSet(0, t3, t4);
      }
      _this.___ReferenceVisitor__isOrphanImportOnly_A = t2;
      _this._namespaces = oldNamespaces;
      _this.___ReferenceVisitor__currentUrl_A = t1;
    },
    visitImportRule$1(node) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, result, oldLibraryUrl, oldRuleUrl, importSource, _i, entry, declaration, source, _this = this;
      _this.super$RecursiveAstVisitor$visitImportRule(node);
      for (t1 = B.JSArray_methods.get$iterator(node.imports), t2 = new A.WhereTypeIterator(t1, type$.WhereTypeIterator_DynamicImport), t3 = type$.DynamicImport, t4 = _this.importCache; t2.moveNext$0();) {
        t5 = t3._as(t1.get$current());
        t6 = t5.urlString;
        t7 = A.Uri_parse(t6);
        t8 = _this.___ReferenceVisitor__importer_A;
        t8 === $ && A.throwUnnamedLateFieldNI();
        t9 = _this.___ReferenceVisitor__currentUrl_A;
        t9 === $ && A.throwUnnamedLateFieldNI();
        result = t4.import$4$baseImporter$baseUrl$forImport(t7, t8, t9, true);
        if (result == null)
          throw A.wrapException(A.MigrationSourceSpanException$("Could not find Sass file at '" + A.prettyUri(t5.get$url(t5)) + "'.", t5.span));
        t5 = _this.___ReferenceVisitor__importer_A;
        t7 = result.item1;
        _this.___ReferenceVisitor__importer_A = t7;
        oldLibraryUrl = _this._libraryUrl;
        t8 = result.item2;
        t9 = t8.span.file.url;
        t9.toString;
        if (t7 !== t5)
          t7 = !(B.JSString_methods.endsWith$1(t9.get$path(t9), ".import.scss") || B.JSString_methods.endsWith$1(t9.get$path(t9), ".import.sass"));
        else
          t7 = false;
        if (t7)
          if (_this._libraryUrl == null)
            _this._libraryUrl = t9;
        oldRuleUrl = _this._currentRuleUrl;
        _this._currentRuleUrl = A.Uri_parse(t6);
        _this.visitStylesheet$1(t8);
        importSource = new A.ImportSource(t9, A.Uri_parse(t6));
        t6 = _this.___ReferenceVisitor__declarationSources_A;
        t6 === $ && A.throwUnnamedLateFieldNI();
        t6 = t6.get$entries(t6);
        t6 = A.List_List$of(t6, true, A._instanceType(t6)._eval$1("Iterable.E"));
        t7 = t6.length;
        _i = 0;
        for (; _i < t7; ++_i) {
          entry = t6[_i];
          declaration = entry.get$key();
          source = J.get$value$z(entry);
          if (!source.get$url(source).$eq(0, t9))
            continue;
          if (source instanceof A.CurrentSource || source instanceof A.ForwardSource)
            _this.___ReferenceVisitor__declarationSources_A.$indexSet(0, declaration, importSource);
          else if (source instanceof A.ImportOnlySource)
            _this.___ReferenceVisitor__declarationSources_A.$indexSet(0, declaration, new A.ImportSource(source.realSourceUrl, source.originalRuleUrl));
        }
        _this._libraryUrl = oldLibraryUrl;
        _this.___ReferenceVisitor__importer_A = t5;
        _this._currentRuleUrl = oldRuleUrl;
      }
    },
    visitUseRule$1(node) {
      var namespace, t1, canonicalUrl, _this = this;
      _this.super$RecursiveAstVisitor$visitUseRule(node);
      namespace = node.namespace;
      if (namespace == null)
        return;
      t1 = node.url;
      if (t1.get$scheme() === "sass") {
        _this._namespaces.$indexSet(0, namespace, t1);
        return;
      }
      canonicalUrl = _this._loadUseOrForward$2(t1, node);
      _this._namespaces.$indexSet(0, namespace, canonicalUrl);
      _this._moduleSources.$index(0, canonicalUrl).forEach$1(0, new A._ReferenceVisitor_visitUseRule_closure(_this, canonicalUrl, new A.UseSource(canonicalUrl, node)));
    },
    _loadUseOrForward$2(ruleUrl, nodeForSpan) {
      var t2, result, stylesheet, t3, t4, oldLibraryUrl, oldRuleUrl, _this = this,
        t1 = _this.___ReferenceVisitor__importer_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t2 = _this.___ReferenceVisitor__currentUrl_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      result = _this.importCache.import$3$baseImporter$baseUrl(ruleUrl, t1, t2);
      if (result == null)
        throw A.wrapException(A.MigrationSourceSpanException$("Could not find Sass file at '" + A.prettyUri(ruleUrl) + "'.", nodeForSpan.get$span()));
      stylesheet = result.item2;
      t1 = stylesheet.span.file.url;
      t1.toString;
      t2 = _this._moduleScopes;
      if (t2.containsKey$1(t1))
        return t1;
      t3 = _this.___ReferenceVisitor__scope_A;
      t3 === $ && A.throwUnnamedLateFieldNI();
      t4 = A.Scope$(null);
      _this.___ReferenceVisitor__scope_A = t4;
      t2.$indexSet(0, t1, t4);
      t4 = _this.___ReferenceVisitor__declarationSources_A;
      t4 === $ && A.throwUnnamedLateFieldNI();
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(type$.MemberDeclaration_SassDeclaration, type$.ReferenceSource);
      _this.___ReferenceVisitor__declarationSources_A = t2;
      _this._moduleSources.$indexSet(0, t1, t2);
      t2 = _this.___ReferenceVisitor__importer_A;
      _this.___ReferenceVisitor__importer_A = result.item1;
      oldLibraryUrl = _this._libraryUrl;
      _this._libraryUrl = null;
      oldRuleUrl = _this._currentRuleUrl;
      _this._currentRuleUrl = ruleUrl;
      _this.visitStylesheet$1(stylesheet);
      _this._checkUnresolvedReferences$1(_this.___ReferenceVisitor__scope_A);
      _this._libraryUrl = oldLibraryUrl;
      _this.___ReferenceVisitor__importer_A = t2;
      _this.___ReferenceVisitor__scope_A = t3;
      _this.___ReferenceVisitor__declarationSources_A = t4;
      _this._currentRuleUrl = oldRuleUrl;
      return t1;
    },
    visitForwardRule$1(node) {
      var canonicalUrl, t1, moduleScope, t2, t3, t4, t5, t6, t7, t8, _this = this;
      _this.super$RecursiveAstVisitor$visitForwardRule(node);
      canonicalUrl = _this._loadUseOrForward$2(node.url, node);
      t1 = _this.___ReferenceVisitor__isOrphanImportOnly_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      if (t1) {
        t1 = _this.___ReferenceVisitor__currentUrl_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1 = t1.$eq(0, A.getImportOnlyUrl(canonicalUrl));
      } else
        t1 = false;
      if (t1)
        _this.___ReferenceVisitor__isOrphanImportOnly_A = false;
      if (!(B.JSString_methods.endsWith$1(canonicalUrl.get$path(canonicalUrl), ".import.scss") || B.JSString_methods.endsWith$1(canonicalUrl.get$path(canonicalUrl), ".import.sass")))
        _this._lastRegularForward = node;
      moduleScope = _this._moduleScopes.$index(0, canonicalUrl);
      for (t1 = moduleScope.variables, t1 = t1.get$values(t1), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = node.prefix, t3 = node.shownVariables, t4 = node.hiddenVariables, t5 = A._instanceType(t1)._rest[1], t6 = type$.SassDeclaration; t1.moveNext$0();) {
        t7 = t1.__internal$_current;
        if (t7 == null)
          t7 = t5._as(t7);
        if (!(t7.member instanceof A.VariableDeclaration))
          throw A.wrapException(A.StateError$("Arguments should not be present in a module's global scope"));
        if (_this._visibleThroughForward$4(t7.name, t2, t3, t4)) {
          t8 = _this.___ReferenceVisitor__scope_A;
          t8 === $ && A.throwUnnamedLateFieldNI();
          _this._forwardMember$1$4(t7, node, canonicalUrl, t8.variables, t6);
        }
      }
      for (t1 = moduleScope.mixins, t1 = t1.get$values(t1), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t3 = node.shownMixinsAndFunctions, t4 = node.hiddenMixinsAndFunctions, t5 = A._instanceType(t1)._rest[1], t6 = type$.MixinRule; t1.moveNext$0();) {
        t7 = t1.__internal$_current;
        if (t7 == null)
          t7 = t5._as(t7);
        if (_this._visibleThroughForward$4(t7.name, t2, t3, t4)) {
          t8 = _this.___ReferenceVisitor__scope_A;
          t8 === $ && A.throwUnnamedLateFieldNI();
          _this._forwardMember$1$4(t7, node, canonicalUrl, t8.mixins, t6);
        }
      }
      for (t1 = moduleScope.functions, t1 = t1.get$values(t1), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t5 = A._instanceType(t1)._rest[1], t6 = type$.FunctionRule; t1.moveNext$0();) {
        t7 = t1.__internal$_current;
        if (t7 == null)
          t7 = t5._as(t7);
        if (_this._visibleThroughForward$4(t7.name, t2, t3, t4)) {
          t8 = _this.___ReferenceVisitor__scope_A;
          t8 === $ && A.throwUnnamedLateFieldNI();
          _this._forwardMember$1$4(t7, node, canonicalUrl, t8.functions, t6);
        }
      }
    },
    _visibleThroughForward$4($name, prefix, shown, hidden) {
      var t1;
      if (prefix != null)
        $name = prefix + $name;
      t1 = shown == null ? null : shown._base.contains$1(0, $name);
      if (t1 !== false) {
        t1 = hidden == null ? null : hidden._base.contains$1(0, $name);
        t1 = t1 !== true;
      } else
        t1 = false;
      return t1;
    },
    _forwardMember$1$4(forwarding, $forward, forwardedUrl, declarations, $T) {
      var t3, t4, t5, t6, declaration,
        t1 = $forward.span.file.url,
        t2 = B.JSString_methods.endsWith$1(t1.get$path(t1), ".import.scss") || B.JSString_methods.endsWith$1(t1.get$path(t1), ".import.sass"),
        prefix = $forward.prefix;
      if (t2) {
        t2 = prefix == null;
        t3 = t2 ? "" : prefix;
        t4 = $T._eval$1("ImportOnlyMemberDeclaration<0>");
        t5 = t4._is(forwarding) ? forwarding.importOnlyPrefix : "";
        t2 = t2 ? "" : prefix;
        t6 = forwarding.name;
        declaration = new A.ImportOnlyMemberDeclaration(t3 + t5, t1, forwarding.member, t2 + t6, forwarding.sourceUrl, t4);
        t2 = t6;
      } else {
        t2 = prefix == null ? "" : prefix;
        t3 = forwarding.name;
        declaration = new A.MemberDeclaration(forwarding.member, t2 + t3, t1, $T._eval$1("MemberDeclaration<0>"));
        t2 = t3;
      }
      this._registerLibraryUrl$1(declaration);
      declarations.$indexSet(0, (prefix == null ? "" : prefix) + t2, declaration);
      t2 = this.___ReferenceVisitor__declarationSources_A;
      if ($T._eval$1("ImportOnlyMemberDeclaration<0>")._is(declaration)) {
        t2 === $ && A.throwUnnamedLateFieldNI();
        t1 = t1.$eq(0, A.getImportOnlyUrl(forwardedUrl)) ? this._currentRuleUrl : null;
        t2.$indexSet(0, declaration, new A.ImportOnlySource(declaration.importOnlyUrl, declaration.sourceUrl, t1));
      } else {
        t2 === $ && A.throwUnnamedLateFieldNI();
        t2.$indexSet(0, declaration, new A.ForwardSource(t1, $forward));
      }
    },
    visitCallableDeclaration$1(node) {
      var t2, t3, t4, _i, argument, t5, t6, t7, t8, defaultValue, _this = this,
        t1 = _this.___ReferenceVisitor__scope_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      _this.___ReferenceVisitor__scope_A = A.Scope$(t1);
      for (t2 = node.$arguments.$arguments, t3 = t2.length, t4 = type$.MemberDeclaration_SassDeclaration, _i = 0; _i < t3; ++_i) {
        argument = t2[_i];
        t5 = _this.___ReferenceVisitor__scope_A;
        t6 = argument.name;
        t7 = argument.get$name(argument);
        t8 = argument.get$span().file.url;
        t8.toString;
        t5.variables.$indexSet(0, t6, new A.MemberDeclaration(argument, t7, t8, t4));
        defaultValue = argument.defaultValue;
        if (defaultValue != null)
          defaultValue.accept$1(_this);
      }
      _this.super$RecursiveStatementVisitor$visitChildren(node.children);
      _this._checkUnresolvedReferences$1(_this.___ReferenceVisitor__scope_A);
      _this.___ReferenceVisitor__scope_A = t1;
    },
    visitChildren$1(children) {
      var _this = this,
        t1 = _this.___ReferenceVisitor__scope_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      _this.___ReferenceVisitor__scope_A = A.Scope$(t1);
      _this.super$RecursiveStatementVisitor$visitChildren(children);
      _this._checkUnresolvedReferences$1(_this.___ReferenceVisitor__scope_A);
      _this.___ReferenceVisitor__scope_A = t1;
    },
    _checkUnresolvedReferences$1(scope) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _i, entry, reference, refScope, t10, nameExpression, t11, _this = this;
      for (t1 = _this._unresolvedReferences, t1 = t1.get$entries(t1), t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("Iterable.E")), t2 = t1.length, t3 = scope.functions, t4 = _this._functions, t5 = _this._getFunctionReferences, t6 = scope.mixins, t7 = _this._mixins, t8 = scope.variables, t9 = _this._variables, _i = 0; _i < t2; ++_i) {
        entry = t1[_i];
        reference = entry.get$key();
        refScope = J.get$value$z(entry);
        if (refScope !== scope) {
          t10 = refScope.parent;
          t10 = t10 == null ? null : t10.isDescendentOf$1(scope);
          t10 = t10 === true;
        } else
          t10 = true;
        if (!t10)
          continue;
        if (reference instanceof A.VariableExpression)
          _this._linkUnresolvedReference$4(reference, reference.name, t8, t9);
        else if (reference instanceof A.IncludeRule)
          _this._linkUnresolvedReference$4(reference, reference.name, t6, t7);
        else if (reference instanceof A.FunctionExpression) {
          t10 = reference.originalName;
          if (A.stringReplaceAllUnchecked(t10, "_", "-") === "get-function") {
            nameExpression = A.getStaticNameForGetFunctionCall(reference);
            if (nameExpression == null)
              continue;
            t10 = nameExpression.file;
            t11 = nameExpression._file$_start;
            t10 = t10._decodedChars;
            t10 = A.String_String$fromCharCodes(new Uint32Array(t10.subarray(t11, A._checkValidRange(t11, nameExpression._end, t10.length))), 0, null);
            _this._linkUnresolvedReference$5$trackSources(reference, A.stringReplaceAllUnchecked(t10, "_", "-"), t3, t5, false);
          } else
            _this._linkUnresolvedReference$4(reference, A.stringReplaceAllUnchecked(t10, "_", "-"), t3, t4);
        }
      }
    },
    _linkUnresolvedReference$1$5$trackSources(reference, $name, declarations, references, trackSources) {
      var t1,
        declaration = declarations.$index(0, $name);
      if (declaration == null)
        return;
      references.$indexSet(0, reference, declaration);
      if (trackSources) {
        t1 = this.___ReferenceVisitor__declarationSources_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1 = t1.$index(0, declaration);
        t1.toString;
        this._sources.$indexSet(0, reference, t1);
      }
      this._unresolvedReferences.remove$1(0, reference);
    },
    _linkUnresolvedReference$4(reference, $name, declarations, references) {
      return this._linkUnresolvedReference$1$5$trackSources(reference, $name, declarations, references, true, type$.SassReference);
    },
    _linkUnresolvedReference$5$trackSources(reference, $name, declarations, references, trackSources) {
      return this._linkUnresolvedReference$1$5$trackSources(reference, $name, declarations, references, trackSources, type$.SassReference);
    },
    _scopeForNamespace$1(namespace) {
      var t1 = this._moduleScopes.$index(0, this._namespaces.$index(0, namespace));
      if (t1 == null) {
        t1 = this.___ReferenceVisitor__scope_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
      }
      return t1;
    },
    visitVariableDeclaration$1(node) {
      var member, t1, t2, scope, existing, previous, original, _this = this;
      _this.super$RecursiveAstVisitor$visitVariableDeclaration(node);
      member = A.MemberDeclaration$(node, type$.VariableDeclaration);
      t1 = _this.___ReferenceVisitor__declarationSources_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t2 = _this.___ReferenceVisitor__currentUrl_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t1.$indexSet(0, member, new A.CurrentSource(t2));
      _this._registerLibraryUrl$1(member);
      scope = _this._scopeForNamespace$1(node.namespace);
      if (node.isGlobal)
        scope = scope.get$global();
      if (node.isGuarded) {
        existing = scope.findVariable$1(node.name);
        if (existing != null && !existing.sourceUrl.$eq(0, member.sourceUrl))
          _this._defaultVariableDeclarations.$indexSet(0, member, existing);
      }
      t1 = scope.variables;
      t2 = node.name;
      previous = t1.$index(0, t2);
      if (previous == null || !previous.get$isForwarded())
        t1.$indexSet(0, t2, member);
      t1 = _this._variableReassignments;
      original = t1._valueForKey.$index(0, previous);
      if (original == null)
        original = previous;
      if (original != null)
        t1.$indexSet(0, member, original);
    },
    visitVariableExpression$1(node) {
      var namespace, urlForNamespace, declaration, t1, t2, source, _this = this;
      _this.super$RecursiveAstVisitor$visitVariableExpression(node);
      namespace = node.namespace;
      urlForNamespace = _this._namespaces.$index(0, namespace);
      if (urlForNamespace != null && urlForNamespace.get$scheme() === "sass") {
        _this._sources.$indexSet(0, node, new A.BuiltInSource(A.Uri_parse("sass:" + urlForNamespace.get$path(urlForNamespace))));
        return;
      }
      declaration = _this._scopeForNamespace$1(namespace).findVariable$1(node.name);
      if (declaration != null) {
        if (declaration.get$isForwarded()) {
          t1 = declaration.sourceUrl;
          t2 = _this.___ReferenceVisitor__currentUrl_A;
          t2 === $ && A.throwUnnamedLateFieldNI();
          t2 = !t1.$eq(0, t2);
          t1 = t2;
        } else
          t1 = false;
        t1 = !t1;
      } else
        t1 = false;
      if (t1) {
        _this._variables.$indexSet(0, node, declaration);
        t1 = _this.___ReferenceVisitor__declarationSources_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        source = t1.$index(0, declaration);
        if (source != null)
          _this._sources.$indexSet(0, node, source);
      } else if (namespace == null) {
        t1 = _this.___ReferenceVisitor__scope_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        _this._unresolvedReferences.$indexSet(0, node, t1);
      }
    },
    visitMixinRule$1(node) {
      var member, t1, t2, _this = this;
      _this.super$RecursiveAstVisitor$visitMixinRule(node);
      member = A.MemberDeclaration$(node, type$.MixinRule);
      t1 = _this.___ReferenceVisitor__declarationSources_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t2 = _this.___ReferenceVisitor__currentUrl_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t1.$indexSet(0, member, new A.CurrentSource(t2));
      _this._registerLibraryUrl$1(member);
      t2 = _this.___ReferenceVisitor__scope_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t2.mixins.$indexSet(0, node.name, member);
    },
    visitIncludeRule$1(node) {
      var namespace, urlForNamespace, declaration, t1, t2, _this = this;
      _this.super$__ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitIncludeRule(node);
      namespace = node.namespace;
      urlForNamespace = _this._namespaces.$index(0, namespace);
      if (urlForNamespace != null && urlForNamespace.get$scheme() === "sass") {
        _this._sources.$indexSet(0, node, new A.BuiltInSource(A.Uri_parse("sass:" + urlForNamespace.get$path(urlForNamespace))));
        return;
      }
      declaration = _this._scopeForNamespace$1(namespace).findMixin$1(node.name);
      if (declaration != null) {
        if (declaration.get$isForwarded()) {
          t1 = declaration.sourceUrl;
          t2 = _this.___ReferenceVisitor__currentUrl_A;
          t2 === $ && A.throwUnnamedLateFieldNI();
          t2 = !t1.$eq(0, t2);
          t1 = t2;
        } else
          t1 = false;
        t1 = !t1;
      } else
        t1 = false;
      if (t1) {
        _this._mixins.$indexSet(0, node, declaration);
        t1 = _this.___ReferenceVisitor__declarationSources_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1 = t1.$index(0, declaration);
        t1.toString;
        _this._sources.$indexSet(0, node, t1);
      } else if (namespace == null) {
        t1 = _this.___ReferenceVisitor__scope_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        _this._unresolvedReferences.$indexSet(0, node, t1);
      }
    },
    visitFunctionRule$1(node) {
      var member, t1, t2, _this = this;
      _this.super$RecursiveStatementVisitor$visitFunctionRule(node);
      member = A.MemberDeclaration$(node, type$.FunctionRule);
      t1 = _this.___ReferenceVisitor__declarationSources_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t2 = _this.___ReferenceVisitor__currentUrl_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t1.$indexSet(0, member, new A.CurrentSource(t2));
      _this._registerLibraryUrl$1(member);
      t2 = _this.___ReferenceVisitor__scope_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t2.functions.$indexSet(0, node.name, member);
    },
    visitFunctionExpression$1(node) {
      var namespace, urlForNamespace, t1, t2, declaration, t3, nameExpression, moduleExpression, $name, _this = this;
      _this.super$RecursiveAstVisitor$visitFunctionExpression(node);
      namespace = node.namespace;
      urlForNamespace = _this._namespaces.$index(0, namespace);
      if (urlForNamespace != null && urlForNamespace.get$scheme() === "sass") {
        _this._sources.$indexSet(0, node, new A.BuiltInSource(A.Uri_parse("sass:" + urlForNamespace.get$path(urlForNamespace))));
        return;
      }
      t1 = _this._scopeForNamespace$1(namespace);
      t2 = node.originalName;
      declaration = t1.findFunction$1(A.stringReplaceAllUnchecked(t2, "_", "-"));
      if (declaration != null) {
        if (declaration.get$isForwarded()) {
          t1 = declaration.sourceUrl;
          t3 = _this.___ReferenceVisitor__currentUrl_A;
          t3 === $ && A.throwUnnamedLateFieldNI();
          t3 = !t1.$eq(0, t3);
          t1 = t3;
        } else
          t1 = false;
        t1 = !t1;
      } else
        t1 = false;
      if (t1) {
        _this._functions.$indexSet(0, node, declaration);
        t1 = _this.___ReferenceVisitor__declarationSources_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1 = t1.$index(0, declaration);
        t1.toString;
        _this._sources.$indexSet(0, node, t1);
        return;
      } else if (namespace == null)
        if (A.stringReplaceAllUnchecked(t2, "_", "-") === "get-function")
          _this._sources.$indexSet(0, node, new A.BuiltInSource(A.Uri_parse("sass:meta")));
        else {
          t1 = _this.___ReferenceVisitor__scope_A;
          t1 === $ && A.throwUnnamedLateFieldNI();
          _this._unresolvedReferences.$indexSet(0, node, t1);
          return;
        }
      nameExpression = A.getStaticNameForGetFunctionCall(node);
      if (nameExpression == null)
        return;
      moduleExpression = A.getStaticModuleForGetFunctionCall(node);
      namespace = moduleExpression == null ? null : A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(moduleExpression.file._decodedChars, moduleExpression._file$_start, moduleExpression._end), 0, null);
      t1 = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(nameExpression.file._decodedChars, nameExpression._file$_start, nameExpression._end), 0, null);
      $name = A.stringReplaceAllUnchecked(t1, "_", "-");
      declaration = _this._scopeForNamespace$1(namespace).findFunction$1($name);
      if (declaration != null) {
        if (declaration.get$isForwarded()) {
          t1 = declaration.sourceUrl;
          t2 = _this.___ReferenceVisitor__currentUrl_A;
          t2 === $ && A.throwUnnamedLateFieldNI();
          t2 = !t1.$eq(0, t2);
          t1 = t2;
        } else
          t1 = false;
        t1 = !t1;
      } else
        t1 = false;
      if (t1)
        _this._getFunctionReferences.$indexSet(0, node, declaration);
      else if (namespace == null) {
        t1 = _this.___ReferenceVisitor__scope_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        _this._unresolvedReferences.$indexSet(0, node, t1);
      }
    },
    _registerLibraryUrl$1(declaration) {
      var libraryUrl = this._libraryUrl;
      if (libraryUrl == null)
        return;
      J.add$1$ax(this._libraries.putIfAbsent$2(declaration, new A._ReferenceVisitor__registerLibraryUrl_closure()), libraryUrl);
    }
  };
  A._ReferenceVisitor_visitUseRule_closure.prototype = {
    call$2(declaration, source) {
      var t1;
      if (source.get$url(source).$eq(0, this.canonicalUrl))
        t1 = source instanceof A.CurrentSource || source instanceof A.ForwardSource;
      else
        t1 = false;
      if (t1) {
        t1 = this.$this.___ReferenceVisitor__declarationSources_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        t1.$indexSet(0, declaration, this.useSource);
      }
    },
    $signature: 177
  };
  A._ReferenceVisitor__registerLibraryUrl_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.Uri);
    },
    $signature: 178
  };
  A.__ReferenceVisitor_Object_RecursiveStatementVisitor.prototype = {};
  A.__ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor.prototype = {
    visitAtRootRule$1(node) {
      A.NullableExtension_andThen(node.query, this.get$visitInterpolation());
      this.super$RecursiveStatementVisitor$visitAtRootRule(node);
    },
    visitAtRule$1(node) {
      this.visitInterpolation$1(node.name);
      A.NullableExtension_andThen(node.value, this.get$visitInterpolation());
      this.super$RecursiveStatementVisitor$visitAtRule(node);
    },
    visitDeclaration$1(node) {
      this.visitInterpolation$1(node.name);
      A.NullableExtension_andThen(node.value, this.get$visitExpression());
      this.super$RecursiveStatementVisitor$visitDeclaration(node);
    },
    visitEachRule$1(node) {
      node.list.accept$1(this);
      this.super$RecursiveStatementVisitor$visitEachRule(node);
    },
    visitForRule$1(node) {
      node.from.accept$1(this);
      node.to.accept$1(this);
      this.super$RecursiveStatementVisitor$visitForRule(node);
    },
    visitIncludeRule$1(node) {
      this.visitArgumentInvocation$1(node.$arguments);
      this.super$RecursiveStatementVisitor$visitIncludeRule(node);
    },
    visitMediaRule$1(node) {
      this.visitInterpolation$1(node.query);
      this.super$RecursiveStatementVisitor$visitMediaRule(node);
    },
    visitStyleRule$1(node) {
      this.visitInterpolation$1(node.selector);
      this.super$RecursiveStatementVisitor$visitStyleRule(node);
    },
    visitSupportsRule$1(node) {
      this.visitSupportsCondition$1(node.condition);
      this.super$RecursiveStatementVisitor$visitSupportsRule(node);
    },
    visitWhileRule$1(node) {
      node.condition.accept$1(this);
      this.super$RecursiveStatementVisitor$visitWhileRule(node);
    },
    visitCallableDeclaration$1(node) {
      var t1, t2, t3, _i, $self;
      for (t1 = node.$arguments.$arguments, t2 = t1.length, t3 = this.get$visitExpression(), _i = 0; _i < t2; ++_i) {
        $self = t1[_i].defaultValue;
        if ($self != null)
          t3.call$1($self);
      }
      this.super$RecursiveStatementVisitor$visitCallableDeclaration(node);
    }
  };
  A.Scope.prototype = {
    get$global() {
      var t1 = this.parent;
      t1 = t1 == null ? null : t1.get$global();
      return t1 == null ? this : t1;
    },
    isDescendentOf$1(ancestor) {
      var t1;
      if (this !== ancestor) {
        t1 = this.parent;
        t1 = t1 == null ? null : t1.isDescendentOf$1(ancestor);
        t1 = t1 === true;
      } else
        t1 = true;
      return t1;
    },
    findVariable$1($name) {
      var t1 = this.variables.$index(0, $name);
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1 == null ? null : t1.findVariable$1($name);
      }
      return t1;
    },
    findMixin$1($name) {
      var t1 = this.mixins.$index(0, $name);
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1 == null ? null : t1.findMixin$1($name);
      }
      return t1;
    },
    findFunction$1($name) {
      var t1 = this.functions.$index(0, $name);
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1 == null ? null : t1.findFunction$1($name);
      }
      return t1;
    }
  };
  A.UnreferencableMembers.prototype = {
    check$2(declaration, reference) {
      var t1,
        type = this._unreferencable_members$_unreferencable.$index(0, declaration);
      if (type != null)
        throw A.wrapException(type.toException$2(reference, declaration.sourceUrl));
      t1 = this.parent;
      if (t1 != null)
        t1.check$2(declaration, reference);
    }
  };
  A.UnreferencableType.prototype = {
    toException$2(reference, source) {
      var type, url;
      if (reference instanceof A.IncludeRule)
        type = "mixin";
      else
        type = reference instanceof A.FunctionExpression ? "function" : "variable";
      url = $.$get$context().prettyUri$1(source);
      switch (this) {
        case B.C_UnreferencableType:
          return new A.MigrationSourceSpanException("This stylesheet was loaded by a nested import in " + url + ". The module system only supports loading nested CSS using the load-css() mixin, which doesn't allow access to " + type + "s from the outer stylesheet.", reference.get$span());
        case B.C_UnreferencableType0:
          return new A.MigrationSourceSpanException("This " + type + " was loaded from a nested import of " + url + ". The module system only supports loading nested CSS using the load-css() mixin, which doesn't load " + type + "s.", reference.get$span());
        default:
          throw A.wrapException(A.StateError$("Invalid UnreferencableType"));
      }
    }
  };
  A.NamespaceMigrator.prototype = {
    migrateFile$3(importCache, stylesheet, importer) {
      var _this = this,
        t1 = type$.String,
        t2 = type$.Uri,
        t3 = A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.FileSpan),
        result = new A._NamespaceMigrationVisitor(A.Renamer_Renamer(J.join$1$ax(_this._argResults.$index(0, "rename"), "\n"), A.LinkedHashMap_LinkedHashMap$_literal(["", new A.NamespaceMigrator_migrateFile_closure(), "url", new A.NamespaceMigrator_migrateFile_closure0()], t1, type$.String_Function_UseRule), "--rename", type$.UseRule), A._asBool(_this._argResults.$index(0, "force")), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1), A._asBool(_this._globalResults.$index(0, "migrate-deps")), importCache, t3).run$2(stylesheet, importer);
      _this.missingDependencies.addAll$1(0, new A.UnmodifiableMapView(t3, type$.UnmodifiableMapView_Uri_FileSpan));
      return result;
    },
    get$name() {
      return "namespace";
    },
    get$description() {
      return "Change namespaces for `@use` rules.";
    },
    get$argParser() {
      return this.argParser;
    }
  };
  A.NamespaceMigrator_migrateFile_closure.prototype = {
    call$1(rule) {
      var t1 = rule.namespace;
      t1.toString;
      return t1;
    },
    $signature: 69
  };
  A.NamespaceMigrator_migrateFile_closure0.prototype = {
    call$1(rule) {
      return rule.url.toString$0(0);
    },
    $signature: 69
  };
  A._NamespaceMigrationVisitor.prototype = {
    get$_spansByNamespace() {
      return this.assertInStylesheet$2(this.__spansByNamespace, "_spansByNamespace");
    },
    visitStylesheet$1(node) {
      var _this = this,
        oldSpansByNamespace = _this.__spansByNamespace,
        oldUsedNamespaces = _this.__usedNamespaces,
        t1 = type$.String;
      _this.__spansByNamespace = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_FileSpan);
      _this.__usedNamespaces = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this.super$MigrationVisitor$visitStylesheet(node);
      _this.__spansByNamespace = oldSpansByNamespace;
      _this.__usedNamespaces = oldUsedNamespaces;
    },
    beforePatch$1(node) {
      var t2, t3, t4, t5, t6, namespace, t7, newNamespace, rules, suffix, forcedNamespace, _this = this,
        t1 = type$.String,
        newNamespaces = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_UseRule);
      for (t2 = B.JSArray_methods.get$iterator(node.children), t3 = new A.WhereTypeIterator(t2, type$.WhereTypeIterator_UseRule), t4 = _this.renamer, t5 = type$.UseRule; t3.moveNext$0();) {
        t6 = t5._as(t2.get$current());
        namespace = t6.namespace;
        if (namespace == null)
          continue;
        t7 = t4.rename$1(0, t6);
        if (t7 == null)
          t7 = namespace;
        J.add$1$ax(newNamespaces.putIfAbsent$2(t7, new A._NamespaceMigrationVisitor_beforePatch_closure()), t6);
      }
      for (t2 = newNamespaces.get$entries(newNamespaces), t2 = new A.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f), t3 = !_this.forceRename, t4 = A._instanceType(t2)._rest[1]; t2.moveNext$0();) {
        t5 = t2.__internal$_current;
        if (t5 == null)
          t5 = t4._as(t5);
        newNamespace = t5.get$key();
        rules = t5.get$value(t5);
        if (rules.get$length(rules) === 1) {
          _this._patchNamespace$2(rules.get$first(rules), newNamespace);
          continue;
        }
        if (t3) {
          t2 = rules.get$length(rules);
          t3 = rules.get$first(rules).span;
          t4 = type$.SourceSpan;
          t5 = A.LinkedHashMap_LinkedHashMap$_empty(t4, t1);
          for (t6 = rules.skip$1(0, 1), t6 = t6.get$iterator(t6); t6.moveNext$0();)
            t5.$indexSet(0, t6.get$current().span, "");
          throw A.wrapException(new A.MultiSourceSpanException("", A.ConstantMap_ConstantMap$from(t5, t4, t1), "Rename failed. " + t2 + ' rules would use namespace "' + newNamespace + '".\nRun with --force to rename with numerical suffixes.', t3));
        }
        for (t5 = rules.get$iterator(rules), suffix = 2; t5.moveNext$0();) {
          t6 = t5.get$current();
          for (forcedNamespace = newNamespace; _this.assertInStylesheet$2(_this.__usedNamespaces, "_usedNamespaces").contains$1(0, forcedNamespace);) {
            forcedNamespace = newNamespace + suffix;
            ++suffix;
          }
          _this._patchNamespace$2(t6, forcedNamespace);
        }
      }
    },
    _patchNamespace$2(rule, newNamespace) {
      var t2, t3, t4, t5, asClause, _this = this,
        t1 = rule.namespace;
      t1.toString;
      _this.assertInStylesheet$2(_this.__usedNamespaces, "_usedNamespaces").add$1(0, newNamespace);
      if (t1 === newNamespace)
        return;
      t2 = rule.span;
      t3 = t2._file$_start;
      t4 = t2._end;
      t5 = t2.file._decodedChars;
      asClause = A.RegExp_RegExp("\\s*as\\s+(" + t1 + ")", true).firstMatch$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t5, t3, t4), 0, null));
      if (asClause == null) {
        t3 = A.RegExp_RegExp("@use\\s(\"|').*?\\1", true).firstMatch$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t5, t3, t4), 0, null));
        t3 = A.FileSpanExtension_subspan(t2, 0, t3.get$end(t3));
        t3 = A.FileLocation$_(t3.file, t3._end);
        t2 = t3.offset;
        _this.addPatch$1(new A.Patch(A._FileSpan$(t3.file, t2, t2), " as " + newNamespace));
      } else if (A.namespaceForPath(rule.url.toString$0(0)) === newNamespace)
        _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t2, asClause._match.index, asClause.get$end(asClause)), ""));
      else
        _this.addPatch$1(new A.Patch(A.FileSpanExtension_subspan(t2, asClause.get$end(asClause) - t1.length, asClause.get$end(asClause)), newNamespace));
      t1 = _this.get$_spansByNamespace().$index(0, t1);
      t1 = J.get$iterator$ax(t1 == null ? A.LinkedHashSet_LinkedHashSet$_empty(type$.FileSpan) : t1);
      for (; t1.moveNext$0();) {
        t2 = t1.get$current();
        t3 = _this.assertInStylesheet$2(_this.__patches, "patches");
        t3.push(new A.Patch(t2, newNamespace));
      }
    },
    _addNamespaceSpan$2(namespace, span) {
      if (namespace != null)
        J.add$1$ax(this.get$_spansByNamespace().putIfAbsent$2(namespace, new A._NamespaceMigrationVisitor__addNamespaceSpan_closure()), A.FileSpanExtension_subspan(span, 0, namespace.length));
    },
    visitFunctionExpression$1(node) {
      var t1, moduleArg, namespace, span;
      this._addNamespaceSpan$2(node.namespace, node.span);
      if (A.stringReplaceAllUnchecked(node.originalName, "_", "-") === "get-function") {
        t1 = node.$arguments;
        moduleArg = t1.named.$index(0, "module");
        t1 = t1.positional;
        if (t1.length === 3)
          moduleArg = moduleArg == null ? t1[2] : moduleArg;
        if (moduleArg instanceof A.StringExpression) {
          t1 = moduleArg.text;
          namespace = t1.get$asPlain();
          if (namespace != null) {
            span = t1.span;
            this._addNamespaceSpan$2(namespace, moduleArg.hasQuotes ? A.FileSpanExtension_subspan(span, 1, span._end - span._file$_start - 1) : span);
          }
        }
      }
      this.super$RecursiveAstVisitor$visitFunctionExpression(node);
    },
    visitIncludeRule$1(node) {
      var t1, t2, t3, t4, t5,
        namespace = node.namespace;
      if (namespace != null) {
        t1 = node.span;
        t2 = t1._file$_start;
        t3 = t1._end;
        t4 = t1.file._decodedChars;
        t5 = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t4, t2, t3), 0, null);
        this._addNamespaceSpan$2(namespace, A.FileSpanExtension_subspan(t1, B.JSString_methods.indexOf$2(t5, namespace, A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t4, t2, t3), 0, null)[0] === "+" ? 1 : 8), null));
      }
      this.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitIncludeRule(node);
    },
    visitVariableDeclaration$1(node) {
      this._addNamespaceSpan$2(node.namespace, node.span);
      this.super$RecursiveAstVisitor$visitVariableDeclaration(node);
    },
    visitVariableExpression$1(node) {
      this._addNamespaceSpan$2(node.namespace, node.span);
      this.super$RecursiveAstVisitor$visitVariableExpression(node);
    }
  };
  A._NamespaceMigrationVisitor_beforePatch_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.UseRule);
    },
    $signature: 180
  };
  A._NamespaceMigrationVisitor__addNamespaceSpan_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.FileSpan);
    },
    $signature: 67
  };
  A.StrictUnaryMigrator.prototype = {
    migrateFile$3(importCache, stylesheet, importer) {
      var t1 = type$.Uri,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.FileSpan),
        result = new A._UnaryMigrationVisitor(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.String), A._asBool(this._globalResults.$index(0, "migrate-deps")), importCache, t2).run$2(stylesheet, importer);
      this.missingDependencies.addAll$1(0, new A.UnmodifiableMapView(t2, type$.UnmodifiableMapView_Uri_FileSpan));
      return result;
    },
    get$name() {
      return "strict-unary";
    },
    get$description() {
      return "Migrates deprecated `$a -$b` syntax (and similar) to unambiguous `$a - $b`";
    }
  };
  A._UnaryMigrationVisitor.prototype = {
    visitBinaryOperationExpression$1(node) {
      var t2, t3, t4, t5, betweenOperands,
        t1 = node.operator;
      if (t1 === B.BinaryOperator_qbf || t1 === B.BinaryOperator_KlB) {
        t2 = node.get$span();
        t3 = node.left.get$span();
        t3 = A.FileLocation$_(t3.file, t3._end);
        t4 = node.right;
        t5 = t4.get$span();
        t5 = t2.file.span$2(t3.offset, A.FileLocation$_(t5.file, t5._file$_start).offset);
        betweenOperands = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t5.file._decodedChars, t5._file$_start, t5._end), 0, null);
        if (B.JSString_methods.startsWith$1(betweenOperands, A.RegExp_RegExp("\\s", true)) && B.JSString_methods.endsWith$1(betweenOperands, t1.operator)) {
          t1 = t4.get$span();
          t1 = A.FileLocation$_(t1.file, t1._file$_start);
          t2 = t1.offset;
          this.addPatch$1(new A.Patch(A._FileSpan$(t1.file, t2, t2), " "));
        }
      }
      this.super$RecursiveAstVisitor$visitBinaryOperationExpression(node);
    }
  };
  A.Patch.prototype = {
    compareTo$1(_, other) {
      return this.selection.compareTo$1(0, other.selection);
    },
    $isComparable: 1
  };
  A.Renamer.prototype = {
    rename$1(_, input) {
      var t1, t2, _i, result;
      for (t1 = this._statements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        result = t1[_i].rename$1(0, input);
        if (result != null)
          return result;
      }
      return null;
    }
  };
  A._Statement.prototype = {
    rename$1(_, input) {
      var t1,
        match = this.matcher.firstMatch$1(this.key.call$1(input));
      if (match == null)
        return null;
      t1 = this.output;
      return new A.MappedListIterable(t1, new A._Statement_rename_closure(match), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String?>")).join$0(0);
    }
  };
  A._Statement_rename_closure.prototype = {
    call$1(item) {
      return item.build$1(this.match);
    },
    $signature: 181
  };
  A._OutputComponent.prototype = {};
  A._Literal.prototype = {
    build$1(match) {
      return this.text;
    }
  };
  A._Backreference.prototype = {
    build$1(match) {
      return match._match[this.number];
    }
  };
  A.MigratorRunner.prototype = {
    execute$1(args) {
      return this.execute$body$MigratorRunner(args);
    },
    execute$body$MigratorRunner(args) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, e, migrated, e0, e1, e2, t2, exception, t1, $async$exception, $async$temp1;
      var $async$execute$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.argResults = null;
              try {
                t2 = t1.argResults = $async$self.parse$1(0, args);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (t1 instanceof A.UsageException) {
                  e = t1;
                  J.write$1$x(J.get$stderr$x(self.process), A.S(e) + "\n");
                  J.set$exitCode$x(self.process, 64);
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw exception;
              }
              $async$goto = A._asBool(t2.$index(0, "version")) ? 3 : 4;
              break;
            case 3:
              // then
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(A._loadVersion(), $async$execute$1);
            case 5:
              // returning from await.
              $async$temp1.print($async$result);
              J.set$exitCode$x(self.process, 0);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              if (t2.wasParsed$1("unicode"))
                $._glyphs = !A._asBool(t2.$index(0, "unicode")) ? B.C_AsciiGlyphSet : B.C_UnicodeGlyphSet;
              migrated = null;
              $async$handler = 7;
              $async$goto = 10;
              return A._asyncAwait($async$self.runCommand$1(t2), $async$execute$1);
            case 10:
              // returning from await.
              migrated = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.UsageException) {
                e0 = t2;
                J.write$1$x(J.get$stderr$x(self.process), A.S(e0) + "\n");
                J.set$exitCode$x(self.process, 64);
                // goto return
                $async$goto = 1;
                break;
              } else if (t2 instanceof A.SourceSpanException) {
                e1 = t2;
                t1 = t1.argResults;
                t1 = t1.wasParsed$1("color") ? A._asBool(t1.$index(0, "color")) : self.process.stdout.isTTY;
                t1 = J.toString$1$color$(e1, t1);
                J.write$1$x(J.get$stderr$x(self.process), t1 + "\n");
                J.write$1$x(J.get$stderr$x(self.process), "Migration failed!" + "\n");
                J.set$exitCode$x(self.process, 1);
                // goto return
                $async$goto = 1;
                break;
              } else if (type$.MigrationException._is(t2)) {
                e2 = t2;
                J.write$1$x(J.get$stderr$x(self.process), A.S(e2) + "\n");
                J.write$1$x(J.get$stderr$x(self.process), "Migration failed!" + "\n");
                J.set$exitCode$x(self.process, 1);
                // goto return
                $async$goto = 1;
                break;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 9:
              // after finally
              if (migrated == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (J.get$isEmpty$asx(migrated)) {
                A.print("Nothing to migrate!");
                // goto return
                $async$goto = 1;
                break;
              }
              if (t2.$index(0, "dry-run")) {
                A.print("Dry run. Logging migrated files instead of overwriting...\n");
                J.forEach$1$ax(migrated, new A.MigratorRunner_execute_closure(t1));
              } else
                J.forEach$1$ax(migrated, new A.MigratorRunner_execute_closure0(t1));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$execute$1, $async$completer);
    }
  };
  A.MigratorRunner_execute_closure.prototype = {
    call$2(url, contents) {
      if (this._box_0.argResults.$index(0, "verbose")) {
        A.print("<===> " + $.$get$context().prettyUri$1(url));
        A.print(contents);
      } else
        A.print($.$get$context().prettyUri$1(url));
    },
    $signature: 37
  };
  A.MigratorRunner_execute_closure0.prototype = {
    call$2(url, contents) {
      var t1, t2, t3;
      if (this._box_0.argResults.$index(0, "verbose"))
        A.print("Migrating " + $.$get$context().prettyUri$1(url));
      t1 = url.toFilePath$0();
      t2 = A.fs();
      t3 = $._path;
      J.writeFileSync$2$x(t2, J.resolve$1$x(t3 == null ? $._path = self.path : t3, t1), contents);
    },
    $signature: 37
  };
  A.BidirectionalMap.prototype = {
    $index(_, key) {
      return this._valueForKey.$index(0, key);
    },
    $indexSet(_, key, value) {
      var _this = this;
      _this.remove$1(0, key);
      _this._valueForKey.$indexSet(0, key, value);
      J.add$1$ax(_this._keysForValue.putIfAbsent$2(value, new A.BidirectionalMap_operator$indexSet_closure(_this)), key);
    },
    get$keys(_) {
      var t1 = this._valueForKey;
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = this._keysForValue;
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    remove$1(_, key) {
      var t2, t3,
        t1 = this._valueForKey;
      if (!t1.containsKey$1(key))
        return null;
      t1 = t1.remove$1(0, key);
      t1.toString;
      t2 = this._keysForValue;
      t3 = t2.$index(0, t1);
      t3.toString;
      t3.remove$1(0, key);
      if (t3.get$isEmpty(t3))
        t2.remove$1(0, t1);
      return t1;
    },
    keysForValue$1(value) {
      return this.keysForValue$body$BidirectionalMap(value, this.$ti._precomputed1);
    },
    keysForValue$body$BidirectionalMap($async$value, $async$type) {
      var $async$self = this;
      return A._makeSyncStarIterable(function() {
        var value = $async$value;
        var $async$goto = 0, $async$handler = 1, $async$currentError, keys;
        return function $async$keysForValue$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                keys = $async$self._keysForValue.$index(0, value);
                $async$goto = keys != null ? 2 : 3;
                break;
              case 2:
                // then
                $async$goto = 4;
                return A._IterationMarker_yieldStar(keys);
              case 4:
                // after yield
              case 3:
                // join
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    }
  };
  A.BidirectionalMap_operator$indexSet_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(this.$this.$ti._precomputed1);
    },
    $signature() {
      return this.$this.$ti._eval$1("Set<1>()");
    }
  };
  A.NodeModulesImporter.prototype = {
    NodeModulesImporter$1(baseDirectory) {
      var t1, loadPath, $parent,
        directory = A.current();
      for (t1 = this._fsImporters; true; directory = $parent) {
        loadPath = A.join(directory, "node_modules", null);
        if (A.FileStat_statSync(loadPath).type === B.FileSystemEntityType_1)
          t1.push(new A.FilesystemImporter(A.absolute(loadPath)));
        $parent = $.$get$context().dirname$1(0, directory);
        if (directory === $parent)
          break;
      }
    },
    canonicalize$1(url) {
      var t1, t2, _i, result;
      if (url.get$scheme() === "file")
        return B.JSArray_methods.get$first(this._fsImporters).canonicalize$1(url);
      if (!B.JSString_methods.startsWith$1(url.get$path(url), "~"))
        return null;
      if (B.JSString_methods.startsWith$1(url.get$path(url), "~/"))
        return null;
      url = url.replace$1$path(B.JSString_methods.substring$1(url.get$path(url), 1));
      for (t1 = this._fsImporters, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        result = t1[_i].canonicalize$1(url);
        if (result != null)
          return result;
      }
      return null;
    },
    load$1(_, url) {
      return B.JSArray_methods.get$first(this._fsImporters).load$1(0, url);
    }
  };
  A.UnmodifiableBidirectionalMapView.prototype = {};
  A.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j >= t2 || t1[j] !== 10)
            c = 10;
        }
        if (c === 10)
          t3.push(i + 1);
      }
    },
    span$2(start, end) {
      return A._FileSpan$(this, start, end);
    },
    getLine$1(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + string$.x20must_ + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < B.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= B.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1(offset) {
      var t2, t3,
        t1 = this._cachedLine;
      if (t1 == null)
        return false;
      t2 = this._lineStarts;
      if (offset < t2[t1])
        return false;
      t3 = t2.length;
      if (t1 >= t3 - 1 || offset < t2[t1 + 1])
        return true;
      if (t1 >= t3 - 2 || offset < t2[t1 + 2]) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min, half,
        t1 = this._lineStarts,
        max = t1.length - 1;
      for (min = 0; min < max;) {
        half = min + B.JSInt_methods._tdivFast$1(max - min, 2);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line, lineStart, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      lineStart = _this._lineStarts[line];
      if (lineStart > offset)
        throw A.wrapException(A.RangeError$("Line " + line + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1(line) {
      var t1, t2, result, t3;
      if (line < 0)
        throw A.wrapException(A.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw A.wrapException(A.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  A.FileLocation.prototype = {
    get$sourceUrl(_) {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    FileLocation$_$2(file, offset) {
      var t2,
        t1 = this.offset;
      if (t1 < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + t1 + "."));
      else {
        t2 = this.file;
        if (t1 > t2._decodedChars.length)
          throw A.wrapException(A.RangeError$("Offset " + t1 + string$.x20must_ + t2.get$length(t2) + "."));
      }
    },
    pointSpan$0() {
      var t1 = this.offset;
      return A._FileSpan$(this.file, t1, t1);
    },
    get$offset() {
      return this.offset;
    }
  };
  A._FileSpan.prototype = {
    get$sourceUrl(_) {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._file$_start;
    },
    get$start(_) {
      return A.FileLocation$_(this.file, this._file$_start);
    },
    get$end(_) {
      return A.FileLocation$_(this.file, this._end);
    },
    get$text() {
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
    },
    get$context(_) {
      var _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0)
          return endLine === t1._lineStarts.length - 1 ? "" : A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(endLine), t1.getOffset$1(endLine + 1)), 0, null);
      } else
        endOffset = endLine === t1._lineStarts.length - 1 ? t1._decodedChars.length : t1.getOffset$1(endLine + 1);
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    _FileSpan$3(file, _start, _end) {
      var t3,
        t1 = this._end,
        t2 = this._file$_start;
      if (t1 < t2)
        throw A.wrapException(A.ArgumentError$("End " + t1 + " must come after start " + t2 + ".", null));
      else {
        t3 = this.file;
        if (t1 > t3._decodedChars.length)
          throw A.wrapException(A.RangeError$("End " + t1 + string$.x20must_ + t3.get$length(t3) + "."));
        else if (t2 < 0)
          throw A.wrapException(A.RangeError$("Start may not be negative, was " + t2 + "."));
      }
    },
    compareTo$1(_, other) {
      var result;
      if (!(other instanceof A._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = B.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? B.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!type$.FileSpan._is(other))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._end === other._end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode(_) {
      return A.Object_hash(this._file$_start, this._end, this.file.url, B.C_SentinelValue);
    },
    expand$1(_, other) {
      var start, _this = this,
        t1 = _this.file;
      if (!J.$eq$(t1.url, other.file.url))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(_this.get$sourceUrl(_this)) + '" and  "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      start = Math.min(_this._file$_start, other._file$_start);
      return A._FileSpan$(t1, start, Math.max(_this._end, other._end));
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  A.Highlighter.prototype = {
    highlight$0() {
      var t2, highlightsByColumn, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, index, primaryIdx, primary, _i, highlight, _this = this, _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(B.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      highlightsByColumn = A.List_List$filled(t2, _null, false, type$.nullable__Highlight);
      for (t3 = _this._highlighter$_buffer, t2 = t2 !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!J.$eq$(t5, t6)) {
            _this._writeSidebar$1$end($._glyphs.get$upEnd());
            t3._contents += "\n";
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t3._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = new A.ReversedListIterable(t5, A._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>")), t6 = new A.ListIterator(t6, t6.get$length(t6)), t7 = A._instanceType(t6)._precomputed1, t8 = line.number, t9 = line.text; t6.moveNext$0();) {
          t10 = t6.__internal$_current;
          if (t10 == null)
            t10 = t7._as(t10);
          t11 = t10.span;
          if (t11.get$start(t11).get$line() !== t11.get$end(t11).get$line() && t11.get$start(t11).get$line() === t8 && _this._isOnlyWhitespace$1(B.JSString_methods.substring$2(t9, 0, t11.get$start(t11).get$column()))) {
            index = B.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              A.throwExpression(A.ArgumentError$(A.S(highlightsByColumn) + " contains no null elements.", _null));
            highlightsByColumn[index] = t10;
          }
        }
        _this._writeSidebar$1$line(t8);
        t3._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t2)
          t3._contents += " ";
        primaryIdx = B.JSArray_methods.indexWhere$1(t5, new A.Highlighter_highlight_closure());
        primary = primaryIdx === -1 ? _null : t5[primaryIdx];
        t6 = primary != null;
        if (t6) {
          t7 = primary.span;
          t10 = t7.get$start(t7).get$line() === t8 ? t7.get$start(t7).get$column() : 0;
          _this._writeHighlightedText$4$color(t9, t10, t7.get$end(t7).get$line() === t8 ? t7.get$end(t7).get$column() : t9.length, t4);
        } else
          _this._writeText$1(t9);
        t3._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t6 = t5.length, _i = 0; _i < t5.length; t5.length === t6 || (0, A.throwConcurrentModificationError)(t5), ++_i) {
          highlight = t5[_i];
          if (highlight.isPrimary)
            continue;
          _this._writeIndicator$3(line, highlight, highlightsByColumn);
        }
      }
      _this._writeSidebar$1$end($._glyphs.get$upEnd());
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var _this = this,
        t1 = !_this._multipleFiles || !type$.Uri._is(url),
        t2 = $._glyphs;
      if (t1)
        _this._writeSidebar$1$end(t2.get$downEnd());
      else {
        _this._writeSidebar$1$end(t2.get$topLeftCorner());
        _this._colorize$2$color(new A.Highlighter__writeFileStart_closure(_this), "\x1b[34m");
        _this._highlighter$_buffer._contents += " " + $.$get$context().prettyUri$1(url);
      }
      _this._highlighter$_buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, t5, foundCurrent, _i, highlight, t6, startLine, t7, endLine, _this = this, _box_0 = {};
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = null;
      else
        currentColor = current.isPrimary ? _this._primaryColor : _this._secondaryColor;
      for (t2 = highlightsByColumn.length, t3 = _this._secondaryColor, t1 = !t1, t4 = _this._primaryColor, t5 = _this._highlighter$_buffer, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t6 = highlight == null;
        if (t6)
          startLine = null;
        else {
          t7 = highlight.span;
          startLine = t7.get$start(t7).get$line();
        }
        if (t6)
          endLine = null;
        else {
          t7 = highlight.span;
          endLine = t7.get$end(t7).get$line();
        }
        if (t1 && highlight === current) {
          _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor);
        else if (t6)
          if (_box_0.openedOnThisLine)
            _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor);
          else
            t5._contents += " ";
        else {
          t6 = highlight.isPrimary ? t4 : t3;
          _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t6);
        }
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(B.JSString_methods.substring$2(text, 0, startColumn));
      _this._colorize$2$color(new A.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color);
      _this._writeText$1(B.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var t2, coversWholeLine, _this = this,
        color = highlight.isPrimary ? _this._primaryColor : _this._secondaryColor,
        t1 = highlight.span;
      if (t1.get$start(t1).get$line() === t1.get$end(t1).get$line()) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$2$color(new A.Highlighter__writeIndicator_closure(_this, line, highlight), color));
      } else {
        t2 = line.number;
        if (t1.get$start(t1).get$line() === t2) {
          if (B.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          A.replaceFirstNull(highlightsByColumn, highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$2$color(new A.Highlighter__writeIndicator_closure0(_this, line, highlight), color);
          t1._contents += "\n";
        } else if (t1.get$end(t1).get$line() === t2) {
          coversWholeLine = t1.get$end(t1).get$column() === line.text.length;
          if (coversWholeLine && highlight.label == null) {
            A.replaceWithNull(highlightsByColumn, highlight);
            return;
          }
          _this._writeSidebar$0();
          _this._highlighter$_buffer._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$2$color(new A.Highlighter__writeIndicator_closure1(_this, coversWholeLine, line, highlight), color));
          A.replaceWithNull(highlightsByColumn, highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t2,
        t1 = beginning ? 0 : 1,
        tabs = this._countTabs$1(B.JSString_methods.substring$2(line.text, 0, column + t1));
      t1 = this._highlighter$_buffer;
      t2 = t1._contents += B.JSString_methods.$mul($._glyphs.get$horizontalLine(), 1 + column + tabs * 3);
      t1._contents = t2 + "^";
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeLabel$3(highlight, highlightsByColumn, underlineLength) {
      var lines, color, t1, t2, t3, t4, t5, t6, _i, columnHighlight, _this = this,
        label = highlight.label;
      if (label == null) {
        _this._highlighter$_buffer._contents += "\n";
        return;
      }
      lines = A._setArrayType(label.split("\n"), type$.JSArray_String);
      color = highlight.isPrimary ? _this._primaryColor : _this._secondaryColor;
      _this._colorize$2$color(new A.Highlighter__writeLabel_closure(_this, lines), color);
      t1 = _this._highlighter$_buffer;
      t1._contents += "\n";
      for (t2 = A.SubListIterable$(lines, 1, null, type$.String), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = highlightsByColumn.length, t4 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t5 = t2.__internal$_current;
        if (t5 == null)
          t5 = t4._as(t5);
        _this._writeSidebar$0();
        t6 = t1._contents += " ";
        for (_i = 0; _i < t3; ++_i) {
          columnHighlight = highlightsByColumn[_i];
          if (columnHighlight == null || columnHighlight === highlight) {
            t6 += " ";
            t1._contents = t6;
          } else
            t6 = t1._contents += $._glyphs.get$verticalLine();
        }
        t1._contents += B.JSString_methods.$mul(" ", underlineLength);
        _this._colorize$2$color(new A.Highlighter__writeLabel_closure0(_this, t5), color);
        t1._contents += "\n";
      }
    },
    _writeText$1(text) {
      var t1, t2, t3, t4;
      for (t1 = new A.CodeUnits(text), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = this._highlighter$_buffer, t3 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        if (t4 === 9)
          t2._contents += B.JSString_methods.$mul(" ", 4);
        else
          t2._contents += A.Primitives_stringFromCharCode(t4);
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = B.JSInt_methods.toString$0(line + 1);
      this._colorize$2$color(new A.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m");
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(text), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1, count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === 9)
          ++count;
      }
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2, t3;
      for (t1 = new A.CodeUnits(text), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3 !== 32 && t3 !== 9)
          return false;
      }
      return true;
    },
    _colorize$1$2$color(callback, color) {
      var result,
        t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._highlighter$_buffer._contents += color;
      result = callback.call$0();
      if (t1 && color != null)
        this._highlighter$_buffer._contents += "\x1b[0m";
      return result;
    },
    _colorize$2$color(callback, color) {
      return this._colorize$1$2$color(callback, color, type$.dynamic);
    }
  };
  A.Highlighter_closure.prototype = {
    call$0() {
      var t1 = this.color;
      if (t1 === true)
        return "\x1b[31m";
      if (t1 === false)
        return null;
      return A._asStringQ(t1);
    },
    $signature: 19
  };
  A.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = line.highlights;
      t1 = new A.WhereIterable(t1, new A.Highlighter$___closure(), A._arrayInstanceType(t1)._eval$1("WhereIterable<1>"));
      return t1.get$length(t1);
    },
    $signature: 182
  };
  A.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = highlight.span;
      return t1.get$start(t1).get$line() !== t1.get$end(t1).get$line();
    },
    $signature: 40
  };
  A.Highlighter$__closure0.prototype = {
    call$1(line) {
      return line.url;
    },
    $signature: 184
  };
  A.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      var t1 = highlight.span;
      t1 = t1.get$sourceUrl(t1);
      return t1 == null ? new A.Object() : t1;
    },
    $signature: 185
  };
  A.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      return highlight1.span.compareTo$1(0, highlight2.span);
    },
    $signature: 186
  };
  A.Highlighter__collateLines_closure1.prototype = {
    call$1(entry) {
      var t1, t2, t3, t4, context, t5, linesBeforeSpan, lineNumber, _i, line, activeHighlights, highlightIndex, oldHighlightLength,
        url = entry.get$key(),
        highlightsForFile = entry.get$value(entry),
        lines = A._setArrayType([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current().span;
        context = t4.get$context(t4);
        t5 = A.findLineStart(context, t4.get$text(), t4.get$start(t4).get$column());
        t5.toString;
        t5 = B.JSString_methods.allMatches$1("\n", B.JSString_methods.substring$2(context, 0, t5));
        linesBeforeSpan = t5.get$length(t5);
        lineNumber = t4.get$start(t4).get$line() - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > B.JSArray_methods.get$last(lines).number)
            lines.push(new A._Line(line, lineNumber, url, A._setArrayType([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = A._setArrayType([], t3);
      for (t2 = lines.length, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        if (!!activeHighlights.fixed$length)
          A.throwExpression(A.UnsupportedError$("removeWhere"));
        B.JSArray_methods._removeWhere$2(activeHighlights, new A.Highlighter__collateLines__closure(line), true);
        oldHighlightLength = activeHighlights.length;
        for (t3 = t1.skip$1(highlightsForFile, highlightIndex), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
          t4 = t3.get$current();
          t5 = t4.span;
          if (t5.get$start(t5).get$line() > line.number)
            break;
          activeHighlights.push(t4);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        B.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 187
  };
  A.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      var t1 = highlight.span;
      return t1.get$end(t1).get$line() < this.line.number;
    },
    $signature: 40
  };
  A.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      return highlight.isPrimary;
    },
    $signature: 40
  };
  A.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += B.JSString_methods.$mul($._glyphs.get$horizontalLine(), 2) + ">";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = $._glyphs;
      t1 = this.startLine === this.line.number ? t1.get$topLeftCorner() : t1.get$bottomLeftCorner();
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = $._glyphs;
      t1 = this.highlight == null ? t1.get$horizontalLine() : t1.get$cross();
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += $._glyphs.get$horizontalLine();
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var _this = this,
        t1 = _this._box_0,
        t2 = t1.openedOnThisLine,
        t3 = $._glyphs,
        vertical = t2 ? t3.get$cross() : t3.get$verticalLine();
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$2$color(new A.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = _this.highlight.isPrimary ? t2._primaryColor : t2._secondaryColor;
        } else {
          if (_this.endLine === t3) {
            t3 = _this.highlight.span;
            t2 = t3.get$end(t3).get$column() === t2.text.length;
          } else
            t2 = false;
          t3 = _this.$this;
          if (t2) {
            t1 = _this.highlight.label == null ? $._glyphs.glyphOrAscii$2("\u2514", "\\") : vertical;
            t3._highlighter$_buffer._contents += t1;
          } else
            t3._colorize$2$color(new A.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor);
        }
      }
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      this.$this._highlighter$_buffer._contents += $._glyphs.glyphOrAscii$2(t1, "/");
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 10
  };
  A.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(B.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var startColumn, endColumn, tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents,
        t4 = this.highlight,
        t5 = t4.span;
      t4 = t4.isPrimary ? "^" : $._glyphs.get$horizontalLineBold();
      startColumn = t5.get$start(t5).get$column();
      endColumn = t5.get$end(t5).get$column();
      t5 = this.line.text;
      tabsBefore = t1._countTabs$1(B.JSString_methods.substring$2(t5, 0, startColumn));
      tabsInside = t1._countTabs$1(B.JSString_methods.substring$2(t5, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t2._contents += B.JSString_methods.$mul(" ", startColumn);
      t4 = t2._contents += B.JSString_methods.$mul(t4, Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
      return t4.length - t3.length;
    },
    $signature: 41
  };
  A.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      var t1 = this.highlight.span;
      return this.$this._writeArrow$2(this.line, t1.get$start(t1).get$column());
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var t4, _this = this,
        t1 = _this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents;
      if (_this.coversWholeLine)
        t2._contents += B.JSString_methods.$mul($._glyphs.get$horizontalLine(), 3);
      else {
        t4 = _this.highlight.span;
        t1._writeArrow$3$beginning(_this.line, Math.max(t4.get$end(t4).get$column() - 1, 0), false);
      }
      return t2._contents.length - t3.length;
    },
    $signature: 41
  };
  A.Highlighter__writeLabel_closure.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += " " + A.S(B.JSArray_methods.get$first(this.lines));
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeLabel_closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += " " + this.text;
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t2._contents += B.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t1 = this.end;
      t2._contents += t1 == null ? $._glyphs.get$verticalLine() : t1;
    },
    $signature: 10
  };
  A._Highlight.prototype = {
    toString$0(_) {
      var t1 = this.isPrimary ? "" + "primary " : "",
        t2 = this.span;
      t2 = t1 + ("" + t2.get$start(t2).get$line() + ":" + t2.get$start(t2).get$column() + "-" + t2.get$end(t2).get$line() + ":" + t2.get$end(t2).get$column());
      t1 = this.label;
      t1 = t1 != null ? t2 + (" (" + t1 + ")") : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._Highlight_closure.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = this.span;
      if (!(type$.SourceSpanWithContext._is(t1) && A.findLineStart(t1.get$context(t1), t1.get$text(), t1.get$start(t1).get$column()) != null)) {
        t2 = A.SourceLocation$(t1.get$start(t1).get$offset(), 0, 0, t1.get$sourceUrl(t1));
        t3 = t1.get$end(t1).get$offset();
        t4 = t1.get$sourceUrl(t1);
        t5 = A.countCodeUnits(t1.get$text(), 10);
        t1 = A.SourceSpanWithContext$(t2, A.SourceLocation$(t3, A._Highlight__lastLineLength(t1.get$text()), t5, t4), t1.get$text(), t1.get$text());
      }
      return A._Highlight__normalizeEndOfLine(A._Highlight__normalizeTrailingNewline(A._Highlight__normalizeNewlines(t1)));
    },
    $signature: 188
  };
  A._Line.prototype = {
    toString$0(_) {
      return "" + this.number + ': "' + this.text + '" (' + B.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  A.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.sourceUrl, other.get$sourceUrl(other)) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 = A.getRuntimeType(_this).toString$0(0),
        source = _this.sourceUrl;
      return "<" + t1 + ": " + _this.offset + " " + (A.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    get$sourceUrl(receiver) {
      return this.sourceUrl;
    },
    get$offset() {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    }
  };
  A.SourceLocationMixin.prototype = {
    distance$1(other) {
      var _this = this;
      if (!J.$eq$(_this.file.url, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(_this.get$sourceUrl(_this)) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return Math.abs(_this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var _this = this;
      if (!J.$eq$(_this.file.url, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(_this.get$sourceUrl(_this)) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return _this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.file.url, other.get$sourceUrl(other)) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = A.getRuntimeType(this).toString$0(0),
        t2 = this.offset,
        t3 = this.file,
        source = t3.url;
      return "<" + t1 + ": " + t2 + " " + (A.S(source == null ? "unknown source" : source) + ":" + (t3.getLine$1(t2) + 1) + ":" + (t3.getColumn$1(t2) + 1)) + ">";
    },
    $isComparable: 1,
    $isSourceLocation: 1
  };
  A.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(t1), t2.get$sourceUrl(t2)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t2.get$sourceUrl(t2)) + '" and  "' + A.S(t1.get$sourceUrl(t1)) + "\" don't match.", null));
      else if (t1.get$offset() < t2.get$offset())
        throw A.wrapException(A.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + ".", null));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw A.wrapException(A.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long.", null));
      }
    },
    get$start(receiver) {
      return this.start;
    },
    get$end(receiver) {
      return this.end;
    },
    get$text() {
      return this.text;
    }
  };
  A.SourceSpanException.prototype = {
    get$message(_) {
      return this._span_exception$_message;
    },
    get$span() {
      return this._span;
    },
    toString$1$color(_, color) {
      this.get$span();
      return "Error on " + this.get$span().message$2$color(0, this._span_exception$_message, color);
    },
    toString$0($receiver) {
      return this.toString$1$color($receiver, null);
    },
    $isException: 1
  };
  A.SourceSpanFormatException.prototype = {$isFormatException: 1,
    get$source() {
      return this.source;
    }
  };
  A.MultiSourceSpanException.prototype = {
    toString$1$color(_, color) {
      var _this = this,
        useColor = color === true && true,
        t1 = _this._span,
        t2 = t1.file,
        t3 = t1._file$_start,
        t4 = A.FileLocation$_(t2, t3);
      t4 = t4.file.getLine$1(t4.offset);
      t3 = A.FileLocation$_(t2, t3);
      t3 = "" + ("line " + (t4 + 1) + ", column " + (t3.file.getColumn$1(t3.offset) + 1));
      t2 = t2.url;
      t2 = t2 != null ? t3 + (" of " + $.$get$context().prettyUri$1(t2)) : t3;
      t1 = t2 + (": " + _this._span_exception$_message + "\n") + A.Highlighter$multiple(t1, _this.primaryLabel, _this.secondarySpans, useColor, null, null).highlight$0();
      return "Error on " + (t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    toString$0($receiver) {
      return this.toString$1$color($receiver, null);
    }
  };
  A.SourceSpanMixin.prototype = {
    get$sourceUrl(_) {
      var t1 = this.get$start(this);
      return t1.get$sourceUrl(t1);
    },
    get$length(_) {
      var _this = this;
      return _this.get$end(_this).get$offset() - _this.get$start(_this).get$offset();
    },
    compareTo$1(_, other) {
      var _this = this,
        result = _this.get$start(_this).compareTo$1(0, other.get$start(other));
      return result === 0 ? _this.get$end(_this).compareTo$1(0, other.get$end(other)) : result;
    },
    message$2$color(_, message, color) {
      var t2, highlight, _this = this,
        t1 = "" + ("line " + (_this.get$start(_this).get$line() + 1) + ", column " + (_this.get$start(_this).get$column() + 1));
      if (_this.get$sourceUrl(_this) != null) {
        t2 = _this.get$sourceUrl(_this);
        t2 = t1 + (" of " + $.$get$context().prettyUri$1(t2));
        t1 = t2;
      }
      t1 += ": " + message;
      highlight = _this.highlight$1$color(color);
      if (highlight.length !== 0)
        t1 = t1 + "\n" + highlight;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    message$1($receiver, message) {
      return this.message$2$color($receiver, message, null);
    },
    highlight$1$color(color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return A.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return type$.SourceSpan._is(other) && _this.get$start(_this).$eq(0, other.get$start(other)) && _this.get$end(_this).$eq(0, other.get$end(other));
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(_this.get$start(_this), _this.get$end(_this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "<" + A.getRuntimeType(_this).toString$0(0) + ": from " + _this.get$start(_this).toString$0(0) + " to " + _this.get$end(_this).toString$0(0) + ' "' + _this.get$text() + '">';
    },
    $isComparable: 1,
    $isSourceSpan: 1
  };
  A.SourceSpanWithContext.prototype = {
    get$context(_) {
      return this._span_with_context$_context;
    }
  };
  A.Frame.prototype = {
    get$library() {
      var t1 = this.uri;
      if (t1.get$scheme() === "data")
        return "data:...";
      return $.$get$context().prettyUri$1(t1);
    },
    get$location() {
      return this.get$library() + " " + this.line + ":" + this.column;
    },
    toString$0(_) {
      return this.get$location() + " in " + this.member;
    }
  };
  A.Trace.prototype = {
    toString$0(_) {
      var t1 = this.frames,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, new A.Trace_toString_closure(new A.MappedListIterable(t1, new A.Trace_toString_closure0(), t2._eval$1("MappedListIterable<1,int>")).fold$2(0, 0, B.CONSTANT)), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $isStackTrace: 1
  };
  A.Trace_toString_closure0.prototype = {
    call$1(frame) {
      return frame.get$location().length;
    },
    $signature: 189
  };
  A.Trace_toString_closure.prototype = {
    call$1(frame) {
      return B.JSString_methods.padRight$1(frame.get$location(), this.longest) + "  " + frame.member + "\n";
    },
    $signature: 190
  };
  A.StringScannerException.prototype = {
    get$source() {
      return A._asString(this.source);
    }
  };
  A.SpanScanner.prototype = {
    set$state(state) {
      if (state._span_scanner$_scanner !== this)
        throw A.wrapException(A.ArgumentError$(string$.The_gi, null));
      this.set$position(state.position);
    },
    spanFrom$2(startState, endState) {
      var endPosition = endState == null ? this._position : endState.position;
      return this._sourceFile.span$2(startState.position, endPosition);
    },
    spanFrom$1(startState) {
      return this.spanFrom$2(startState, null);
    },
    matches$1(pattern) {
      var t1, t2, _this = this;
      if (!_this.super$StringScanner$matches(pattern))
        return false;
      t1 = _this._position;
      t2 = _this.get$lastMatch();
      _this._sourceFile.span$2(t1, t2.get$end(t2));
      return true;
    },
    error$3$length$position(_, message, $length, position) {
      var match, _this = this,
        t1 = _this.string;
      A.validateErrorArgs(t1, null, position, $length);
      match = position == null && $length == null ? _this.get$lastMatch() : null;
      if (position == null)
        position = match == null ? _this._position : match.get$start(match);
      if ($length == null)
        $length = match == null ? 0 : match.get$end(match) - match.get$start(match);
      throw A.wrapException(A.StringScannerException$(message, _this._sourceFile.span$2(position, position + $length), t1));
    },
    error$1($receiver, message) {
      return this.error$3$length$position($receiver, message, null, null);
    },
    error$2$position($receiver, message, position) {
      return this.error$3$length$position($receiver, message, null, position);
    },
    error$2$length($receiver, message, $length) {
      return this.error$3$length$position($receiver, message, $length, null);
    }
  };
  A._SpanScannerState.prototype = {};
  A.StringScanner.prototype = {
    set$position(position) {
      if (B.JSInt_methods.get$isNegative(position) || position > this.string.length)
        throw A.wrapException(A.ArgumentError$("Invalid position " + position, null));
      this._position = position;
      this._lastMatch = null;
    },
    get$lastMatch() {
      var _this = this;
      if (_this._position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    readChar$0() {
      var _this = this,
        t1 = _this._position,
        t2 = _this.string;
      if (t1 === t2.length)
        _this.error$3$length$position(0, "expected more input.", 0, t1);
      return B.JSString_methods.codeUnitAt$1(t2, _this._position++);
    },
    peekChar$1(offset) {
      var index;
      if (offset == null)
        offset = 0;
      index = this._position + offset;
      if (index < 0 || index >= this.string.length)
        return null;
      return B.JSString_methods.codeUnitAt$1(this.string, index);
    },
    peekChar$0() {
      return this.peekChar$1(null);
    },
    scanChar$1(character) {
      var t1, t2, t3, t4, _this = this;
      if (character >= 65536 && character <= 1114111) {
        t1 = _this._position;
        t2 = t1 + 1;
        t3 = _this.string;
        if (t2 < t3.length) {
          t4 = character - 65536;
          t2 = B.JSString_methods.codeUnitAt$1(t3, t1) !== B.JSInt_methods._shrOtherPositive$1(t4, 10) + 55296 || B.JSString_methods.codeUnitAt$1(t3, t2) !== (t4 & 1023) + 56320;
        } else
          t2 = true;
        if (t2)
          return false;
        else {
          _this._position = t1 + 2;
          return true;
        }
      } else {
        t1 = _this._position;
        t2 = _this.string;
        if (t1 === t2.length)
          return false;
        if (B.JSString_methods.codeUnitAt$1(t2, t1) !== character)
          return false;
        _this._position = t1 + 1;
        return true;
      }
    },
    expectChar$2$name(character, $name) {
      if (this.scanChar$1(character))
        return;
      if ($name == null)
        if (character === 92)
          $name = '"\\"';
        else
          $name = character === 34 ? '"\\""' : '"' + A.Primitives_stringFromCharCode(character) + '"';
      this.error$3$length$position(0, "expected " + $name + ".", 0, this._position);
    },
    expectChar$1(character) {
      return this.expectChar$2$name(character, null);
    },
    scan$1(pattern) {
      var t1, _this = this,
        success = _this.matches$1(pattern);
      if (success) {
        t1 = _this._lastMatch;
        _this._lastMatchPosition = _this._position = t1.get$end(t1);
      }
      return success;
    },
    expect$2$name(pattern, $name) {
      var t1;
      if (this.scan$1(pattern))
        return;
      if ($name == null)
        if (type$.RegExp._is(pattern))
          $name = "/" + pattern.pattern + "/";
        else {
          t1 = J.toString$0$(pattern);
          t1 = A.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + A.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      this.error$3$length$position(0, "expected " + $name + ".", 0, this._position);
    },
    expect$1(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0() {
      var t1 = this._position;
      if (t1 === this.string.length)
        return;
      this.error$3$length$position(0, "expected no more input.", 0, t1);
    },
    matches$1(pattern) {
      var _this = this,
        t1 = J.matchAsPrefix$2$s(pattern, _this.string, _this._position);
      _this._lastMatch = t1;
      _this._lastMatchPosition = _this._position;
      return t1 != null;
    },
    substring$1(_, start) {
      var end = this._position;
      return B.JSString_methods.substring$2(this.string, start, end);
    },
    error$3$length$position(_, message, $length, position) {
      var match, _this = this,
        t1 = _this.string;
      A.validateErrorArgs(t1, null, position, $length);
      match = position == null && $length == null ? _this.get$lastMatch() : null;
      if (position == null)
        position = match == null ? _this._position : match.get$start(match);
      if ($length == null)
        $length = match == null ? 0 : match.get$end(match) - match.get$start(match);
      throw A.wrapException(A.StringScannerException$(message, A.SourceFile$fromString(t1, _this.sourceUrl).span$2(position, position + $length), t1));
    },
    error$1($receiver, message) {
      return this.error$3$length$position($receiver, message, null, null);
    },
    error$2$position($receiver, message, position) {
      return this.error$3$length$position($receiver, message, null, position);
    }
  };
  A.AsciiGlyphSet.prototype = {
    glyphOrAscii$2(glyph, alternative) {
      return alternative;
    },
    get$horizontalLine() {
      return "-";
    },
    get$verticalLine() {
      return "|";
    },
    get$topLeftCorner() {
      return ",";
    },
    get$bottomLeftCorner() {
      return "'";
    },
    get$cross() {
      return "+";
    },
    get$upEnd() {
      return "'";
    },
    get$downEnd() {
      return ",";
    },
    get$horizontalLineBold() {
      return "=";
    }
  };
  A.UnicodeGlyphSet.prototype = {
    glyphOrAscii$2(glyph, alternative) {
      return glyph;
    },
    get$horizontalLine() {
      return "\u2500";
    },
    get$verticalLine() {
      return "\u2502";
    },
    get$topLeftCorner() {
      return "\u250c";
    },
    get$bottomLeftCorner() {
      return "\u2514";
    },
    get$cross() {
      return "\u253c";
    },
    get$upEnd() {
      return "\u2575";
    },
    get$downEnd() {
      return "\u2577";
    },
    get$horizontalLineBold() {
      return "\u2501";
    }
  };
  A.Tuple2.prototype = {
    toString$0(_) {
      return "[" + A.S(this.item1) + ", " + A.S(this.item2) + "]";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Tuple2 && J.$eq$(other.item1, this.item1) && J.$eq$(other.item2, this.item2);
    },
    get$hashCode(_) {
      return A.Object_hash(J.get$hashCode$(this.item1), J.get$hashCode$(this.item2), B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.Tuple3.prototype = {
    toString$0(_) {
      return "[" + this.item1.toString$0(0) + ", " + A.S(this.item2) + ", " + A.S(this.item3) + "]";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Tuple3 && other.item1.$eq(0, this.item1) && J.$eq$(other.item2, this.item2) && J.$eq$(other.item3, this.item3);
    },
    get$hashCode(_) {
      var t1 = this.item1;
      return A.Object_hash(t1.get$hashCode(t1), J.get$hashCode$(this.item2), J.get$hashCode$(this.item3), B.C_SentinelValue);
    }
  };
  A.Tuple4.prototype = {
    toString$0(_) {
      var _this = this;
      return "[" + _this.item1.toString$0(0) + ", " + _this.item2 + ", " + _this.item3.toString$0(0) + ", " + A.S(_this.item4) + "]";
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.Tuple4 && other.item1.$eq(0, _this.item1) && other.item2 === _this.item2 && other.item3 === _this.item3 && J.$eq$(other.item4, _this.item4);
    },
    get$hashCode(_) {
      var t2, _this = this,
        t1 = _this.item1;
      t1 = t1.get$hashCode(t1);
      t2 = _this.item2 ? 519018 : 218159;
      return A.Object_hash(t1, t2, A.Primitives_objectHashCode(_this.item3), J.get$hashCode$(_this.item4));
    }
  };
  A._Exports.prototype = {};
  A._wrapMain_closure.prototype = {
    call$1(_) {
      return A._translateReturnValue(this.main.call$0());
    },
    $signature: 35
  };
  A._wrapMain_closure0.prototype = {
    call$1(args) {
      return A._translateReturnValue(this.main.call$1(A.List_List$from(type$.List_dynamic._as(args), true, type$.String)));
    },
    $signature: 35
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _ = A.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = A.AstNode.prototype;
    _.super$AstNode$flattenOptions = _.flattenOptions$0;
    _ = A.SimpleSelector.prototype;
    _.super$SimpleSelector$addSuffix = _.addSuffix$1;
    _.super$SimpleSelector$unify = _.unify$1;
    _.super$SimpleSelector$isSuperselector = _.isSuperselector$1;
    _ = A.Parser0.prototype;
    _.super$Parser$silentComment = _.silentComment$0;
    _ = A.StylesheetParser.prototype;
    _.super$StylesheetParser$importArgument = _.importArgument$0;
    _.super$StylesheetParser$namespacedExpression = _.namespacedExpression$2;
    _ = A.Value.prototype;
    _.super$Value$assertMap = _.assertMap$1;
    _ = A.SassNumber.prototype;
    _.super$SassNumber$coerce = _.coerce$3;
    _.super$SassNumber$coerceValue = _.coerceValue$3;
    _.super$SassNumber$coerceValueToMatch = _.coerceValueToMatch$3;
    _ = A.AnySelectorVisitor.prototype;
    _.super$AnySelectorVisitor$visitComplexSelector = _.visitComplexSelector$1;
    _ = A.RecursiveAstVisitor.prototype;
    _.super$RecursiveAstVisitor$visitCalculationExpression = _.visitCalculationExpression$1;
    _.super$RecursiveAstVisitor$visitDebugRule = _.visitDebugRule$1;
    _.super$RecursiveAstVisitor$visitErrorRule = _.visitErrorRule$1;
    _.super$RecursiveAstVisitor$visitIfRule = _.visitIfRule$1;
    _.super$RecursiveAstVisitor$visitImportRule = _.visitImportRule$1;
    _.super$RecursiveAstVisitor$visitMixinRule = _.visitMixinRule$1;
    _.super$RecursiveAstVisitor$visitReturnRule = _.visitReturnRule$1;
    _.super$RecursiveAstVisitor$visitUseRule = _.visitUseRule$1;
    _.super$RecursiveAstVisitor$visitVariableDeclaration = _.visitVariableDeclaration$1;
    _.super$RecursiveAstVisitor$visitWarnRule = _.visitWarnRule$1;
    _.super$RecursiveAstVisitor$visitBinaryOperationExpression = _.visitBinaryOperationExpression$1;
    _.super$RecursiveAstVisitor$visitForwardRule = _.visitForwardRule$1;
    _.super$RecursiveAstVisitor$visitFunctionExpression = _.visitFunctionExpression$1;
    _.super$RecursiveAstVisitor$visitListExpression = _.visitListExpression$1;
    _.super$RecursiveAstVisitor$visitParenthesizedExpression = _.visitParenthesizedExpression$1;
    _.super$RecursiveAstVisitor$visitUnaryOperationExpression = _.visitUnaryOperationExpression$1;
    _.super$RecursiveAstVisitor$visitVariableExpression = _.visitVariableExpression$1;
    _.super$RecursiveAstVisitor$visitArgumentInvocation = _.visitArgumentInvocation$1;
    _.super$RecursiveAstVisitor$visitInterpolation = _.visitInterpolation$1;
    _ = A.RecursiveStatementVisitor.prototype;
    _.super$RecursiveStatementVisitor$visitAtRootRule = _.visitAtRootRule$1;
    _.super$RecursiveStatementVisitor$visitAtRule = _.visitAtRule$1;
    _.super$RecursiveStatementVisitor$visitDeclaration = _.visitDeclaration$1;
    _.super$RecursiveStatementVisitor$visitEachRule = _.visitEachRule$1;
    _.super$RecursiveStatementVisitor$visitForRule = _.visitForRule$1;
    _.super$RecursiveStatementVisitor$visitFunctionRule = _.visitFunctionRule$1;
    _.super$RecursiveStatementVisitor$visitIncludeRule = _.visitIncludeRule$1;
    _.super$RecursiveStatementVisitor$visitMediaRule = _.visitMediaRule$1;
    _.super$RecursiveStatementVisitor$visitStyleRule = _.visitStyleRule$1;
    _.super$RecursiveStatementVisitor$visitStylesheet = _.visitStylesheet$1;
    _.super$RecursiveStatementVisitor$visitSupportsRule = _.visitSupportsRule$1;
    _.super$RecursiveStatementVisitor$visitWhileRule = _.visitWhileRule$1;
    _.super$RecursiveStatementVisitor$visitCallableDeclaration = _.visitCallableDeclaration$1;
    _.super$RecursiveStatementVisitor$visitChildren = _.visitChildren$1;
    _ = A.MigrationVisitor.prototype;
    _.super$MigrationVisitor$run = _.run$2;
    _.super$MigrationVisitor$visitStylesheet = _.visitStylesheet$1;
    _ = A._MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor.prototype;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitAtRootRule = _.visitAtRootRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitAtRule = _.visitAtRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitEachRule = _.visitEachRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitForRule = _.visitForRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitIncludeRule = _.visitIncludeRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitMediaRule = _.visitMediaRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitStyleRule = _.visitStyleRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitSupportsRule = _.visitSupportsRule$1;
    _.super$_MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitWhileRule = _.visitWhileRule$1;
    _ = A.Migrator.prototype;
    _.super$Migrator$run = _.run$0;
    _ = A.MemberDeclaration.prototype;
    _.super$MemberDeclaration$toString = _.toString$0;
    _ = A.__ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor.prototype;
    _.super$__ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor$visitIncludeRule = _.visitIncludeRule$1;
    _ = A.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
    _ = A.StringScanner.prototype;
    _.super$StringScanner$matches = _.matches$1;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _static_1 = hunkHelpers._static_1,
      _instance_1_u = hunkHelpers._instance_1u,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance_2_i = hunkHelpers._instance_2i,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance = hunkHelpers.installInstanceTearOff;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 27);
    _instance_1_i(J.JSArray.prototype, "get$contains", "contains$1", 21);
    _static_1(A, "_js_helper_GeneralConstantMap__constantMapHashCode$closure", "GeneralConstantMap__constantMapHashCode", 18);
    _instance_1_u(A.JsLinkedHashMap.prototype, "get$containsValue", "containsValue$1", 21);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 28);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 28);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 28);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static(A, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 193, 0);
    _static(A, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return A._rootRun($self, $parent, zone, f, type$.dynamic);
    }], 194, 1);
    _static(A, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      return A._rootRunUnary($self, $parent, zone, f, arg, type$.dynamic, type$.dynamic);
    }], 195, 1);
    _static(A, "async___rootRunBinary$closure", 6, null, ["call$3$6", "call$6"], ["_rootRunBinary", function($self, $parent, zone, f, arg1, arg2) {
      return A._rootRunBinary($self, $parent, zone, f, arg1, arg2, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 196, 1);
    _static(A, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return A._rootRegisterCallback($self, $parent, zone, f, type$.dynamic);
    }], 197, 0);
    _static(A, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      return A._rootRegisterUnaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic);
    }], 198, 0);
    _static(A, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      return A._rootRegisterBinaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 199, 0);
    _static(A, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 200, 0);
    _static(A, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 201, 0);
    _static(A, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 202, 0);
    _static(A, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 203, 0);
    _static(A, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 204, 0);
    _static_1(A, "async___printToZone$closure", "_printToZone", 39);
    _static(A, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 205, 0);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 30);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 18);
    _static_2(A, "collection_ListMixin__compareAny$closure", "ListMixin__compareAny", 27);
    _static_2(A, "collection___dynamicCompare$closure", "_dynamicCompare", 27);
    _static_1(A, "core__identityHashCode$closure", "identityHashCode", 18);
    _static_2(A, "core__identical$closure", "identical", 30);
    _static_2(A, "core_Comparable_compare$closure", "Comparable_compare", 206);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 4);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return A.max(a, b, type$.num);
    }], 207, 1);
    var _;
    _instance_2_i(_ = A.DefaultEquality.prototype, "get$equals", "equals$2", 30);
    _instance_1_u(_, "get$hash", "hash$1", 18);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 21);
    _instance_0_i(A.File.prototype, "get$length", "length$0", 111);
    _instance_1_u(A._IsInvisibleVisitor.prototype, "get$visitComplexSelector", "visitComplexSelector$1", 7);
    _instance_1_u(A._IsBogusVisitor.prototype, "get$visitComplexSelector", "visitComplexSelector$1", 7);
    _instance_1_u(A._IsUselessVisitor.prototype, "get$visitComplexSelector", "visitComplexSelector$1", 7);
    _instance_1_u(_ = A.SelectorList.prototype, "get$_complexContainsParentSelector", "_complexContainsParentSelector$1", 7);
    _instance_1_u(_, "get$isSuperselector", "isSuperselector$1", 17);
    _instance_1_u(A.PseudoSelector.prototype, "get$isSuperselector", "isSuperselector$1", 3);
    _instance_1_u(A.SimpleSelector.prototype, "get$isSuperselector", "isSuperselector$1", 3);
    _instance_1_u(A.TypeSelector.prototype, "get$isSuperselector", "isSuperselector$1", 3);
    _instance_1_u(A.UniversalSelector.prototype, "get$isSuperselector", "isSuperselector$1", 3);
    _static_1(A, "functions___isUnique$closure", "_isUnique", 3);
    _static_1(A, "color___opacify$closure", "_opacify", 8);
    _static_1(A, "color___transparentize$closure", "_transparentize", 8);
    _instance_0_u(_ = A.Parser0.prototype, "get$whitespace", "whitespace$0", 0);
    _instance_0_u(_, "get$loudComment", "loudComment$0", 0);
    _instance_0_u(_, "get$string", "string$0", 12);
    _instance_0_u(A.SassParser.prototype, "get$loudComment", "loudComment$0", 0);
    _instance(_ = A.StylesheetParser.prototype, "get$_statement", 0, 0, null, ["call$1$root", "call$0"], ["_statement$1$root", "_statement$0"], 121, 0, 0);
    _instance_0_u(_, "get$_declarationChild", "_declarationChild$0", 32);
    _instance_0_u(_, "get$_functionChild", "_functionChild$0", 32);
    _instance_1_i(A.NoSourceMapBuffer.prototype, "get$write", "write$1", 145);
    _instance_1_u(A.AnySelectorVisitor.prototype, "get$visitComplexSelector", "visitComplexSelector$1", 7);
    _instance_1_u(_ = A.RecursiveAstVisitor.prototype, "get$visitExpression", "visitExpression$1", 63);
    _instance_1_u(_, "get$visitInterpolation", "visitInterpolation$1", 64);
    _instance_1_u(_ = A.RecursiveStatementVisitor.prototype, "get$visitContentBlock", "visitContentBlock$1", 152);
    _instance_1_u(_, "get$visitChildren", "visitChildren$1", 36);
    _instance_1_u(A._DivisionMigrationVisitor.prototype, "get$visitInterpolation", "visitInterpolation$1", 64);
    _instance_1_u(_ = A._ModuleMigrationVisitor.prototype, "get$_renameDeclaration", "_renameDeclaration$1", 159);
    _instance_1_u(_, "get$visitChildren", "visitChildren$1", 36);
    _instance_1_u(_, "get$_namespaceForDeclaration", "_namespaceForDeclaration$1", 160);
    _instance_1_u(A._ReferenceVisitor.prototype, "get$visitChildren", "visitChildren$1", 36);
    _static_2(A, "utils__defaultCompare$closure", "defaultCompare", 208);
    _static(A, "utils__identity$closure", 1, null, ["call$1$1", "call$1"], ["identity", function(value) {
      return A.identity(value, type$.dynamic);
    }], 209, 0);
    _static_1(A, "character__isWhitespace$closure", "isWhitespace", 15);
    _static_1(A, "character__isNewline$closure", "isNewline", 15);
    _static_1(A, "character__isHex$closure", "isHex", 15);
    _static_2(A, "number0__fuzzyLessThan$closure", "fuzzyLessThan", 66);
    _static_2(A, "number0__fuzzyGreaterThan$closure", "fuzzyGreaterThan", 66);
    _static_1(A, "number0__fuzzyRound$closure", "fuzzyRound", 20);
    _static_1(A, "sass_migrator__main$closure", "main0", 140);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Iterable, A.CastIterator, A.Closure, A.Error, A._ListBase_Object_ListMixin, A.SentinelValue, A.ListIterator, A.Iterator, A.ExpandIterator, A.EmptyIterator, A.FollowedByIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A.MapView, A.ConstantMap, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._IterationMarker, A._SyncStarIterator, A.AsyncError, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.StreamTransformerBase, A._StreamIterator, A._ZoneFunction, A._ZoneSpecification, A._ZoneDelegate, A._Zone, A._HashMapKeyIterator, A.__SetBase_Object_SetMixin, A._LinkedHashSetCell, A._LinkedHashSetIterator, A.IterableMixin, A.ListMixin, A._UnmodifiableMapMixin, A._ListQueueIterator, A.SetMixin, A._UnmodifiableSetMixin, A._SplayTreeNode, A._SplayTree, A._SplayTreeIterator, A.Codec, A._Utf8Encoder, A._Utf8Decoder, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.MapEntry, A.Null, A._StringStackTrace, A.RuneIterator, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.Expando, A.FileSystemEntityType, A._JSRandom, A.CommandRunner, A.Command, A.ArgParser, A.ArgResults, A.Option, A.OptionType, A.Parser1, A._Usage, A.UsageException, A.DefaultEquality, A.IterableEquality, A.ListEquality, A._UnorderedEquality, A._MapEntry, A.MapEquality, A._QueueList_Object_ListMixin, A._DelegatingIterableBase, A.UnmodifiableSetMixin, A.FileSystem, A.Glob, A.AstNode, A.ListTree, A._ListTreeNode, A.Parser, A.Range, A.FileSystemEntity0, A.FileStat, A.Context, A._PathDirection, A._PathRelation, A.Style, A.ParsedPath, A.PathException, A.Argument, A.ArgumentDeclaration, A.ArgumentInvocation, A.ConfiguredVariable, A.BinaryOperationExpression, A.BooleanExpression, A.CalculationExpression, A.ColorExpression, A.FunctionExpression, A.IfExpression, A.InterpolatedFunctionExpression, A.ListExpression, A.MapExpression, A.NullExpression, A.NumberExpression, A.ParenthesizedExpression, A.SelectorExpression, A.StringExpression, A.SupportsExpression, A.UnaryOperationExpression, A.VariableExpression, A.DynamicImport, A.StaticImport, A.Interpolation, A.ParentStatement, A.ContentRule, A.DebugRule, A.ErrorRule, A.ExtendRule, A.ForwardRule, A.IfRule, A.IfRuleClause, A.ImportRule, A.IncludeRule, A.LoudComment, A.ReturnRule, A.SilentComment, A.UseRule, A.VariableDeclaration, A.WarnRule, A.SupportsAnything, A.SupportsDeclaration, A.SupportsFunction, A.SupportsInterpolation, A.SupportsNegation, A.SupportsOperation, A.Selector, A.__IsInvisibleVisitor_Object_AnySelectorVisitor, A.__IsBogusVisitor_Object_AnySelectorVisitor, A.__IsUselessVisitor_Object_AnySelectorVisitor, A.ComplexSelectorComponent, A.QualifiedName, A.BuiltInCallable, A.SourceSpanException, A.SassScriptException, A.ImportCache, A.AsyncImporter, A.ImporterResult, A.InterpolationBuffer, A.FileSystemException, A.Stderr, A._QuietLogger, A.StderrLogger, A.Parser0, A.NoSourceMapBuffer, A.Value, A._ColorFormatEnum, A.SpanColorFormat, A.AnySelectorVisitor, A.RecursiveAstVisitor, A.RecursiveStatementVisitor, A._SerializeVisitor, A.MigrationException, A._MigrationVisitor_Object_RecursiveStatementVisitor, A._DeprecationLogger, A.ForwardType, A.MemberDeclaration, A.ReferenceSource, A.References, A.__ReferenceVisitor_Object_RecursiveStatementVisitor, A.Scope, A.UnreferencableMembers, A.UnreferencableType, A.Patch, A.Renamer, A._Statement, A._OutputComponent, A.SourceFile, A.SourceLocationMixin, A.SourceSpanMixin, A.Highlighter, A._Highlight, A._Line, A.SourceLocation, A.Frame, A.Trace, A.StringScanner, A._SpanScannerState, A.AsciiGlyphSet, A.UnicodeGlyphSet, A.Tuple2, A.Tuple3, A.Tuple4]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, A.NativeTypedData]);
    _inherit(J.LegacyJavaScriptObject, J.JavaScriptObject);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, A.BufferModule, A.BufferConstants, A.Buffer, A.ConsoleModule, A.Console, A.DNS, A.DNSLookupOptions, A.DNSAddress, A.Resolver, A.EventEmitter, A.FS, A.FSConstants, A.FSWatcher, A.ReadStream, A.ReadStreamOptions, A.WriteStream, A.WriteStreamOptions, A.FileOptions, A.StatOptions, A.MkdirOptions, A.RmdirOptions, A.WatchOptions, A.WatchFileOptions, A.Stats, A.HTTP, A.HttpAgent, A.HttpAgentOptions, A.RequestOptions, A.ClientRequest, A.HttpServer, A.ServerResponse, A.IncomingMessage, A.Promise, A.Date, A.JsError, A.Atomics, A.Modules, A.Module, A.Net, A.Socket, A.NetAddress, A.NetServer, A.NodeJsError, A.OS, A.CPU, A.CPUTimes, A.OSConstants, A.OSSignalConstants, A.OSErrorConstants, A.OSDLOpenConstants, A.Path, A.PathObject, A.Process, A.CPUUsage, A.Release, A.StreamModule, A.Readable, A.Writable, A.Duplex, A.Transform, A.WritableOptions, A.ReadableOptions, A.Immediate, A.Timeout, A.TTY, A.Util, A.JSArray0, A.Chokidar, A.ChokidarOptions, A.ChokidarWatcher, A.JSFunction, A.NodeImporterResult, A.RenderContext, A.RenderContextOptions, A.RenderContextResult, A.RenderContextResultStats, A.JSClass, A.JSUrl, A._PropertyDescriptor, A._Exports]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.SkipIterable, A.FollowedByIterable, A.WhereTypeIterable, A._ConstantMapKeyIterable, A.IterableBase, A._StringAllMatchesIterable, A.Runes]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure, [A.Closure2Args, A.ConstantStringMap_containsValue_closure, A.ConstantStringMap_values_closure, A.GeneralConstantMap__typeTest_closure, A.Instantiation, A.Closure0Args, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.JsLinkedHashMap_containsValue_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A._CustomZone_bindUnaryCallback_closure, A._RootZone_bindUnaryCallback_closure, A._HashMap_containsValue_closure, A._CustomHashMap_closure, A._LinkedCustomHashMap_closure, A.MapMixin_entries_closure, A.SplayTreeMap_closure, A.SplayTreeMap_containsValue_visit, A.SplayTreeSet_closure, A.DateTime_parse_parseIntOrZero, A.DateTime_parse_parseMilliAndMicroseconds, A._Uri__makePath_closure, A._createTables_setChars, A._createTables_setRange, A.Command_hidden_closure, A._getCommandUsage_closure, A._getCommandUsage_closure0, A._getCommandUsage_closure2, A.ArgParser__addOption_closure, A._Usage__writeOption_closure, A._Usage__buildAllowedList_closure, A.SequenceNode_flattenOptions_closure, A.SequenceNode_flattenOptions_closure0, A.SequenceNode_flattenOptions__closure0, A.SequenceNode_flattenOptions_closure1, A.SequenceNode_split_addNode, A.SequenceNode__toRegExp_closure, A.RangeNode_flattenOptions_closure, A.RangeNode_flattenOptions_closure0, A.RangeNode__toRegExp_closure, A.OptionsNode_flattenOptions_closure, A.OptionsNode__toRegExp_closure, A.ListTree__addGlob_closure, A.ListTree__computeCanOverlap_closure, A.ListTree_listSync_closure, A.ListTree_listSync_closure0, A._ListTreeNode__isIntermediate_closure, A._ListTreeNode_canOverlap_closure, A._ListTreeNode_canOverlap_closure0, A._ListTreeNode_makeRecursive_closure, A._ListTreeNode_listSync_closure, A._ListTreeNode_listSync_closure0, A._ListTreeNode_listSync_closure1, A._ListTreeNode_listSync__closure, A._ListTreeNode_listSync__closure0, A._ListTreeNode__validateIntermediateChildrenSync__closure, A.regExpQuote_closure, A.futureToPromise__closure, A.Directory_listSync_list, A.File_length_closure, A.FileStat_stat_callback, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.ParsedPath__splitExtension_closure, A.WindowsStyle_absolutePathToUri_closure, A.CalculationExpression__verifyArguments_closure, A.ListExpression_toString_closure, A.MapExpression_toString_closure, A.Interpolation_toString_closure, A.EachRule_toString_closure, A.IfRuleClause$__closure, A.IfRuleClause$___closure, A.ParentStatement_closure, A.ParentStatement__closure, A._IsBogusVisitor_visitComplexSelector_closure, A._IsUselessVisitor_visitComplexSelector_closure, A.ComplexSelectorComponent_toString_closure, A.IDSelector_unify_closure, A.SelectorList_asSassList_closure, A.SelectorList_resolveParentSelectors_closure, A.SelectorList_resolveParentSelectors__closure, A.SelectorList__complexContainsParentSelector_closure, A.SelectorList__complexContainsParentSelector__closure, A.SelectorList__resolveParentSelectorsCompound_closure, A.SelectorList__resolveParentSelectorsCompound_closure0, A.SelectorList__resolveParentSelectorsCompound_closure1, A.SelectorList_withAdditionalCombinators_closure, A.PseudoSelector_unify_closure, A.SimpleSelector_isSuperselector_closure, A.SimpleSelector_isSuperselector__closure, A.unifyComplex_closure, A._weaveParents_closure0, A._weaveParents_closure1, A._weaveParents_closure2, A._mustUnify_closure, A._mustUnify__closure, A.paths__closure, A.paths___closure, A.listIsSuperselector_closure, A.listIsSuperselector__closure, A.complexIsSuperselector_closure, A.complexIsSuperselector_closure0, A._selectorPseudoIsSuperselector_closure, A._selectorPseudoIsSuperselector_closure0, A._selectorPseudoIsSuperselector_closure1, A._selectorPseudoIsSuperselector_closure2, A._selectorPseudoIsSuperselector_closure3, A._selectorPseudoIsSuperselector__closure, A._selectorPseudoIsSuperselector___closure, A._selectorPseudoIsSuperselector___closure0, A._selectorPseudoIsSuperselector_closure4, A._selectorPseudoIsSuperselector_closure5, A._selectorPseudoArgs_closure, A._selectorPseudoArgs_closure0, A.globalFunctions_closure, A.global_closure3, A.global_closure4, A.global_closure5, A.global_closure6, A.global_closure7, A.global_closure8, A.global_closure9, A.global_closure10, A.global_closure11, A.global_closure12, A.global_closure13, A.global_closure14, A.global_closure15, A.global_closure16, A.global_closure17, A.global_closure18, A.global_closure19, A.global_closure20, A.global_closure21, A.global_closure22, A.global_closure23, A.global_closure24, A.global_closure25, A.global_closure26, A.global_closure27, A.global_closure28, A.global__closure, A.global_closure29, A._red_closure, A._green_closure, A._blue_closure, A._mix_closure, A._hue_closure, A._saturation_closure, A._lightness_closure, A._complement_closure, A._adjust_closure, A._scale_closure, A._change_closure, A._ieHexStr_closure, A._ieHexStr_closure_hexString, A._updateComponents_getParam, A._updateComponents_closure, A._updateComponents_updateValue, A._functionString_closure, A._rgb_closure, A._hsl_closure, A._removeUnits_closure, A._removeUnits_closure0, A._parseChannels_closure, A._length_closure0, A._nth_closure, A._setNth_closure, A._join_closure, A._append_closure0, A._zip_closure, A._zip__closure, A._zip__closure0, A._zip__closure1, A._index_closure0, A._separator_closure, A._isBracketed_closure, A._get_closure, A._merge_closure, A._merge_closure0, A._merge__closure, A._remove_closure, A._remove_closure0, A._keys_closure, A._values_closure, A._hasKey_closure, A._modify__modifyNestedMap, A._ceil_closure, A._floor_closure, A._max_closure, A._min_closure, A._abs_closure, A._compatible_closure, A._isUnitless_closure, A._unit_closure, A._percentage_closure, A._randomFunction_closure, A._numberFunction_closure, A.global_closure, A.global_closure0, A.global_closure1, A.global_closure2, A._nest_closure, A._nest__closure, A._append_closure, A._append__closure, A._append___closure, A._extend_closure, A._replace_closure, A._unify_closure, A._isSuperselector_closure, A._simpleSelectors_closure, A._simpleSelectors__closure, A._parse_closure, A._unquote_closure, A._quote_closure, A._length_closure, A._insert_closure, A._index_closure, A._slice_closure, A._toUpperCase_closure, A._toLowerCase_closure, A._uniqueId_closure, A.FilesystemImporter_canonicalize_closure, A._exactlyOne_closure, A._realCasePath_helper, A._realCasePath_helper__closure, A.listDir__closure, A.listDir__closure0, A.listDir_closure_list, A.listDir__list_closure, A._disallowedFunctionNames_closure, A.Parser_scanIdentChar_matches, A.StylesheetParser_parse__closure0, A.StylesheetParser__expression_addSingleExpression, A.StylesheetParser__expression_addOperator, A.StylesheetParser__unicodeRange_closure, A.StylesheetParser__unicodeRange_closure0, A.StylesheetParser_trySpecialFunction_closure, A.flattenVertically_closure, A.flattenVertically_closure0, A.SassColor_SassColor$hwb_toRgb, A.SassList_isBlank_closure, A.SassNumber__coerceOrConvertValue_closure, A.SassNumber__coerceOrConvertValue_closure1, A.SassNumber__canonicalizeUnitList_closure, A.SingleUnitSassNumber__coerceToUnit_closure, A.SingleUnitSassNumber__coerceValueToUnit_closure, A.AnySelectorVisitor_visitComplexSelector_closure, A.AnySelectorVisitor_visitCompoundSelector_closure, A.RecursiveAstVisitor_visitIfRule_closure, A.RecursiveStatementVisitor_visitIfRule_closure, A._SerializeVisitor_visitList_closure, A._SerializeVisitor_visitList_closure0, A._SerializeVisitor_visitList_closure1, A._SerializeVisitor_visitMap_closure, A._SerializeVisitor_visitSelectorList_closure, A._DivisionMigrationVisitor__builtInPrefix_closure, A._DivisionMigrationVisitor__builtInPrefix_closure0, A.ModuleMigrator_migrateFile_closure, A._ModuleMigrationVisitor_closure, A._ModuleMigrationVisitor__getAdditionalForwardRules_closure, A._ModuleMigrationVisitor_beforePatch_useRulesToString, A._ModuleMigrationVisitor_beforePatch_useRulesToString_closure, A._ModuleMigrationVisitor__resolveNamespaceConflict_closure, A._ModuleMigrationVisitor__resolveNamespaceConflict_closure0, A._ModuleMigrationVisitor_visitFunctionExpression_closure, A._ModuleMigrationVisitor_visitFunctionExpression_closure0, A._ModuleMigrationVisitor_visitImportRule_closure, A._ModuleMigrationVisitor__migrateImportCommon_closure0, A._ModuleMigrationVisitor__namespaceForDeclaration_closure, A._ModuleMigrationVisitor__absoluteUrlToDependency_closure, A._ModuleMigrationVisitor__prefixFor_closure, A._ModuleMigrationVisitor__prefixFor_closure0, A.References_referencedOutsideDeclaringStylesheet_closure, A.NamespaceMigrator_migrateFile_closure, A.NamespaceMigrator_migrateFile_closure0, A._Statement_rename_closure, A.Highlighter$__closure, A.Highlighter$___closure, A.Highlighter$__closure0, A.Highlighter__collateLines_closure, A.Highlighter__collateLines_closure1, A.Highlighter__collateLines__closure, A.Highlighter_highlight_closure, A.Trace_toString_closure0, A.Trace_toString_closure, A._wrapMain_closure, A._wrapMain_closure0]);
    _inheritMany(A.Closure2Args, [A._CastListBase_sort_closure, A.Primitives_functionNoSuchMethod_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__chainForeignFuture_closure0, A.HashMap_HashMap$from_closure, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A.NoSuchMethodError_toString_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._createTables_build, A.CommandRunner__similarCommandsText_closure, A.ArgResults_options_closure, A.Parser_parse_closure, A.SequenceNode_flattenOptions__closure, A._ListTreeNode__validateIntermediateChildrenSync_closure, A.futureToPromise_closure, A.IfRule_toString_closure, A._weaveParents_closure, A.paths_closure, A._updateComponents_updateRgb, A._nest__closure0, A._append__closure0, A.StylesheetParser__declarationOrBuffer_closure, A.StylesheetParser__declarationOrBuffer_closure0, A.StylesheetParser__styleRule_closure, A.StylesheetParser__propertyOrVariableDeclaration_closure, A.StylesheetParser__propertyOrVariableDeclaration_closure0, A.StylesheetParser__atRootRule_closure, A.StylesheetParser__atRootRule_closure0, A.StylesheetParser__eachRule_closure, A.StylesheetParser__functionRule_closure, A.StylesheetParser__forRule_closure0, A.StylesheetParser__includeRule_closure, A.StylesheetParser_mediaRule_closure, A.StylesheetParser__mixinRule_closure, A.StylesheetParser_mozDocumentRule_closure, A.StylesheetParser_supportsRule_closure, A.StylesheetParser__whileRule_closure, A.StylesheetParser_unknownAtRule_closure, A.longestCommonSubsequence_backtrack, A.SassMap_asList_closure, A.SassNumber__canonicalMultiplier_closure, A.Migrator_run_closure, A.Migrator__warnForMissingDependencies_closure, A._ModuleMigrationVisitor__determineNamespaces_closure, A._ModuleMigrationVisitor__determineNamespaces_closure0, A._ModuleMigrationVisitor__determineNamespaces_closure1, A._ModuleMigrationVisitor__orderSources_closure0, A._ModuleMigrationVisitor__migrateImportCommon_closure1, A._ReferenceVisitor_visitUseRule_closure, A.MigratorRunner_execute_closure, A.MigratorRunner_execute_closure0, A.Highlighter__collateLines_closure0]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A._Error, A.AssertionError, A.NullThrownError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inherit(A.ListBase, A._ListBase_Object_ListMixin);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inheritMany(A.UnmodifiableListBase, [A.CodeUnits, A.UnmodifiableListView]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable, A._SplayTreeKeyIterable, A._SplayTreeMapEntryIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable, A.ListQueue]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inheritMany(A.Iterator, [A.MappedIterator, A.WhereIterator, A.TakeIterator, A.SkipIterator]);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.EfficientLengthFollowedByIterable, A.FollowedByIterable);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inheritMany(A.UnmodifiableMapView, [A.ConstantMapView, A.UnmodifiableBidirectionalMapView]);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A.MapBase, A.MapMixin);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._HashMap, A.BidirectionalMap]);
    _inheritMany(A.IterableBase, [A._AllMatchesIterable, A._SyncStarIterable]);
    _inherit(A.NativeTypedArray, A.NativeTypedData);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__asyncCompleteWithValue_closure, A._Future__chainFuture_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A._CustomZone_bindCallback_closure, A._CustomZone_bindCallbackGuarded_closure, A._rootHandleError_closure, A._RootZone_bindCallback_closure, A._RootZone_bindCallbackGuarded_closure, A.Utf8Decoder__decoder_closure, A.Utf8Decoder__decoderNonfatal_closure, A._getCommandUsage_closure1, A.Parser__setOption_closure, A.SequenceNode_split_finishComponent, A.Parser__parseRange_readRangeChar, A.ParsedPath__splitExtension_closure0, A.ImportCache_canonicalize_closure, A.ImportCache_canonicalize_closure0, A.ImportCache__canonicalize_closure, A.ImportCache_importCanonical_closure, A.resolveImportPath_closure, A.resolveImportPath_closure0, A._tryPathAsDirectory_closure, A._realCasePath_helper_closure, A._readFile_closure, A.fileExists_closure, A.dirExists_closure, A.listDir_closure, A.Parser__parseIdentifier_closure, A.SassParser_children_closure, A.SelectorParser_parse_closure, A.SelectorParser_parseCompoundSelector_closure, A.StylesheetParser_parse_closure, A.StylesheetParser_parse__closure, A.StylesheetParser_parseArgumentDeclaration_closure, A.StylesheetParser__parseSingleProduction_closure, A.StylesheetParser__statement_closure, A.StylesheetParser_variableDeclarationWithoutNamespace_closure, A.StylesheetParser_variableDeclarationWithoutNamespace_closure0, A.StylesheetParser__forRule_closure, A.StylesheetParser__memberList_closure, A.StylesheetParser__expression_resetState, A.StylesheetParser__expression_resolveOneOperation, A.StylesheetParser__expression_resolveOperations, A.StylesheetParser__expression_resolveSpaceExpressions, A.StylesheetParser_expressionUntilComma_closure, A.StylesheetParser_namespacedExpression_closure, A.StylesheetParser__expressionUntilComparison_closure, A.StylesheetParser__publicIdentifier_closure, A.SassNumber__coerceOrConvertValue__compatibilityException, A.SassNumber__coerceOrConvertValue_closure0, A.SassNumber__coerceOrConvertValue_closure2, A.MigrationVisitor_visitDependency_closure, A._DivisionMigrationVisitor__builtInPrefix_options, A._DivisionMigrationVisitor_visitArgumentInvocation_closure, A._DivisionMigrationVisitor_visitBinaryOperationExpression_closure, A._DivisionMigrationVisitor_visitCalculationExpression_closure, A._DivisionMigrationVisitor_visitInterpolation_closure, A._DivisionMigrationVisitor_visitListExpression_closure, A._DivisionMigrationVisitor_visitParenthesizedExpression_closure, A._DivisionMigrationVisitor_visitReturnRule_closure, A._DivisionMigrationVisitor_visitVariableDeclaration_closure, A._DivisionMigrationVisitor__tryColorFunction_closure, A._DivisionMigrationVisitor__visitSlashOperation_closure, A.MediaLogicMigrator_handleDeprecation_closure, A._ModuleMigrationVisitor__generateImportOnly_closure, A._ModuleMigrationVisitor__generateImportOnly_closure0, A._ModuleMigrationVisitor__generateImportOnly_closure1, A._ModuleMigrationVisitor__determineNamespaces__closure, A._ModuleMigrationVisitor__orderSources_closure, A._ModuleMigrationVisitor__migrateImportToRules_closure, A._ModuleMigrationVisitor__migrateImportCommon_closure, A._ModuleMigrationVisitor__makeForwardRules_closure, A._ModuleMigrationVisitor__findOrAddBuiltInNamespace_closure, A._ModuleMigrationVisitor__namespaceForDeclaration_closure0, A._ReferenceVisitor__registerLibraryUrl_closure, A._NamespaceMigrationVisitor_beforePatch_closure, A._NamespaceMigrationVisitor__addNamespaceSpan_closure, A.BidirectionalMap_operator$indexSet_closure, A.Highlighter_closure, A.Highlighter__writeFileStart_closure, A.Highlighter__writeMultilineHighlights_closure, A.Highlighter__writeMultilineHighlights_closure0, A.Highlighter__writeMultilineHighlights_closure1, A.Highlighter__writeMultilineHighlights_closure2, A.Highlighter__writeMultilineHighlights__closure, A.Highlighter__writeMultilineHighlights__closure0, A.Highlighter__writeHighlightedText_closure, A.Highlighter__writeIndicator_closure, A.Highlighter__writeIndicator_closure0, A.Highlighter__writeIndicator_closure1, A.Highlighter__writeLabel_closure, A.Highlighter__writeLabel_closure0, A.Highlighter__writeSidebar_closure, A._Highlight_closure]);
    _inherit(A._AsyncCompleter, A._Completer);
    _inheritMany(A._Zone, [A._CustomZone, A._RootZone]);
    _inheritMany(A._HashMap, [A._IdentityHashMap, A._CustomHashMap]);
    _inherit(A._LinkedCustomHashMap, A.JsLinkedHashMap);
    _inherit(A._SetBase, A.__SetBase_Object_SetMixin);
    _inheritMany(A._SetBase, [A._LinkedHashSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin]);
    _inherit(A._UnmodifiableSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin);
    _inheritMany(A._SplayTreeNode, [A._SplayTreeSetNode, A._SplayTreeMapNode]);
    _inheritMany(A._SplayTree, [A._SplayTreeMap__SplayTree_MapMixin, A._SplayTreeSet__SplayTree_IterableMixin]);
    _inherit(A.SplayTreeMap, A._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(A._SplayTreeIterator, [A._SplayTreeKeyIterator, A._SplayTreeMapEntryIterator]);
    _inherit(A._SplayTreeSet__SplayTree_IterableMixin_SetMixin, A._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(A.SplayTreeSet, A._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inheritMany(A.Codec, [A.Base64Codec, A.Encoding]);
    _inherit(A.Converter, A.StreamTransformerBase);
    _inheritMany(A.Converter, [A.Base64Encoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A.Utf8Codec, A.Encoding);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inherit(A.ArgParserException, A.FormatException);
    _inheritMany(A.Command, [A.HelpCommand, A.Migrator]);
    _inheritMany(A._UnorderedEquality, [A.UnorderedIterableEquality, A.SetEquality]);
    _inherit(A.QueueList, A._QueueList_Object_ListMixin);
    _inherit(A.DelegatingSet, A._DelegatingIterableBase);
    _inherit(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.DelegatingSet);
    _inherit(A.UnmodifiableSetView, A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin);
    _inheritMany(A.AstNode, [A.SequenceNode, A.StarNode, A.DoubleStarNode, A.AnyCharNode, A.RangeNode, A.OptionsNode, A.LiteralNode]);
    _inheritMany(A.NodeJsError, [A.JsAssertionError, A.JsRangeError, A.JsReferenceError, A.JsSyntaxError, A.JsTypeError, A.JsSystemError]);
    _inheritMany(A.Socket, [A.TTYReadStream, A.TTYWriteStream]);
    _inheritMany(A.FileSystemEntity0, [A.Directory, A.File, A.Link]);
    _inherit(A.NodeFileSystem, A.FileSystem);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inheritMany(A._Enum, [A.BinaryOperator, A.UnaryOperator, A.AttributeOperator, A.Combinator, A.Syntax, A.ListSeparator, A.OutputStyle, A.LineFeed]);
    _inheritMany(A.ParentStatement, [A.AtRootRule, A.AtRule, A.CallableDeclaration, A.Declaration, A.EachRule, A.ForRule, A.MediaRule, A.StyleRule, A.Stylesheet, A.SupportsRule, A.WhileRule]);
    _inheritMany(A.CallableDeclaration, [A.ContentBlock, A.FunctionRule, A.MixinRule]);
    _inheritMany(A.IfRuleClause, [A.IfClause, A.ElseClause]);
    _inherit(A._IsInvisibleVisitor, A.__IsInvisibleVisitor_Object_AnySelectorVisitor);
    _inherit(A._IsBogusVisitor, A.__IsBogusVisitor_Object_AnySelectorVisitor);
    _inherit(A._IsUselessVisitor, A.__IsUselessVisitor_Object_AnySelectorVisitor);
    _inheritMany(A.Selector, [A.SimpleSelector, A.ComplexSelector, A.CompoundSelector, A.SelectorList]);
    _inheritMany(A.SimpleSelector, [A.AttributeSelector, A.ClassSelector, A.IDSelector, A.ParentSelector, A.PlaceholderSelector, A.PseudoSelector, A.TypeSelector, A.UniversalSelector]);
    _inheritMany(A.SourceSpanException, [A.SassException, A.SourceSpanFormatException, A.MultiSourceSpanException]);
    _inheritMany(A.SassException, [A.SassFormatException, A.MigrationSourceSpanException]);
    _inherit(A.Importer, A.AsyncImporter);
    _inheritMany(A.Importer, [A.FilesystemImporter, A.NodeModulesImporter]);
    _inheritMany(A.Parser0, [A.StylesheetParser, A.SelectorParser]);
    _inheritMany(A.StylesheetParser, [A.ScssParser, A.SassParser]);
    _inherit(A.CssParser, A.ScssParser);
    _inheritMany(A.Value, [A.SassBoolean, A.SassColor, A.SassList, A.SassMap, A._SassNull, A.SassNumber, A.SassString]);
    _inheritMany(A.SassNumber, [A.ComplexSassNumber, A.SingleUnitSassNumber, A.UnitlessSassNumber]);
    _inherit(A._MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor, A._MigrationVisitor_Object_RecursiveStatementVisitor);
    _inherit(A.MigrationVisitor, A._MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor);
    _inheritMany(A.Migrator, [A.DivisionMigrator, A.MediaLogicMigrator, A.ModuleMigrator, A.NamespaceMigrator, A.StrictUnaryMigrator]);
    _inheritMany(A.MigrationVisitor, [A._DivisionMigrationVisitor, A._MediaLogicVisitor, A._ModuleMigrationVisitor, A._NamespaceMigrationVisitor, A._UnaryMigrationVisitor]);
    _inherit(A.ImportOnlyMemberDeclaration, A.MemberDeclaration);
    _inheritMany(A.ReferenceSource, [A.ImportSource, A.UseSource, A.BuiltInSource, A.CurrentSource, A.ForwardSource, A.ImportOnlySource]);
    _inherit(A.__ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor, A.__ReferenceVisitor_Object_RecursiveStatementVisitor);
    _inherit(A._ReferenceVisitor, A.__ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor);
    _inheritMany(A._OutputComponent, [A._Literal, A._Backreference]);
    _inherit(A.MigratorRunner, A.CommandRunner);
    _inherit(A.FileLocation, A.SourceLocationMixin);
    _inheritMany(A.SourceSpanMixin, [A._FileSpan, A.SourceSpanBase]);
    _inherit(A.SourceSpanWithContext, A.SourceSpanBase);
    _inherit(A.StringScannerException, A.SourceSpanFormatException);
    _inherit(A.SpanScanner, A.StringScanner);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._ListBase_Object_ListMixin, A.ListMixin);
    _mixin(A._SplayTreeMap__SplayTree_MapMixin, A.MapMixin);
    _mixin(A._SplayTreeSet__SplayTree_IterableMixin, A.IterableMixin);
    _mixin(A._SplayTreeSet__SplayTree_IterableMixin_SetMixin, A.SetMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__SetBase_Object_SetMixin, A.SetMixin);
    _mixin(A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin, A._UnmodifiableSetMixin);
    _mixin(A._QueueList_Object_ListMixin, A.ListMixin);
    _mixin(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A.__IsBogusVisitor_Object_AnySelectorVisitor, A.AnySelectorVisitor);
    _mixin(A.__IsInvisibleVisitor_Object_AnySelectorVisitor, A.AnySelectorVisitor);
    _mixin(A.__IsUselessVisitor_Object_AnySelectorVisitor, A.AnySelectorVisitor);
    _mixin(A._MigrationVisitor_Object_RecursiveStatementVisitor, A.RecursiveStatementVisitor);
    _mixinHard(A._MigrationVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor, A.RecursiveAstVisitor);
    _mixin(A.__ReferenceVisitor_Object_RecursiveStatementVisitor, A.RecursiveStatementVisitor);
    _mixinHard(A.__ReferenceVisitor_Object_RecursiveStatementVisitor_RecursiveAstVisitor, A.RecursiveAstVisitor);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "Value(List<Value>)", "SassString(List<Value>)", "bool(SimpleSelector)", "String(String)", "bool(String)", "SassNumber(List<Value>)", "bool(ComplexSelector)", "SassColor(List<Value>)", "SassList(List<Value>)", "Null()", "bool(ComplexSelectorComponent)", "String()", "SassBoolean(List<Value>)", "bool(@)", "bool(int?)", "bool()", "bool(SelectorList)", "int(Object?)", "String?()", "int(num)", "bool(Object?)", "ComplexSelector(ComplexSelector)", "SassMap(List<Value>)", "FileSpan()", "bool(Value)", "Declaration(List<Statement>,FileSpan)", "int(@,@)", "~(~())", "bool(FileSystemEntity)", "bool(Object?,Object?)", "int(String)", "Statement()", "@()", "bool(SequenceNode)", "@(@)", "~(List<Statement>)", "~(Uri,String)", "Set<MemberDeclaration<SassDeclaration>>()", "~(String)", "bool(_Highlight)", "int()", "SelectorList(SelectorList,SelectorList)", "bool(Range)", "bool(_ListTreeNode)", "Iterable<FileSystemEntity>(String)", "bool(Statement)", "bool(Import)", "~(@,@)", "~(Value)", "Null(@)", "int(String?)", "num(Value)", "~(Uint8List,String,int)", "num(num)", "SelectorList(Value)", "Tuple3<Importer,Uri,Uri>?()", "~(String,Option)", "String(@)", "Iterable<String>()", "List<AstNode>(SequenceNode)", "AtRootRule(List<Statement>,FileSpan)", "AtRule(List<Statement>,FileSpan)", "~(Expression)", "~(Interpolation)", "Null(ElseClause)", "bool(num,num)", "Set<FileSpan>()", "~(String,Set<ReferenceSource>)", "String(UseRule)", "~(String,@)", "SequenceNode(MapEntry<SequenceNode,_ListTreeNode>)", "Iterable<FileSystemEntity>(MapEntry<SequenceNode,_ListTreeNode>)", "~(Symbol0,@)", "SassList(ComplexSelector)", "Iterable<ComplexSelector>(ComplexSelector)", "List<FileSystemEntity>(FileSystemEntity)", "SimpleSelector(SimpleSelector)", "List<ComplexSelectorComponent>?(List<ComplexSelectorComponent>,List<ComplexSelectorComponent>)", "bool(Queue<List<ComplexSelectorComponent>>)", "bool(Queue<Object?>)", "bool(List<Iterable<ComplexSelectorComponent>>)", "bool(PseudoSelector)", "SelectorList?(PseudoSelector)", "~(String,int)", "~(String,int?)", "int(int,int)", "Null(~())", "Uint8List(@,@)", "String(int)", "num?(String,num{assertPercent:bool,checkPercent:bool})", "num(num,num?,num)", "int(int,num?)", "String(Value)", "List<FileSystemEntity>(SequenceNode)", "~(SequenceNode,_ListTreeNode)", "List<Value>(Value)", "bool(List<Value>)", "String(SequenceNode)", "List<Command<@>>()", "SassMap(Value)", "SassMap(SassMap)", "@(@,String)", "@(String)", "String(Match)", "Iterable<List<AstNode>>(List<AstNode>)", "SassString(SimpleSelector)", "Null(Function,Function)", "Uri?()", "Stylesheet?()", "Uri(String)", "Future<int>()", "List<String>()", "int(FileStat)", "~(@[@])", "Iterable<String>(String)", "Iterable<String>(@)", "String(BuiltInCallable)", "bool(int)", "SelectorList()", "CompoundSelector()", "Statement({root:bool})", "~(@)", "Stylesheet()", "Statement?()", "VariableDeclaration(VariableDeclaration)", "ArgumentDeclaration()", "Null(@,StackTrace)", "VariableDeclaration()", "String(String?)", "StyleRule(List<Statement>,FileSpan)", "bool(String?)", "EachRule(List<Statement>,FileSpan)", "FunctionRule(List<Statement>,FileSpan)", "ForRule(List<Statement>,FileSpan)", "ContentBlock(List<Statement>,FileSpan)", "MediaRule(List<Statement>,FileSpan)", "MixinRule(List<Statement>,FileSpan)", "Expression(Expression)", "SupportsRule(List<Statement>,FileSpan)", "@(Iterable<@>)", "String(Expression)", "~(BinaryOperator)", "~(int,@)", "StringExpression(Interpolation)", "~(Object?)", "~(Value,Value)", "SassScriptException()", "num(num,String)", "SingleUnitSassNumber(num)", "String(Tuple2<Expression,Expression>)", "String(Object)", "~(ContentBlock)", "SequenceNode(List<AstNode>)", "String(int,IfClause)", "~(MapEntry<Value,Value>)", "List<AstNode>(List<AstNode>,AstNode)", "~(Uri,FileSpan)", "bool(AstNode)", "~(MemberDeclaration<SassDeclaration>)", "String?(MemberDeclaration<SassDeclaration>)", "Map<String,Set<MemberDeclaration<SassDeclaration>>>()", "~(AstNode)", "Uri(MemberDeclaration<SassDeclaration>)", "String(Set<String>)", "~(SassReference,ReferenceSource)", "Set<ReferenceSource>()", "Null(Object,StackTrace)", "bool(List<String>)", "Set<ImportSource>()", "int(MapEntry<int,Set<ImportSource>>,MapEntry<int,Set<ImportSource>>)", "String(AstNode)", "String(StaticImport)", "Tuple2<Uri,Importer>()", "~(String,MemberDeclaration<VariableDeclaration>)", "int(Uri)", "bool(SassReference)", "~(MemberDeclaration<SassDeclaration>,ReferenceSource)", "Set<Uri>()", "_Future<@>(@)", "Set<UseRule>()", "String?(_OutputComponent)", "int(_Line)", "~(Object?,Object?)", "Object(_Line)", "Object(_Highlight)", "int(_Highlight,_Highlight)", "List<_Line>(MapEntry<Object,List<_Highlight>>)", "SourceSpanWithContext()", "int(Frame)", "String(Frame)", "SequenceNode(Range)", "List<SequenceNode>(SequenceNode)", "~(Zone?,ZoneDelegate?,Zone,Object,StackTrace)", "0^(Zone?,ZoneDelegate?,Zone,0^())<Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^),1^)<Object?,Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^,2^),1^,2^)<Object?,Object?,Object?>", "0^()(Zone,ZoneDelegate,Zone,0^())<Object?>", "0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?,Object?>", "0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?,Object?,Object?>", "AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)", "~(Zone?,ZoneDelegate?,Zone,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))", "~(Zone,ZoneDelegate,Zone,String)", "Zone(Zone?,ZoneDelegate?,Zone,ZoneSpecification?,Map<Object?,Object?>?)", "int(Comparable<@>,Comparable<@>)", "0^(0^,0^)<num>", "int(Object?,Object?)", "0^(0^)<Object?>", "String(Combinator)", "WhileRule(List<Statement>,FileSpan)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","BufferModule":"LegacyJavaScriptObject","BufferConstants":"LegacyJavaScriptObject","Buffer":"LegacyJavaScriptObject","ConsoleModule":"LegacyJavaScriptObject","Console":"LegacyJavaScriptObject","DNS":"LegacyJavaScriptObject","DNSLookupOptions":"LegacyJavaScriptObject","DNSAddress":"LegacyJavaScriptObject","Resolver":"LegacyJavaScriptObject","EventEmitter":"LegacyJavaScriptObject","FS":"LegacyJavaScriptObject","FSConstants":"LegacyJavaScriptObject","FSWatcher":"LegacyJavaScriptObject","ReadStream":"LegacyJavaScriptObject","ReadStreamOptions":"LegacyJavaScriptObject","WriteStream":"LegacyJavaScriptObject","WriteStreamOptions":"LegacyJavaScriptObject","FileOptions":"LegacyJavaScriptObject","StatOptions":"LegacyJavaScriptObject","MkdirOptions":"LegacyJavaScriptObject","RmdirOptions":"LegacyJavaScriptObject","WatchOptions":"LegacyJavaScriptObject","WatchFileOptions":"LegacyJavaScriptObject","Stats":"LegacyJavaScriptObject","HTTP":"LegacyJavaScriptObject","HttpAgent":"LegacyJavaScriptObject","HttpAgentOptions":"LegacyJavaScriptObject","RequestOptions":"LegacyJavaScriptObject","ClientRequest":"LegacyJavaScriptObject","HttpServer":"LegacyJavaScriptObject","ServerResponse":"LegacyJavaScriptObject","IncomingMessage":"LegacyJavaScriptObject","Promise":"LegacyJavaScriptObject","Date":"LegacyJavaScriptObject","JsError":"LegacyJavaScriptObject","Atomics":"LegacyJavaScriptObject","Modules":"LegacyJavaScriptObject","Module":"LegacyJavaScriptObject","Net":"LegacyJavaScriptObject","Socket":"LegacyJavaScriptObject","NetAddress":"LegacyJavaScriptObject","NetServer":"LegacyJavaScriptObject","NodeJsError":"LegacyJavaScriptObject","JsAssertionError":"LegacyJavaScriptObject","JsRangeError":"LegacyJavaScriptObject","JsReferenceError":"LegacyJavaScriptObject","JsSyntaxError":"LegacyJavaScriptObject","JsTypeError":"LegacyJavaScriptObject","JsSystemError":"LegacyJavaScriptObject","OS":"LegacyJavaScriptObject","CPU":"LegacyJavaScriptObject","CPUTimes":"LegacyJavaScriptObject","OSConstants":"LegacyJavaScriptObject","OSSignalConstants":"LegacyJavaScriptObject","OSErrorConstants":"LegacyJavaScriptObject","OSDLOpenConstants":"LegacyJavaScriptObject","Path":"LegacyJavaScriptObject","PathObject":"LegacyJavaScriptObject","Process":"LegacyJavaScriptObject","CPUUsage":"LegacyJavaScriptObject","Release":"LegacyJavaScriptObject","StreamModule":"LegacyJavaScriptObject","Readable":"LegacyJavaScriptObject","Writable":"LegacyJavaScriptObject","Duplex":"LegacyJavaScriptObject","Transform":"LegacyJavaScriptObject","WritableOptions":"LegacyJavaScriptObject","ReadableOptions":"LegacyJavaScriptObject","Immediate":"LegacyJavaScriptObject","Timeout":"LegacyJavaScriptObject","TTY":"LegacyJavaScriptObject","TTYReadStream":"LegacyJavaScriptObject","TTYWriteStream":"LegacyJavaScriptObject","Util":"LegacyJavaScriptObject","JSArray0":"LegacyJavaScriptObject","Chokidar":"LegacyJavaScriptObject","ChokidarOptions":"LegacyJavaScriptObject","ChokidarWatcher":"LegacyJavaScriptObject","JSFunction":"LegacyJavaScriptObject","NodeImporterResult":"LegacyJavaScriptObject","RenderContext":"LegacyJavaScriptObject","RenderContextOptions":"LegacyJavaScriptObject","RenderContextResult":"LegacyJavaScriptObject","RenderContextResultStats":"LegacyJavaScriptObject","JSClass":"LegacyJavaScriptObject","JSUrl":"LegacyJavaScriptObject","_PropertyDescriptor":"LegacyJavaScriptObject","_Exports":"LegacyJavaScriptObject","NativeFloat32List":"NativeTypedArrayOfDouble","JSBool":{"bool":[]},"JSNull":{"Null":[]},"LegacyJavaScriptObject":{"JsSystemError":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"],"JSIndexable":["@"]},"_CastIterableBase":{"Iterable":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListMixin.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"FollowedByIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthFollowedByIterable":{"FollowedByIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"UnmodifiableListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"Instantiation":{"Function":[]},"Instantiation1":{"Function":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"]},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"JSSyntaxRegExp":{"RegExp":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"JSIndexable":["double"],"Iterable":["double"],"ListMixin.E":"double"},"NativeTypedArrayOfInt":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"]},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"AsyncError":{"Error":[]},"_Future":{"Future":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"_AsyncCompleter":{"_Completer":["1"]},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"Zone":[]},"_RootZone":{"Zone":[]},"Queue":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SplayTreeMapNode":{"MapEntry":["1","2"]},"_HashMap":{"MapMixin":["1","2"],"Map":["1","2"]},"_IdentityHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"]},"_CustomHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"]},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"]},"_LinkedHashSet":{"_SetBase":["1"],"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableListView":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"IterableBase":{"Iterable":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"Map":["1","2"]},"ListQueue":{"ListIterable":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"_SetBase":["1"],"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"SplayTreeMap":{"MapMixin":["1","2"],"Map":["1","2"]},"_SplayTreeKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_SplayTreeMapEntryIterable":{"EfficientLengthIterable":["MapEntry<1,2>"],"Iterable":["MapEntry<1,2>"],"Iterable.E":"MapEntry<1,2>"},"_SplayTreeKeyIterator":{"_SplayTreeIterator":["1","2","1"],"_SplayTreeIterator.T":"1"},"_SplayTreeMapEntryIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","MapEntry<1,2>"],"_SplayTreeIterator.T":"MapEntry<1,2>"},"SplayTreeSet":{"SetMixin":["1"],"Set":["1"],"IterableMixin":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Comparable":["String"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"TypeError":[],"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"RangeError":[],"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"ArgParserException":{"FormatException":[],"Exception":[]},"HelpCommand":{"Command":["1"],"Command.T":"1"},"UsageException":{"Exception":[]},"UnorderedIterableEquality":{"_UnorderedEquality":["1","Iterable<1>"],"_UnorderedEquality.E":"1"},"SetEquality":{"_UnorderedEquality":["1","Set<1>"],"_UnorderedEquality.E":"1"},"QueueList":{"ListMixin":["1"],"List":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1","QueueList.E":"1"},"UnmodifiableSetView":{"DelegatingSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingSet":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"SequenceNode":{"AstNode":[]},"StarNode":{"AstNode":[]},"DoubleStarNode":{"AstNode":[]},"AnyCharNode":{"AstNode":[]},"RangeNode":{"AstNode":[]},"OptionsNode":{"AstNode":[]},"LiteralNode":{"AstNode":[]},"Directory":{"Directory0":[],"FileSystemEntity":[]},"File":{"FileSystemEntity":[]},"FileSystemEntity0":{"FileSystemEntity":[]},"Link":{"FileSystemEntity":[]},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"Argument":{"SassDeclaration":[]},"ConfiguredVariable":{"SassDeclaration":[]},"BinaryOperationExpression":{"Expression":[]},"BooleanExpression":{"Expression":[]},"CalculationExpression":{"Expression":[]},"ColorExpression":{"Expression":[]},"FunctionExpression":{"Expression":[],"SassReference":[]},"IfExpression":{"Expression":[]},"InterpolatedFunctionExpression":{"Expression":[]},"ListExpression":{"Expression":[]},"MapExpression":{"Expression":[]},"NullExpression":{"Expression":[]},"NumberExpression":{"Expression":[]},"ParenthesizedExpression":{"Expression":[]},"SelectorExpression":{"Expression":[]},"StringExpression":{"Expression":[]},"SupportsExpression":{"Expression":[]},"UnaryOperationExpression":{"Expression":[]},"VariableExpression":{"Expression":[],"SassReference":[]},"DynamicImport":{"Import":[]},"StaticImport":{"Import":[]},"AtRootRule":{"Statement":[]},"AtRule":{"Statement":[]},"CallableDeclaration":{"Statement":[]},"ContentBlock":{"Statement":[]},"ContentRule":{"Statement":[]},"DebugRule":{"Statement":[]},"Declaration":{"Statement":[]},"EachRule":{"Statement":[]},"ErrorRule":{"Statement":[]},"ExtendRule":{"Statement":[]},"ForRule":{"Statement":[]},"ForwardRule":{"Statement":[]},"FunctionRule":{"Statement":[],"SassDeclaration":[]},"IfRule":{"Statement":[]},"ImportRule":{"Statement":[]},"IncludeRule":{"Statement":[],"SassReference":[]},"LoudComment":{"Statement":[]},"MediaRule":{"Statement":[]},"MixinRule":{"Statement":[],"SassDeclaration":[]},"ParentStatement":{"Statement":[]},"ReturnRule":{"Statement":[]},"SilentComment":{"Statement":[]},"StyleRule":{"Statement":[]},"Stylesheet":{"Statement":[]},"SupportsRule":{"Statement":[]},"UseRule":{"Statement":[]},"VariableDeclaration":{"Statement":[],"SassDeclaration":[]},"WarnRule":{"Statement":[]},"WhileRule":{"Statement":[]},"AttributeSelector":{"SimpleSelector":[]},"ClassSelector":{"SimpleSelector":[]},"IDSelector":{"SimpleSelector":[]},"ParentSelector":{"SimpleSelector":[]},"PlaceholderSelector":{"SimpleSelector":[]},"PseudoSelector":{"SimpleSelector":[]},"TypeSelector":{"SimpleSelector":[]},"UniversalSelector":{"SimpleSelector":[]},"SassException":{"Exception":[]},"SassFormatException":{"SourceSpanFormatException":[],"FormatException":[],"Exception":[]},"FilesystemImporter":{"Importer":[]},"SassBoolean":{"Value":[]},"SassColor":{"Value":[]},"SassList":{"Value":[]},"SassMap":{"Value":[]},"_SassNull":{"Value":[]},"SassNumber":{"Value":[]},"ComplexSassNumber":{"Value":[]},"SingleUnitSassNumber":{"Value":[]},"UnitlessSassNumber":{"Value":[]},"SassString":{"Value":[]},"MigrationException":{"Exception":[]},"MigrationSourceSpanException":{"MigrationException":[],"Exception":[]},"Migrator":{"Command":["Map<Uri,String>"]},"DivisionMigrator":{"Command":["Map<Uri,String>"],"Command.T":"Map<Uri,String>"},"MediaLogicMigrator":{"Command":["Map<Uri,String>"],"Command.T":"Map<Uri,String>"},"ModuleMigrator":{"Command":["Map<Uri,String>"],"Command.T":"Map<Uri,String>"},"ImportOnlyMemberDeclaration":{"MemberDeclaration":["1"]},"ImportSource":{"ReferenceSource":[]},"BuiltInSource":{"ReferenceSource":[]},"UseSource":{"ReferenceSource":[]},"CurrentSource":{"ReferenceSource":[]},"ForwardSource":{"ReferenceSource":[]},"ImportOnlySource":{"ReferenceSource":[]},"NamespaceMigrator":{"Command":["Map<Uri,String>"],"Command.T":"Map<Uri,String>"},"StrictUnaryMigrator":{"Command":["Map<Uri,String>"],"Command.T":"Map<Uri,String>"},"Patch":{"Comparable":["Patch"]},"_Literal":{"_OutputComponent":[]},"_Backreference":{"_OutputComponent":[]},"MigratorRunner":{"CommandRunner":["Map<Uri,String>"],"CommandRunner.T":"Map<Uri,String>"},"BidirectionalMap":{"MapMixin":["1","2"],"Map":["1","2"]},"NodeModulesImporter":{"Importer":[]},"UnmodifiableBidirectionalMapView":{"UnmodifiableMapView":["1","2"],"Map":["1","2"]},"FileSpan":{"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"FileLocation":{"SourceLocation":[],"Comparable":["SourceLocation"]},"_FileSpan":{"FileSpan":[],"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation":{"Comparable":["SourceLocation"]},"SourceLocationMixin":{"SourceLocation":[],"Comparable":["SourceLocation"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"MultiSourceSpanException":{"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"Trace":{"StackTrace":[]},"StringScannerException":{"SourceSpanFormatException":[],"FormatException":[],"Exception":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Entry":{"Comparable":["Entry"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"ArrayIterator":1,"ListIterator":1,"MappedIterator":2,"WhereIterator":1,"ExpandIterator":2,"TakeIterator":1,"SkipIterator":1,"EmptyIterator":1,"FollowedByIterator":1,"FixedLengthListMixin":1,"UnmodifiableListMixin":1,"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"LinkedHashMapKeyIterator":1,"NativeTypedArray":1,"_SyncStarIterator":1,"StreamTransformerBase":2,"_StreamIterator":1,"_ZoneFunction":1,"Queue":1,"_HashMapKeyIterator":1,"_LinkedHashSetIterator":1,"IterableBase":1,"ListBase":1,"MapBase":2,"_UnmodifiableMapMixin":2,"MapView":2,"_ListQueueIterator":1,"_UnmodifiableSetMixin":1,"_SplayTreeNode":2,"_SplayTree":2,"_ListBase_Object_ListMixin":1,"_SplayTreeMap__SplayTree_MapMixin":2,"_SplayTreeSet__SplayTree_IterableMixin":1,"_SplayTreeSet__SplayTree_IterableMixin_SetMixin":1,"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":2,"__SetBase_Object_SetMixin":1,"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":1,"Codec":2,"Converter":2,"Comparable":1,"Iterator":1,"Expando":1,"DefaultEquality":1,"_QueueList_Object_ListMixin":1,"UnmodifiableSetMixin":1,"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":1,"_DelegatingIterableBase":1,"ParentStatement":1}'));
  var string$ = {
    x0a_See_: "\n\nSee also https://sass-lang.com/documentation/cli/migrator",
    x20must_: " must not be greater than the number of characters in the file, ",
    x24selec: "$selectors: At least one selector must be passed.",
    x24separ: '$separator: Must be "space", "comma", "slash", or "auto".',
    x2c_depe: ", depending on the context in which it's loaded.",
    Cannotff: "Cannot extract a file path from a URI with a fragment component",
    Cannotfq: "Cannot extract a file path from a URI with a query component",
    Cannotn: "Cannot extract a non-Windows file path from a file URI with an authority",
    Could_: 'Could not find an option with short name "-',
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Sass_v: "Sass variables aren't allowed in plain CSS.",
    Silent: "Silent comments aren't allowed in plain CSS.",
    The_gi: "The given LineScannerState was not returned by this LineScanner.",
    The_mi: "The migrator has found multiple possible migrations for ",
    leadin: "leadingCombinators and components may not both be empty."
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_String: findType("@<String>"),
      ArgParser: findType("ArgParser"),
      Argument: findType("Argument"),
      ArgumentDeclaration: findType("ArgumentDeclaration"),
      BidirectionalMap_of_FunctionExpression_and_MemberDeclaration_FunctionRule: findType("BidirectionalMap<FunctionExpression,MemberDeclaration<FunctionRule>>"),
      BidirectionalMap_of_IncludeRule_and_MemberDeclaration_MixinRule: findType("BidirectionalMap<IncludeRule,MemberDeclaration<MixinRule>>"),
      BidirectionalMap_of_MemberDeclaration_VariableDeclaration_and_MemberDeclaration_SassDeclaration: findType("BidirectionalMap<MemberDeclaration<VariableDeclaration>,MemberDeclaration<SassDeclaration>>"),
      BidirectionalMap_of_VariableExpression_and_MemberDeclaration_SassDeclaration: findType("BidirectionalMap<VariableExpression,MemberDeclaration<SassDeclaration>>"),
      BinaryOperationExpression: findType("BinaryOperationExpression"),
      BuiltInCallable: findType("BuiltInCallable"),
      BuiltInSource: findType("BuiltInSource"),
      Combinator: findType("Combinator"),
      Command_Map_Uri_String: findType("Command<Map<Uri,String>>"),
      Comparable_dynamic: findType("Comparable<@>"),
      Comparable_nullable_Object: findType("Comparable<Object?>"),
      ComplexSelector: findType("ComplexSelector"),
      ComplexSelectorComponent: findType("ComplexSelectorComponent"),
      ConfiguredVariable: findType("ConfiguredVariable"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConstantStringMap_String_String: findType("ConstantStringMap<String,String>"),
      ConstantStringMap_String_num: findType("ConstantStringMap<String,num>"),
      Directory: findType("Directory0"),
      DynamicImport: findType("DynamicImport"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      Exception: findType("Exception"),
      Expression: findType("Expression"),
      FileSpan: findType("FileSpan"),
      FileSystemEntity: findType("FileSystemEntity"),
      FormatException: findType("FormatException"),
      ForwardType: findType("ForwardType"),
      Frame: findType("Frame"),
      Function: findType("Function"),
      FunctionExpression: findType("FunctionExpression"),
      FunctionRule: findType("FunctionRule"),
      Future_dynamic: findType("Future<@>"),
      GeneralConstantMap_int_Null: findType("GeneralConstantMap<int,Null>"),
      IfClause: findType("IfClause"),
      Import: findType("Import"),
      ImportSource: findType("ImportSource"),
      ImporterResult: findType("ImporterResult"),
      IncludeRule: findType("IncludeRule"),
      InternalStyle: findType("InternalStyle"),
      Interpolation: findType("Interpolation"),
      InterpolationBuffer: findType("InterpolationBuffer"),
      Iterable_ComplexSelectorComponent: findType("Iterable<ComplexSelectorComponent>"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_Argument: findType("JSArray<Argument>"),
      JSArray_AstNode: findType("JSArray<AstNode>"),
      JSArray_BinaryOperator: findType("JSArray<BinaryOperator>"),
      JSArray_BuiltInCallable: findType("JSArray<BuiltInCallable>"),
      JSArray_Combinator: findType("JSArray<Combinator>"),
      JSArray_Command_dynamic: findType("JSArray<Command<@>>"),
      JSArray_ComplexSelector: findType("JSArray<ComplexSelector>"),
      JSArray_ComplexSelectorComponent: findType("JSArray<ComplexSelectorComponent>"),
      JSArray_ConfiguredVariable: findType("JSArray<ConfiguredVariable>"),
      JSArray_Expression: findType("JSArray<Expression>"),
      JSArray_FileSystemEntity: findType("JSArray<FileSystemEntity>"),
      JSArray_FilesystemImporter: findType("JSArray<FilesystemImporter>"),
      JSArray_ForwardRule: findType("JSArray<ForwardRule>"),
      JSArray_Frame: findType("JSArray<Frame>"),
      JSArray_IfClause: findType("JSArray<IfClause>"),
      JSArray_Import: findType("JSArray<Import>"),
      JSArray_Importer: findType("JSArray<Importer>"),
      JSArray_Iterable_ComplexSelectorComponent: findType("JSArray<Iterable<ComplexSelectorComponent>>"),
      JSArray_List_ComplexSelectorComponent: findType("JSArray<List<ComplexSelectorComponent>>"),
      JSArray_List_Iterable_ComplexSelectorComponent: findType("JSArray<List<Iterable<ComplexSelectorComponent>>>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_Patch: findType("JSArray<Patch>"),
      JSArray_Range: findType("JSArray<Range>"),
      JSArray_SassList: findType("JSArray<SassList>"),
      JSArray_SequenceNode: findType("JSArray<SequenceNode>"),
      JSArray_Set_ImportSource: findType("JSArray<Set<ImportSource>>"),
      JSArray_SimpleSelector: findType("JSArray<SimpleSelector>"),
      JSArray_Statement: findType("JSArray<Statement>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Tuple2_Expression_Expression: findType("JSArray<Tuple2<Expression,Expression>>"),
      JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value: findType("JSArray<Tuple2<ArgumentDeclaration,Value(List<Value>)>>"),
      JSArray_Tuple3_of_Uri_and_Uri_and_Map_of_String_and_Set_MemberDeclaration_SassDeclaration: findType("JSArray<Tuple3<Uri,Uri,Map<String,Set<MemberDeclaration<SassDeclaration>>>>>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray_UseRule: findType("JSArray<UseRule>"),
      JSArray_Value: findType("JSArray<Value>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray__OutputComponent: findType("JSArray<_OutputComponent>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      JsSystemError: findType("JsSystemError"),
      List_Command_dynamic: findType("List<Command<@>>"),
      List_ComplexSelectorComponent: findType("List<ComplexSelectorComponent>"),
      List_List_ComplexSelectorComponent: findType("List<List<ComplexSelectorComponent>>"),
      List_String: findType("List<String>"),
      List_Value: findType("List<Value>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      LiteralNode: findType("LiteralNode"),
      MapEntry_of_int_and_Set_ImportSource: findType("MapEntry<int,Set<ImportSource>>"),
      Map_Uri_String: findType("Map<Uri,String>"),
      Map_of_MemberDeclaration_SassDeclaration_and_ReferenceSource: findType("Map<MemberDeclaration<SassDeclaration>,ReferenceSource>"),
      Map_of_String_and_Set_MemberDeclaration_SassDeclaration: findType("Map<String,Set<MemberDeclaration<SassDeclaration>>>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MemberDeclaration_FunctionRule: findType("MemberDeclaration<FunctionRule>"),
      MemberDeclaration_MixinRule: findType("MemberDeclaration<MixinRule>"),
      MemberDeclaration_SassDeclaration: findType("MemberDeclaration<SassDeclaration>"),
      MemberDeclaration_VariableDeclaration: findType("MemberDeclaration<VariableDeclaration>"),
      MigrationException: findType("MigrationException"),
      MixinRule: findType("MixinRule"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      Option: findType("Option"),
      Patch: findType("Patch"),
      Range: findType("Range"),
      RangeError: findType("RangeError"),
      Record: findType("Record"),
      ReferenceSource: findType("ReferenceSource"),
      RegExp: findType("RegExp"),
      RegExpMatch: findType("RegExpMatch"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      SassArgumentList: findType("SassArgumentList"),
      SassDeclaration: findType("SassDeclaration"),
      SassReference: findType("SassReference"),
      Scope: findType("Scope"),
      SelectorList: findType("SelectorList"),
      SequenceNode: findType("SequenceNode"),
      SetEquality_dynamic: findType("SetEquality<@>"),
      Set_FileSpan: findType("Set<FileSpan>"),
      Set_FunctionExpression: findType("Set<FunctionExpression>"),
      Set_ImportSource: findType("Set<ImportSource>"),
      Set_IncludeRule: findType("Set<IncludeRule>"),
      Set_MemberDeclaration_SassDeclaration: findType("Set<MemberDeclaration<SassDeclaration>>"),
      Set_MemberDeclaration_VariableDeclaration: findType("Set<MemberDeclaration<VariableDeclaration>>"),
      Set_ReferenceSource: findType("Set<ReferenceSource>"),
      Set_Uri: findType("Set<Uri>"),
      Set_UseRule: findType("Set<UseRule>"),
      Set_VariableExpression: findType("Set<VariableExpression>"),
      SimpleSelector: findType("SimpleSelector"),
      SourceLocation: findType("SourceLocation"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanFormatException: findType("SourceSpanFormatException"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      SpanColorFormat: findType("SpanColorFormat"),
      StackTrace: findType("StackTrace"),
      Statement: findType("Statement"),
      StaticImport: findType("StaticImport"),
      String: findType("String"),
      String_Function_UseRule: findType("String(UseRule)"),
      Symbol: findType("Symbol0"),
      Timer: findType("Timer"),
      Tuple2_Expression_Expression: findType("Tuple2<Expression,Expression>"),
      Tuple2_Importer_Stylesheet: findType("Tuple2<Importer,Stylesheet>"),
      Tuple2_PseudoSelector_int: findType("Tuple2<PseudoSelector,int>"),
      Tuple2_Uri_Importer: findType("Tuple2<Uri,Importer>"),
      Tuple2_Uri_bool: findType("Tuple2<Uri,bool>"),
      Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value: findType("Tuple2<ArgumentDeclaration,Value(List<Value>)>"),
      Tuple2_of_Set_String_and_Set_String: findType("Tuple2<Set<String>,Set<String>>"),
      Tuple3_Importer_Uri_Uri: findType("Tuple3<Importer,Uri,Uri>"),
      Tuple3_of_Uri_and_Uri_and_Map_of_String_and_Set_MemberDeclaration_SassDeclaration: findType("Tuple3<Uri,Uri,Map<String,Set<MemberDeclaration<SassDeclaration>>>>"),
      Tuple3_of_Uri_and_nullable_String_and_nullable_String: findType("Tuple3<Uri,String?,String?>"),
      Tuple4_of_Uri_and_bool_and_Importer_and_nullable_Uri: findType("Tuple4<Uri,bool,Importer,Uri?>"),
      Type: findType("Type"),
      TypeError: findType("TypeError"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableBidirectionalMapView_of_FunctionExpression_and_MemberDeclaration_FunctionRule: findType("UnmodifiableBidirectionalMapView<FunctionExpression,MemberDeclaration<FunctionRule>>"),
      UnmodifiableBidirectionalMapView_of_IncludeRule_and_MemberDeclaration_MixinRule: findType("UnmodifiableBidirectionalMapView<IncludeRule,MemberDeclaration<MixinRule>>"),
      UnmodifiableBidirectionalMapView_of_MemberDeclaration_VariableDeclaration_and_MemberDeclaration_SassDeclaration: findType("UnmodifiableBidirectionalMapView<MemberDeclaration<VariableDeclaration>,MemberDeclaration<SassDeclaration>>"),
      UnmodifiableBidirectionalMapView_of_VariableExpression_and_MemberDeclaration_SassDeclaration: findType("UnmodifiableBidirectionalMapView<VariableExpression,MemberDeclaration<SassDeclaration>>"),
      UnmodifiableListView_Patch: findType("UnmodifiableListView<Patch>"),
      UnmodifiableListView_String: findType("UnmodifiableListView<String>"),
      UnmodifiableListView_UseRule: findType("UnmodifiableListView<UseRule>"),
      UnmodifiableMapView_SassReference_ReferenceSource: findType("UnmodifiableMapView<SassReference,ReferenceSource>"),
      UnmodifiableMapView_String_ArgParser: findType("UnmodifiableMapView<String,ArgParser>"),
      UnmodifiableMapView_String_Option: findType("UnmodifiableMapView<String,Option>"),
      UnmodifiableMapView_Uri_FileSpan: findType("UnmodifiableMapView<Uri,FileSpan>"),
      UnmodifiableMapView_of_MemberDeclaration_SassDeclaration_and_Set_Uri: findType("UnmodifiableMapView<MemberDeclaration<SassDeclaration>,Set<Uri>>"),
      UnmodifiableMapView_of_MemberDeclaration_VariableDeclaration_and_MemberDeclaration_SassDeclaration: findType("UnmodifiableMapView<MemberDeclaration<VariableDeclaration>,MemberDeclaration<SassDeclaration>>"),
      UnmodifiableMapView_of_Uri_and_nullable_ForwardRule: findType("UnmodifiableMapView<Uri,ForwardRule?>"),
      UnmodifiableSetView_MemberDeclaration_SassDeclaration: findType("UnmodifiableSetView<MemberDeclaration<SassDeclaration>>"),
      UnmodifiableSetView_String: findType("UnmodifiableSetView<String>"),
      UnmodifiableSetView_Uri: findType("UnmodifiableSetView<Uri>"),
      UnreferencableType: findType("UnreferencableType"),
      Uri: findType("Uri"),
      UseRule: findType("UseRule"),
      Value: findType("Value"),
      VariableDeclaration: findType("VariableDeclaration"),
      VariableExpression: findType("VariableExpression"),
      WhereIterable_List_Iterable_ComplexSelectorComponent: findType("WhereIterable<List<Iterable<ComplexSelectorComponent>>>"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereTypeIterable_PseudoSelector: findType("WhereTypeIterable<PseudoSelector>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      WhereTypeIterator_DynamicImport: findType("WhereTypeIterator<DynamicImport>"),
      WhereTypeIterator_FunctionExpression: findType("WhereTypeIterator<FunctionExpression>"),
      WhereTypeIterator_UseRule: findType("WhereTypeIterator<UseRule>"),
      _AsyncCompleter_FileStat: findType("_AsyncCompleter<FileStat>"),
      _Future_FileStat: findType("_Future<FileStat>"),
      _Future_dynamic: findType("_Future<@>"),
      _Highlight: findType("_Highlight"),
      _ListTreeNode: findType("_ListTreeNode"),
      _MapEntry: findType("_MapEntry"),
      _UnmodifiableSet_int: findType("_UnmodifiableSet<int>"),
      bool: findType("bool"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_ForwardRule: findType("ForwardRule?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_ListExpression: findType("ListExpression?"),
      nullable_Object: findType("Object?"),
      nullable_String: findType("String?"),
      nullable_Stylesheet: findType("Stylesheet?"),
      nullable_Tuple3_Importer_Uri_Uri: findType("Tuple3<Importer,Uri,Uri>?"),
      nullable_Uri: findType("Uri?"),
      nullable__Highlight: findType("_Highlight?"),
      nullable_int: findType("int?"),
      num: findType("num"),
      void: findType("~")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeUint32List_methods = A.NativeUint32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.AttributeOperator_8aB = new A.AttributeOperator("*=", "substring");
    B.AttributeOperator_BGd = new A.AttributeOperator("$=", "suffix");
    B.AttributeOperator_ES6 = new A.AttributeOperator("=", "equal");
    B.AttributeOperator_eot = new A.AttributeOperator("^=", "prefix");
    B.AttributeOperator_ivT = new A.AttributeOperator("|=", "dash");
    B.AttributeOperator_r60 = new A.AttributeOperator("~=", "include");
    B.BinaryOperator_6pl = new A.BinaryOperator("times", "*", 6, "times");
    B.BinaryOperator_KlB = new A.BinaryOperator("minus", "-", 5, "minus");
    B.BinaryOperator_PHH = new A.BinaryOperator("modulo", "%", 6, "modulo");
    B.BinaryOperator_Vr9 = new A.BinaryOperator("not equals", "!=", 3, "notEquals");
    B.BinaryOperator_Wma = new A.BinaryOperator("greater than or equals", ">=", 4, "greaterThanOrEquals");
    B.BinaryOperator_and_and_2_and = new A.BinaryOperator("and", "and", 2, "and");
    B.BinaryOperator_apg = new A.BinaryOperator("less than", "<", 4, "lessThan");
    B.BinaryOperator_axY = new A.BinaryOperator("single equals", "=", 0, "singleEquals");
    B.BinaryOperator_cw1 = new A.BinaryOperator("greater than", ">", 4, "greaterThan");
    B.BinaryOperator_nZh = new A.BinaryOperator("equals", "==", 3, "equals");
    B.BinaryOperator_oqF = new A.BinaryOperator("less than or equals", "<=", 4, "lessThanOrEquals");
    B.BinaryOperator_or_or_1_or = new A.BinaryOperator("or", "or", 1, "or");
    B.BinaryOperator_qbf = new A.BinaryOperator("plus", "+", 5, "plus");
    B.BinaryOperator_qpm = new A.BinaryOperator("divided by", "/", 6, "dividedBy");
    B.CONSTANT = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.C_AsciiGlyphSet = new A.AsciiGlyphSet();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_DefaultEquality = new A.DefaultEquality();
    B.C_Duration = new A.Duration();
    B.C_EmptyIterator = new A.EmptyIterator();
    B.C_ForwardType1 = new A.ForwardType();
    B.C_ForwardType0 = new A.ForwardType();
    B.C_ForwardType = new A.ForwardType();
    B.C_IterableEquality = new A.IterableEquality(A.findType("IterableEquality<@>"));
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_ListEquality0 = new A.ListEquality(A.findType("ListEquality<Object>"));
    B.C_ListEquality = new A.ListEquality(A.findType("ListEquality<Object?>"));
    B.C_MapEquality = new A.MapEquality(A.findType("MapEquality<Object,Object>"));
    B.C_NodeFileSystem = new A.NodeFileSystem();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_StderrLogger = new A.StderrLogger();
    B.C_UnicodeGlyphSet = new A.UnicodeGlyphSet();
    B.C_UnreferencableType = new A.UnreferencableType();
    B.C_UnreferencableType0 = new A.UnreferencableType();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__IsInvisibleVisitor = new A._IsInvisibleVisitor();
    B.C__IsUselessVisitor = new A._IsUselessVisitor();
    B.C__JSRandom = new A._JSRandom();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.C__SassNull = new A._SassNull();
    B.Combinator_4QF = new A.Combinator("+", "nextSibling");
    B.Combinator_Cht = new A.Combinator(">", "child");
    B.Combinator_Htt = new A.Combinator("~", "followingSibling");
    B.FileSystemEntityType_0 = new A.FileSystemEntityType(0);
    B.FileSystemEntityType_1 = new A.FileSystemEntityType(1);
    B.FileSystemEntityType_2 = new A.FileSystemEntityType(2);
    B.FileSystemEntityType_5 = new A.FileSystemEntityType(5);
    B.LineFeed_lf = new A.LineFeed("lf");
    B.ListSeparator_EVt = new A.ListSeparator("space", " ", "space");
    B.ListSeparator_rXA = new A.ListSeparator("comma", ",", "comma");
    B.ListSeparator_undecided_null_undecided = new A.ListSeparator("undecided", null, "undecided");
    B.ListSeparator_zg9 = new A.ListSeparator("slash", "/", "slash");
    B.List_2Vk = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.List_CVk = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_IoD = A._setArrayType(makeConstList([B.Combinator_4QF]), type$.JSArray_Combinator);
    B.List_JYB = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.List_JsO = A._setArrayType(makeConstList(["]", "(", ")"]), type$.JSArray_String);
    B.List_Kw1 = A._setArrayType(makeConstList([B.Combinator_Htt]), type$.JSArray_Combinator);
    B.List_NAl = A._setArrayType(makeConstList(["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"]), type$.JSArray_String);
    B.List_Ucj = A._setArrayType(makeConstList(["file", "directory", "link", "unixDomainSock", "pipe", "notFound"]), type$.JSArray_String);
    B.List_empty6 = A._setArrayType(makeConstList([]), type$.JSArray_Argument);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_Combinator);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_ComplexSelector);
    B.List_empty2 = A._setArrayType(makeConstList([]), type$.JSArray_ComplexSelectorComponent);
    B.List_empty4 = A._setArrayType(makeConstList([]), type$.JSArray_ConfiguredVariable);
    B.List_empty5 = A._setArrayType(makeConstList([]), type$.JSArray_Expression);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty3 = A._setArrayType(makeConstList([]), type$.JSArray_Value);
    B.List_empty7 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_gRj = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_nxB = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qNA = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qg40 = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qg4 = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_5qc = A._setArrayType(makeConstList(["adjust-color", "scale-color", "change-color", "map-get", "map-merge", "map-remove", "map-keys", "map-values", "map-has-key", "selector-nest", "selector-append", "selector-replace", "selector-unify", "selector-parse", "unitless", "comparable", "list-separator", "str-length", "str-insert", "str-index", "str-slice"]), type$.JSArray_String);
    B.Map_5qkWM = new A.ConstantStringMap(21, {"adjust-color": "adjust", "scale-color": "scale", "change-color": "change", "map-get": "get", "map-merge": "merge", "map-remove": "remove", "map-keys": "keys", "map-values": "values", "map-has-key": "has-key", "selector-nest": "nest", "selector-append": "append", "selector-replace": "replace", "selector-unify": "unify", "selector-parse": "parse", unitless: "is-unitless", comparable: "compatible", "list-separator": "separator", "str-length": "length", "str-insert": "insert", "str-index": "index", "str-slice": "slice"}, B.List_5qc, type$.ConstantStringMap_String_String);
    B.List_K2O = A._setArrayType(makeConstList(["in", "cm", "pc", "mm", "q", "pt", "px", "deg", "grad", "rad", "turn", "s", "ms", "Hz", "kHz", "dpi", "dpcm", "dppx"]), type$.JSArray_String);
    B.List_aha = A._setArrayType(makeConstList(["in", "cm", "pc", "mm", "q", "pt", "px"]), type$.JSArray_String);
    B.Map_ahsJO = new A.ConstantStringMap(7, {in: 1, cm: 0.39370078740157477, pc: 0.16666666666666666, mm: 0.03937007874015748, q: 0.00984251968503937, pt: 0.013888888888888888, px: 0.010416666666666666}, B.List_aha, type$.ConstantStringMap_String_num);
    B.Map_ahM6L = new A.ConstantStringMap(7, {in: 2.54, cm: 1, pc: 0.42333333333333334, mm: 0.1, q: 0.025, pt: 0.035277777777777776, px: 0.026458333333333334}, B.List_aha, type$.ConstantStringMap_String_num);
    B.Map_ahNsa = new A.ConstantStringMap(7, {in: 6, cm: 2.3622047244094486, pc: 1, mm: 0.2362204724409449, q: 0.05905511811023623, pt: 0.08333333333333333, px: 0.0625}, B.List_aha, type$.ConstantStringMap_String_num);
    B.Map_ahPSt = new A.ConstantStringMap(7, {in: 25.4, cm: 10, pc: 4.233333333333333, mm: 1, q: 0.25, pt: 0.35277777777777775, px: 0.26458333333333334}, B.List_aha, type$.ConstantStringMap_String_num);
    B.Map_ahgya = new A.ConstantStringMap(7, {in: 101.6, cm: 40, pc: 16.933333333333334, mm: 4, q: 1, pt: 1.411111111111111, px: 1.0583333333333333}, B.List_aha, type$.ConstantStringMap_String_num);
    B.Map_ahGvh = new A.ConstantStringMap(7, {in: 72, cm: 28.346456692913385, pc: 12, mm: 2.834645669291339, q: 0.7086614173228347, pt: 1, px: 0.75}, B.List_aha, type$.ConstantStringMap_String_num);
    B.Map_ahkuc = new A.ConstantStringMap(7, {in: 96, cm: 37.79527559055118, pc: 16, mm: 3.7795275590551185, q: 0.9448818897637796, pt: 1.3333333333333333, px: 1}, B.List_aha, type$.ConstantStringMap_String_num);
    B.List_deg_grad_rad_turn = A._setArrayType(makeConstList(["deg", "grad", "rad", "turn"]), type$.JSArray_String);
    B.Map_EGyvr = new A.ConstantStringMap(4, {deg: 1, grad: 0.9, rad: 57.29577951308232, turn: 360}, B.List_deg_grad_rad_turn, type$.ConstantStringMap_String_num);
    B.Map_EGfqB = new A.ConstantStringMap(4, {deg: 1.1111111111111112, grad: 1, rad: 63.66197723675813, turn: 400}, B.List_deg_grad_rad_turn, type$.ConstantStringMap_String_num);
    B.Map_EGswR = new A.ConstantStringMap(4, {deg: 0.017453292519943295, grad: 0.015707963267948967, rad: 1, turn: 6.283185307179586}, B.List_deg_grad_rad_turn, type$.ConstantStringMap_String_num);
    B.Map_EGY2F = new A.ConstantStringMap(4, {deg: 0.002777777777777778, grad: 0.0025, rad: 0.15915494309189535, turn: 1}, B.List_deg_grad_rad_turn, type$.ConstantStringMap_String_num);
    B.List_s_ms = A._setArrayType(makeConstList(["s", "ms"]), type$.JSArray_String);
    B.Map_ma2bi = new A.ConstantStringMap(2, {s: 1, ms: 0.001}, B.List_s_ms, type$.ConstantStringMap_String_num);
    B.Map_maDht = new A.ConstantStringMap(2, {s: 1000, ms: 1}, B.List_s_ms, type$.ConstantStringMap_String_num);
    B.List_Hz_kHz = A._setArrayType(makeConstList(["Hz", "kHz"]), type$.JSArray_String);
    B.Map_0IpUe = new A.ConstantStringMap(2, {Hz: 1, kHz: 1000}, B.List_Hz_kHz, type$.ConstantStringMap_String_num);
    B.Map_0IVs0 = new A.ConstantStringMap(2, {Hz: 0.001, kHz: 1}, B.List_Hz_kHz, type$.ConstantStringMap_String_num);
    B.List_dpi_dpcm_dppx = A._setArrayType(makeConstList(["dpi", "dpcm", "dppx"]), type$.JSArray_String);
    B.Map_H2OWd = new A.ConstantStringMap(3, {dpi: 1, dpcm: 2.54, dppx: 96}, B.List_dpi_dpcm_dppx, type$.ConstantStringMap_String_num);
    B.Map_H24em = new A.ConstantStringMap(3, {dpi: 0.39370078740157477, dpcm: 1, dppx: 37.79527559055118}, B.List_dpi_dpcm_dppx, type$.ConstantStringMap_String_num);
    B.Map_H25Om = new A.ConstantStringMap(3, {dpi: 0.010416666666666666, dpcm: 0.026458333333333334, dppx: 1}, B.List_dpi_dpcm_dppx, type$.ConstantStringMap_String_num);
    B.Map_K2BWj = new A.ConstantStringMap(18, {in: B.Map_ahsJO, cm: B.Map_ahM6L, pc: B.Map_ahNsa, mm: B.Map_ahPSt, q: B.Map_ahgya, pt: B.Map_ahGvh, px: B.Map_ahkuc, deg: B.Map_EGyvr, grad: B.Map_EGfqB, rad: B.Map_EGswR, turn: B.Map_EGY2F, s: B.Map_ma2bi, ms: B.Map_maDht, Hz: B.Map_0IpUe, kHz: B.Map_0IVs0, dpi: B.Map_H2OWd, dpcm: B.Map_H24em, dppx: B.Map_H25Om}, B.List_K2O, A.findType("ConstantStringMap<String,Map<String,num>>"));
    B.List_M5R = A._setArrayType(makeConstList(["adjust-hue", "lighten", "darken", "saturate", "desaturate", "opacify", "fade-in", "transparentize", "fade-out"]), type$.JSArray_String);
    B.Map_M5m3E = new A.ConstantStringMap(9, {"adjust-hue": "$hue: ", lighten: "$lightness: ", darken: "$lightness: -", saturate: "$saturation: ", desaturate: "$saturation: -", opacify: "$alpha: ", "fade-in": "$alpha: ", transparentize: "$alpha: -", "fade-out": "$alpha: -"}, B.List_M5R, type$.ConstantStringMap_String_String);
    B.List_U8g = A._setArrayType(makeConstList(["length", "angle", "time", "frequency", "pixel density"]), type$.JSArray_String);
    B.Map_U8AHF = new A.ConstantStringMap(5, {length: B.List_aha, angle: B.List_deg_grad_rad_turn, time: B.List_s_ms, frequency: B.List_Hz_kHz, "pixel density": B.List_dpi_dpcm_dppx}, B.List_U8g, A.findType("ConstantStringMap<String,List<String>>"));
    B.Map_empty = new A.ConstantStringMap(0, {}, B.List_empty, A.findType("ConstantStringMap<String,Expression>"));
    B.List_empty8 = A._setArrayType(makeConstList([]), A.findType("JSArray<Symbol0>"));
    B.Map_empty0 = new A.ConstantStringMap(0, {}, B.List_empty8, A.findType("ConstantStringMap<Symbol0,@>"));
    B.List_gkc = A._setArrayType(makeConstList(["red", "blue", "green", "mix", "hue", "saturation", "lightness", "adjust-hue", "lighten", "darken", "saturate", "desaturate", "grayscale", "complement", "invert", "alpha", "opacify", "fade-in", "transparentize", "fade-out", "adjust-color", "scale-color", "change-color", "ie-hex-str", "map-get", "map-merge", "map-remove", "map-keys", "map-values", "map-has-key", "selector-nest", "selector-append", "selector-replace", "selector-unify", "is-superselector", "simple-selectors", "selector-parse", "percentage", "round", "ceil", "floor", "abs", "min", "max", "random", "unit", "unitless", "comparable", "length", "nth", "set-nth", "join", "append", "zip", "index", "list-separator", "feature-exists", "variable-exists", "global-variable-exists", "function-exists", "mixin-exists", "inspect", "get-function", "type-of", "call", "content-exists", "keywords", "unquote", "quote", "str-length", "str-insert", "str-index", "str-slice", "to-upper-case", "to-lower-case", "unique-id"]), type$.JSArray_String);
    B.Map_gk3Sx = new A.ConstantStringMap(76, {red: "color", blue: "color", green: "color", mix: "color", hue: "color", saturation: "color", lightness: "color", "adjust-hue": "color", lighten: "color", darken: "color", saturate: "color", desaturate: "color", grayscale: "color", complement: "color", invert: "color", alpha: "color", opacify: "color", "fade-in": "color", transparentize: "color", "fade-out": "color", "adjust-color": "color", "scale-color": "color", "change-color": "color", "ie-hex-str": "color", "map-get": "map", "map-merge": "map", "map-remove": "map", "map-keys": "map", "map-values": "map", "map-has-key": "map", "selector-nest": "selector", "selector-append": "selector", "selector-replace": "selector", "selector-unify": "selector", "is-superselector": "selector", "simple-selectors": "selector", "selector-parse": "selector", percentage: "math", round: "math", ceil: "math", floor: "math", abs: "math", min: "math", max: "math", random: "math", unit: "math", unitless: "math", comparable: "math", length: "list", nth: "list", "set-nth": "list", join: "list", append: "list", zip: "list", index: "list", "list-separator": "list", "feature-exists": "meta", "variable-exists": "meta", "global-variable-exists": "meta", "function-exists": "meta", "mixin-exists": "meta", inspect: "meta", "get-function": "meta", "type-of": "meta", call: "meta", "content-exists": "meta", keywords: "meta", unquote: "string", quote: "string", "str-length": "string", "str-insert": "string", "str-index": "string", "str-slice": "string", "to-upper-case": "string", "to-lower-case": "string", "unique-id": "string"}, B.List_gkc, type$.ConstantStringMap_String_String);
    B.OptionType_nMZ = new A.OptionType("OptionType.flag");
    B.OptionType_qyr = new A.OptionType("OptionType.multiple");
    B.OutputStyle_0 = new A.OutputStyle("expanded");
    B.OutputStyle_1 = new A.OutputStyle("compressed");
    B.SassBoolean_false = new A.SassBoolean(false);
    B.SassBoolean_true = new A.SassBoolean(true);
    B.SassList_Sof = new A.SassList(B.List_empty3, B.ListSeparator_rXA, false);
    B.Map_empty1 = new A.ConstantStringMap(0, {}, B.List_empty3, A.findType("ConstantStringMap<Value,Value>"));
    B.SassMap_Map_empty = new A.SassMap(B.Map_empty1);
    B.SetEquality_DefaultEquality = new A.SetEquality(B.C_DefaultEquality, type$.SetEquality_dynamic);
    B.Map_2Vaha = new A.GeneralConstantMap([91, null, 46, null, 35, null, 37, null, 58, null, 38, null, 42, null, 124, null], type$.GeneralConstantMap_int_Null);
    B.Set_2Vk2 = new A._UnmodifiableSet(B.Map_2Vaha, type$._UnmodifiableSet_int);
    B.Map_2VMUw = new A.GeneralConstantMap([2, null, 4, null, 5, null, 8, null, 10, null, 20, null, 40, null, 50, null, 80, null, 100, null, 1000, null], type$.GeneralConstantMap_int_Null);
    B.Set_2Vk20 = new A._UnmodifiableSet(B.Map_2VMUw, type$._UnmodifiableSet_int);
    B.List_empty9 = A._setArrayType(makeConstList([]), A.findType("JSArray<ForwardType>"));
    B.Map_empty2 = new A.ConstantStringMap(0, {}, B.List_empty9, A.findType("ConstantStringMap<ForwardType,Null>"));
    B.Set_empty = new A._UnmodifiableSet(B.Map_empty2, A.findType("_UnmodifiableSet<ForwardType>"));
    B.Symbol__evaluationContext = new A.Symbol("_evaluationContext");
    B.Symbol__inImportRule = new A.Symbol("_inImportRule");
    B.Symbol_call = new A.Symbol("call");
    B.Syntax_CSS_css = new A.Syntax("CSS", "css");
    B.Syntax_SCSS_scss = new A.Syntax("SCSS", "scss");
    B.Syntax_Sass_sass = new A.Syntax("Sass", "sass");
    B.Type_Object_xQ6 = A.typeLiteral("Object");
    B.UnaryOperator_Ix1 = new A.UnaryOperator("divide", "/", "divide");
    B.UnaryOperator_TLI = new A.UnaryOperator("minus", "-", "minus");
    B.UnaryOperator_gg4 = new A.UnaryOperator("plus", "+", "plus");
    B.UnaryOperator_not_not_not = new A.UnaryOperator("not", "not", "not");
    B.UnorderedIterableEquality_DefaultEquality = new A.UnorderedIterableEquality(B.C_DefaultEquality, A.findType("UnorderedIterableEquality<@>"));
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B._ColorFormatEnum_hslFunction = new A._ColorFormatEnum("hslFunction");
    B._ColorFormatEnum_rgbFunction = new A._ColorFormatEnum("rgbFunction");
    B._IsBogusVisitor_false = new A._IsBogusVisitor(false);
    B._IsBogusVisitor_true = new A._IsBogusVisitor(true);
    B._IterationMarker_null_2 = new A._IterationMarker(null, 2);
    B._PathDirection_8Gl = new A._PathDirection("at root");
    B._PathDirection_988 = new A._PathDirection("below root");
    B._PathDirection_FIw = new A._PathDirection("reaches root");
    B._PathDirection_ZGD = new A._PathDirection("above root");
    B._PathRelation_different = new A._PathRelation("different");
    B._PathRelation_equal = new A._PathRelation("equal");
    B._PathRelation_inconclusive = new A._PathRelation("inconclusive");
    B._PathRelation_within = new A._PathRelation("within");
    B._StringStackTrace_3uE = new A._StringStackTrace("");
    B._ZoneFunction_3bB = new A._ZoneFunction(B.C__RootZone, A.async___rootCreatePeriodicTimer$closure());
    B._ZoneFunction_7G2 = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterBinaryCallback$closure());
    B._ZoneFunction_Eeh = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterUnaryCallback$closure());
    B._ZoneFunction_NMc = new A._ZoneFunction(B.C__RootZone, A.async___rootHandleUncaughtError$closure());
    B._ZoneFunction__RootZone__rootCreateTimer = new A._ZoneFunction(B.C__RootZone, A.async___rootCreateTimer$closure());
    B._ZoneFunction__RootZone__rootErrorCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootErrorCallback$closure());
    B._ZoneFunction__RootZone__rootFork = new A._ZoneFunction(B.C__RootZone, A.async___rootFork$closure());
    B._ZoneFunction__RootZone__rootPrint = new A._ZoneFunction(B.C__RootZone, A.async___rootPrint$closure());
    B._ZoneFunction__RootZone__rootRegisterCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterCallback$closure());
    B._ZoneFunction__RootZone__rootRun = new A._ZoneFunction(B.C__RootZone, A.async___rootRun$closure());
    B._ZoneFunction__RootZone__rootRunBinary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunBinary$closure());
    B._ZoneFunction__RootZone__rootRunUnary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunUnary$closure());
    B._ZoneFunction__RootZone__rootScheduleMicrotask = new A._ZoneFunction(B.C__RootZone, A.async___rootScheduleMicrotask$closure());
    B._ZoneSpecification_ALf = new A._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.printToZone = null;
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $._fs = null;
    $._path = null;
    $._currentUriBase = null;
    $._current = null;
    $._subselectorPseudos = A.LinkedHashSet_LinkedHashSet$_literal(["is", "matches", "where", "any", "nth-child", "nth-last-child"], type$.String);
    $._rootishPseudoClasses = A.LinkedHashSet_LinkedHashSet$_literal(["root", "scope", "host", "host-context"], type$.String);
    $._features = A.LinkedHashSet_LinkedHashSet$_literal(["global-variable-shadowing", "extend-selector-pseudoclass", "units-level-3", "at-error", "custom-property"], type$.String);
    $._realCaseCache = function() {
      var t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    }();
    $._selectorPseudoClasses = A.LinkedHashSet_LinkedHashSet$_literal(["not", "is", "matches", "where", "current", "any", "has", "host", "host-context"], type$.String);
    $._selectorPseudoElements = A.LinkedHashSet_LinkedHashSet$_literal(["slotted"], type$.String);
    $._glyphs = B.C_UnicodeGlyphSet;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", () => new A.Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", () => new A.Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazyFinal($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", () => typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32");
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true));
    _lazyFinal($, "DateTime__parseFormat", "$get$DateTime__parseFormat", () => A.RegExp_RegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", true));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_xQ6));
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "Option__invalidChars", "$get$Option__invalidChars", () => A.RegExp_RegExp("[ \\t\\r\\n\"'\\\\/]", true));
    _lazyFinal($, "_quote", "$get$_quote0", () => A.RegExp_RegExp("[+*?{}|[\\]\\\\().^$-]", true));
    _lazyFinal($, "windows", "$get$windows", () => A.Context_Context($.$get$Style_windows()));
    _lazyFinal($, "url", "$get$url", () => A.Context_Context($.$get$Style_url()));
    _lazyFinal($, "context", "$get$context", () => new A.Context(type$.InternalStyle._as($.$get$Style_platform()), null));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("[^/]$", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true), A.RegExp_RegExp("[^/\\\\]$", true), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "colorsByName", "$get$colorsByName", () => {
      var _null = null;
      return A.LinkedHashMap_LinkedHashMap$_literal(["yellowgreen", A.SassColor$rgb(154, 205, 50, _null), "yellow", A.SassColor$rgb(255, 255, 0, _null), "whitesmoke", A.SassColor$rgb(245, 245, 245, _null), "white", A.SassColor$rgb(255, 255, 255, _null), "wheat", A.SassColor$rgb(245, 222, 179, _null), "violet", A.SassColor$rgb(238, 130, 238, _null), "turquoise", A.SassColor$rgb(64, 224, 208, _null), "transparent", A.SassColor$rgb(0, 0, 0, 0), "tomato", A.SassColor$rgb(255, 99, 71, _null), "thistle", A.SassColor$rgb(216, 191, 216, _null), "teal", A.SassColor$rgb(0, 128, 128, _null), "tan", A.SassColor$rgb(210, 180, 140, _null), "steelblue", A.SassColor$rgb(70, 130, 180, _null), "springgreen", A.SassColor$rgb(0, 255, 127, _null), "snow", A.SassColor$rgb(255, 250, 250, _null), "slategrey", A.SassColor$rgb(112, 128, 144, _null), "slategray", A.SassColor$rgb(112, 128, 144, _null), "slateblue", A.SassColor$rgb(106, 90, 205, _null), "skyblue", A.SassColor$rgb(135, 206, 235, _null), "silver", A.SassColor$rgb(192, 192, 192, _null), "sienna", A.SassColor$rgb(160, 82, 45, _null), "seashell", A.SassColor$rgb(255, 245, 238, _null), "seagreen", A.SassColor$rgb(46, 139, 87, _null), "sandybrown", A.SassColor$rgb(244, 164, 96, _null), "salmon", A.SassColor$rgb(250, 128, 114, _null), "saddlebrown", A.SassColor$rgb(139, 69, 19, _null), "royalblue", A.SassColor$rgb(65, 105, 225, _null), "rosybrown", A.SassColor$rgb(188, 143, 143, _null), "red", A.SassColor$rgb(255, 0, 0, _null), "rebeccapurple", A.SassColor$rgb(102, 51, 153, _null), "purple", A.SassColor$rgb(128, 0, 128, _null), "powderblue", A.SassColor$rgb(176, 224, 230, _null), "plum", A.SassColor$rgb(221, 160, 221, _null), "pink", A.SassColor$rgb(255, 192, 203, _null), "peru", A.SassColor$rgb(205, 133, 63, _null), "peachpuff", A.SassColor$rgb(255, 218, 185, _null), "papayawhip", A.SassColor$rgb(255, 239, 213, _null), "palevioletred", A.SassColor$rgb(219, 112, 147, _null), "paleturquoise", A.SassColor$rgb(175, 238, 238, _null), "palegreen", A.SassColor$rgb(152, 251, 152, _null), "palegoldenrod", A.SassColor$rgb(238, 232, 170, _null), "orchid", A.SassColor$rgb(218, 112, 214, _null), "orangered", A.SassColor$rgb(255, 69, 0, _null), "orange", A.SassColor$rgb(255, 165, 0, _null), "olivedrab", A.SassColor$rgb(107, 142, 35, _null), "olive", A.SassColor$rgb(128, 128, 0, _null), "oldlace", A.SassColor$rgb(253, 245, 230, _null), "navy", A.SassColor$rgb(0, 0, 128, _null), "navajowhite", A.SassColor$rgb(255, 222, 173, _null), "moccasin", A.SassColor$rgb(255, 228, 181, _null), "mistyrose", A.SassColor$rgb(255, 228, 225, _null), "mintcream", A.SassColor$rgb(245, 255, 250, _null), "midnightblue", A.SassColor$rgb(25, 25, 112, _null), "mediumvioletred", A.SassColor$rgb(199, 21, 133, _null), "mediumturquoise", A.SassColor$rgb(72, 209, 204, _null), "mediumspringgreen", A.SassColor$rgb(0, 250, 154, _null), "mediumslateblue", A.SassColor$rgb(123, 104, 238, _null), "mediumseagreen", A.SassColor$rgb(60, 179, 113, _null), "mediumpurple", A.SassColor$rgb(147, 112, 219, _null), "mediumorchid", A.SassColor$rgb(186, 85, 211, _null), "mediumblue", A.SassColor$rgb(0, 0, 205, _null), "mediumaquamarine", A.SassColor$rgb(102, 205, 170, _null), "maroon", A.SassColor$rgb(128, 0, 0, _null), "magenta", A.SassColor$rgb(255, 0, 255, _null), "linen", A.SassColor$rgb(250, 240, 230, _null), "limegreen", A.SassColor$rgb(50, 205, 50, _null), "lime", A.SassColor$rgb(0, 255, 0, _null), "lightyellow", A.SassColor$rgb(255, 255, 224, _null), "lightsteelblue", A.SassColor$rgb(176, 196, 222, _null), "lightslategrey", A.SassColor$rgb(119, 136, 153, _null), "lightslategray", A.SassColor$rgb(119, 136, 153, _null), "lightskyblue", A.SassColor$rgb(135, 206, 250, _null), "lightseagreen", A.SassColor$rgb(32, 178, 170, _null), "lightsalmon", A.SassColor$rgb(255, 160, 122, _null), "lightpink", A.SassColor$rgb(255, 182, 193, _null), "lightgrey", A.SassColor$rgb(211, 211, 211, _null), "lightgreen", A.SassColor$rgb(144, 238, 144, _null), "lightgray", A.SassColor$rgb(211, 211, 211, _null), "lightgoldenrodyellow", A.SassColor$rgb(250, 250, 210, _null), "lightcyan", A.SassColor$rgb(224, 255, 255, _null), "lightcoral", A.SassColor$rgb(240, 128, 128, _null), "lightblue", A.SassColor$rgb(173, 216, 230, _null), "lemonchiffon", A.SassColor$rgb(255, 250, 205, _null), "lawngreen", A.SassColor$rgb(124, 252, 0, _null), "lavenderblush", A.SassColor$rgb(255, 240, 245, _null), "lavender", A.SassColor$rgb(230, 230, 250, _null), "khaki", A.SassColor$rgb(240, 230, 140, _null), "ivory", A.SassColor$rgb(255, 255, 240, _null), "indigo", A.SassColor$rgb(75, 0, 130, _null), "indianred", A.SassColor$rgb(205, 92, 92, _null), "hotpink", A.SassColor$rgb(255, 105, 180, _null), "honeydew", A.SassColor$rgb(240, 255, 240, _null), "grey", A.SassColor$rgb(128, 128, 128, _null), "greenyellow", A.SassColor$rgb(173, 255, 47, _null), "green", A.SassColor$rgb(0, 128, 0, _null), "gray", A.SassColor$rgb(128, 128, 128, _null), "goldenrod", A.SassColor$rgb(218, 165, 32, _null), "gold", A.SassColor$rgb(255, 215, 0, _null), "ghostwhite", A.SassColor$rgb(248, 248, 255, _null), "gainsboro", A.SassColor$rgb(220, 220, 220, _null), "fuchsia", A.SassColor$rgb(255, 0, 255, _null), "forestgreen", A.SassColor$rgb(34, 139, 34, _null), "floralwhite", A.SassColor$rgb(255, 250, 240, _null), "firebrick", A.SassColor$rgb(178, 34, 34, _null), "dodgerblue", A.SassColor$rgb(30, 144, 255, _null), "dimgrey", A.SassColor$rgb(105, 105, 105, _null), "dimgray", A.SassColor$rgb(105, 105, 105, _null), "deepskyblue", A.SassColor$rgb(0, 191, 255, _null), "deeppink", A.SassColor$rgb(255, 20, 147, _null), "darkviolet", A.SassColor$rgb(148, 0, 211, _null), "darkturquoise", A.SassColor$rgb(0, 206, 209, _null), "darkslategrey", A.SassColor$rgb(47, 79, 79, _null), "darkslategray", A.SassColor$rgb(47, 79, 79, _null), "darkslateblue", A.SassColor$rgb(72, 61, 139, _null), "darkseagreen", A.SassColor$rgb(143, 188, 143, _null), "darksalmon", A.SassColor$rgb(233, 150, 122, _null), "darkred", A.SassColor$rgb(139, 0, 0, _null), "darkorchid", A.SassColor$rgb(153, 50, 204, _null), "darkorange", A.SassColor$rgb(255, 140, 0, _null), "darkolivegreen", A.SassColor$rgb(85, 107, 47, _null), "darkmagenta", A.SassColor$rgb(139, 0, 139, _null), "darkkhaki", A.SassColor$rgb(189, 183, 107, _null), "darkgrey", A.SassColor$rgb(169, 169, 169, _null), "darkgreen", A.SassColor$rgb(0, 100, 0, _null), "darkgray", A.SassColor$rgb(169, 169, 169, _null), "darkgoldenrod", A.SassColor$rgb(184, 134, 11, _null), "darkcyan", A.SassColor$rgb(0, 139, 139, _null), "darkblue", A.SassColor$rgb(0, 0, 139, _null), "cyan", A.SassColor$rgb(0, 255, 255, _null), "crimson", A.SassColor$rgb(220, 20, 60, _null), "cornsilk", A.SassColor$rgb(255, 248, 220, _null), "cornflowerblue", A.SassColor$rgb(100, 149, 237, _null), "coral", A.SassColor$rgb(255, 127, 80, _null), "chocolate", A.SassColor$rgb(210, 105, 30, _null), "chartreuse", A.SassColor$rgb(127, 255, 0, _null), "cadetblue", A.SassColor$rgb(95, 158, 160, _null), "burlywood", A.SassColor$rgb(222, 184, 135, _null), "brown", A.SassColor$rgb(165, 42, 42, _null), "blueviolet", A.SassColor$rgb(138, 43, 226, _null), "blue", A.SassColor$rgb(0, 0, 255, _null), "blanchedalmond", A.SassColor$rgb(255, 235, 205, _null), "black", A.SassColor$rgb(0, 0, 0, _null), "bisque", A.SassColor$rgb(255, 228, 196, _null), "beige", A.SassColor$rgb(245, 245, 220, _null), "azure", A.SassColor$rgb(240, 255, 255, _null), "aquamarine", A.SassColor$rgb(127, 255, 212, _null), "aqua", A.SassColor$rgb(0, 255, 255, _null), "antiquewhite", A.SassColor$rgb(250, 235, 215, _null), "aliceblue", A.SassColor$rgb(240, 248, 255, _null)], type$.String, A.findType("SassColor"));
    });
    _lazyFinal($, "namesByColor", "$get$namesByColor", () => {
      var t2, t3,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(A.findType("SassColor"), type$.String);
      for (t2 = $.$get$colorsByName(), t2 = t2.get$entries(t2), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current();
        t1.$indexSet(0, t3.get$value(t3), t3.get$key());
      }
      return t1;
    });
    _lazyFinal($, "globalFunctions", "$get$globalFunctions", () => {
      var t1 = type$.BuiltInCallable,
        t2 = A.List_List$of($.$get$global(), true, t1);
      B.JSArray_methods.addAll$1(t2, $.$get$global0());
      B.JSArray_methods.addAll$1(t2, $.$get$global1());
      B.JSArray_methods.addAll$1(t2, $.$get$global2());
      B.JSArray_methods.addAll$1(t2, $.$get$global3());
      B.JSArray_methods.addAll$1(t2, $.$get$global4());
      B.JSArray_methods.addAll$1(t2, $.$get$global5());
      t2.push(A.BuiltInCallable$function("if", "$condition, $if-true, $if-false", new A.globalFunctions_closure(), null));
      return A.UnmodifiableListView$(t2, t1);
    });
    _lazyFinal($, "_microsoftFilterStart", "$get$_microsoftFilterStart", () => A.RegExp_RegExp("^[a-zA-Z]+\\s*=", true));
    _lazyFinal($, "global", "$get$global", () => {
      var _s27_ = "$red, $green, $blue, $alpha",
        _s19_ = "$red, $green, $blue",
        _s37_ = "$hue, $saturation, $lightness, $alpha",
        _s29_ = "$hue, $saturation, $lightness",
        _s17_ = "$hue, $saturation",
        _s15_ = "$color, $amount",
        t1 = type$.String,
        t2 = A.findType("Value(List<Value>)");
      return A.UnmodifiableListView$(A._setArrayType([$.$get$_red(), $.$get$_green(), $.$get$_blue(), $.$get$_mix(), A.BuiltInCallable$overloadedFunction("rgb", A.LinkedHashMap_LinkedHashMap$_literal([_s27_, new A.global_closure3(), _s19_, new A.global_closure4(), "$color, $alpha", new A.global_closure5(), "$channels", new A.global_closure6()], t1, t2)), A.BuiltInCallable$overloadedFunction("rgba", A.LinkedHashMap_LinkedHashMap$_literal([_s27_, new A.global_closure7(), _s19_, new A.global_closure8(), "$color, $alpha", new A.global_closure9(), "$channels", new A.global_closure10()], t1, t2)), A._function5("invert", "$color, $weight: 100%", new A.global_closure11()), $.$get$_hue(), $.$get$_saturation(), $.$get$_lightness(), $.$get$_complement(), A.BuiltInCallable$overloadedFunction("hsl", A.LinkedHashMap_LinkedHashMap$_literal([_s37_, new A.global_closure12(), _s29_, new A.global_closure13(), _s17_, new A.global_closure14(), "$channels", new A.global_closure15()], t1, t2)), A.BuiltInCallable$overloadedFunction("hsla", A.LinkedHashMap_LinkedHashMap$_literal([_s37_, new A.global_closure16(), _s29_, new A.global_closure17(), _s17_, new A.global_closure18(), "$channels", new A.global_closure19()], t1, t2)), A._function5("grayscale", "$color", new A.global_closure20()), A._function5("adjust-hue", "$color, $degrees", new A.global_closure21()), A._function5("lighten", _s15_, new A.global_closure22()), A._function5("darken", _s15_, new A.global_closure23()), A.BuiltInCallable$overloadedFunction("saturate", A.LinkedHashMap_LinkedHashMap$_literal(["$amount", new A.global_closure24(), "$color, $amount", new A.global_closure25()], t1, t2)), A._function5("desaturate", _s15_, new A.global_closure26()), A._function5("opacify", _s15_, A.color___opacify$closure()), A._function5("fade-in", _s15_, A.color___opacify$closure()), A._function5("transparentize", _s15_, A.color___transparentize$closure()), A._function5("fade-out", _s15_, A.color___transparentize$closure()), A.BuiltInCallable$overloadedFunction("alpha", A.LinkedHashMap_LinkedHashMap$_literal(["$color", new A.global_closure27(), "$args...", new A.global_closure28()], t1, t2)), A._function5("opacity", "$color", new A.global_closure29()), $.$get$_ieHexStr(), $.$get$_adjust().withName$1("adjust-color"), $.$get$_scale().withName$1("scale-color"), $.$get$_change().withName$1("change-color")], type$.JSArray_BuiltInCallable), type$.BuiltInCallable);
    });
    _lazyFinal($, "_red", "$get$_red", () => A._function5("red", "$color", new A._red_closure()));
    _lazyFinal($, "_green", "$get$_green", () => A._function5("green", "$color", new A._green_closure()));
    _lazyFinal($, "_blue", "$get$_blue", () => A._function5("blue", "$color", new A._blue_closure()));
    _lazyFinal($, "_mix", "$get$_mix", () => A._function5("mix", "$color1, $color2, $weight: 50%", new A._mix_closure()));
    _lazyFinal($, "_hue", "$get$_hue", () => A._function5("hue", "$color", new A._hue_closure()));
    _lazyFinal($, "_saturation", "$get$_saturation", () => A._function5("saturation", "$color", new A._saturation_closure()));
    _lazyFinal($, "_lightness", "$get$_lightness", () => A._function5("lightness", "$color", new A._lightness_closure()));
    _lazyFinal($, "_complement", "$get$_complement", () => A._function5("complement", "$color", new A._complement_closure()));
    _lazyFinal($, "_adjust", "$get$_adjust", () => A._function5("adjust", "$color, $kwargs...", new A._adjust_closure()));
    _lazyFinal($, "_scale", "$get$_scale", () => A._function5("scale", "$color, $kwargs...", new A._scale_closure()));
    _lazyFinal($, "_change", "$get$_change", () => A._function5("change", "$color, $kwargs...", new A._change_closure()));
    _lazyFinal($, "_ieHexStr", "$get$_ieHexStr", () => A._function5("ie-hex-str", "$color", new A._ieHexStr_closure()));
    _lazyFinal($, "global0", "$get$global0", () => A.UnmodifiableListView$(A._setArrayType([$.$get$_length0(), $.$get$_nth(), $.$get$_setNth(), $.$get$_join(), $.$get$_append0(), $.$get$_zip(), $.$get$_index0(), $.$get$_isBracketed(), $.$get$_separator().withName$1("list-separator")], type$.JSArray_BuiltInCallable), type$.BuiltInCallable));
    _lazyFinal($, "_length", "$get$_length0", () => A._function4("length", "$list", new A._length_closure0()));
    _lazyFinal($, "_nth", "$get$_nth", () => A._function4("nth", "$list, $n", new A._nth_closure()));
    _lazyFinal($, "_setNth", "$get$_setNth", () => A._function4("set-nth", "$list, $n, $value", new A._setNth_closure()));
    _lazyFinal($, "_join0", "$get$_join", () => A._function4("join", "$list1, $list2, $separator: auto, $bracketed: auto", new A._join_closure()));
    _lazyFinal($, "_append", "$get$_append0", () => A._function4("append", "$list, $val, $separator: auto", new A._append_closure0()));
    _lazyFinal($, "_zip", "$get$_zip", () => A._function4("zip", "$lists...", new A._zip_closure()));
    _lazyFinal($, "_index", "$get$_index0", () => A._function4("index", "$list, $value", new A._index_closure0()));
    _lazyFinal($, "_separator", "$get$_separator", () => A._function4("separator", "$list", new A._separator_closure()));
    _lazyFinal($, "_isBracketed", "$get$_isBracketed", () => A._function4("is-bracketed", "$list", new A._isBracketed_closure()));
    _lazyFinal($, "global1", "$get$global1", () => A.UnmodifiableListView$(A._setArrayType([$.$get$_get().withName$1("map-get"), $.$get$_merge().withName$1("map-merge"), $.$get$_remove().withName$1("map-remove"), $.$get$_keys().withName$1("map-keys"), $.$get$_values().withName$1("map-values"), $.$get$_hasKey().withName$1("map-has-key")], type$.JSArray_BuiltInCallable), type$.BuiltInCallable));
    _lazyFinal($, "_get", "$get$_get", () => A._function3("get", "$map, $key, $keys...", new A._get_closure()));
    _lazyFinal($, "_merge0", "$get$_merge", () => A.BuiltInCallable$overloadedFunction("merge", A.LinkedHashMap_LinkedHashMap$_literal(["$map1, $map2", new A._merge_closure(), "$map1, $args...", new A._merge_closure0()], type$.String, A.findType("Value(List<Value>)"))));
    _lazyFinal($, "_remove", "$get$_remove", () => A.BuiltInCallable$overloadedFunction("remove", A.LinkedHashMap_LinkedHashMap$_literal(["$map", new A._remove_closure(), "$map, $key, $keys...", new A._remove_closure0()], type$.String, A.findType("Value(List<Value>)"))));
    _lazyFinal($, "_keys", "$get$_keys", () => A._function3("keys", "$map", new A._keys_closure()));
    _lazyFinal($, "_values", "$get$_values", () => A._function3("values", "$map", new A._values_closure()));
    _lazyFinal($, "_hasKey", "$get$_hasKey", () => A._function3("has-key", "$map, $key, $keys...", new A._hasKey_closure()));
    _lazyFinal($, "global2", "$get$global2", () => A.UnmodifiableListView$(A._setArrayType([$.$get$_abs(), $.$get$_ceil(), $.$get$_floor(), $.$get$_max(), $.$get$_min(), $.$get$_percentage(), $.$get$_randomFunction(), $.$get$_round(), $.$get$_unit(), $.$get$_compatible().withName$1("comparable"), $.$get$_isUnitless().withName$1("unitless")], type$.JSArray_BuiltInCallable), type$.BuiltInCallable));
    _lazyFinal($, "_ceil", "$get$_ceil", () => A._numberFunction("ceil", new A._ceil_closure()));
    _lazyFinal($, "_floor", "$get$_floor", () => A._numberFunction("floor", new A._floor_closure()));
    _lazyFinal($, "_max", "$get$_max", () => A._function2("max", "$numbers...", new A._max_closure()));
    _lazyFinal($, "_min", "$get$_min", () => A._function2("min", "$numbers...", new A._min_closure()));
    _lazyFinal($, "_round", "$get$_round", () => A._numberFunction("round", A.number0__fuzzyRound$closure()));
    _lazyFinal($, "_abs", "$get$_abs", () => A._numberFunction("abs", new A._abs_closure()));
    _lazyFinal($, "_compatible", "$get$_compatible", () => A._function2("compatible", "$number1, $number2", new A._compatible_closure()));
    _lazyFinal($, "_isUnitless", "$get$_isUnitless", () => A._function2("is-unitless", "$number", new A._isUnitless_closure()));
    _lazyFinal($, "_unit", "$get$_unit", () => A._function2("unit", "$number", new A._unit_closure()));
    _lazyFinal($, "_percentage", "$get$_percentage", () => A._function2("percentage", "$number", new A._percentage_closure()));
    _lazyFinal($, "_random", "$get$_random0", () => A.Random_Random());
    _lazyFinal($, "_randomFunction", "$get$_randomFunction", () => A._function2("random", "$limit: null", new A._randomFunction_closure()));
    _lazyFinal($, "global3", "$get$global5", () => A.UnmodifiableListView$(A._setArrayType([A._function("feature-exists", "$feature", new A.global_closure()), A._function("inspect", "$value", new A.global_closure0()), A._function("type-of", "$value", new A.global_closure1()), A._function("keywords", "$args", new A.global_closure2())], type$.JSArray_BuiltInCallable), type$.BuiltInCallable));
    _lazyFinal($, "global4", "$get$global3", () => A.UnmodifiableListView$(A._setArrayType([$.$get$_isSuperselector(), $.$get$_simpleSelectors(), $.$get$_parse().withName$1("selector-parse"), $.$get$_nest().withName$1("selector-nest"), $.$get$_append().withName$1("selector-append"), $.$get$_extend().withName$1("selector-extend"), $.$get$_replace().withName$1("selector-replace"), $.$get$_unify().withName$1("selector-unify")], type$.JSArray_BuiltInCallable), type$.BuiltInCallable));
    _lazyFinal($, "_nest", "$get$_nest", () => A._function1("nest", "$selectors...", new A._nest_closure()));
    _lazyFinal($, "_append0", "$get$_append", () => A._function1("append", "$selectors...", new A._append_closure()));
    _lazyFinal($, "_extend", "$get$_extend", () => A._function1("extend", "$selector, $extendee, $extender", new A._extend_closure()));
    _lazyFinal($, "_replace", "$get$_replace", () => A._function1("replace", "$selector, $original, $replacement", new A._replace_closure()));
    _lazyFinal($, "_unify", "$get$_unify", () => A._function1("unify", "$selector1, $selector2", new A._unify_closure()));
    _lazyFinal($, "_isSuperselector", "$get$_isSuperselector", () => A._function1("is-superselector", "$super, $sub", new A._isSuperselector_closure()));
    _lazyFinal($, "_simpleSelectors", "$get$_simpleSelectors", () => A._function1("simple-selectors", "$selector", new A._simpleSelectors_closure()));
    _lazyFinal($, "_parse", "$get$_parse", () => A._function1("parse", "$selector", new A._parse_closure()));
    _lazyFinal($, "_random0", "$get$_random", () => A.Random_Random());
    _lazy($, "_previousUniqueId", "$get$_previousUniqueId", () => $.$get$_random().nextInt$1(A._asInt(A.pow(36, 6))));
    _lazyFinal($, "global5", "$get$global4", () => A.UnmodifiableListView$(A._setArrayType([$.$get$_unquote(), $.$get$_quote(), $.$get$_toUpperCase(), $.$get$_toLowerCase(), $.$get$_uniqueId(), $.$get$_length().withName$1("str-length"), $.$get$_insert().withName$1("str-insert"), $.$get$_index().withName$1("str-index"), $.$get$_slice().withName$1("str-slice")], type$.JSArray_BuiltInCallable), type$.BuiltInCallable));
    _lazyFinal($, "_unquote", "$get$_unquote", () => A._function0("unquote", "$string", new A._unquote_closure()));
    _lazyFinal($, "_quote0", "$get$_quote", () => A._function0("quote", "$string", new A._quote_closure()));
    _lazyFinal($, "_length0", "$get$_length", () => A._function0("length", "$string", new A._length_closure()));
    _lazyFinal($, "_insert", "$get$_insert", () => A._function0("insert", "$string, $insert, $index", new A._insert_closure()));
    _lazyFinal($, "_index0", "$get$_index", () => A._function0("index", "$string, $substring", new A._index_closure()));
    _lazyFinal($, "_slice", "$get$_slice", () => A._function0("slice", "$string, $start-at, $end-at: -1", new A._slice_closure()));
    _lazyFinal($, "_toUpperCase", "$get$_toUpperCase", () => A._function0("to-upper-case", "$string", new A._toUpperCase_closure()));
    _lazyFinal($, "_toLowerCase", "$get$_toLowerCase", () => A._function0("to-lower-case", "$string", new A._toLowerCase_closure()));
    _lazyFinal($, "_uniqueId", "$get$_uniqueId", () => A._function0("unique-id", "", new A._uniqueId_closure()));
    _lazyFinal($, "stderr", "$get$stderr", () => new A.Stderr(J.get$stderr$x(self.process)));
    _lazyFinal($, "Logger_quiet", "$get$Logger_quiet", () => new A._QuietLogger());
    _lazyFinal($, "_disallowedFunctionNames", "$get$_disallowedFunctionNames", () => {
      var t1 = $.$get$globalFunctions();
      t1 = t1.map$1$1(t1, new A._disallowedFunctionNames_closure(), type$.String).toSet$0(0);
      t1.add$1(0, "if");
      t1.remove$1(0, "rgb");
      t1.remove$1(0, "rgba");
      t1.remove$1(0, "hsl");
      t1.remove$1(0, "hsla");
      t1.remove$1(0, "grayscale");
      t1.remove$1(0, "invert");
      t1.remove$1(0, "alpha");
      t1.remove$1(0, "opacity");
      t1.remove$1(0, "saturate");
      return t1;
    });
    _lazyFinal($, "epsilon", "$get$epsilon", () => A.pow(10, -11));
    _lazyFinal($, "_inverseEpsilon", "$get$_inverseEpsilon", () => 1 / $.$get$epsilon());
    _lazyFinal($, "_noSourceUrl", "$get$_noSourceUrl", () => A.Uri_parse("-"));
    _lazyFinal($, "_traces", "$get$_traces", () => new A.Expando(new WeakMap()));
    _lazyFinal($, "_typesByUnit", "$get$_typesByUnit", () => {
      var t2, t3, t4,
        t1 = type$.String;
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t2 = B.Map_U8AHF.get$entries(B.Map_U8AHF), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current();
        for (t4 = J.get$iterator$ax(t3.get$value(t3)); t4.moveNext$0();)
          t1.$indexSet(0, t4.get$current(), t3.get$key());
      }
      return t1;
    });
    _lazyFinal($, "_emptyQuoted", "$get$_emptyQuoted", () => A.SassString$("", true));
    _lazyFinal($, "_emptyUnquoted", "$get$_emptyUnquoted", () => A.SassString$("", false));
    _lazyFinal($, "_statementDelimiter", "$get$_statementDelimiter", () => A.RegExp_RegExp(" *((\\n|;) *)+", true));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, DataView: A.NativeTypedData, ArrayBufferView: A.NativeTypedData, Float32Array: A.NativeTypedArrayOfDouble, Float64Array: A.NativeTypedArrayOfDouble, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, DataView: true, ArrayBufferView: false, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();
