{"version":3,"file":"throttlingRetryPolicyTests.spec.js","sourceRoot":"","sources":["../../../test/internal/throttlingRetryPolicyTests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport chai from \"chai\";\nimport sinon from \"sinon\";\nimport {\n  HttpOperationResponse,\n  WebResource,\n  HttpHeaders,\n  RequestPolicyOptions,\n  RequestPolicy,\n  RestError\n} from \"@azure/core-http\";\nimport { ThrottlingRetryPolicy, getDelayInMs } from \"../../src/policies/throttlingRetryPolicy\";\nimport { assertThrowsRestError } from \"../public/utils/testHelpers\";\n\ndescribe(\"ThrottlingRetryPolicy\", () => {\n  class PassThroughPolicy {\n    constructor(private _response: HttpOperationResponse) {}\n    public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n      const response = {\n        ...this._response,\n        request: request\n      };\n\n      return Promise.resolve(response);\n    }\n  }\n\n  const defaultResponse = {\n    status: 200,\n    request: new WebResource(),\n    headers: new HttpHeaders()\n  };\n\n  function createDefaultThrottlingRetryPolicy(\n    httpOperationResponse: HttpOperationResponse = defaultResponse,\n    nextPolicyCreator: (response: HttpOperationResponse) => RequestPolicy = (response) =>\n      new PassThroughPolicy(response)\n  ): ThrottlingRetryPolicy {\n    return new ThrottlingRetryPolicy(\n      nextPolicyCreator(httpOperationResponse),\n      new RequestPolicyOptions()\n    );\n  }\n\n  describe(\"sendRequest\", () => {\n    it(\"should clone the request\", async () => {\n      const request = new WebResource();\n      const nextPolicy = {\n        sendRequest: (requestToSend: WebResource): Promise<HttpOperationResponse> => {\n          chai.assert(request !== requestToSend);\n          return Promise.resolve(defaultResponse);\n        }\n      };\n      const policy = new ThrottlingRetryPolicy(nextPolicy, new RequestPolicyOptions());\n      await policy.sendRequest(request);\n    });\n\n    it(\"should not modify the request\", async () => {\n      const request = new WebResource();\n      request.url = \"http://url\";\n      request.method = \"PATCH\";\n      request.body = { someProperty: \"someValue\" };\n      request.headers = new HttpHeaders({ header: \"abc\" });\n      request.query = { q: \"param\" };\n\n      const policy = createDefaultThrottlingRetryPolicy();\n      const response = await policy.sendRequest(request);\n      // requestId is unique, even across retries.\n      delete (response.request as any).requestId;\n      delete (request as any).requestId;\n      chai.assert.deepEqual(response.request, request);\n    });\n\n    it(\"should do nothing when status code is not 429\", async () => {\n      const request = new WebResource();\n      const mockResponse = {\n        status: 400,\n        headers: new HttpHeaders({\n          \"Retry-After\": \"100\"\n        }),\n        request: request\n      };\n      const policy = createDefaultThrottlingRetryPolicy(mockResponse, (_) => {\n        return {\n          sendRequest: (_wr: WebResource) => {\n            throw new RestError(\"some other error, but not an 429 with a timeout\", \"\", 500);\n          }\n        };\n      });\n\n      await assertThrowsRestError(\n        () => policy.sendRequest(request),\n        500,\n        \"some other error, but not an 429 with a timeout\"\n      );\n    });\n\n    it(\"should pass the response to the handler if the status code equals 429\", async () => {\n      const request = new WebResource();\n      const mockResponse = {\n        status: 429,\n        headers: new HttpHeaders({\n          \"Retry-After\": \"100\"\n        }),\n        request: request\n      };\n      const policy = createDefaultThrottlingRetryPolicy(mockResponse, (response) => {\n        return {\n          sendRequest: (_: WebResource) => {\n            chai.assert.deepEqual(response, mockResponse);\n            return Promise.resolve(response);\n          }\n        };\n      });\n\n      const response = await policy.sendRequest(request);\n      chai.assert.deepEqual(response, mockResponse);\n    });\n\n    it(\"should extract the header properly\", () => {\n      const headers = new Map<string, string>();\n\n      // ie, no retry header\n      chai.assert.notOk(getDelayInMs(headers));\n\n      headers.set(\"retry-after-ms\", \"10\");\n      chai.assert.equal(getDelayInMs(headers), 10);\n\n      headers.clear();\n      headers.set(\"x-ms-retry-after-ms\", \"101\");\n      chai.assert.equal(getDelayInMs(headers), 101);\n\n      // Retry-After's value is actually in seconds, not milliseconds like the\n      // other retry headers.\n      headers.clear();\n      headers.set(\"Retry-After\", \"1010\");\n      chai.assert.equal(getDelayInMs(headers), 1010 * 1000);\n\n      headers.clear();\n      headers.set(\"retry-after-ms\", \"this is not a number\");\n      chai.assert.notOk(getDelayInMs(headers));\n\n      headers.clear();\n      headers.set(\"Retry-After\", \"this is not a number or a date\");\n      chai.assert.notOk(getDelayInMs(headers));\n\n      // Retry-After can also return a date\n      headers.clear();\n      const dateOneDayInTheFuture = new Date(Date.now() + 1000 * 60 * 60 * 25);\n      headers.set(\"Retry-After\", dateOneDayInTheFuture.toISOString());\n      const delayInMsFromDate = getDelayInMs(headers);\n      chai.assert.ok(delayInMsFromDate);\n      chai.assert.isAtLeast(delayInMsFromDate!, 1000 * 60 * 60 * 24);\n    });\n  });\n\n  describe(\"parseRetryAfterHeader\", () => {\n    it(\"should return undefined for ill-formed header\", function() {\n      const retryAfter = ThrottlingRetryPolicy.parseRetryAfterHeader(\"foobar\");\n      chai.assert.equal(retryAfter, undefined);\n    });\n\n    it(\"should return sleep interval value in milliseconds if parameter is a number\", function(done) {\n      const retryAfter = ThrottlingRetryPolicy.parseRetryAfterHeader(\"1\");\n      chai.assert.equal(retryAfter, 1000);\n      done();\n    });\n\n    it(\"should return sleep interval value in milliseconds for full date format\", function(done) {\n      const clock = sinon.useFakeTimers(new Date(\"Fri, 31 Dec 1999 23:00:00 GMT\").getTime());\n      const retryAfter = ThrottlingRetryPolicy.parseRetryAfterHeader(\n        \"Fri, 31 Dec 1999 23:02:00 GMT\"\n      );\n\n      chai.assert.equal(retryAfter, 2 * 60 * 1000);\n\n      clock.restore();\n      done();\n    });\n\n    it(\"should return sleep interval value in milliseconds for shorter date format\", function(done) {\n      const clock = sinon.useFakeTimers(new Date(\"Fri, 31 Dec 1999 23:00:00 GMT\").getTime());\n      const retryAfter = ThrottlingRetryPolicy.parseRetryAfterHeader(\"31 Dec 1999 23:03:00 GMT\");\n\n      chai.assert.equal(retryAfter, 3 * 60 * 1000);\n\n      clock.restore();\n      done();\n    });\n  });\n});\n"]}