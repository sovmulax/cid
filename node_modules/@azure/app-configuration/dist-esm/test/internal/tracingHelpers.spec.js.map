{"version":3,"file":"tracingHelpers.spec.js","sourceRoot":"","sources":["../../../test/internal/tracingHelpers.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createSpan, trace } from \"../../src/internal/tracingHelpers\";\nimport { Span, SpanStatus, SpanStatusCode } from \"@azure/core-tracing\";\n\nimport { assert } from \"chai\";\nimport sinon from \"sinon\";\nimport { AppConfigurationClient } from \"../../src/appConfigurationClient\";\nimport { AbortSignalLike, OperationOptions } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\ndescribe(\"tracingHelpers\", () => {\n  it(\"trace OK\", async () => {\n    let setStatusStub: sinon.SinonStub<[SpanStatus], Span> | undefined;\n    let endStub: sinon.SinonStub | undefined;\n\n    const fakeCreateSpan = <\n      T extends {\n        tracingOptions?: OperationTracingOptions | undefined;\n      }\n    >(\n      operationName: string,\n      operationOptions: T | undefined\n    ): {\n      span: Span;\n      updatedOptions: T;\n    } => {\n      assert.deepEqual(operationName, \"addConfigurationSetting\");\n\n      const createdSpan = createSpan(operationName, operationOptions);\n\n      setStatusStub = sinon.stub(createdSpan.span, \"setStatus\");\n      endStub = sinon.stub(createdSpan.span, \"end\");\n\n      return createdSpan;\n    };\n\n    await trace(\n      \"addConfigurationSetting\",\n      {\n        tracingOptions: {}\n      },\n      async (_newOptions, _span) => {\n        /** empty */\n      },\n      fakeCreateSpan\n    );\n\n    assert.equal(setStatusStub?.called, true);\n\n    const [status] = setStatusStub!.args[0];\n\n    assert.equal(status.code, SpanStatusCode.OK);\n    assert.equal(endStub?.called, true);\n  });\n\n  it(\"trace ERROR\", async () => {\n    let setStatusStub: sinon.SinonStub<[SpanStatus], Span> | undefined;\n    let endStub: sinon.SinonStub | undefined;\n\n    try {\n      await trace(\n        \"addConfigurationSetting\",\n        {\n          tracingOptions: {}\n        },\n        async (_options: any, _span: Span) => {\n          throw new Error(\"Purposefully thrown error\");\n        },\n        <\n          T extends {\n            tracingOptions?: OperationTracingOptions | undefined;\n          }\n        >(\n          operationName: string,\n          operationOptions: T | undefined\n        ): {\n          span: Span;\n          updatedOptions: T;\n        } => {\n          assert.deepEqual(operationName, \"addConfigurationSetting\");\n\n          const createdSpan = createSpan(operationName, operationOptions);\n\n          setStatusStub = sinon.stub(createdSpan.span, \"setStatus\");\n          endStub = sinon.stub(createdSpan.span, \"end\");\n\n          return createdSpan;\n        }\n      );\n\n      assert.fail(\"Exception should have been thrown from `trace` since the inner action threw\");\n    } catch (err) {\n      if (!(err instanceof Error)) {\n        throw new Error(\"Error is not recognized\");\n      }\n      assert.equal(err.message, \"Purposefully thrown error\");\n    }\n\n    assert.ok(setStatusStub, \"setStatus should have been called\");\n    assert.equal(\n      setStatusStub?.args[0][0].code,\n      SpanStatusCode.ERROR,\n      \"Any thrown exception causes the span status to be set to an error\"\n    );\n\n    assert.equal(endStub?.called, true);\n  });\n\n  it(\"tracing is set up for all methods\", async () => {\n    const appConfigurationClient = new AppConfigurationClient(\n      \"Endpoint=endpoint;Id=id;Secret=secret\"\n    );\n\n    const traceData = {\n      operationName: \"\",\n      options: undefined as OperationOptions | undefined\n    };\n\n    appConfigurationClient[\"_trace\"] = async (operationName, options, _fn) => {\n      traceData.operationName = operationName;\n      traceData.options = options;\n      return {} as any;\n    };\n\n    const operationOptions: OperationOptions = {\n      abortSignal: ({} as any) as AbortSignalLike,\n      tracingOptions: {\n        hello: \"world\"\n      } as OperationTracingOptions\n    };\n\n    await appConfigurationClient.addConfigurationSetting(\n      { key: \"ignored\", value: \"ignored\" },\n      operationOptions\n    );\n    assert.deepEqual(traceData, {\n      operationName: \"addConfigurationSetting\",\n      options: operationOptions\n    });\n\n    await appConfigurationClient.setConfigurationSetting(\n      { key: \"ignored\", value: \"ignored\" },\n      operationOptions\n    );\n    assert.deepEqual(traceData, {\n      operationName: \"setConfigurationSetting\",\n      options: operationOptions\n    });\n\n    await appConfigurationClient.getConfigurationSetting({ key: \"ignored\" }, operationOptions);\n    assert.deepEqual(traceData, {\n      operationName: \"getConfigurationSetting\",\n      options: operationOptions\n    });\n\n    await appConfigurationClient.setReadOnly({ key: \"ignored\" }, true, operationOptions);\n    assert.deepEqual(traceData, {\n      operationName: \"setReadOnly\",\n      options: operationOptions\n    });\n\n    await appConfigurationClient.deleteConfigurationSetting({ key: \"ignored\" }, operationOptions);\n    assert.deepEqual(traceData, {\n      operationName: \"deleteConfigurationSetting\",\n      options: operationOptions\n    });\n\n    const it = appConfigurationClient.listConfigurationSettings({\n      keyFilter: \"ignored\",\n      ...operationOptions\n    });\n    await it.next();\n\n    assert.deepEqual(traceData, {\n      operationName: \"listConfigurationSettings\",\n      options: { ...operationOptions, keyFilter: \"ignored\" } as OperationOptions & {\n        keyFilter?: string;\n      }\n    });\n\n    const it2 = appConfigurationClient.listRevisions({ keyFilter: \"ignored\", ...operationOptions });\n    await it2.next();\n\n    assert.deepEqual(traceData, {\n      operationName: \"listRevisions\",\n      options: { ...operationOptions, keyFilter: \"ignored\" } as OperationOptions & {\n        keyFilter?: string;\n      }\n    });\n  });\n});\n"]}