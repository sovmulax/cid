// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { createSpan, trace } from "../../src/internal/tracingHelpers";
import { SpanStatusCode } from "@azure/core-tracing";
import { assert } from "chai";
import sinon from "sinon";
import { AppConfigurationClient } from "../../src/appConfigurationClient";
describe("tracingHelpers", () => {
    it("trace OK", async () => {
        let setStatusStub;
        let endStub;
        const fakeCreateSpan = (operationName, operationOptions) => {
            assert.deepEqual(operationName, "addConfigurationSetting");
            const createdSpan = createSpan(operationName, operationOptions);
            setStatusStub = sinon.stub(createdSpan.span, "setStatus");
            endStub = sinon.stub(createdSpan.span, "end");
            return createdSpan;
        };
        await trace("addConfigurationSetting", {
            tracingOptions: {}
        }, async (_newOptions, _span) => {
            /** empty */
        }, fakeCreateSpan);
        assert.equal(setStatusStub === null || setStatusStub === void 0 ? void 0 : setStatusStub.called, true);
        const [status] = setStatusStub.args[0];
        assert.equal(status.code, SpanStatusCode.OK);
        assert.equal(endStub === null || endStub === void 0 ? void 0 : endStub.called, true);
    });
    it("trace ERROR", async () => {
        let setStatusStub;
        let endStub;
        try {
            await trace("addConfigurationSetting", {
                tracingOptions: {}
            }, async (_options, _span) => {
                throw new Error("Purposefully thrown error");
            }, (operationName, operationOptions) => {
                assert.deepEqual(operationName, "addConfigurationSetting");
                const createdSpan = createSpan(operationName, operationOptions);
                setStatusStub = sinon.stub(createdSpan.span, "setStatus");
                endStub = sinon.stub(createdSpan.span, "end");
                return createdSpan;
            });
            assert.fail("Exception should have been thrown from `trace` since the inner action threw");
        }
        catch (err) {
            if (!(err instanceof Error)) {
                throw new Error("Error is not recognized");
            }
            assert.equal(err.message, "Purposefully thrown error");
        }
        assert.ok(setStatusStub, "setStatus should have been called");
        assert.equal(setStatusStub === null || setStatusStub === void 0 ? void 0 : setStatusStub.args[0][0].code, SpanStatusCode.ERROR, "Any thrown exception causes the span status to be set to an error");
        assert.equal(endStub === null || endStub === void 0 ? void 0 : endStub.called, true);
    });
    it("tracing is set up for all methods", async () => {
        const appConfigurationClient = new AppConfigurationClient("Endpoint=endpoint;Id=id;Secret=secret");
        const traceData = {
            operationName: "",
            options: undefined
        };
        appConfigurationClient["_trace"] = async (operationName, options, _fn) => {
            traceData.operationName = operationName;
            traceData.options = options;
            return {};
        };
        const operationOptions = {
            abortSignal: {},
            tracingOptions: {
                hello: "world"
            }
        };
        await appConfigurationClient.addConfigurationSetting({ key: "ignored", value: "ignored" }, operationOptions);
        assert.deepEqual(traceData, {
            operationName: "addConfigurationSetting",
            options: operationOptions
        });
        await appConfigurationClient.setConfigurationSetting({ key: "ignored", value: "ignored" }, operationOptions);
        assert.deepEqual(traceData, {
            operationName: "setConfigurationSetting",
            options: operationOptions
        });
        await appConfigurationClient.getConfigurationSetting({ key: "ignored" }, operationOptions);
        assert.deepEqual(traceData, {
            operationName: "getConfigurationSetting",
            options: operationOptions
        });
        await appConfigurationClient.setReadOnly({ key: "ignored" }, true, operationOptions);
        assert.deepEqual(traceData, {
            operationName: "setReadOnly",
            options: operationOptions
        });
        await appConfigurationClient.deleteConfigurationSetting({ key: "ignored" }, operationOptions);
        assert.deepEqual(traceData, {
            operationName: "deleteConfigurationSetting",
            options: operationOptions
        });
        const it = appConfigurationClient.listConfigurationSettings(Object.assign({ keyFilter: "ignored" }, operationOptions));
        await it.next();
        assert.deepEqual(traceData, {
            operationName: "listConfigurationSettings",
            options: Object.assign(Object.assign({}, operationOptions), { keyFilter: "ignored" })
        });
        const it2 = appConfigurationClient.listRevisions(Object.assign({ keyFilter: "ignored" }, operationOptions));
        await it2.next();
        assert.deepEqual(traceData, {
            operationName: "listRevisions",
            options: Object.assign(Object.assign({}, operationOptions), { keyFilter: "ignored" })
        });
    });
});
//# sourceMappingURL=tracingHelpers.spec.js.map