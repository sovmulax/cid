{"version":3,"file":"etags.spec.js","sourceRoot":"","sources":["../../../test/public/etags.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AppConfigurationClient } from \"../../src\";\nimport {\n  startRecorder,\n  createAppConfigurationClientForTests,\n  deleteKeyCompletely,\n  assertThrowsRestError\n} from \"./utils/testHelpers\";\nimport { assert } from \"chai\";\nimport { Recorder } from \"@azure-tools/test-recorder\";\nimport { Context } from \"mocha\";\n\ndescribe(\"etags\", () => {\n  let client: AppConfigurationClient;\n  let recorder: Recorder;\n  let key: string;\n\n  beforeEach(async function(this: Context) {\n    recorder = startRecorder(this);\n    key = recorder.getUniqueName(\"etags\");\n    client = createAppConfigurationClientForTests() || this.skip();\n    await client.addConfigurationSetting({\n      key: key,\n      value: \"some value\"\n    });\n  });\n\n  afterEach(async function() {\n    await deleteKeyCompletely([key], client);\n    await recorder.stop();\n  });\n\n  // etag usage is 'opt-in' via the onlyIfChanged/onlyIfUnchanged options for certain calls\n  // by default no etags are used.\n  it(\"Get and set by default doesn't use etags\", async () => {\n    const addedSetting = await client.getConfigurationSetting({ key });\n\n    // by default - ignores the etag in 'addedSetting.etag' so last one in\n    // wins\n    addedSetting.value = \"some new value!\";\n    await client.setConfigurationSetting(addedSetting);\n  });\n\n  it(\"Get and set, enabling etag checking using onlyIfUnchanged\", async () => {\n    const addedSetting = await client.getConfigurationSetting({ key });\n\n    addedSetting.value = \"some new value!\";\n\n    // etag of the remote setting matches what we have so we're okay to update\n    const newlyUpdatedSetting = await client.setConfigurationSetting(addedSetting, {\n      onlyIfUnchanged: true\n    });\n    assert.equal(newlyUpdatedSetting.value, addedSetting.value);\n\n    const badEtagSetting = {\n      ...addedSetting,\n      etag: \"bogus\"\n    };\n\n    // trying to save with a non-matching etag (when we specifically said to only save if\n    // nothing has changed) will result in a 412 (precondition failed)\n    await assertThrowsRestError(\n      () => client.setConfigurationSetting(badEtagSetting, { onlyIfUnchanged: true }),\n      412\n    );\n  });\n\n  it(\"set with an old etag will throw RestError\", async () => {\n    const addedSetting = await client.getConfigurationSetting({ key });\n\n    addedSetting.value = \"some new value!\";\n\n    // sneaky process B comes in and does an update (ie, does NOT\n    // enable the etag)\n    await client.setConfigurationSetting({\n      ...addedSetting,\n      value: \"sneaky user updated the field\"\n    });\n\n    // the value (and thus the etag) was changed behind our backs\n    // so now this update (with the original etag) will throw.\n    await assertThrowsRestError(\n      () =>\n        client.setConfigurationSetting(addedSetting, {\n          onlyIfUnchanged: true\n        }),\n      412,\n      \"Old etag will result in a failed update and error\"\n    );\n  });\n\n  it(\"get using ifNoneMatch to only get the setting if it's changed (ie: safe GET)\", async () => {\n    const originalSetting = await client.setConfigurationSetting({\n      key: key,\n      value: \"world\"\n    });\n\n    // only get the setting if it changed (it hasn't)\n    const response = await client.getConfigurationSetting(originalSetting, {\n      onlyIfChanged: true\n    });\n\n    // to keep 'key' a required field we fill this out (but set all the other properties to undefined)\n    assert.equal(response.key, key);\n    assert.equal(response._response.status, 304);\n    assert.equal(response.statusCode, 304);\n\n    assert.ok(!response.contentType);\n    assert.ok(!response.etag);\n    assert.ok(!response.label);\n    assert.ok(!response.lastModified);\n    assert.ok(!response.isReadOnly);\n    assert.ok(!response.tags);\n    assert.ok(!response.value);\n\n    // let's update it and then try again\n    await client.setConfigurationSetting({ key: key, value: \"new world\" });\n\n    const updatedSetting = await client.getConfigurationSetting({ key });\n\n    assert.notEqual(\n      originalSetting.etag,\n      updatedSetting.etag,\n      \"New content, new update, etags shouldn't match\"\n    );\n\n    assert.equal(200, updatedSetting.statusCode);\n\n    // only get the setting if it changed (it has!)\n    const configurationSetting = await client.getConfigurationSetting(originalSetting, {\n      onlyIfChanged: true\n    });\n\n    // now our retrieved setting matches what's on the server\n    assert.equal(\"new world\", configurationSetting.value);\n    assert.equal(updatedSetting.etag, configurationSetting.etag);\n  });\n\n  it(\"(set|clear)readonly using etags\", async () => {\n    const addedSetting = await client.getConfigurationSetting({ key });\n\n    const badEtagSetting = {\n      ...addedSetting,\n      etag: \"bogus\"\n    };\n\n    // etag won't match so we get a precondition failed\n    await assertThrowsRestError(\n      () =>\n        client.setReadOnly(badEtagSetting, true, {\n          onlyIfUnchanged: true\n        }),\n      412\n    );\n\n    let actualSetting = await client.getConfigurationSetting(badEtagSetting);\n    // should not be read-only since it didn't match\n    assert.ok(!actualSetting.isReadOnly);\n\n    // and now that the etag matches we should be able to set the\n    // key's value to read-onlly\n    await client.setReadOnly(addedSetting, true, { onlyIfUnchanged: true });\n    actualSetting = await client.getConfigurationSetting(addedSetting);\n    assert.ok(actualSetting.isReadOnly);\n\n    // now let's try to clear it (using a bogus etag so it won't match)\n    await assertThrowsRestError(\n      () =>\n        client.setReadOnly(badEtagSetting, false, {\n          onlyIfUnchanged: true\n        }),\n      412\n    );\n\n    // ...still readOnly\n    actualSetting = await client.getConfigurationSetting(addedSetting);\n    assert.ok(actualSetting.isReadOnly);\n\n    // now we'll use the right etag (from the setting we just retrieved)\n    await client.setReadOnly(actualSetting, false, {\n      onlyIfUnchanged: true\n    });\n\n    // and now it's no longer readOnly\n    actualSetting = await client.getConfigurationSetting(addedSetting);\n    assert.ok(!actualSetting.isReadOnly);\n  });\n\n  it(\"delete using etags\", async () => {\n    const addedSetting = await client.getConfigurationSetting({ key });\n\n    const badEtagSetting = {\n      ...addedSetting,\n      etag: \"bogus\"\n    };\n\n    await assertThrowsRestError(\n      () => client.deleteConfigurationSetting(badEtagSetting, { onlyIfUnchanged: true }),\n      412\n    );\n\n    // obviously the setting is still there (or else this would throw)\n    await client.getConfigurationSetting({ key });\n\n    // this time we'll pass in the proper setting with the right etag\n    await client.deleteConfigurationSetting(addedSetting, { onlyIfUnchanged: true });\n\n    // and now the setting isn't found\n    await assertThrowsRestError(() => client.getConfigurationSetting({ key }), 404);\n  });\n});\n"]}