{"version":3,"file":"index.readonlytests.spec.js","sourceRoot":"","sources":["../../../test/public/index.readonlytests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createAppConfigurationClientForTests,\n  assertThrowsRestError,\n  deleteKeyCompletely,\n  assertThrowsAbortError,\n  startRecorder\n} from \"./utils/testHelpers\";\nimport { AppConfigurationClient } from \"../../src\";\nimport { assert } from \"chai\";\nimport { Recorder } from \"@azure-tools/test-recorder\";\nimport { Context } from \"mocha\";\n\ndescribe(\"AppConfigurationClient (set|clear)ReadOnly\", () => {\n  let client: AppConfigurationClient;\n  let recorder: Recorder;\n  const testConfigSetting = {\n    key: \"\",\n    value: \"world\",\n    label: \"some label\"\n  };\n\n  beforeEach(async function(this: Context) {\n    recorder = startRecorder(this);\n    testConfigSetting.key = recorder.getUniqueName(\"readOnlyTests\");\n    client = createAppConfigurationClientForTests() || this.skip();\n    // before it's set to read only we can set it all we want\n    await client.setConfigurationSetting(testConfigSetting);\n  });\n\n  afterEach(async function() {\n    await deleteKeyCompletely([testConfigSetting.key], client);\n    await recorder.stop();\n  });\n\n  it(\"basic\", async function() {\n    let storedSetting = await client.getConfigurationSetting({\n      key: testConfigSetting.key,\n      label: testConfigSetting.label\n    });\n    assert.ok(!storedSetting.isReadOnly);\n\n    await client.setReadOnly(testConfigSetting, true);\n\n    storedSetting = await client.getConfigurationSetting({\n      key: testConfigSetting.key,\n      label: testConfigSetting.label\n    });\n    assert.ok(storedSetting.isReadOnly);\n\n    // any modification related methods throw exceptions\n    await assertThrowsRestError(\n      () => client.setConfigurationSetting(testConfigSetting),\n      409,\n      \"Set should fail because the setting is read-only\"\n    );\n    await assertThrowsRestError(\n      () =>\n        client.deleteConfigurationSetting({\n          key: testConfigSetting.key,\n          label: testConfigSetting.label\n        }),\n      409,\n      \"Delete should fail because the setting is read-only\"\n    );\n  });\n\n  it(\"accepts operation options\", async function() {\n    await client.getConfigurationSetting({\n      key: testConfigSetting.key,\n      label: testConfigSetting.label\n    });\n\n    await assertThrowsAbortError(async () => {\n      await client.setReadOnly(testConfigSetting, true, { requestOptions: { timeout: 1 } });\n    });\n    await assertThrowsAbortError(async () => {\n      await client.setReadOnly(testConfigSetting, false, { requestOptions: { timeout: 1 } });\n    });\n  });\n});\n"]}