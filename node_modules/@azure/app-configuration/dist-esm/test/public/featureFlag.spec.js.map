{"version":3,"file":"featureFlag.spec.js","sourceRoot":"","sources":["../../../test/public/featureFlag.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { assert } from \"chai\";\nimport { createAppConfigurationClientForTests, startRecorder } from \"./utils/testHelpers\";\nimport {\n  AddConfigurationSettingResponse,\n  AppConfigurationClient,\n  ConfigurationSetting,\n  featureFlagContentType,\n  featureFlagPrefix\n} from \"../../src\";\nimport { Recorder } from \"@azure-tools/test-recorder\";\nimport { Context } from \"mocha\";\nimport { FeatureFlagValue, isFeatureFlag, parseFeatureFlag } from \"../../src/featureFlag\";\n\ndescribe(\"AppConfigurationClient - FeatureFlag\", () => {\n  describe(\"FeatureFlag configuration setting\", () => {\n    let client: AppConfigurationClient;\n    let recorder: Recorder;\n    let baseSetting: ConfigurationSetting<FeatureFlagValue>;\n    let addResponse: AddConfigurationSettingResponse;\n\n    beforeEach(async function(this: Context) {\n      recorder = startRecorder(this);\n      client = createAppConfigurationClientForTests() || this.skip();\n      baseSetting = {\n        value: {\n          conditions: {\n            clientFilters: [\n              {\n                name: \"Microsoft.TimeWindow\",\n                parameters: {\n                  Start: \"Wed, 01 May 2019 13:59:59 GMT\",\n                  End: \"Mon, 01 July 2019 00:00:00 GMT\"\n                }\n              },\n              { name: \"FilterX\" },\n              {\n                name: \"Microsoft.Targeting\",\n                parameters: {\n                  Audience: {\n                    Groups: [\n                      { Name: \"group-1\", RolloutPercentage: 25 },\n                      { Name: \"group-2\", RolloutPercentage: 45 }\n                    ],\n                    Users: [\"userA\", \"userB\"],\n                    DefaultRolloutPercentage: 40\n                  }\n                }\n              },\n              { name: \"Microsoft.Percentage\", parameters: { Value: 25 } }\n            ]\n          },\n          enabled: false,\n          description: \"I'm a description\",\n          displayName: \"for display\"\n        },\n        isReadOnly: false,\n        key: `${featureFlagPrefix + recorder.getUniqueName(\"name-1\")}`,\n        contentType: featureFlagContentType,\n        label: \"label-1\"\n      };\n      addResponse = await client.addConfigurationSetting(baseSetting);\n    });\n\n    afterEach(async function(this: Context) {\n      await client.deleteConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label\n      });\n      await recorder.stop();\n    });\n\n    function assertFeatureFlagProps(\n      actual: Omit<AddConfigurationSettingResponse, \"_response\">,\n      expected: ConfigurationSetting<FeatureFlagValue>\n    ): void {\n      assert.equal(isFeatureFlag(actual), true, \"Expected to get the feature flag\");\n      assert.isDefined(actual.value, \"Expected the value to be defined\");\n      const featureFlagValue = parseFeatureFlag(actual).value;\n      assert.equal(\n        actual.key,\n        expected.key,\n        \"Key from the response from get request is not as expected\"\n      );\n      assert.deepEqual(\n        featureFlagValue.conditions,\n        expected.value.conditions,\n        \"conditions from the response from get request is not as expected\"\n      );\n      assert.equal(featureFlagValue.description, expected.value.description);\n      assert.equal(featureFlagValue.enabled, expected.value.enabled);\n      assert.equal(actual.isReadOnly, expected.isReadOnly);\n      assert.equal(actual.label, expected.label);\n      assert.equal(actual.contentType, expected.contentType);\n    }\n\n    it(\"can add and get FeatureFlag\", async () => {\n      assertFeatureFlagProps(addResponse, baseSetting);\n      const getResponse = await client.getConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label\n      });\n      assertFeatureFlagProps(getResponse, baseSetting);\n    });\n\n    it(\"can add and update FeatureFlag\", async () => {\n      const getResponse = await client.getConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label\n      });\n      assertFeatureFlagProps(getResponse, baseSetting);\n\n      const featureFlag = parseFeatureFlag(getResponse);\n      featureFlag.value.enabled = !baseSetting.value.enabled;\n\n      const setResponse = await client.setConfigurationSetting(featureFlag);\n      assertFeatureFlagProps(setResponse, {\n        ...baseSetting,\n        value: { ...baseSetting.value, enabled: !baseSetting.value.enabled }\n      });\n\n      const getResponseAfterUpdate = await client.getConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label\n      });\n      assertFeatureFlagProps(getResponseAfterUpdate, {\n        ...baseSetting,\n        value: { ...baseSetting.value, enabled: !baseSetting.value.enabled }\n      });\n    });\n\n    it(\"can add, list and update multiple FeatureFlags\", async () => {\n      const secondSetting = {\n        ...baseSetting,\n        key: `${baseSetting.key}-2`\n      };\n      await client.addConfigurationSetting(secondSetting);\n\n      let numberOFFeatureFlagsReceived = 0;\n      for await (const setting of client.listConfigurationSettings({\n        keyFilter: `${baseSetting.key}*`\n      })) {\n        numberOFFeatureFlagsReceived++;\n        if (setting.key === baseSetting.key) {\n          assertFeatureFlagProps(setting, baseSetting);\n          await client.setConfigurationSetting({\n            ...baseSetting,\n            value: { ...baseSetting.value, enabled: !baseSetting.value.enabled }\n          });\n        } else {\n          assertFeatureFlagProps(setting, secondSetting);\n          const parsedSetting = parseFeatureFlag(setting);\n          await client.setConfigurationSetting({\n            ...parsedSetting,\n            value: { ...parsedSetting.value, description: \"I'm new description\" }\n          });\n        }\n      }\n      assert.equal(numberOFFeatureFlagsReceived, 2, \"Unexpected number of FeatureFlags seen\");\n\n      for await (const setting of client.listConfigurationSettings({\n        keyFilter: `${baseSetting.key}*`\n      })) {\n        numberOFFeatureFlagsReceived--;\n        if (setting.key === baseSetting.key) {\n          assertFeatureFlagProps(setting, {\n            ...baseSetting,\n            value: { ...baseSetting.value, enabled: !baseSetting.value.enabled }\n          });\n        } else {\n          assertFeatureFlagProps(setting, {\n            ...secondSetting,\n            value: { ...secondSetting.value, description: \"I'm new description\" }\n          });\n        }\n      }\n\n      assert.equal(\n        numberOFFeatureFlagsReceived,\n        0,\n        \"Unexpected number of FeatureFlags seen after updating\"\n      );\n      await client.deleteConfigurationSetting({ key: secondSetting.key });\n    });\n  });\n\n  describe(\"serializeAsConfigurationSettingParam\", () => {\n    let client: AppConfigurationClient;\n    let recorder: Recorder;\n    let featureFlag: ConfigurationSetting<FeatureFlagValue>;\n    beforeEach(async function(this: Context) {\n      recorder = startRecorder(this);\n      client = createAppConfigurationClientForTests() || this.skip();\n      featureFlag = {\n        contentType: featureFlagContentType,\n        key: `${featureFlagPrefix}${recorder.getUniqueName(\"name-1\")}`,\n        isReadOnly: false,\n        value: { conditions: { clientFilters: [] }, enabled: true }\n      };\n    });\n\n    afterEach(async function(this: Context) {\n      await client.deleteConfigurationSetting({ key: featureFlag.key });\n      await recorder.stop();\n    });\n\n    [`[]`, \"Hello World\"].forEach((value) => {\n      it(`Unexpected value ${value} as feature flag value`, async () => {\n        featureFlag.value = value as any;\n        await client.addConfigurationSetting(featureFlag);\n        assert.equal(\n          (await client.getConfigurationSetting({ key: featureFlag.key })).value,\n          value,\n          \"message\"\n        );\n      });\n    });\n  });\n});\n"]}