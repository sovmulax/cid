{"version":3,"file":"auth.spec.js","sourceRoot":"","sources":["../../../test/public/auth.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,sBAAsB,EAAE,MAAM,WAAW,CAAC;AACnD,OAAO,EACL,aAAa,EACb,gCAAgC,EAEjC,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAI9B,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,gBAAkC,CAAC;IACvC,IAAI,QAAkB,CAAC;IAEvB,UAAU,CAAC;QACT,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/B,gBAAgB,GAAG,gCAAgC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK;QACb,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4BAA4B,EAAE,KAAK;QACpC,MAAM,MAAM,GAAG,IAAI,sBAAsB,CACvC,gBAAgB,CAAC,QAAQ,EACzB,gBAAgB,CAAC,UAAU,CAC5B,CAAC;QAEF,4DAA4D;QAC5D,uCAAuC;QACvC,MAAM,MAAM,CAAC,uBAAuB,CAAC;YACnC,GAAG,EAAE,6BAA6B,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE;YACzE,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,gDAAgD,EAAE,GAAG,EAAE;IAC9D,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,CAAC,MAAM,CACX,GAAG,EAAE,CAAC,IAAI,sBAAsB,CAAC,8BAA8B,CAAC,EAChE,6HAA6H,CAC9H,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,CAAC,MAAM,CACX,GAAG,EAAE,CAAC,IAAI,sBAAsB,CAAC,SAAgB,CAAC,EAClD,6HAA6H,CAC9H,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AppConfigurationClient } from \"../../src\";\nimport {\n  startRecorder,\n  getTokenAuthenticationCredential,\n  CredsAndEndpoint\n} from \"./utils/testHelpers\";\nimport { assert } from \"chai\";\nimport { Recorder } from \"@azure-tools/test-recorder\";\nimport { Context } from \"mocha\";\n\ndescribe(\"Authentication\", () => {\n  let credsAndEndpoint: CredsAndEndpoint;\n  let recorder: Recorder;\n\n  beforeEach(function(this: Context) {\n    recorder = startRecorder(this);\n    credsAndEndpoint = getTokenAuthenticationCredential() || this.skip();\n  });\n\n  afterEach(async function() {\n    await recorder.stop();\n  });\n  it(\"token authentication works\", async function() {\n    const client = new AppConfigurationClient(\n      credsAndEndpoint.endpoint,\n      credsAndEndpoint.credential\n    );\n\n    // it doesn't matter if any data comes in so long as we were\n    // able to connect and call the service\n    await client.addConfigurationSetting({\n      key: `token-authentication-test-${recorder.newDate(\"label-1\").valueOf()}`,\n      value: \"hello\"\n    });\n  });\n});\n\ndescribe(\"AppConfigurationClient constructor error cases\", () => {\n  it(\"invalid connection string gives a decent error message\", () => {\n    assert.throws(\n      () => new AppConfigurationClient(\"an invalid connection string\"),\n      /Invalid connection string\\. Valid connection strings should match the regex 'Endpoint=\\(\\.\\*\\);Id=\\(\\.\\*\\);Secret=\\(\\.\\*\\)'/\n    );\n  });\n\n  it(\"undefined connection string gives a decent error message\", () => {\n    assert.throws(\n      () => new AppConfigurationClient(undefined as any),\n      /Invalid connection string\\. Valid connection strings should match the regex 'Endpoint=\\(\\.\\*\\);Id=\\(\\.\\*\\);Secret=\\(\\.\\*\\)'/\n    );\n  });\n});\n"]}