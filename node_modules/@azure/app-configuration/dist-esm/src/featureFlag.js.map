{"version":3,"file":"featureFlag.js","sourceRoot":"","sources":["../../src/featureFlag.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,gCAAgC,EAAE,MAAM,oBAAoB,CAAC;AAItE;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,yBAAyB,CAAC;AAE3D;;GAEG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,2DAA2D,CAAC;AAkClG;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAC/B;;OAEG;IACH,2BAA2B,EAAE,CAC3B,WAAwD,EAC7B,EAAE;;QAC7B,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YACtB,MAAM,IAAI,SAAS,CAAC,yCAAyC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;SACnF;QACD,IAAI,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;QAC1B,IAAI,OAAO,WAAW,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE;YACzF,GAAG,GAAG,iBAAiB,GAAG,WAAW,CAAC,GAAG,CAAC;SAC3C;QACD,MAAM,oBAAoB,GAAyB;YACjD,EAAE,EAAE,MAAA,WAAW,CAAC,KAAK,CAAC,EAAE,mCAAI,GAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;YAC9D,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,OAAO;YAClC,WAAW,EAAE,WAAW,CAAC,KAAK,CAAC,WAAW;YAC1C,UAAU,EAAE;gBACV,cAAc,EAAE,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa;aAC3D;YACD,YAAY,EAAE,WAAW,CAAC,KAAK,CAAC,WAAW;SAC5C,CAAC;QAEF,MAAM,aAAa,mCACd,WAAW,KACd,GAAG,EACH,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,GAC5C,CAAC;QACF,OAAO,aAAa,CAAC;IACvB,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAC9B,OAA6B;IAE7B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;QAC3B,MAAM,SAAS,CAAC,gCAAgC,CAAC,OAAO,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,CAAC;KAC/E;IAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAyB,CAAC;IAE/E,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IACtB,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE;QACjF,GAAG,GAAG,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC;KACvC;IACD,MAAM,WAAW,mCACZ,OAAO,KACV,KAAK,EAAE;YACL,EAAE,EAAE,oBAAoB,CAAC,EAAE;YAC3B,OAAO,EAAE,oBAAoB,CAAC,OAAO;YACrC,WAAW,EAAE,oBAAoB,CAAC,WAAW;YAC7C,WAAW,EAAE,oBAAoB,CAAC,YAAY;YAC9C,UAAU,EAAE,EAAE,aAAa,EAAE,oBAAoB,CAAC,UAAU,CAAC,cAAc,EAAE;SAC9E,EACD,GAAG,EACH,WAAW,EAAE,sBAAsB,GACpC,CAAC;IACF,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAC3B,OAA6B;IAE7B,OAAO,CACL,OAAO,IAAI,OAAO,CAAC,WAAW,KAAK,sBAAsB,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,CAC/F,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { errorMessageForUnexpectedSetting } from \"./internal/helpers\";\nimport { JsonFeatureFlagValue } from \"./internal/jsonModels\";\nimport { ConfigurationSetting, ConfigurationSettingParam } from \"./models\";\n\n/**\n * The prefix for feature flags.\n */\nexport const featureFlagPrefix = \".appconfig.featureflag/\";\n\n/**\n * The content type for a FeatureFlag\n */\nexport const featureFlagContentType = \"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\";\n\n/**\n * Value of a feature flag\n */\nexport interface FeatureFlagValue {\n  /**\n   * Id for the feature flag.\n   */\n  id?: string;\n  /**\n   * A Feature filter consistently evaluates the state of a feature flag.\n   * Our feature management library supports three types of built-in filters: Targeting, TimeWindow, and Percentage.\n   * Custom filters can also be created based on different factors, such as device used, browser types, geographic location, etc.\n   *\n   * [More Info](https://docs.microsoft.com/en-us/azure/azure-app-configuration/howto-feature-filters-aspnet-core)\n   */\n  conditions: {\n    clientFilters: { name: string; parameters?: Record<string, unknown> }[];\n  };\n  /**\n   * Description of the feature.\n   */\n  description?: string;\n  /**\n   * Boolean flag to say if the feature flag is enabled.\n   */\n  enabled: boolean;\n  /**\n   * Display name for the feature to use for display rather than the ID.\n   */\n  displayName?: string;\n}\n\n/**\n * @internal\n */\nexport const FeatureFlagHelper = {\n  /**\n   * Takes the FeatureFlag (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n   */\n  toConfigurationSettingParam: (\n    featureFlag: ConfigurationSettingParam<FeatureFlagValue>\n  ): ConfigurationSettingParam => {\n    if (!featureFlag.value) {\n      throw new TypeError(`FeatureFlag has an unexpected value - ${featureFlag.value}`);\n    }\n    let key = featureFlag.key;\n    if (typeof featureFlag.key === \"string\" && !featureFlag.key.startsWith(featureFlagPrefix)) {\n      key = featureFlagPrefix + featureFlag.key;\n    }\n    const jsonFeatureFlagValue: JsonFeatureFlagValue = {\n      id: featureFlag.value.id ?? key.replace(featureFlagPrefix, \"\"),\n      enabled: featureFlag.value.enabled,\n      description: featureFlag.value.description,\n      conditions: {\n        client_filters: featureFlag.value.conditions.clientFilters\n      },\n      display_name: featureFlag.value.displayName\n    };\n\n    const configSetting = {\n      ...featureFlag,\n      key,\n      value: JSON.stringify(jsonFeatureFlagValue)\n    };\n    return configSetting;\n  }\n};\n\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<FeatureFlagValue> by parsing the value string.\n */\nexport function parseFeatureFlag(\n  setting: ConfigurationSetting\n): ConfigurationSetting<FeatureFlagValue> {\n  if (!isFeatureFlag(setting)) {\n    throw TypeError(errorMessageForUnexpectedSetting(setting.key, \"FeatureFlag\"));\n  }\n\n  const jsonFeatureFlagValue = JSON.parse(setting.value) as JsonFeatureFlagValue;\n\n  let key = setting.key;\n  if (typeof setting.key === \"string\" && !setting.key.startsWith(featureFlagPrefix)) {\n    key = featureFlagPrefix + setting.key;\n  }\n  const featureflag: ConfigurationSetting<FeatureFlagValue> = {\n    ...setting,\n    value: {\n      id: jsonFeatureFlagValue.id,\n      enabled: jsonFeatureFlagValue.enabled,\n      description: jsonFeatureFlagValue.description,\n      displayName: jsonFeatureFlagValue.display_name,\n      conditions: { clientFilters: jsonFeatureFlagValue.conditions.client_filters }\n    },\n    key,\n    contentType: featureFlagContentType\n  };\n  return featureflag;\n}\n\n/**\n * Lets you know if the ConfigurationSetting is a feature flag.\n *\n * [Checks if the content type is featureFlagContentType `\"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\"`]\n */\nexport function isFeatureFlag(\n  setting: ConfigurationSetting\n): setting is ConfigurationSetting & Required<Pick<ConfigurationSetting, \"value\">> {\n  return (\n    setting && setting.contentType === featureFlagContentType && typeof setting.value === \"string\"\n  );\n}\n"]}