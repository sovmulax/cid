{"version":3,"file":"appConfigurationClient.js","sourceRoot":"","sources":["../../src/appConfigurationClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// https://azure.github.io/azure-sdk/typescript_design.html#ts-config-lib\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { AppConfigCredential } from \"./appConfigCredential\";\nimport { AppConfiguration } from \"./generated/src/appConfiguration\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  isTokenCredential,\n  exponentialRetryPolicy,\n  systemErrorRetryPolicy,\n  ServiceClientCredentials,\n  UserAgentOptions,\n  getDefaultUserAgentValue as getCoreHttpDefaultUserAgentValue,\n  userAgentPolicy\n} from \"@azure/core-http\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { TokenCredential } from \"@azure/core-auth\";\n\nimport \"@azure/core-asynciterator-polyfill\";\n\nimport {\n  AddConfigurationSettingOptions,\n  AddConfigurationSettingParam,\n  AddConfigurationSettingResponse,\n  ConfigurationSetting,\n  ConfigurationSettingId,\n  DeleteConfigurationSettingOptions,\n  DeleteConfigurationSettingResponse,\n  GetConfigurationSettingOptions,\n  GetConfigurationSettingResponse,\n  ListConfigurationSettingPage,\n  ListConfigurationSettingsOptions,\n  ListRevisionsOptions,\n  ListRevisionsPage,\n  PageSettings,\n  RetryOptions,\n  SetConfigurationSettingOptions,\n  SetConfigurationSettingParam,\n  SetConfigurationSettingResponse,\n  SetReadOnlyOptions,\n  SetReadOnlyResponse\n} from \"./models\";\nimport {\n  checkAndFormatIfAndIfNoneMatch,\n  extractAfterTokenFromNextLink,\n  formatFiltersAndSelect,\n  makeConfigurationSettingEmpty,\n  transformKeyValueResponse,\n  transformKeyValueResponseWithStatusCode,\n  transformKeyValue,\n  formatAcceptDateTime,\n  formatFieldsForSelect,\n  serializeAsConfigurationSettingParam\n} from \"./internal/helpers\";\nimport { tracingPolicy } from \"@azure/core-http\";\nimport { trace as traceFromTracingHelpers } from \"./internal/tracingHelpers\";\nimport {\n  AppConfigurationGetKeyValuesResponse,\n  AppConfigurationOptionalParams as GeneratedAppConfigurationClientOptions\n} from \"./generated/src/models\";\nimport { syncTokenPolicy, SyncTokens } from \"./internal/synctokenpolicy\";\nimport { FeatureFlagValue } from \"./featureFlag\";\nimport { SecretReferenceValue } from \"./secretReference\";\n\nconst packageName = \"azsdk-js-app-configuration\";\n\n/**\n * This constant should always be the same as the package.json's version - we use it when forming the\n * User - Agent header. There's a unit test that makes sure it always stays in sync.\n * @internal\n */\nexport const packageVersion = \"1.3.1\";\nconst apiVersion = \"1.0\";\nconst ConnectionStringRegex = /Endpoint=(.*);Id=(.*);Secret=(.*)/;\nconst deserializationContentTypes = {\n  json: [\n    \"application/vnd.microsoft.appconfig.kvset+json\",\n    \"application/vnd.microsoft.appconfig.kv+json\",\n    \"application/vnd.microsoft.appconfig.kvs+json\",\n    \"application/vnd.microsoft.appconfig.keyset+json\",\n    \"application/vnd.microsoft.appconfig.revs+json\"\n  ]\n};\n\n/**\n * Provides configuration options for AppConfigurationClient.\n */\nexport interface AppConfigurationClientOptions {\n  // NOTE: AppConfigurationClient is currently using it's own version of the ThrottlingRetryPolicy\n  // which we are going to unify with core-http. When we do that we can have this options\n  // interface extend PipelineOptions, and also switch over to using`createPipelineFromOptions`\n  // which will auto-create all of these policies and remove a lot of code.\n  //\n  // In the meantime we'll just deal with having our own interface that's compatible with PipelineOptions\n  // for the small subset we absolutely need to support.\n\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentOptions;\n\n  /**\n   * Options that control how to retry failed requests.\n   */\n  retryOptions?: RetryOptions;\n}\n\n/**\n * Provides internal configuration options for AppConfigurationClient.\n * @internal\n */\nexport interface InternalAppConfigurationClientOptions extends AppConfigurationClientOptions {\n  /**\n   * The sync token cache to use for this client.\n   * NOTE: this is an internal option, not for general client usage.\n   */\n  syncTokens?: SyncTokens;\n}\n\n/**\n * Client for the Azure App Configuration service.\n */\nexport class AppConfigurationClient {\n  private client: AppConfiguration;\n  private _syncTokens: SyncTokens;\n  // (for tests)\n  private _trace = traceFromTracingHelpers;\n\n  /**\n   * Initializes a new instance of the AppConfigurationClient class.\n   * @param connectionString - Connection string needed for a client to connect to Azure.\n   * @param options - Options for the AppConfigurationClient.\n   */\n  constructor(connectionString: string, options?: AppConfigurationClientOptions);\n  /**\n   * Initializes a new instance of the AppConfigurationClient class using\n   * a TokenCredential.\n   * @param endpoint - The endpoint of the App Configuration service (ex: https://sample.azconfig.io).\n   * @param tokenCredential - An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the \\@azure/identity package to create a credential that suits your needs.\n   * @param options - Options for the AppConfigurationClient.\n   */\n  constructor(\n    endpoint: string,\n    tokenCredential: TokenCredential,\n    options?: AppConfigurationClientOptions\n  );\n  constructor(\n    connectionStringOrEndpoint: string,\n    tokenCredentialOrOptions?: TokenCredential | AppConfigurationClientOptions,\n    options?: AppConfigurationClientOptions\n  ) {\n    let appConfigOptions: InternalAppConfigurationClientOptions = {};\n    let appConfigCredential: ServiceClientCredentials | TokenCredential;\n    let appConfigEndpoint: string;\n\n    if (isTokenCredential(tokenCredentialOrOptions)) {\n      appConfigOptions = (options as InternalAppConfigurationClientOptions) || {};\n      appConfigCredential = tokenCredentialOrOptions;\n      appConfigEndpoint = connectionStringOrEndpoint;\n    } else {\n      appConfigOptions = (tokenCredentialOrOptions as InternalAppConfigurationClientOptions) || {};\n      const regexMatch = connectionStringOrEndpoint?.match(ConnectionStringRegex);\n      if (regexMatch) {\n        appConfigCredential = new AppConfigCredential(regexMatch[2], regexMatch[3]);\n        appConfigEndpoint = regexMatch[1];\n      } else {\n        throw new Error(\n          `Invalid connection string. Valid connection strings should match the regex '${ConnectionStringRegex.source}'.`\n        );\n      }\n    }\n\n    this._syncTokens = appConfigOptions.syncTokens || new SyncTokens();\n\n    this.client = new AppConfiguration(\n      appConfigCredential,\n      appConfigEndpoint,\n      apiVersion,\n      getGeneratedClientOptions(appConfigEndpoint, this._syncTokens, appConfigOptions)\n    );\n  }\n\n  /**\n   * Add a setting into the Azure App Configuration service, failing if it\n   * already exists.\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.addConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\", value: \"MyValue\" });\n   * ```\n   * @param configurationSetting - A configuration setting.\n   * @param options - Optional parameters for the request.\n   */\n  addConfigurationSetting(\n    configurationSetting:\n      | AddConfigurationSettingParam\n      | AddConfigurationSettingParam<FeatureFlagValue>\n      | AddConfigurationSettingParam<SecretReferenceValue>,\n    options: AddConfigurationSettingOptions = {}\n  ): Promise<AddConfigurationSettingResponse> {\n    return this._trace(\"addConfigurationSetting\", options, async (newOptions) => {\n      const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n      const originalResponse = await this.client.putKeyValue(configurationSetting.key, {\n        ifNoneMatch: \"*\",\n        label: configurationSetting.label,\n        entity: keyValue,\n        ...newOptions\n      });\n      return transformKeyValueResponse(originalResponse);\n    });\n  }\n\n  /**\n   * Delete a setting from the Azure App Configuration service\n   *\n   * Example usage:\n   * ```ts\n   * const deletedSetting = await client.deleteConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to delete.\n   * @param options - Optional parameters for the request (ex: etag, label)\n   */\n  deleteConfigurationSetting(\n    id: ConfigurationSettingId,\n    options: DeleteConfigurationSettingOptions = {}\n  ): Promise<DeleteConfigurationSettingResponse> {\n    return this._trace(\"deleteConfigurationSetting\", options, async (newOptions) => {\n      const originalResponse = await this.client.deleteKeyValue(id.key, {\n        label: id.label,\n        ...newOptions,\n        ...checkAndFormatIfAndIfNoneMatch(id, options)\n      });\n\n      return transformKeyValueResponseWithStatusCode(originalResponse);\n    });\n  }\n\n  /**\n   * Gets a setting from the Azure App Configuration service.\n   *\n   * Example code:\n   * ```ts\n   * const setting = await client.getConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to get.\n   * @param options - Optional parameters for the request.\n   */\n  async getConfigurationSetting(\n    id: ConfigurationSettingId,\n    options: GetConfigurationSettingOptions = {}\n  ): Promise<GetConfigurationSettingResponse> {\n    return this._trace(\"getConfigurationSetting\", options, async (newOptions) => {\n      const originalResponse = await this.client.getKeyValue(id.key, {\n        ...newOptions,\n        label: id.label,\n        select: formatFieldsForSelect(options.fields),\n        ...formatAcceptDateTime(options),\n        ...checkAndFormatIfAndIfNoneMatch(id, options)\n      });\n\n      const response: GetConfigurationSettingResponse = transformKeyValueResponseWithStatusCode(\n        originalResponse\n      );\n\n      // 304 only comes back if the user has passed a conditional option in their\n      // request _and_ the remote object has the same etag as what the user passed.\n      if (response.statusCode === 304) {\n        // this is one of our few 'required' fields so we'll make sure it does get initialized\n        // with a value\n        response.key = id.key;\n\n        // and now we'll undefine all the other properties that are not HTTP related\n        makeConfigurationSettingEmpty(response);\n      }\n\n      return response;\n    });\n  }\n\n  /**\n   * Lists settings from the Azure App Configuration service, optionally\n   * filtered by key names, labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const allSettingsWithLabel = client.listConfigurationSettings({ labelFilter: \"MyLabel\" });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listConfigurationSettings(\n    options: ListConfigurationSettingsOptions = {}\n  ): PagedAsyncIterableIterator<ConfigurationSetting, ListConfigurationSettingPage, PageSettings> {\n    const iter = this.getListConfigurationSettingsIterator(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        // The appconfig service doesn't currently support letting you select a page size\n        // so we're ignoring their setting for now.\n        return this.listConfigurationSettingsByPage({\n          ...options,\n          continuationToken: settings.continuationToken\n        });\n      }\n    };\n  }\n\n  private async *getListConfigurationSettingsIterator(\n    options: ListConfigurationSettingsOptions\n  ): AsyncIterableIterator<ConfigurationSetting> {\n    for await (const page of this.listConfigurationSettingsByPage(options)) {\n      for (const configurationSetting of page.items) {\n        yield configurationSetting;\n      }\n    }\n  }\n\n  private async *listConfigurationSettingsByPage(\n    options: ListConfigurationSettingsOptions & PageSettings = {}\n  ): AsyncIterableIterator<ListConfigurationSettingPage> {\n    let currentResponse = await this._trace(\n      \"listConfigurationSettings\",\n      options,\n      async (newOptions) => {\n        const response = await this.client.getKeyValues({\n          ...newOptions,\n          ...formatAcceptDateTime(options),\n          ...formatFiltersAndSelect(options),\n          after: options.continuationToken\n        });\n\n        return response;\n      }\n    );\n\n    yield* this.createListConfigurationPageFromResponse(currentResponse);\n\n    while (currentResponse.nextLink) {\n      currentResponse = await this._trace(\n        \"listConfigurationSettings\",\n        options,\n        // TODO: same code up above. Unify.\n        async (newOptions) => {\n          const response = await this.client.getKeyValues({\n            ...newOptions,\n            ...formatAcceptDateTime(options),\n            ...formatFiltersAndSelect(options),\n            after: extractAfterTokenFromNextLink(currentResponse.nextLink!)\n          });\n\n          return response;\n        }\n      );\n\n      if (!currentResponse.items) {\n        break;\n      }\n\n      yield* this.createListConfigurationPageFromResponse(currentResponse);\n    }\n  }\n\n  private *createListConfigurationPageFromResponse(\n    currentResponse: AppConfigurationGetKeyValuesResponse\n  ): Generator<ListConfigurationSettingPage> {\n    yield {\n      ...currentResponse,\n      items: currentResponse.items != null ? currentResponse.items.map(transformKeyValue) : [],\n      continuationToken: currentResponse.nextLink\n        ? extractAfterTokenFromNextLink(currentResponse.nextLink)\n        : undefined\n    };\n  }\n\n  /**\n   * Lists revisions of a set of keys, optionally filtered by key names,\n   * labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const revisionsIterator = client.listRevisions({ keys: [\"MyKey\"] });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listRevisions(\n    options?: ListRevisionsOptions\n  ): PagedAsyncIterableIterator<ConfigurationSetting, ListRevisionsPage, PageSettings> {\n    const iter = this.getListRevisionsIterator(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        // The appconfig service doesn't currently support letting you select a page size\n        // so we're ignoring their setting for now.\n        return this.listRevisionsByPage({\n          ...options,\n          continuationToken: settings.continuationToken\n        });\n      }\n    };\n  }\n\n  private async *getListRevisionsIterator(\n    options?: ListRevisionsOptions\n  ): AsyncIterableIterator<ConfigurationSetting> {\n    for await (const page of this.listRevisionsByPage(options)) {\n      for (const item of page.items) {\n        yield item;\n      }\n    }\n  }\n\n  private async *listRevisionsByPage(\n    options: ListRevisionsOptions & PageSettings = {}\n  ): AsyncIterableIterator<ListRevisionsPage> {\n    let currentResponse = await this._trace(\"listRevisions\", options, async (newOptions) => {\n      const response = await this.client.getRevisions({\n        ...newOptions,\n        ...formatAcceptDateTime(options),\n        ...formatFiltersAndSelect(newOptions),\n        after: options.continuationToken\n      });\n\n      return response;\n    });\n\n    yield* this.createListRevisionsPageFromResponse(currentResponse);\n\n    while (currentResponse.nextLink) {\n      currentResponse = await this._trace(\"listRevisions\", options, (newOptions) => {\n        return this.client.getRevisions({\n          ...newOptions,\n          ...formatAcceptDateTime(options),\n          ...formatFiltersAndSelect(options),\n          after: extractAfterTokenFromNextLink(currentResponse.nextLink!)\n        });\n      });\n\n      if (!currentResponse.items) {\n        break;\n      }\n\n      yield* this.createListRevisionsPageFromResponse(currentResponse);\n    }\n  }\n\n  private *createListRevisionsPageFromResponse(\n    currentResponse: AppConfigurationGetKeyValuesResponse\n  ) {\n    yield {\n      ...currentResponse,\n      items: currentResponse.items != null ? currentResponse.items.map(transformKeyValue) : [],\n      continuationToken: currentResponse.nextLink\n        ? extractAfterTokenFromNextLink(currentResponse.nextLink)\n        : undefined\n    };\n  }\n\n  /**\n   * Sets the value of a key in the Azure App Configuration service, allowing for an optional etag.\n   * @param key - The name of the key.\n   * @param configurationSetting - A configuration value.\n   * @param options - Optional parameters for the request.\n   *\n   * Example code:\n   * ```ts\n   * await client.setConfigurationSetting({ key: \"MyKey\", value: \"MyValue\" });\n   * ```\n   */\n  async setConfigurationSetting(\n    configurationSetting:\n      | SetConfigurationSettingParam\n      | SetConfigurationSettingParam<FeatureFlagValue>\n      | SetConfigurationSettingParam<SecretReferenceValue>,\n    options: SetConfigurationSettingOptions = {}\n  ): Promise<SetConfigurationSettingResponse> {\n    return this._trace(\"setConfigurationSetting\", options, async (newOptions) => {\n      const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n      const response = await this.client.putKeyValue(configurationSetting.key, {\n        ...newOptions,\n        label: configurationSetting.label,\n        entity: keyValue,\n        ...checkAndFormatIfAndIfNoneMatch(configurationSetting, options)\n      });\n\n      return transformKeyValueResponse(response);\n    });\n  }\n\n  /**\n   * Sets or clears a key's read-only status.\n   * @param id - The id of the configuration setting to modify.\n   */\n  async setReadOnly(\n    id: ConfigurationSettingId,\n    readOnly: boolean,\n    options: SetReadOnlyOptions = {}\n  ): Promise<SetReadOnlyResponse> {\n    return this._trace(\"setReadOnly\", options, async (newOptions) => {\n      if (readOnly) {\n        const response = await this.client.putLock(id.key, {\n          ...newOptions,\n          label: id.label,\n          ...checkAndFormatIfAndIfNoneMatch(id, options)\n        });\n\n        return transformKeyValueResponse(response);\n      } else {\n        const response = await this.client.deleteLock(id.key, {\n          ...newOptions,\n          label: id.label,\n          ...checkAndFormatIfAndIfNoneMatch(id, options)\n        });\n\n        return transformKeyValueResponse(response);\n      }\n    });\n  }\n\n  /**\n   * Adds an external synchronization token to ensure service requests receive up-to-date values.\n   *\n   * @param syncToken - The synchronization token value.\n   */\n  updateSyncToken(syncToken: string): void {\n    this._syncTokens.addSyncTokenFromHeaderValue(syncToken);\n  }\n}\n/**\n * Gets the options for the generated AppConfigurationClient\n * @internal\n */\nexport function getGeneratedClientOptions(\n  endpoint: string,\n  syncTokens: SyncTokens,\n  internalAppConfigOptions: InternalAppConfigurationClientOptions\n): GeneratedAppConfigurationClientOptions {\n  const retryPolicies = [\n    exponentialRetryPolicy(),\n    systemErrorRetryPolicy(),\n    throttlingRetryPolicy(internalAppConfigOptions.retryOptions)\n  ];\n\n  const userAgent = getUserAgentPrefix(\n    internalAppConfigOptions.userAgentOptions &&\n      internalAppConfigOptions.userAgentOptions.userAgentPrefix\n  );\n\n  return {\n    endpoint,\n    deserializationContentTypes,\n    // we'll add in our own custom retry policies\n    noRetryPolicy: true,\n    requestPolicyFactories: (defaults) => [\n      tracingPolicy({ userAgent }),\n      syncTokenPolicy(syncTokens),\n      userAgentPolicy({ value: userAgent }),\n      ...retryPolicies,\n      ...defaults\n    ],\n    generateClientRequestIdHeader: true\n  };\n}\n\n/**\n * @internal\n */\nexport function getUserAgentPrefix(userSuppliedUserAgent: string | undefined): string {\n  const appConfigDefaultUserAgent = `${packageName}/${packageVersion} ${getCoreHttpDefaultUserAgentValue()}`;\n\n  if (!userSuppliedUserAgent) {\n    return appConfigDefaultUserAgent;\n  }\n\n  return `${userSuppliedUserAgent} ${appConfigDefaultUserAgent}`;\n}\n"]}