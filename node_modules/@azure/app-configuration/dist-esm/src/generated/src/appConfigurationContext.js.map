{"version":3,"file":"appConfigurationContext.js","sourceRoot":"","sources":["../../../../src/generated/src/appConfigurationContext.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB,CAAC;AAG7C,MAAM,WAAW,GAAG,mBAAmB,CAAC;AACxC,MAAM,cAAc,GAAG,OAAO,CAAC;AAE/B,gBAAgB;AAChB,MAAM,OAAO,uBAAwB,SAAQ,QAAQ,CAAC,aAAa;IAKjE;;;;;;OAMG;IACH,YACE,WAAyE,EACzE,QAAgB,EAChB,UAAwB,EACxB,OAAwC;QAExC,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QACD,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,IAAI,UAAU,KAAK,SAAS,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAChD;QAED,0CAA0C;QAC1C,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;SACd;QAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACtB,MAAM,gBAAgB,GAAG,QAAQ,CAAC,wBAAwB,EAAE,CAAC;YAC7D,OAAO,CAAC,SAAS,GAAG,GAAG,WAAW,IAAI,cAAc,IAAI,gBAAgB,EAAE,CAAC;SAC5E;QAED,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAE5B,IAAI,CAAC,kBAAkB,GAAG,iCAAiC,CAAC;QAE5D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,QAAQ,IAAI,YAAY,CAAC;QAEhD,wBAAwB;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { ApiVersion10, AppConfigurationOptionalParams } from \"./models\";\n\nconst packageName = \"app-configuration\";\nconst packageVersion = \"1.3.1\";\n\n/** @internal */\nexport class AppConfigurationContext extends coreHttp.ServiceClient {\n  endpoint: string;\n  syncToken?: string;\n  apiVersion: ApiVersion10;\n\n  /**\n   * Initializes a new instance of the AppConfigurationContext class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param endpoint The endpoint of the App Configuration instance to send requests to.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    endpoint: string,\n    apiVersion: ApiVersion10,\n    options?: AppConfigurationOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n    if (apiVersion === undefined) {\n      throw new Error(\"'apiVersion' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{endpoint}\";\n\n    // Parameter assignments\n    this.endpoint = endpoint;\n    this.apiVersion = apiVersion;\n  }\n}\n"]}