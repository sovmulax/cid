/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { QueryCollectionFormat } from "@azure/core-http";
import { KeyValue as KeyValueMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/vnd.microsoft.appconfig.keyset+json, application/json, application/problem+json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const name = {
    parameterPath: ["options", "name"],
    mapper: {
        serializedName: "name",
        type: {
            name: "String"
        }
    }
};
export const syncToken = {
    parameterPath: "syncToken",
    mapper: {
        serializedName: "Sync-Token",
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const after = {
    parameterPath: ["options", "after"],
    mapper: {
        serializedName: "After",
        type: {
            name: "String"
        }
    }
};
export const acceptDatetime = {
    parameterPath: ["options", "acceptDatetime"],
    mapper: {
        serializedName: "Accept-Datetime",
        type: {
            name: "String"
        }
    }
};
export const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/vnd.microsoft.appconfig.kvset+json, application/json, application/problem+json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const key = {
    parameterPath: ["options", "key"],
    mapper: {
        serializedName: "key",
        type: {
            name: "String"
        }
    }
};
export const label = {
    parameterPath: ["options", "label"],
    mapper: {
        serializedName: "label",
        type: {
            name: "String"
        }
    }
};
export const select = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$Select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export const select1 = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$Select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export const accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/vnd.microsoft.appconfig.kv+json, application/json, application/problem+json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const key1 = {
    parameterPath: "key",
    mapper: {
        serializedName: "key",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
export const select2 = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$Select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/vnd.microsoft.appconfig.kv+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const entity = {
    parameterPath: ["options", "entity"],
    mapper: KeyValueMapper
};
export const select3 = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$Select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export const accept3 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/vnd.microsoft.appconfig.labelset+json, application/json, application/problem+json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const select4 = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$Select",
        type: {
            name: "Sequence",
            element: {
                defaultValue: "name",
                isConstant: true,
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export const select5 = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$Select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export const select6 = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$Select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: QueryCollectionFormat.Csv
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
//# sourceMappingURL=parameters.js.map