/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { AppConfigurationContext } from "./appConfigurationContext";
/** @internal */
export class AppConfiguration extends AppConfigurationContext {
    /**
     * Initializes a new instance of the AppConfiguration class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param endpoint The endpoint of the App Configuration instance to send requests to.
     * @param apiVersion Api Version
     * @param options The parameter options
     */
    constructor(credentials, endpoint, apiVersion, options) {
        super(credentials, endpoint, apiVersion, options);
    }
    /**
     * Gets a list of keys.
     * @param options The options parameters.
     */
    getKeys(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getKeysOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkKeys(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, checkKeysOperationSpec);
    }
    /**
     * Gets a list of key-values.
     * @param options The options parameters.
     */
    getKeyValues(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getKeyValuesOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkKeyValues(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, checkKeyValuesOperationSpec);
    }
    /**
     * Gets a single key-value.
     * @param key The key of the key-value to retrieve.
     * @param options The options parameters.
     */
    getKeyValue(key, options) {
        const operationArguments = {
            key,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getKeyValueOperationSpec);
    }
    /**
     * Creates a key-value.
     * @param key The key of the key-value to create.
     * @param options The options parameters.
     */
    putKeyValue(key, options) {
        const operationArguments = {
            key,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, putKeyValueOperationSpec);
    }
    /**
     * Deletes a key-value.
     * @param key The key of the key-value to delete.
     * @param options The options parameters.
     */
    deleteKeyValue(key, options) {
        const operationArguments = {
            key,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, deleteKeyValueOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param key The key of the key-value to retrieve.
     * @param options The options parameters.
     */
    checkKeyValue(key, options) {
        const operationArguments = {
            key,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, checkKeyValueOperationSpec);
    }
    /**
     * Gets a list of labels.
     * @param options The options parameters.
     */
    getLabels(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getLabelsOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkLabels(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, checkLabelsOperationSpec);
    }
    /**
     * Locks a key-value.
     * @param key The key of the key-value to lock.
     * @param options The options parameters.
     */
    putLock(key, options) {
        const operationArguments = {
            key,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, putLockOperationSpec);
    }
    /**
     * Unlocks a key-value.
     * @param key The key of the key-value to unlock.
     * @param options The options parameters.
     */
    deleteLock(key, options) {
        const operationArguments = {
            key,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, deleteLockOperationSpec);
    }
    /**
     * Gets a list of key-value revisions.
     * @param options The options parameters.
     */
    getRevisions(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getRevisionsOperationSpec);
    }
    /**
     * Requests the headers and status of the given resource.
     * @param options The options parameters.
     */
    checkRevisions(options) {
        const operationArguments = {
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, checkRevisionsOperationSpec);
    }
    /**
     * GetKeysNext
     * @param nextLink The nextLink from the previous successful call to the GetKeys method.
     * @param options The options parameters.
     */
    getKeysNext(nextLink, options) {
        const operationArguments = {
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getKeysNextOperationSpec);
    }
    /**
     * GetKeyValuesNext
     * @param nextLink The nextLink from the previous successful call to the GetKeyValues method.
     * @param options The options parameters.
     */
    getKeyValuesNext(nextLink, options) {
        const operationArguments = {
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getKeyValuesNextOperationSpec);
    }
    /**
     * GetLabelsNext
     * @param nextLink The nextLink from the previous successful call to the GetLabels method.
     * @param options The options parameters.
     */
    getLabelsNext(nextLink, options) {
        const operationArguments = {
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getLabelsNextOperationSpec);
    }
    /**
     * GetRevisionsNext
     * @param nextLink The nextLink from the previous successful call to the GetRevisions method.
     * @param options The options parameters.
     */
    getRevisionsNext(nextLink, options) {
        const operationArguments = {
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getRevisionsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
const getKeysOperationSpec = {
    path: "/keys",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult,
            headersMapper: Mappers.AppConfigurationGetKeysHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.accept,
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    serializer
};
const checkKeysOperationSpec = {
    path: "/keys",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.AppConfigurationCheckKeysHeaders
        },
        default: {}
    },
    queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
    serializer
};
const getKeyValuesOperationSpec = {
    path: "/kv",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.AppConfigurationGetKeyValuesHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1
    ],
    serializer
};
const checkKeyValuesOperationSpec = {
    path: "/kv",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.AppConfigurationCheckKeyValuesHeaders
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select1
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
    serializer
};
const getKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.AppConfigurationGetKeyValueHeaders
        },
        304: {
            headersMapper: Mappers.AppConfigurationGetKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.label,
        Parameters.select2
    ],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept2,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const putKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.AppConfigurationPutKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.entity,
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.accept2,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.contentType
    ],
    mediaType: "json",
    serializer
};
const deleteKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.AppConfigurationDeleteKeyValueHeaders
        },
        204: {
            headersMapper: Mappers.AppConfigurationDeleteKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.accept2,
        Parameters.ifMatch
    ],
    serializer
};
const checkKeyValueOperationSpec = {
    path: "/kv/{key}",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.AppConfigurationCheckKeyValueHeaders
        },
        304: {
            headersMapper: Mappers.AppConfigurationCheckKeyValueHeaders
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.label,
        Parameters.select3
    ],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const getLabelsOperationSpec = {
    path: "/labels",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabelListResult,
            headersMapper: Mappers.AppConfigurationGetLabelsHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select4
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept3
    ],
    serializer
};
const checkLabelsOperationSpec = {
    path: "/labels",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.AppConfigurationCheckLabelsHeaders
        },
        default: {}
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select4
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
    serializer
};
const putLockOperationSpec = {
    path: "/locks/{key}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.AppConfigurationPutLockHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.accept2,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const deleteLockOperationSpec = {
    path: "/locks/{key}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.AppConfigurationDeleteLockHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.label],
    urlParameters: [Parameters.endpoint, Parameters.key1],
    headerParameters: [
        Parameters.syncToken,
        Parameters.accept2,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    serializer
};
const getRevisionsOperationSpec = {
    path: "/revisions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.AppConfigurationGetRevisionsHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select5
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1
    ],
    serializer
};
const checkRevisionsOperationSpec = {
    path: "/revisions",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: Mappers.AppConfigurationCheckRevisionsHeaders
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select6
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],
    serializer
};
const getKeysNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult,
            headersMapper: Mappers.AppConfigurationGetKeysNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.accept,
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    serializer
};
const getKeyValuesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.AppConfigurationGetKeyValuesNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select
    ],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1
    ],
    serializer
};
const getLabelsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LabelListResult,
            headersMapper: Mappers.AppConfigurationGetLabelsNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select4
    ],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept3
    ],
    serializer
};
const getRevisionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.AppConfigurationGetRevisionsNextHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.after,
        Parameters.key,
        Parameters.label,
        Parameters.select5
    ],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.accept1
    ],
    serializer
};
//# sourceMappingURL=appConfiguration.js.map