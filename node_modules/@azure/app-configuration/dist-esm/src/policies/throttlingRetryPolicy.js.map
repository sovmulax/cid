{"version":3,"file":"throttlingRetryPolicy.js","sourceRoot":"","sources":["../../../src/policies/throttlingRetryPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory,\n  WebResource,\n  HttpOperationResponse,\n  Constants,\n  RestError\n} from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\nimport { RetryOptions } from \"../models\";\n\n/**\n * @internal\n */\nexport function throttlingRetryPolicy(retryOptions?: RetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n// Merge this constant with the one in core-http when we unify throttling retry policy in core-http and app-config\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\n\n/**\n * This policy is a close copy of the ThrottlingRetryPolicy class from\n * core-http with modifications to work with how AppConfig is currently\n * responding to 429 responses (which is to throw a RestError).\n *\n * @internal\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private numberOfRetries = 0;\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private retryOptions: RetryOptions = { maxRetries: DEFAULT_CLIENT_RETRY_COUNT }\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).catch(async (err) => {\n      if (isRestErrorWithHeaders(err)) {\n        let delayInMs = getDelayInMs(err.response.headers);\n\n        if (delayInMs == null) {\n          throw err;\n        }\n\n        if (\n          this.retryOptions.maxRetryDelayInMs &&\n          delayInMs > this.retryOptions.maxRetryDelayInMs\n        ) {\n          delayInMs = this.retryOptions.maxRetryDelayInMs;\n        }\n\n        this.numberOfRetries += 1;\n        await delay(delayInMs, undefined, {\n          abortSignal: httpRequest.abortSignal,\n          abortErrorMsg: StandardAbortMessage\n        });\n        if (httpRequest.abortSignal?.aborted) {\n          throw new AbortError(StandardAbortMessage);\n        }\n\n        if (this.retryOptions.maxRetries === undefined || this.retryOptions.maxRetries === null) {\n          this.retryOptions.maxRetries = DEFAULT_CLIENT_RETRY_COUNT;\n        }\n\n        if (this.numberOfRetries < this.retryOptions.maxRetries) {\n          // retries\n          return this.sendRequest(httpRequest.clone());\n        } else {\n          // passes on to the next policy\n          return this._nextPolicy.sendRequest(httpRequest.clone());\n        }\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry (in milliseconds).\n */\nconst RetryAfterMillisecondsHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\"];\n\n/**\n * Extracts the retry response header, checking against several\n * header names.\n * @internal\n */\nexport function getDelayInMs(responseHeaders: {\n  get: (headerName: string) => string | undefined;\n}): number | undefined {\n  for (const name of RetryAfterMillisecondsHeaders) {\n    const delayValueString = responseHeaders.get(name);\n\n    if (delayValueString == null) {\n      continue;\n    }\n\n    const delayValueMs: number = Number(delayValueString);\n\n    if (Number.isNaN(delayValueMs)) {\n      return undefined;\n    }\n\n    return delayValueMs;\n  }\n\n  const retryAfterValue = responseHeaders.get(Constants.HeaderConstants.RETRY_AFTER);\n\n  if (retryAfterValue != null) {\n    return ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterValue);\n  }\n\n  return undefined;\n}\n\ntype RestErrorWithHeaders = Pick<RestError, Exclude<keyof RestError, \"response\">> & {\n  response: HttpOperationResponse;\n};\n\nfunction isRestErrorWithHeaders(err: any): err is RestErrorWithHeaders {\n  return (\n    err &&\n    err.statusCode &&\n    typeof err.statusCode === \"number\" &&\n    err.response &&\n    err.response.headers &&\n    typeof err.response.headers.get === \"function\"\n  );\n}\n"]}