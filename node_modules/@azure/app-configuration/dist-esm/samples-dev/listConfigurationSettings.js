// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __asyncValues } from "tslib";
/**
 * @summary Demonstrates listing multiple configuration settings using a filter for a key or label.
 * @azsdk-weight 50
 */
import { AppConfigurationClient } from "@azure/app-configuration";
// Load the .env file if it exists
import * as dotenv from "dotenv";
dotenv.config();
export async function main() {
    var e_1, _a, e_2, _b;
    console.log(`Running listConfigurationSettings sample`);
    // Set the following environment variable or edit the value on the following line.
    const connectionString = process.env["APPCONFIG_CONNECTION_STRING"] || "<connection string>";
    const client = new AppConfigurationClient(connectionString);
    await client.setConfigurationSetting({
        key: "sample key",
        value: "sample value",
        label: "production"
    });
    await client.setConfigurationSetting({
        key: "sample key",
        value: "sample value",
        label: "developmentA"
    });
    await client.setConfigurationSetting({
        key: "key only for development",
        value: "value",
        label: "developmentB"
    });
    // ex: using a keyFilter
    const sampleKeys = client.listConfigurationSettings({
        keyFilter: "sample*"
    });
    console.log(`Settings matching keyFilter 'sample*'`);
    try {
        for (var sampleKeys_1 = __asyncValues(sampleKeys), sampleKeys_1_1; sampleKeys_1_1 = await sampleKeys_1.next(), !sampleKeys_1_1.done;) {
            const setting = sampleKeys_1_1.value;
            console.log(`  Found key: ${setting.key}, label: ${setting.label}`);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (sampleKeys_1_1 && !sampleKeys_1_1.done && (_a = sampleKeys_1.return)) await _a.call(sampleKeys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    // ex: using a labelFilter
    const samplesWithDevelopmentLabel = client.listConfigurationSettings({
        labelFilter: "development*"
    });
    console.log(`Settings matching labelFilter 'development*'`);
    try {
        for (var samplesWithDevelopmentLabel_1 = __asyncValues(samplesWithDevelopmentLabel), samplesWithDevelopmentLabel_1_1; samplesWithDevelopmentLabel_1_1 = await samplesWithDevelopmentLabel_1.next(), !samplesWithDevelopmentLabel_1_1.done;) {
            const setting = samplesWithDevelopmentLabel_1_1.value;
            console.log(`  Found key: ${setting.key}, label: ${setting.label}`);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (samplesWithDevelopmentLabel_1_1 && !samplesWithDevelopmentLabel_1_1.done && (_b = samplesWithDevelopmentLabel_1.return)) await _b.call(samplesWithDevelopmentLabel_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    ////////////////////////////////////////////////////////
    ///////////////  Example for .byPage()  ////////////////
    ////////////////////////////////////////////////////////
    // Passing marker as an argument
    let iterator = client.listConfigurationSettings({ keyFilter: "sample*" }).byPage();
    let response = await iterator.next();
    if (!response.done) {
        for (const setting of response.value.items) {
            console.log(`  Found key: ${setting.key}`);
        }
    }
    // Gets next marker
    let marker = response.value.continuationToken;
    // Passing next marker as continuationToken
    iterator = client.listConfigurationSettings({ keyFilter: "sample*" }).byPage({
        continuationToken: marker
    });
    response = await iterator.next();
    if (response.done) {
        console.log("List done.");
    }
    else {
        if (response.value.items) {
            for (const setting of response.value.items) {
                console.log(`  Found key: ${setting.key}`);
            }
        }
    }
}
main().catch((err) => {
    console.error("Failed to run sample:", err);
    process.exit(1);
});
//# sourceMappingURL=listConfigurationSettings.js.map