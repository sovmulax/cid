{"version":3,"file":"getSettingOnlyIfChanged.js","sourceRoot":"","sources":["../../samples-dev/getSettingOnlyIfChanged.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC;;;;;GAKG;AACH,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE,kCAAkC;AAClC,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,CAAC,KAAK,UAAU,IAAI;IACxB,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;IAE1D,kFAAkF;IAClF,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,IAAI,qBAAqB,CAAC;IAC7F,MAAM,MAAM,GAAG,IAAI,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;IAE5D,MAAM,GAAG,GAAG,gCAAgC,CAAC;IAC7C,MAAM,mBAAmB,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;IAEzC,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;IAE3F,yEAAyE;IACzE,OAAO,CAAC,GAAG,CAAC,yEAAyE,CAAC,CAAC;IAEvF,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,YAAY,EAAE;QAC3E,oGAAoG;QACpG,2EAA2E;QAC3E,aAAa,EAAE,IAAI;KACpB,CAAC,CAAC;IAEH,oGAAoG;IACpG,OAAO,CAAC,GAAG,CAAC,+BAA+B,iBAAiB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,0BAA0B;IAEtG,yGAAyG;IACzG,IAAI,iBAAiB,CAAC,KAAK,KAAK,SAAS,EAAE;QACzC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;KACvD;IAED,MAAM,mBAAmB,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;AAC3C,CAAC;AAED,KAAK,UAAU,mBAAmB,CAAC,IAAc,EAAE,MAA8B;;IAC/E,MAAM,gBAAgB,GAAG,MAAM,CAAC,yBAAyB,CAAC;QACxD,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;KAC1B,CAAC,CAAC;;QAEH,KAA4B,IAAA,qBAAA,cAAA,gBAAgB,CAAA,sBAAA;YAAjC,MAAM,OAAO,6BAAA,CAAA;YACtB,MAAM,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,MAAM,CAAC,0BAA0B,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;SACrF;;;;;;;;;AACH,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACnB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;IAC5C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary Demonstrates getting a setting only if it has changed\n * from what you already have. (This allows your app to avoid downloading\n * the contents of a setting if the value is unchanged.)\n * @azsdk-weight 60\n */\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(\"Running get setting only if changed sample\");\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const client = new AppConfigurationClient(connectionString);\n\n  const key = \"getSettingOnlyIfChangedExample\";\n  await cleanupSampleValues([key], client);\n\n  const addedSetting = await client.addConfigurationSetting({ key, value: \"Initial value\" });\n\n  // now our application only wants to download the setting if it's changed\n  console.log(\"Checking to see if the value has changed using the etag and ifNoneMatch\");\n\n  const unchangedResponse = await client.getConfigurationSetting(addedSetting, {\n    // onlyIfChanged allows us to say \"get me the value only if it doesn't match the one I already have\"\n    // this allows us to avoid transferring the setting if nothing has changed.\n    onlyIfChanged: true\n  });\n\n  // we return the response so you can still inspect the returned headers. The body, however, is blank\n  console.log(`Received a response code of ${unchangedResponse.statusCode}`); // will be HTTP status 304\n\n  // To prevent any accidental usages of this model all properties (except for 'key') are set to undefined.\n  if (unchangedResponse.value !== undefined) {\n    throw new Error(\"All properties should be undefined\");\n  }\n\n  await cleanupSampleValues([key], client);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const existingSettings = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of existingSettings) {\n    await client.setReadOnly(setting, false);\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}