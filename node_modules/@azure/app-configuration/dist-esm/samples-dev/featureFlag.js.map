{"version":3,"file":"featureFlag.js","sourceRoot":"","sources":["../../samples-dev/featureFlag.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary Feature flags are settings that follow specific JSON schema for the value.\n *\n * @azsdk-weight 20\n */\nimport {\n  AppConfigurationClient,\n  ConfigurationSetting,\n  featureFlagContentType,\n  FeatureFlagValue,\n  parseFeatureFlag\n} from \"@azure/app-configuration\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(`Running featureFlag sample`);\n\n  const originalFeatureFlag: ConfigurationSetting<FeatureFlagValue> = {\n    key: `sample-feature-flag`,\n    isReadOnly: false,\n    contentType: featureFlagContentType,\n    value: {\n      enabled: false,\n      description: \"I'm a description\",\n      conditions: {\n        clientFilters: [\n          // {\n          // // Time window filter - Use this filter to activate the feature for a time period\n          //   name: \"Microsoft.TimeWindow\",\n          //   parameters: {\n          //     Start: \"Wed, 01 May 2021 13:59:59 GMT\",\n          //     End: \"Mon, 01 July 2022 00:00:00 GMT\"\n          //   }\n          // },\n          {\n            // Targeting filter - you can target users/groups of users using this filter\n            name: \"Microsoft.Targeting\",\n            parameters: {\n              Audience: {\n                Groups: [{ Name: \"contoso.com\", RolloutPercentage: 50 }], // The feature flag is enabled for 50% of other users in the contoso.com group, because contoso.com is listed in the Groups section with a Percentage of 50.\n                Users: [\"test@contoso.com\"], // The feature flag is always enabled for user test@contoso.com, because test@contoso.com is listed in the Users section.\n                DefaultRolloutPercentage: 0 // The feature is always disabled for all other users, because the Default percentage is set to 0.\n              }\n              // You can create additional users with @contoso.com email addresses to see the behavior of the group settings. 50% of these users will see the Beta item. The other 50% won't see the Beta item.\n            }\n          }\n          // {\n          //   // Percentage filter - activates a feature based on a percentage, to enable the feature flag for 50% of requests\n          //   name: \"Microsoft.Percentage\",\n          //   parameters: { Value: 50 }\n          // },\n          // { name: \"FilterX\" }, // Custom filter\n        ]\n      }\n    }\n  };\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const appConfigClient = new AppConfigurationClient(connectionString);\n\n  await cleanupSampleValues([originalFeatureFlag.key], appConfigClient);\n\n  console.log(`Add a new featureFlag with key: ${originalFeatureFlag.key}`);\n  await appConfigClient.addConfigurationSetting(originalFeatureFlag);\n\n  console.log(`Get the added configurationSetting with key: ${originalFeatureFlag.key}`);\n  const getResponse = await appConfigClient.getConfigurationSetting({\n    key: originalFeatureFlag.key\n  });\n\n  // You can use the `isFeatureFlag` global method to check if the content type is featureFlagContentType (\"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\")\n  const newFeatureFlag = parseFeatureFlag(getResponse); // Converts the configurationsetting into featureflag\n  // Modify the props\n  for (const clientFilter of newFeatureFlag.value.conditions.clientFilters) {\n    clientFilter.parameters = clientFilter.parameters ?? {};\n    console.log(\n      `\\n...clientFilter - \"${clientFilter.name}\"...\\nparams => ${JSON.stringify(\n        clientFilter.parameters,\n        null,\n        1\n      )}\\n`\n    );\n    switch (clientFilter.name) {\n      // Tweak the client filters of the feature flag\n      case \"Microsoft.Targeting\":\n        // Adds a new user to the group\n        if (isTargetingClientFilter(clientFilter)) {\n          clientFilter.parameters.Audience.Users = clientFilter.parameters.Audience.Users.concat(\n            \"test2@contoso.com\"\n          );\n        }\n        break;\n      // case \"Microsoft.TimeWindow\":\n      // // Changes the start time\n      //   clientFilter.parameters.Start = \"Wed, 01 June 2021 13:59:59 GMT\";\n      //   break;\n      // case \"Microsoft.Percentage\":\n      // // Changes the percentage value from 50 to 75 - to enable the feature flag for 75% of requests\n      //   clientFilter.parameters.Value = 75;\n      //   break;\n      default:\n        // Change the filter name for all other client filters\n        // clientFilter.name = \"FilterY\";\n        break;\n    }\n  }\n\n  console.log(`========> Update the featureFlag <======== `);\n  // Updating the config setting\n  await appConfigClient.setConfigurationSetting(newFeatureFlag);\n\n  // Get the config setting again\n  console.log(`Get the updated config setting with key: ${newFeatureFlag.key}`);\n  const getResponseAfterUpdate = await appConfigClient.getConfigurationSetting({\n    key: newFeatureFlag.key\n  });\n\n  // You can use the `isFeatureFlag` global method to check if the content type is featureFlagContentType (\"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\")\n  const featureFlagAfterUpdate = parseFeatureFlag(getResponseAfterUpdate); // Converts the configurationsetting into featureflag\n  const conditions = featureFlagAfterUpdate.value.conditions;\n  for (const clientFilter of conditions.clientFilters) {\n    console.log(\n      `\\n...clientFilter - \"${clientFilter.name}\"...\\nparams => ${JSON.stringify(\n        clientFilter.parameters,\n        null,\n        1\n      )}\\n`\n    );\n  }\n  await cleanupSampleValues([originalFeatureFlag.key], appConfigClient);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of settingsIterator) {\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\n/**\n * typeguard - for targeting client filter\n */\nfunction isTargetingClientFilter(\n  clientFilter: any\n): clientFilter is {\n  parameters: {\n    Audience: {\n      Groups: Array<{ Name: string; RolloutPercentage: number }>;\n      Users: Array<string>;\n      DefaultRolloutPercentage: number;\n    };\n  };\n} {\n  return (\n    clientFilter.name === \"Microsoft.Targeting\" &&\n    clientFilter.parameters &&\n    clientFilter.parameters[\"Audience\"] &&\n    Array.isArray(clientFilter.parameters[\"Audience\"][\"Groups\"]) &&\n    Array.isArray(clientFilter.parameters[\"Audience\"][\"Users\"]) &&\n    typeof clientFilter.parameters[\"Audience\"][\"DefaultRolloutPercentage\"] === \"number\"\n  );\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}