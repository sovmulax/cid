{"version":3,"file":"listConfigurationSettings.js","sourceRoot":"","sources":["../../samples-dev/listConfigurationSettings.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary Demonstrates listing multiple configuration settings using a filter for a key or label.\n * @azsdk-weight 50\n */\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(`Running listConfigurationSettings sample`);\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const client = new AppConfigurationClient(connectionString);\n\n  await client.setConfigurationSetting({\n    key: \"sample key\",\n    value: \"sample value\",\n    label: \"production\"\n  });\n\n  await client.setConfigurationSetting({\n    key: \"sample key\",\n    value: \"sample value\",\n    label: \"developmentA\"\n  });\n\n  await client.setConfigurationSetting({\n    key: \"key only for development\",\n    value: \"value\",\n    label: \"developmentB\"\n  });\n\n  // ex: using a keyFilter\n  const sampleKeys = client.listConfigurationSettings({\n    keyFilter: \"sample*\"\n  });\n\n  console.log(`Settings matching keyFilter 'sample*'`);\n\n  for await (const setting of sampleKeys) {\n    console.log(`  Found key: ${setting.key}, label: ${setting.label}`);\n  }\n\n  // ex: using a labelFilter\n  const samplesWithDevelopmentLabel = client.listConfigurationSettings({\n    labelFilter: \"development*\"\n  });\n\n  console.log(`Settings matching labelFilter 'development*'`);\n\n  for await (const setting of samplesWithDevelopmentLabel) {\n    console.log(`  Found key: ${setting.key}, label: ${setting.label}`);\n  }\n\n  ////////////////////////////////////////////////////////\n  ///////////////  Example for .byPage()  ////////////////\n  ////////////////////////////////////////////////////////\n\n  // Passing marker as an argument\n  let iterator = client.listConfigurationSettings({ keyFilter: \"sample*\" }).byPage();\n  let response = await iterator.next();\n  if (!response.done) {\n    for (const setting of response.value.items) {\n      console.log(`  Found key: ${setting.key}`);\n    }\n  }\n  // Gets next marker\n  let marker = response.value.continuationToken;\n  // Passing next marker as continuationToken\n  iterator = client.listConfigurationSettings({ keyFilter: \"sample*\" }).byPage({\n    continuationToken: marker\n  });\n  response = await iterator.next();\n  if (response.done) {\n    console.log(\"List done.\");\n  } else {\n    if (response.value.items) {\n      for (const setting of response.value.items) {\n        console.log(`  Found key: ${setting.key}`);\n      }\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}