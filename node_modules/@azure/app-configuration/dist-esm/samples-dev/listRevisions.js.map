{"version":3,"file":"listRevisions.js","sourceRoot":"","sources":["../../samples-dev/listRevisions.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary Demonstrates listing revisions for a configuration setting.\n * @azsdk-weight 40\n */\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(`Running listRevisions sample`);\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const client = new AppConfigurationClient(connectionString);\n\n  // let's create the setting\n  const originalSetting = await client.addConfigurationSetting({\n    key: `keyWithRevisions-${Date.now()}`,\n    value: \"original value\"\n  });\n\n  console.log(`First revision created with value ${originalSetting.value}`);\n\n  const newSetting = {\n    ...originalSetting,\n    value: \"A new value!\"\n  };\n\n  // delay for a second to make the timestamps more interesting\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // now we'll update it - this leaves us with two revisions (the previous 'original' and\n  // our update)\n  await client.setConfigurationSetting(newSetting);\n\n  const revisionsIterator = client.listRevisions({\n    keyFilter: newSetting.key\n  });\n\n  // show all the revisions, including the date they were set.\n  for await (const revision of revisionsIterator) {\n    // revisions are just a configuration setting at a particular point in time\n    console.log(`At ${revision.lastModified}, the value was ${revision.value}`);\n  }\n\n  ////////////////////////////////////////////////////////\n  ///////////////  Example for .byPage()  ////////////////\n  ////////////////////////////////////////////////////////\n\n  // If you want to see the pagination\n  // for (let index = 0; index < 135; index++) {\n  //   await client.setConfigurationSetting({ ...originalSetting, value: `new value = ${index}` });\n  //   await new Promise((resolve) => setTimeout(resolve, 1000));\n  // }\n\n  // Passing marker as an argument\n  let iterator = client.listRevisions({ keyFilter: \"keyWithRevisions-1626819906487\" }).byPage();\n  let response = await iterator.next();\n  if (!response.done) {\n    for (const revision of response.value.items) {\n      console.log(`  Found key: ${revision.key}, ${revision.value} === ${revision.lastModified}`);\n    }\n  }\n  // Gets next marker\n  let marker = response.value.continuationToken;\n  // Passing next marker as continuationToken\n  iterator = client.listRevisions({ keyFilter: \"keyWithRevisions-1626819906487\" }).byPage({\n    continuationToken: marker\n  });\n  response = await iterator.next();\n  if (response.done) {\n    console.log(\"List done.\");\n  } else {\n    if (response.value.items) {\n      for (const revision of response.value.items) {\n        console.log(`  Found key: ${revision.key}, ${revision.value} === ${revision.lastModified}`);\n      }\n    }\n  }\n\n  cleanupSampleValues([originalSetting.key], client);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of settingsIterator) {\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}