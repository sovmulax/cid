// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __asyncValues } from "tslib";
/**
 * @summary Demonstrates the CRUD operations on the configuration settings.
 * @azsdk-weight 100
 */
import { AppConfigurationClient } from "@azure/app-configuration";
// Load the .env file if it exists
import * as dotenv from "dotenv";
dotenv.config();
export async function main() {
    console.log(`Running helloworld sample`);
    // Set the following environment variable or edit the value on the following line.
    const connectionString = process.env["APPCONFIG_CONNECTION_STRING"] || "<connection string>";
    const client = new AppConfigurationClient(connectionString);
    const greetingKey = "Samples:Greeting";
    await cleanupSampleValues([greetingKey], client);
    // creating a new setting
    console.log(`Adding in new setting ${greetingKey}`);
    await client.addConfigurationSetting({ key: greetingKey, value: "Hello!" });
    const newSetting = await client.getConfigurationSetting({ key: greetingKey });
    console.log(`${greetingKey} has been set to ${newSetting.value}`);
    // changing the value of a setting
    await client.setConfigurationSetting({ key: greetingKey, value: "Goodbye!" });
    const updatedSetting = await client.getConfigurationSetting({ key: greetingKey });
    console.log(`${greetingKey} has been set to ${updatedSetting.value}`);
    // removing the setting
    await client.deleteConfigurationSetting({ key: greetingKey });
    console.log(`${greetingKey} has been deleted`);
    await cleanupSampleValues([greetingKey], client);
}
async function cleanupSampleValues(keys, client) {
    var e_1, _a;
    const settingsIterator = client.listConfigurationSettings({
        keyFilter: keys.join(",")
    });
    try {
        for (var settingsIterator_1 = __asyncValues(settingsIterator), settingsIterator_1_1; settingsIterator_1_1 = await settingsIterator_1.next(), !settingsIterator_1_1.done;) {
            const setting = settingsIterator_1_1.value;
            await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (settingsIterator_1_1 && !settingsIterator_1_1.done && (_a = settingsIterator_1.return)) await _a.call(settingsIterator_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
main().catch((err) => {
    console.error("Failed to run sample:", err);
    process.exit(1);
});
//# sourceMappingURL=helloworld.js.map