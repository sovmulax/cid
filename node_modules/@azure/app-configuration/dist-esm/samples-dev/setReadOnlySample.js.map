{"version":3,"file":"setReadOnlySample.js","sourceRoot":"","sources":["../../samples-dev/setReadOnlySample.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary Demonstrates making a configuration setting read-only. This can help prevent accidental deletion or modification of a setting.\n * @azsdk-weight 70\n */\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(\"Running setReadOnly sample\");\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const client = new AppConfigurationClient(connectionString);\n\n  const readOnlySampleKey = \"readOnlySampleKey\";\n  await cleanupSampleValues([readOnlySampleKey], client);\n\n  console.log(\"Creating a new key. By default keys are writeable\");\n  await client.addConfigurationSetting({\n    key: readOnlySampleKey,\n    label: \"a label\",\n    value: \"Initial value\"\n  });\n\n  // now we'd like to prevent future modifications - let's set the key/label to read-only\n  console.log(\"Setting a key to read-only. Any modifications will fail\");\n  await client.setReadOnly({ key: readOnlySampleKey, label: \"a label\" }, true);\n\n  // any modifications to the key will now throw errors\n  try {\n    console.log(\"Attempting to modify a read-only setting\");\n    await client.setConfigurationSetting({\n      key: readOnlySampleKey,\n      label: \"a label\",\n      value: \"new value\"\n    });\n  } catch (err) {\n    console.log(`Error gets thrown - can't modify a read-only setting`);\n  }\n\n  // clients that read from the key are unaffected\n  await client.getConfigurationSetting({ key: readOnlySampleKey, label: \"a label\" });\n\n  // to make a key writable again we can clear the read-only status\n  console.log(\"Clearing the read-only status on the key so we can update the value\");\n  await client.setReadOnly({ key: readOnlySampleKey, label: \"a label\" }, false);\n\n  // and now clients can change the value again\n  const updatedSetting = await client.setConfigurationSetting({\n    key: readOnlySampleKey,\n    label: \"a label\",\n    value: \"new value\"\n  });\n  console.log(`Updated value is ${updatedSetting.value}`);\n\n  await cleanupSampleValues([readOnlySampleKey], client);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const existingSettings = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of existingSettings) {\n    await client.setReadOnly(setting, false);\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}