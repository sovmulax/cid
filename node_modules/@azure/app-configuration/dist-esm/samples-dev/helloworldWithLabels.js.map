{"version":3,"file":"helloworldWithLabels.js","sourceRoot":"","sources":["../../samples-dev/helloworldWithLabels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC;;;GAGG;AACH,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE,kCAAkC;AAClC,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,CAAC,KAAK,UAAU,IAAI;IACxB,iIAAiI;IACjI,oGAAoG;IACpG,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;IAEnD,kFAAkF;IAClF,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,IAAI,qBAAqB,CAAC;IAC7F,MAAM,MAAM,GAAG,IAAI,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;IAE5D,MAAM,MAAM,GAAG,sBAAsB,CAAC;IAEtC,MAAM,mBAAmB,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;IAE5C,uFAAuF;IACvF,aAAa;IACb,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;IACxE,MAAM,MAAM,CAAC,uBAAuB,CAAC;QACnC,GAAG,EAAE,MAAM;QACX,KAAK,EAAE,MAAM;QACb,KAAK,EAAE,0BAA0B;KAClC,CAAC,CAAC;IACH,MAAM,MAAM,CAAC,uBAAuB,CAAC;QACnC,GAAG,EAAE,MAAM;QACX,KAAK,EAAE,YAAY;QACnB,KAAK,EAAE,qBAAqB;KAC7B,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1F,OAAO,CAAC,GAAG,CAAC,6BAA6B,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;IAE/D,MAAM,kBAAkB,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC;QAC9D,GAAG,EAAE,MAAM;QACX,KAAK,EAAE,YAAY;KACpB,CAAC,CAAC;IACH,OAAO,CAAC,GAAG,CAAC,mCAAmC,kBAAkB,CAAC,KAAK,EAAE,CAAC,CAAC;IAE3E,MAAM,mBAAmB,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;AAC9C,CAAC;AAED,KAAK,UAAU,mBAAmB,CAAC,IAAc,EAAE,MAA8B;;IAC/E,MAAM,gBAAgB,GAAG,MAAM,CAAC,yBAAyB,CAAC;QACxD,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;KAC1B,CAAC,CAAC;;QAEH,KAA4B,IAAA,qBAAA,cAAA,gBAAgB,CAAA,sBAAA;YAAjC,MAAM,OAAO,6BAAA,CAAA;YACtB,MAAM,MAAM,CAAC,0BAA0B,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;SACrF;;;;;;;;;AACH,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;IACrB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary This sample builds on concepts in helloworld.ts and shows you how to use labels.\n * @azsdk-weight 90\n */\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  // Labels allow you to add an extra dimension for your setting and gives you a simple way to create conventions for environments.\n  // More info - https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value#label-keys\n  console.log(\"Running helloworldWithLabels sample\");\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const client = new AppConfigurationClient(connectionString);\n\n  const urlKey = \"Samples:Endpoint:Url\";\n\n  await cleanupSampleValues([urlKey], client);\n\n  // labels allow you to use the same key with different values for separate environments\n  // or clients\n  console.log(\"Adding in endpoint with two labels - beta and production\");\n  await client.addConfigurationSetting({\n    key: urlKey,\n    label: \"beta\",\n    value: \"https://beta.example.com\"\n  });\n  await client.addConfigurationSetting({\n    key: urlKey,\n    label: \"production\",\n    value: \"https://example.com\"\n  });\n\n  const betaEndpoint = await client.getConfigurationSetting({ key: urlKey, label: \"beta\" });\n  console.log(`Endpoint with beta label: ${betaEndpoint.value}`);\n\n  const productionEndpoint = await client.getConfigurationSetting({\n    key: urlKey,\n    label: \"production\"\n  });\n  console.log(`Endpoint with production label: ${productionEndpoint.value}`);\n\n  await cleanupSampleValues([urlKey], client);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const existingSettings = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of existingSettings) {\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nmain().catch((error) => {\n  console.error(\"Failed to run sample:\", error);\n});\n"]}