{"version":3,"file":"secretReference.js","sourceRoot":"","sources":["../../samples-dev/secretReference.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary SecretReference represents a configuration setting that references as KeyVault secret.\n *\n * @azsdk-weight 30\n */\nimport {\n  AppConfigurationClient,\n  SecretReferenceValue,\n  secretReferenceContentType,\n  ConfigurationSetting,\n  parseSecretReference\n} from \"@azure/app-configuration\";\nimport { parseKeyVaultSecretIdentifier, SecretClient } from \"@azure/keyvault-secrets\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(`Running secretReference sample`);\n\n  const key = `secret${new Date().getTime()}`;\n\n  // setup method creates\n  // - a secret using `@azure/keyvault-secrets`\n  // - a corresponding secret reference config setting with `@azure/app-configuration`\n  await setup(key);\n\n  console.log(`Get the added secretReference from App Config with key: ${key}`);\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"\";\n  const appConfigClient = new AppConfigurationClient(connectionString);\n  const getResponse = await appConfigClient.getConfigurationSetting({\n    key\n  });\n  // You can use the `isSecretReference` global method to check if the content type is secretReferenceContentType (\"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\")\n\n  const parsedSecretReference = parseSecretReference(getResponse);\n\n  // Get the name and vaultUrl from the secretId\n  const { name: secretName, vaultUrl } = parseKeyVaultSecretIdentifier(\n    parsedSecretReference.value.secretId\n  );\n\n  const secretClient = new SecretClient(vaultUrl, new DefaultAzureCredential());\n  try {\n    // Read the secret we created\n    const secret = await secretClient.getSecret(secretName);\n    console.log(`Get the secret from keyvault key: ${secretName}, value: ${secret.value}`);\n  } catch (err) {\n    const error = err as { code: string; statusCode: number };\n    if (error.code === \"SecretNotFound\" && error.statusCode === 404) {\n      throw new Error(\n        `\\n Secret is not found, make sure the secret ${parsedSecretReference.value.secretId} is present in your keyvault account;\\n Original error - ${error}`\n      );\n    } else {\n      throw err;\n    }\n  }\n\n  console.log(`Deleting the secret from keyvault`);\n  await secretClient.beginDeleteSecret(secretName);\n\n  await cleanupSampleValues([key], appConfigClient);\n}\n\nasync function setup(key: string) {\n  if (\n    !process.env[\"AZURE_TENANT_ID\"] ||\n    !process.env[\"AZURE_CLIENT_ID\"] ||\n    !process.env[\"AZURE_CLIENT_SECRET\"] ||\n    !process.env[\"KEYVAULT_URI\"] ||\n    !process.env[\"APPCONFIG_CONNECTION_STRING\"]\n  ) {\n    console.log(\n      `At least one of the AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, APPCONFIG_CONNECTION_STRING and KEYVAULT_URI variables is not present, \n      please add the missing ones in your environment and rerun the sample.`\n    );\n    return;\n  }\n\n  // DefaultAzureCredential expects the following three environment variables:\n  // - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n  // - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n  // - AZURE_CLIENT_SECRET: The client secret for the registered application\n  const secretClient = new SecretClient(process.env[\"KEYVAULT_URI\"], new DefaultAzureCredential());\n  const secretName = `secret-${Date.now()}`;\n  // Create a secret\n  console.log(`Create a keyvault secret with key: ${secretName}  and value: \"MySecretValue\"`);\n  const secret = await secretClient.setSecret(secretName, \"MySecretValue\");\n\n  if (!secret.properties.id) {\n    throw new Error(\"Something went wrong - secret id is undefined\");\n  }\n\n  // creates the secret reference config setting\n  await createConfigSetting(key, secret.properties.id);\n}\n\nasync function createConfigSetting(key: string, secretId: string) {\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const appConfigClient = new AppConfigurationClient(connectionString);\n\n  const secretReference: ConfigurationSetting<SecretReferenceValue> = {\n    key,\n    value: { secretId },\n    isReadOnly: false,\n    contentType: secretReferenceContentType\n  };\n\n  await cleanupSampleValues([key], appConfigClient);\n\n  console.log(\n    `Add a new secretReference with key: ${key} and secretId: ${secretReference.value.secretId}`\n  );\n  await appConfigClient.addConfigurationSetting(secretReference);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of settingsIterator) {\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}