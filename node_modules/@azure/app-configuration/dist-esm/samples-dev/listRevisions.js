// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __asyncValues } from "tslib";
/**
 * @summary Demonstrates listing revisions for a configuration setting.
 * @azsdk-weight 40
 */
import { AppConfigurationClient } from "@azure/app-configuration";
// Load the .env file if it exists
import * as dotenv from "dotenv";
dotenv.config();
export async function main() {
    var e_1, _a;
    console.log(`Running listRevisions sample`);
    // Set the following environment variable or edit the value on the following line.
    const connectionString = process.env["APPCONFIG_CONNECTION_STRING"] || "<connection string>";
    const client = new AppConfigurationClient(connectionString);
    // let's create the setting
    const originalSetting = await client.addConfigurationSetting({
        key: `keyWithRevisions-${Date.now()}`,
        value: "original value"
    });
    console.log(`First revision created with value ${originalSetting.value}`);
    const newSetting = Object.assign(Object.assign({}, originalSetting), { value: "A new value!" });
    // delay for a second to make the timestamps more interesting
    await new Promise((resolve) => setTimeout(resolve, 1000));
    // now we'll update it - this leaves us with two revisions (the previous 'original' and
    // our update)
    await client.setConfigurationSetting(newSetting);
    const revisionsIterator = client.listRevisions({
        keyFilter: newSetting.key
    });
    try {
        // show all the revisions, including the date they were set.
        for (var revisionsIterator_1 = __asyncValues(revisionsIterator), revisionsIterator_1_1; revisionsIterator_1_1 = await revisionsIterator_1.next(), !revisionsIterator_1_1.done;) {
            const revision = revisionsIterator_1_1.value;
            // revisions are just a configuration setting at a particular point in time
            console.log(`At ${revision.lastModified}, the value was ${revision.value}`);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (revisionsIterator_1_1 && !revisionsIterator_1_1.done && (_a = revisionsIterator_1.return)) await _a.call(revisionsIterator_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    ////////////////////////////////////////////////////////
    ///////////////  Example for .byPage()  ////////////////
    ////////////////////////////////////////////////////////
    // If you want to see the pagination
    // for (let index = 0; index < 135; index++) {
    //   await client.setConfigurationSetting({ ...originalSetting, value: `new value = ${index}` });
    //   await new Promise((resolve) => setTimeout(resolve, 1000));
    // }
    // Passing marker as an argument
    let iterator = client.listRevisions({ keyFilter: "keyWithRevisions-1626819906487" }).byPage();
    let response = await iterator.next();
    if (!response.done) {
        for (const revision of response.value.items) {
            console.log(`  Found key: ${revision.key}, ${revision.value} === ${revision.lastModified}`);
        }
    }
    // Gets next marker
    let marker = response.value.continuationToken;
    // Passing next marker as continuationToken
    iterator = client.listRevisions({ keyFilter: "keyWithRevisions-1626819906487" }).byPage({
        continuationToken: marker
    });
    response = await iterator.next();
    if (response.done) {
        console.log("List done.");
    }
    else {
        if (response.value.items) {
            for (const revision of response.value.items) {
                console.log(`  Found key: ${revision.key}, ${revision.value} === ${revision.lastModified}`);
            }
        }
    }
    cleanupSampleValues([originalSetting.key], client);
}
async function cleanupSampleValues(keys, client) {
    var e_2, _a;
    const settingsIterator = client.listConfigurationSettings({
        keyFilter: keys.join(",")
    });
    try {
        for (var settingsIterator_1 = __asyncValues(settingsIterator), settingsIterator_1_1; settingsIterator_1_1 = await settingsIterator_1.next(), !settingsIterator_1_1.done;) {
            const setting = settingsIterator_1_1.value;
            await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (settingsIterator_1_1 && !settingsIterator_1_1.done && (_a = settingsIterator_1.return)) await _a.call(settingsIterator_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
main().catch((err) => {
    console.error("Failed to run sample:", err);
    process.exit(1);
});
//# sourceMappingURL=listRevisions.js.map