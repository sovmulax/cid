{"version":3,"file":"index.js","sources":["../src/internal/cryptoHelpers.ts","../src/appConfigCredential.ts","../src/generated/src/models/mappers.ts","../src/generated/src/models/parameters.ts","../src/generated/src/appConfigurationContext.ts","../src/generated/src/appConfiguration.ts","../src/policies/throttlingRetryPolicy.ts","../src/featureFlag.ts","../src/secretReference.ts","../src/internal/typeguards.ts","../src/internal/helpers.ts","../src/internal/tracingHelpers.ts","../src/internal/synctokenpolicy.ts","../src/appConfigurationClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createHash, createHmac } from \"crypto\";\n\n/**\n * @internal\n */\nexport async function sha256Digest(body: string | undefined): Promise<string> {\n  return createHash(\"sha256\")\n    .update(body || \"\")\n    .digest(\"base64\");\n}\n\n/**\n * @internal\n */\nexport async function sha256Hmac(secret: string, stringToSign: string): Promise<string> {\n  const decodedSecret = Buffer.from(secret, \"base64\");\n\n  return createHmac(\"sha256\", decodedSecret)\n    .update(stringToSign)\n    .digest(\"base64\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  ServiceClientCredentials,\n  WebResource,\n  URLBuilder,\n  WebResourceLike\n} from \"@azure/core-http\";\nimport { sha256Digest, sha256Hmac } from \"./internal/cryptoHelpers\";\n\n/**\n * @internal\n */\nexport class AppConfigCredential implements ServiceClientCredentials {\n  private credential: string;\n  private secret: string;\n\n  constructor(credential: string, secret: string) {\n    this.credential = credential;\n    this.secret = secret;\n  }\n\n  /**\n   * Signs a request with the values provided in the credential and secret parameter.\n   *\n   * @param webResource - The WebResource to be signed.\n   * @returns The signed request object.\n   */\n  async signRequest(webResource: WebResourceLike): Promise<WebResource> {\n    const verb = webResource.method.toUpperCase();\n    const utcNow = new Date().toUTCString();\n\n    const contentHash = await sha256Digest(webResource.body || \"\");\n\n    const signedHeaders = \"x-ms-date;host;x-ms-content-sha256\";\n\n    const url = URLBuilder.parse(webResource.url);\n    const query = url.getQuery();\n    const urlPathAndQuery = `${url.getPath()}${query ? \"?\" + query : \"\"}`;\n\n    const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${url.getHost()};${contentHash}`;\n\n    const signature = await sha256Hmac(this.secret, stringToSign);\n\n    webResource.headers.set(\"x-ms-date\", utcNow);\n    webResource.headers.set(\"x-ms-content-sha256\", contentHash);\n    // Syntax for Authorization header\n    // Reference - https://docs.microsoft.com/en-us/azure/azure-app-configuration/rest-api-authentication-hmac#syntax\n    webResource.headers.set(\n      \"Authorization\",\n      `HMAC-SHA256 Credential=${this.credential}&SignedHeaders=${signedHeaders}&Signature=${signature}`\n    );\n    return webResource;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const KeyListResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyListResult\",\n    modelProperties: {\n      items: {\n        serializedName: \"items\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Key\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"@nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Key: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Key\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detail: {\n        serializedName: \"detail\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyValueListResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyValueListResult\",\n    modelProperties: {\n      items: {\n        serializedName: \"items\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyValue\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"@nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyValue: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyValue\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      label: {\n        serializedName: \"label\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content_type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last_modified\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LabelListResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LabelListResult\",\n    modelProperties: {\n      items: {\n        serializedName: \"items\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Label\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"@nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Label: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Label\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetKeysHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetKeysHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationCheckKeysHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationCheckKeysHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetKeyValuesHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetKeyValuesHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationCheckKeyValuesHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationCheckKeyValuesHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetKeyValueHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetKeyValueHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationPutKeyValueHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationPutKeyValueHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationDeleteKeyValueHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationDeleteKeyValueHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationCheckKeyValueHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationCheckKeyValueHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetLabelsHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetLabelsHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationCheckLabelsHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationCheckLabelsHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationPutLockHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationPutLockHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationDeleteLockHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationDeleteLockHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetRevisionsHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetRevisionsHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationCheckRevisionsHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationCheckRevisionsHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetKeysNextHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetKeysNextHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetKeyValuesNextHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetKeyValuesNextHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetLabelsNextHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetLabelsNextHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppConfigurationGetRevisionsNextHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AppConfigurationGetRevisionsNextHeaders\",\n    modelProperties: {\n      syncToken: {\n        serializedName: \"sync-token\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n  QueryCollectionFormat\n} from \"@azure/core-http\";\nimport { KeyValue as KeyValueMapper } from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue:\n      \"application/vnd.microsoft.appconfig.keyset+json, application/json, application/problem+json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const name: OperationQueryParameter = {\n  parameterPath: [\"options\", \"name\"],\n  mapper: {\n    serializedName: \"name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const syncToken: OperationParameter = {\n  parameterPath: \"syncToken\",\n  mapper: {\n    serializedName: \"Sync-Token\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    serializedName: \"api-version\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const after: OperationQueryParameter = {\n  parameterPath: [\"options\", \"after\"],\n  mapper: {\n    serializedName: \"After\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const acceptDatetime: OperationParameter = {\n  parameterPath: [\"options\", \"acceptDatetime\"],\n  mapper: {\n    serializedName: \"Accept-Datetime\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue:\n      \"application/vnd.microsoft.appconfig.kvset+json, application/json, application/problem+json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const key: OperationQueryParameter = {\n  parameterPath: [\"options\", \"key\"],\n  mapper: {\n    serializedName: \"key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const label: OperationQueryParameter = {\n  parameterPath: [\"options\", \"label\"],\n  mapper: {\n    serializedName: \"label\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const select: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const select1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const accept2: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue:\n      \"application/vnd.microsoft.appconfig.kv+json, application/json, application/problem+json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const key1: OperationURLParameter = {\n  parameterPath: \"key\",\n  mapper: {\n    serializedName: \"key\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifNoneMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifNoneMatch\"],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const select2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/vnd.microsoft.appconfig.kv+json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const entity: OperationParameter = {\n  parameterPath: [\"options\", \"entity\"],\n  mapper: KeyValueMapper\n};\n\nexport const select3: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const accept3: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue:\n      \"application/vnd.microsoft.appconfig.labelset+json, application/json, application/problem+json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const select4: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        defaultValue: \"name\",\n        isConstant: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const select5: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const select6: OperationQueryParameter = {\n  parameterPath: [\"options\", \"select\"],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { ApiVersion10, AppConfigurationOptionalParams } from \"./models\";\n\nconst packageName = \"app-configuration\";\nconst packageVersion = \"1.3.1\";\n\n/** @internal */\nexport class AppConfigurationContext extends coreHttp.ServiceClient {\n  endpoint: string;\n  syncToken?: string;\n  apiVersion: ApiVersion10;\n\n  /**\n   * Initializes a new instance of the AppConfigurationContext class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param endpoint The endpoint of the App Configuration instance to send requests to.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    endpoint: string,\n    apiVersion: ApiVersion10,\n    options?: AppConfigurationOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n    if (apiVersion === undefined) {\n      throw new Error(\"'apiVersion' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{endpoint}\";\n\n    // Parameter assignments\n    this.endpoint = endpoint;\n    this.apiVersion = apiVersion;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { AppConfigurationContext } from \"./appConfigurationContext\";\nimport {\n  AppConfigurationOptionalParams,\n  ApiVersion10,\n  AppConfigurationGetKeysOptionalParams,\n  AppConfigurationGetKeysResponse,\n  AppConfigurationCheckKeysOptionalParams,\n  AppConfigurationCheckKeysResponse,\n  AppConfigurationGetKeyValuesOptionalParams,\n  AppConfigurationGetKeyValuesResponse,\n  AppConfigurationCheckKeyValuesOptionalParams,\n  AppConfigurationCheckKeyValuesResponse,\n  AppConfigurationGetKeyValueOptionalParams,\n  AppConfigurationGetKeyValueResponse,\n  AppConfigurationPutKeyValueOptionalParams,\n  AppConfigurationPutKeyValueResponse,\n  AppConfigurationDeleteKeyValueOptionalParams,\n  AppConfigurationDeleteKeyValueResponse,\n  AppConfigurationCheckKeyValueOptionalParams,\n  AppConfigurationCheckKeyValueResponse,\n  AppConfigurationGetLabelsOptionalParams,\n  AppConfigurationGetLabelsResponse,\n  AppConfigurationCheckLabelsOptionalParams,\n  AppConfigurationCheckLabelsResponse,\n  AppConfigurationPutLockOptionalParams,\n  AppConfigurationPutLockResponse,\n  AppConfigurationDeleteLockOptionalParams,\n  AppConfigurationDeleteLockResponse,\n  AppConfigurationGetRevisionsOptionalParams,\n  AppConfigurationGetRevisionsResponse,\n  AppConfigurationCheckRevisionsOptionalParams,\n  AppConfigurationCheckRevisionsResponse,\n  AppConfigurationGetKeysNextOptionalParams,\n  AppConfigurationGetKeysNextResponse,\n  AppConfigurationGetKeyValuesNextOptionalParams,\n  AppConfigurationGetKeyValuesNextResponse,\n  AppConfigurationGetLabelsNextOptionalParams,\n  AppConfigurationGetLabelsNextResponse,\n  AppConfigurationGetRevisionsNextOptionalParams,\n  AppConfigurationGetRevisionsNextResponse\n} from \"./models\";\n\n/** @internal */\nexport class AppConfiguration extends AppConfigurationContext {\n  /**\n   * Initializes a new instance of the AppConfiguration class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param endpoint The endpoint of the App Configuration instance to send requests to.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    endpoint: string,\n    apiVersion: ApiVersion10,\n    options?: AppConfigurationOptionalParams\n  ) {\n    super(credentials, endpoint, apiVersion, options);\n  }\n\n  /**\n   * Gets a list of keys.\n   * @param options The options parameters.\n   */\n  getKeys(\n    options?: AppConfigurationGetKeysOptionalParams\n  ): Promise<AppConfigurationGetKeysResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeysOperationSpec\n    ) as Promise<AppConfigurationGetKeysResponse>;\n  }\n\n  /**\n   * Requests the headers and status of the given resource.\n   * @param options The options parameters.\n   */\n  checkKeys(\n    options?: AppConfigurationCheckKeysOptionalParams\n  ): Promise<AppConfigurationCheckKeysResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      checkKeysOperationSpec\n    ) as Promise<AppConfigurationCheckKeysResponse>;\n  }\n\n  /**\n   * Gets a list of key-values.\n   * @param options The options parameters.\n   */\n  getKeyValues(\n    options?: AppConfigurationGetKeyValuesOptionalParams\n  ): Promise<AppConfigurationGetKeyValuesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeyValuesOperationSpec\n    ) as Promise<AppConfigurationGetKeyValuesResponse>;\n  }\n\n  /**\n   * Requests the headers and status of the given resource.\n   * @param options The options parameters.\n   */\n  checkKeyValues(\n    options?: AppConfigurationCheckKeyValuesOptionalParams\n  ): Promise<AppConfigurationCheckKeyValuesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      checkKeyValuesOperationSpec\n    ) as Promise<AppConfigurationCheckKeyValuesResponse>;\n  }\n\n  /**\n   * Gets a single key-value.\n   * @param key The key of the key-value to retrieve.\n   * @param options The options parameters.\n   */\n  getKeyValue(\n    key: string,\n    options?: AppConfigurationGetKeyValueOptionalParams\n  ): Promise<AppConfigurationGetKeyValueResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeyValueOperationSpec\n    ) as Promise<AppConfigurationGetKeyValueResponse>;\n  }\n\n  /**\n   * Creates a key-value.\n   * @param key The key of the key-value to create.\n   * @param options The options parameters.\n   */\n  putKeyValue(\n    key: string,\n    options?: AppConfigurationPutKeyValueOptionalParams\n  ): Promise<AppConfigurationPutKeyValueResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      putKeyValueOperationSpec\n    ) as Promise<AppConfigurationPutKeyValueResponse>;\n  }\n\n  /**\n   * Deletes a key-value.\n   * @param key The key of the key-value to delete.\n   * @param options The options parameters.\n   */\n  deleteKeyValue(\n    key: string,\n    options?: AppConfigurationDeleteKeyValueOptionalParams\n  ): Promise<AppConfigurationDeleteKeyValueResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      deleteKeyValueOperationSpec\n    ) as Promise<AppConfigurationDeleteKeyValueResponse>;\n  }\n\n  /**\n   * Requests the headers and status of the given resource.\n   * @param key The key of the key-value to retrieve.\n   * @param options The options parameters.\n   */\n  checkKeyValue(\n    key: string,\n    options?: AppConfigurationCheckKeyValueOptionalParams\n  ): Promise<AppConfigurationCheckKeyValueResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      checkKeyValueOperationSpec\n    ) as Promise<AppConfigurationCheckKeyValueResponse>;\n  }\n\n  /**\n   * Gets a list of labels.\n   * @param options The options parameters.\n   */\n  getLabels(\n    options?: AppConfigurationGetLabelsOptionalParams\n  ): Promise<AppConfigurationGetLabelsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getLabelsOperationSpec\n    ) as Promise<AppConfigurationGetLabelsResponse>;\n  }\n\n  /**\n   * Requests the headers and status of the given resource.\n   * @param options The options parameters.\n   */\n  checkLabels(\n    options?: AppConfigurationCheckLabelsOptionalParams\n  ): Promise<AppConfigurationCheckLabelsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      checkLabelsOperationSpec\n    ) as Promise<AppConfigurationCheckLabelsResponse>;\n  }\n\n  /**\n   * Locks a key-value.\n   * @param key The key of the key-value to lock.\n   * @param options The options parameters.\n   */\n  putLock(\n    key: string,\n    options?: AppConfigurationPutLockOptionalParams\n  ): Promise<AppConfigurationPutLockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      putLockOperationSpec\n    ) as Promise<AppConfigurationPutLockResponse>;\n  }\n\n  /**\n   * Unlocks a key-value.\n   * @param key The key of the key-value to unlock.\n   * @param options The options parameters.\n   */\n  deleteLock(\n    key: string,\n    options?: AppConfigurationDeleteLockOptionalParams\n  ): Promise<AppConfigurationDeleteLockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      deleteLockOperationSpec\n    ) as Promise<AppConfigurationDeleteLockResponse>;\n  }\n\n  /**\n   * Gets a list of key-value revisions.\n   * @param options The options parameters.\n   */\n  getRevisions(\n    options?: AppConfigurationGetRevisionsOptionalParams\n  ): Promise<AppConfigurationGetRevisionsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getRevisionsOperationSpec\n    ) as Promise<AppConfigurationGetRevisionsResponse>;\n  }\n\n  /**\n   * Requests the headers and status of the given resource.\n   * @param options The options parameters.\n   */\n  checkRevisions(\n    options?: AppConfigurationCheckRevisionsOptionalParams\n  ): Promise<AppConfigurationCheckRevisionsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      checkRevisionsOperationSpec\n    ) as Promise<AppConfigurationCheckRevisionsResponse>;\n  }\n\n  /**\n   * GetKeysNext\n   * @param nextLink The nextLink from the previous successful call to the GetKeys method.\n   * @param options The options parameters.\n   */\n  getKeysNext(\n    nextLink: string,\n    options?: AppConfigurationGetKeysNextOptionalParams\n  ): Promise<AppConfigurationGetKeysNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeysNextOperationSpec\n    ) as Promise<AppConfigurationGetKeysNextResponse>;\n  }\n\n  /**\n   * GetKeyValuesNext\n   * @param nextLink The nextLink from the previous successful call to the GetKeyValues method.\n   * @param options The options parameters.\n   */\n  getKeyValuesNext(\n    nextLink: string,\n    options?: AppConfigurationGetKeyValuesNextOptionalParams\n  ): Promise<AppConfigurationGetKeyValuesNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeyValuesNextOperationSpec\n    ) as Promise<AppConfigurationGetKeyValuesNextResponse>;\n  }\n\n  /**\n   * GetLabelsNext\n   * @param nextLink The nextLink from the previous successful call to the GetLabels method.\n   * @param options The options parameters.\n   */\n  getLabelsNext(\n    nextLink: string,\n    options?: AppConfigurationGetLabelsNextOptionalParams\n  ): Promise<AppConfigurationGetLabelsNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getLabelsNextOperationSpec\n    ) as Promise<AppConfigurationGetLabelsNextResponse>;\n  }\n\n  /**\n   * GetRevisionsNext\n   * @param nextLink The nextLink from the previous successful call to the GetRevisions method.\n   * @param options The options parameters.\n   */\n  getRevisionsNext(\n    nextLink: string,\n    options?: AppConfigurationGetRevisionsNextOptionalParams\n  ): Promise<AppConfigurationGetRevisionsNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getRevisionsNextOperationSpec\n    ) as Promise<AppConfigurationGetRevisionsNextResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst getKeysOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult,\n      headersMapper: Mappers.AppConfigurationGetKeysHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.syncToken,\n    Parameters.acceptDatetime\n  ],\n  serializer\n};\nconst checkKeysOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppConfigurationCheckKeysHeaders\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],\n  serializer\n};\nconst getKeyValuesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/kv\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValueListResult,\n      headersMapper: Mappers.AppConfigurationGetKeyValuesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.key,\n    Parameters.label,\n    Parameters.select\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.accept1\n  ],\n  serializer\n};\nconst checkKeyValuesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/kv\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppConfigurationCheckKeyValuesHeaders\n    },\n    default: {}\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.key,\n    Parameters.label,\n    Parameters.select1\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],\n  serializer\n};\nconst getKeyValueOperationSpec: coreHttp.OperationSpec = {\n  path: \"/kv/{key}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValue,\n      headersMapper: Mappers.AppConfigurationGetKeyValueHeaders\n    },\n    304: {\n      headersMapper: Mappers.AppConfigurationGetKeyValueHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.label,\n    Parameters.select2\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.key1],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.accept2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst putKeyValueOperationSpec: coreHttp.OperationSpec = {\n  path: \"/kv/{key}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValue,\n      headersMapper: Mappers.AppConfigurationPutKeyValueHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  requestBody: Parameters.entity,\n  queryParameters: [Parameters.apiVersion, Parameters.label],\n  urlParameters: [Parameters.endpoint, Parameters.key1],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.accept2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.contentType\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteKeyValueOperationSpec: coreHttp.OperationSpec = {\n  path: \"/kv/{key}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValue,\n      headersMapper: Mappers.AppConfigurationDeleteKeyValueHeaders\n    },\n    204: {\n      headersMapper: Mappers.AppConfigurationDeleteKeyValueHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.label],\n  urlParameters: [Parameters.endpoint, Parameters.key1],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.accept2,\n    Parameters.ifMatch\n  ],\n  serializer\n};\nconst checkKeyValueOperationSpec: coreHttp.OperationSpec = {\n  path: \"/kv/{key}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppConfigurationCheckKeyValueHeaders\n    },\n    304: {\n      headersMapper: Mappers.AppConfigurationCheckKeyValueHeaders\n    },\n    default: {}\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.label,\n    Parameters.select3\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.key1],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getLabelsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/labels\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LabelListResult,\n      headersMapper: Mappers.AppConfigurationGetLabelsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [\n    Parameters.name,\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.select4\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.accept3\n  ],\n  serializer\n};\nconst checkLabelsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/labels\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppConfigurationCheckLabelsHeaders\n    },\n    default: {}\n  },\n  queryParameters: [\n    Parameters.name,\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.select4\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],\n  serializer\n};\nconst putLockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/locks/{key}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValue,\n      headersMapper: Mappers.AppConfigurationPutLockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.label],\n  urlParameters: [Parameters.endpoint, Parameters.key1],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.accept2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst deleteLockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/locks/{key}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValue,\n      headersMapper: Mappers.AppConfigurationDeleteLockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.label],\n  urlParameters: [Parameters.endpoint, Parameters.key1],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.accept2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getRevisionsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/revisions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValueListResult,\n      headersMapper: Mappers.AppConfigurationGetRevisionsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.key,\n    Parameters.label,\n    Parameters.select5\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.accept1\n  ],\n  serializer\n};\nconst checkRevisionsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/revisions\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppConfigurationCheckRevisionsHeaders\n    },\n    default: {}\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.key,\n    Parameters.label,\n    Parameters.select6\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.syncToken, Parameters.acceptDatetime],\n  serializer\n};\nconst getKeysNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult,\n      headersMapper: Mappers.AppConfigurationGetKeysNextHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [Parameters.name, Parameters.apiVersion, Parameters.after],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.syncToken,\n    Parameters.acceptDatetime\n  ],\n  serializer\n};\nconst getKeyValuesNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValueListResult,\n      headersMapper: Mappers.AppConfigurationGetKeyValuesNextHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.key,\n    Parameters.label,\n    Parameters.select\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.accept1\n  ],\n  serializer\n};\nconst getLabelsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LabelListResult,\n      headersMapper: Mappers.AppConfigurationGetLabelsNextHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [\n    Parameters.name,\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.select4\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.accept3\n  ],\n  serializer\n};\nconst getRevisionsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyValueListResult,\n      headersMapper: Mappers.AppConfigurationGetRevisionsNextHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorModel\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.after,\n    Parameters.key,\n    Parameters.label,\n    Parameters.select5\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [\n    Parameters.syncToken,\n    Parameters.acceptDatetime,\n    Parameters.accept1\n  ],\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory,\n  WebResource,\n  HttpOperationResponse,\n  Constants,\n  RestError\n} from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\nimport { RetryOptions } from \"../models\";\n\n/**\n * @internal\n */\nexport function throttlingRetryPolicy(retryOptions?: RetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n// Merge this constant with the one in core-http when we unify throttling retry policy in core-http and app-config\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\n\n/**\n * This policy is a close copy of the ThrottlingRetryPolicy class from\n * core-http with modifications to work with how AppConfig is currently\n * responding to 429 responses (which is to throw a RestError).\n *\n * @internal\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private numberOfRetries = 0;\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private retryOptions: RetryOptions = { maxRetries: DEFAULT_CLIENT_RETRY_COUNT }\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).catch(async (err) => {\n      if (isRestErrorWithHeaders(err)) {\n        let delayInMs = getDelayInMs(err.response.headers);\n\n        if (delayInMs == null) {\n          throw err;\n        }\n\n        if (\n          this.retryOptions.maxRetryDelayInMs &&\n          delayInMs > this.retryOptions.maxRetryDelayInMs\n        ) {\n          delayInMs = this.retryOptions.maxRetryDelayInMs;\n        }\n\n        this.numberOfRetries += 1;\n        await delay(delayInMs, undefined, {\n          abortSignal: httpRequest.abortSignal,\n          abortErrorMsg: StandardAbortMessage\n        });\n        if (httpRequest.abortSignal?.aborted) {\n          throw new AbortError(StandardAbortMessage);\n        }\n\n        if (this.retryOptions.maxRetries === undefined || this.retryOptions.maxRetries === null) {\n          this.retryOptions.maxRetries = DEFAULT_CLIENT_RETRY_COUNT;\n        }\n\n        if (this.numberOfRetries < this.retryOptions.maxRetries) {\n          // retries\n          return this.sendRequest(httpRequest.clone());\n        } else {\n          // passes on to the next policy\n          return this._nextPolicy.sendRequest(httpRequest.clone());\n        }\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry (in milliseconds).\n */\nconst RetryAfterMillisecondsHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\"];\n\n/**\n * Extracts the retry response header, checking against several\n * header names.\n * @internal\n */\nexport function getDelayInMs(responseHeaders: {\n  get: (headerName: string) => string | undefined;\n}): number | undefined {\n  for (const name of RetryAfterMillisecondsHeaders) {\n    const delayValueString = responseHeaders.get(name);\n\n    if (delayValueString == null) {\n      continue;\n    }\n\n    const delayValueMs: number = Number(delayValueString);\n\n    if (Number.isNaN(delayValueMs)) {\n      return undefined;\n    }\n\n    return delayValueMs;\n  }\n\n  const retryAfterValue = responseHeaders.get(Constants.HeaderConstants.RETRY_AFTER);\n\n  if (retryAfterValue != null) {\n    return ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterValue);\n  }\n\n  return undefined;\n}\n\ntype RestErrorWithHeaders = Pick<RestError, Exclude<keyof RestError, \"response\">> & {\n  response: HttpOperationResponse;\n};\n\nfunction isRestErrorWithHeaders(err: any): err is RestErrorWithHeaders {\n  return (\n    err &&\n    err.statusCode &&\n    typeof err.statusCode === \"number\" &&\n    err.response &&\n    err.response.headers &&\n    typeof err.response.headers.get === \"function\"\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { errorMessageForUnexpectedSetting } from \"./internal/helpers\";\nimport { JsonFeatureFlagValue } from \"./internal/jsonModels\";\nimport { ConfigurationSetting, ConfigurationSettingParam } from \"./models\";\n\n/**\n * The prefix for feature flags.\n */\nexport const featureFlagPrefix = \".appconfig.featureflag/\";\n\n/**\n * The content type for a FeatureFlag\n */\nexport const featureFlagContentType = \"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\";\n\n/**\n * Value of a feature flag\n */\nexport interface FeatureFlagValue {\n  /**\n   * Id for the feature flag.\n   */\n  id?: string;\n  /**\n   * A Feature filter consistently evaluates the state of a feature flag.\n   * Our feature management library supports three types of built-in filters: Targeting, TimeWindow, and Percentage.\n   * Custom filters can also be created based on different factors, such as device used, browser types, geographic location, etc.\n   *\n   * [More Info](https://docs.microsoft.com/en-us/azure/azure-app-configuration/howto-feature-filters-aspnet-core)\n   */\n  conditions: {\n    clientFilters: { name: string; parameters?: Record<string, unknown> }[];\n  };\n  /**\n   * Description of the feature.\n   */\n  description?: string;\n  /**\n   * Boolean flag to say if the feature flag is enabled.\n   */\n  enabled: boolean;\n  /**\n   * Display name for the feature to use for display rather than the ID.\n   */\n  displayName?: string;\n}\n\n/**\n * @internal\n */\nexport const FeatureFlagHelper = {\n  /**\n   * Takes the FeatureFlag (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n   */\n  toConfigurationSettingParam: (\n    featureFlag: ConfigurationSettingParam<FeatureFlagValue>\n  ): ConfigurationSettingParam => {\n    if (!featureFlag.value) {\n      throw new TypeError(`FeatureFlag has an unexpected value - ${featureFlag.value}`);\n    }\n    let key = featureFlag.key;\n    if (typeof featureFlag.key === \"string\" && !featureFlag.key.startsWith(featureFlagPrefix)) {\n      key = featureFlagPrefix + featureFlag.key;\n    }\n    const jsonFeatureFlagValue: JsonFeatureFlagValue = {\n      id: featureFlag.value.id ?? key.replace(featureFlagPrefix, \"\"),\n      enabled: featureFlag.value.enabled,\n      description: featureFlag.value.description,\n      conditions: {\n        client_filters: featureFlag.value.conditions.clientFilters\n      },\n      display_name: featureFlag.value.displayName\n    };\n\n    const configSetting = {\n      ...featureFlag,\n      key,\n      value: JSON.stringify(jsonFeatureFlagValue)\n    };\n    return configSetting;\n  }\n};\n\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<FeatureFlagValue> by parsing the value string.\n */\nexport function parseFeatureFlag(\n  setting: ConfigurationSetting\n): ConfigurationSetting<FeatureFlagValue> {\n  if (!isFeatureFlag(setting)) {\n    throw TypeError(errorMessageForUnexpectedSetting(setting.key, \"FeatureFlag\"));\n  }\n\n  const jsonFeatureFlagValue = JSON.parse(setting.value) as JsonFeatureFlagValue;\n\n  let key = setting.key;\n  if (typeof setting.key === \"string\" && !setting.key.startsWith(featureFlagPrefix)) {\n    key = featureFlagPrefix + setting.key;\n  }\n  const featureflag: ConfigurationSetting<FeatureFlagValue> = {\n    ...setting,\n    value: {\n      id: jsonFeatureFlagValue.id,\n      enabled: jsonFeatureFlagValue.enabled,\n      description: jsonFeatureFlagValue.description,\n      displayName: jsonFeatureFlagValue.display_name,\n      conditions: { clientFilters: jsonFeatureFlagValue.conditions.client_filters }\n    },\n    key,\n    contentType: featureFlagContentType\n  };\n  return featureflag;\n}\n\n/**\n * Lets you know if the ConfigurationSetting is a feature flag.\n *\n * [Checks if the content type is featureFlagContentType `\"application/vnd.microsoft.appconfig.ff+json;charset=utf-8\"`]\n */\nexport function isFeatureFlag(\n  setting: ConfigurationSetting\n): setting is ConfigurationSetting & Required<Pick<ConfigurationSetting, \"value\">> {\n  return (\n    setting && setting.contentType === featureFlagContentType && typeof setting.value === \"string\"\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { errorMessageForUnexpectedSetting } from \"./internal/helpers\";\nimport { JsonSecretReferenceValue } from \"./internal/jsonModels\";\nimport { ConfigurationSetting, ConfigurationSettingParam } from \"./models\";\n\n/**\n * content-type for the secret reference.\n */\nexport const secretReferenceContentType =\n  \"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\";\n\n/**\n * Necessary fields for updating or creating a new secret reference.\n */\nexport interface SecretReferenceValue {\n  /**\n   * Id for the secret reference.\n   */\n  secretId: string;\n}\n\n/**\n * @internal\n */\nexport const SecretReferenceHelper = {\n  /**\n   * Takes the SecretReference (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n   */\n  toConfigurationSettingParam: (\n    secretReference: ConfigurationSettingParam<SecretReferenceValue>\n  ): ConfigurationSettingParam => {\n    if (!secretReference.value) {\n      throw new TypeError(`SecretReference has an unexpected value - ${secretReference.value}`);\n    }\n\n    const jsonSecretReferenceValue: JsonSecretReferenceValue = {\n      uri: secretReference.value.secretId\n    };\n\n    const configSetting = {\n      ...secretReference,\n      value: JSON.stringify(jsonSecretReferenceValue)\n    };\n    return configSetting;\n  }\n};\n\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<SecretReferenceValue> by parsing the value string.\n */\nexport function parseSecretReference(\n  setting: ConfigurationSetting\n): ConfigurationSetting<SecretReferenceValue> {\n  if (!isSecretReference(setting)) {\n    throw TypeError(errorMessageForUnexpectedSetting(setting.key, \"SecretReference\"));\n  }\n\n  const jsonSecretReferenceValue = JSON.parse(setting.value) as JsonSecretReferenceValue;\n\n  const secretReference: ConfigurationSetting<SecretReferenceValue> = {\n    ...setting,\n    value: { secretId: jsonSecretReferenceValue.uri }\n  };\n  return secretReference;\n}\n\n/**\n * Lets you know if the ConfigurationSetting is a secret reference.\n *\n * [Checks if the content type is secretReferenceContentType `\"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\"`]\n */\nexport function isSecretReference(\n  setting: ConfigurationSetting\n): setting is ConfigurationSetting & Required<Pick<ConfigurationSetting, \"value\">> {\n  return (\n    setting &&\n    setting.contentType === secretReferenceContentType &&\n    typeof setting.value === \"string\"\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n * @internal\n */\nexport function isDefined<T>(thing: T | undefined | null): thing is T {\n  return typeof thing !== \"undefined\" && thing !== null;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n * @internal\n */\nexport function isObjectWithProperties<Thing extends unknown, PropertyName extends string>(\n  thing: Thing,\n  properties: PropertyName[]\n): thing is Thing & Record<PropertyName, unknown> {\n  if (!isDefined(thing) || typeof thing !== \"object\") {\n    return false;\n  }\n\n  for (const property of properties) {\n    if (!objectHasProperty(thing, property)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n * @internal\n */\nfunction objectHasProperty<Thing extends unknown, PropertyName extends string>(\n  thing: Thing,\n  property: PropertyName\n): thing is Thing & Record<PropertyName, unknown> {\n  return typeof thing === \"object\" && property in (thing as Record<string, unknown>);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { featureFlagContentType, ListConfigurationSettingsOptions } from \"..\";\nimport { URLBuilder } from \"@azure/core-http\";\nimport {\n  ListRevisionsOptions,\n  ConfigurationSettingId,\n  ConfigurationSetting,\n  HttpResponseField,\n  HttpResponseFields,\n  HttpOnlyIfChangedField,\n  HttpOnlyIfUnchangedField,\n  ConfigurationSettingParam\n} from \"../models\";\nimport { AppConfigurationGetKeyValuesOptionalParams, KeyValue } from \"../generated/src/models\";\nimport { FeatureFlagHelper, FeatureFlagValue } from \"../featureFlag\";\nimport {\n  secretReferenceContentType,\n  SecretReferenceHelper,\n  SecretReferenceValue\n} from \"../secretReference\";\nimport { isDefined } from \"./typeguards\";\n\n/**\n * Formats the etag so it can be used with a If-Match/If-None-Match header\n * @internal\n */\nexport function quoteETag(etag: string | undefined): string | undefined {\n  // https://tools.ietf.org/html/rfc7232#section-3.1\n  if (etag === undefined || etag === \"*\") {\n    return etag;\n  }\n\n  if (etag.startsWith('\"') && etag.endsWith('\"')) {\n    return etag;\n  }\n\n  if (etag.startsWith(\"'\") && etag.endsWith(\"'\")) {\n    return etag;\n  }\n\n  return `\"${etag}\"`;\n}\n\n/**\n * Checks the onlyIfChanged/onlyIfUnchanged properties to make sure we haven't specified both\n * and throws an Error. Otherwise, returns the properties properly quoted.\n * @param options - An options object with onlyIfChanged/onlyIfUnchanged fields\n * @internal\n */\nexport function checkAndFormatIfAndIfNoneMatch(\n  configurationSetting: ConfigurationSettingId,\n  options: HttpOnlyIfChangedField & HttpOnlyIfUnchangedField\n): { ifMatch: string | undefined; ifNoneMatch: string | undefined } {\n  if (options.onlyIfChanged && options.onlyIfUnchanged) {\n    throw new Error(\"onlyIfChanged and onlyIfUnchanged are mutually-exclusive\");\n  }\n\n  let ifMatch;\n  let ifNoneMatch;\n\n  if (options.onlyIfUnchanged) {\n    ifMatch = quoteETag(configurationSetting.etag);\n  }\n\n  if (options.onlyIfChanged) {\n    ifNoneMatch = quoteETag(configurationSetting.etag);\n  }\n\n  return {\n    ifMatch: ifMatch,\n    ifNoneMatch: ifNoneMatch\n  };\n}\n\n/**\n * Transforms some of the key fields in ListConfigurationSettingsOptions and ListRevisionsOptions\n * so they can be added to a request using AppConfigurationGetKeyValuesOptionalParams.\n * - `options.acceptDateTime` is converted into an ISO string\n * - `select` is populated with the proper field names from `options.fields`\n * - keyFilter and labelFilter are moved to key and label, respectively.\n *\n * @internal\n */\nexport function formatFiltersAndSelect(\n  listConfigOptions: ListConfigurationSettingsOptions | ListRevisionsOptions\n): Pick<AppConfigurationGetKeyValuesOptionalParams, \"key\" | \"label\" | \"select\" | \"acceptDatetime\"> {\n  let acceptDatetime: string | undefined = undefined;\n\n  if (listConfigOptions.acceptDateTime) {\n    acceptDatetime = listConfigOptions.acceptDateTime.toISOString();\n  }\n\n  return {\n    key: listConfigOptions.keyFilter,\n    label: listConfigOptions.labelFilter,\n    acceptDatetime,\n    select: formatFieldsForSelect(listConfigOptions.fields)\n  };\n}\n\n/**\n * Handles translating a Date acceptDateTime into a string as needed by the API\n * @param newOptions - A newer style options with acceptDateTime as a date (and with proper casing!)\n * @internal\n */\nexport function formatAcceptDateTime(newOptions: {\n  acceptDateTime?: Date;\n}): { acceptDatetime?: string } {\n  return {\n    acceptDatetime: newOptions.acceptDateTime && newOptions.acceptDateTime.toISOString()\n  };\n}\n\n/**\n * Take the URL that gets returned from next link and extract the 'after' token needed\n * to get the next page of results.\n * @internal\n */\nexport function extractAfterTokenFromNextLink(nextLink: string): string {\n  const parsedLink = URLBuilder.parse(nextLink);\n  const afterToken = parsedLink.getQueryParameterValue(\"after\");\n\n  if (afterToken == null || Array.isArray(afterToken)) {\n    throw new Error(\"Invalid nextLink - invalid after token\");\n  }\n\n  return decodeURIComponent(afterToken);\n}\n\n/**\n * Makes a ConfigurationSetting-based response throw for all of the data members. Used primarily\n * to prevent possible errors by the user in accessing a model that is uninitialized. This can happen\n * in cases like HTTP status code 204 or 304, which return an empty response body.\n *\n * @param configurationSetting - The configuration setting to alter\n */\nexport function makeConfigurationSettingEmpty(\n  configurationSetting: Partial<Record<Exclude<keyof ConfigurationSetting, \"key\">, any>>\n): void {\n  const names: Exclude<keyof ConfigurationSetting, \"key\">[] = [\n    \"contentType\",\n    \"etag\",\n    \"label\",\n    \"lastModified\",\n    \"isReadOnly\",\n    \"tags\",\n    \"value\"\n  ];\n\n  for (const name of names) {\n    configurationSetting[name] = undefined;\n  }\n}\n\n/**\n * @internal\n */\nexport function transformKeyValue(kvp: KeyValue): ConfigurationSetting {\n  const setting: ConfigurationSetting & KeyValue = {\n    value: undefined,\n    ...kvp,\n    isReadOnly: !!kvp.locked\n  };\n\n  delete setting.locked;\n\n  return setting;\n}\n\n/**\n * @internal\n */\nfunction isConfigSettingWithSecretReferenceValue(\n  setting: any\n): setting is ConfigurationSetting<SecretReferenceValue> {\n  return (\n    setting.contentType === secretReferenceContentType &&\n    isDefined(setting.value) &&\n    typeof setting.value !== \"string\"\n  );\n}\n\n/**\n * @internal\n */\nfunction isConfigSettingWithFeatureFlagValue(\n  setting: any\n): setting is ConfigurationSetting<FeatureFlagValue> {\n  return (\n    setting.contentType === featureFlagContentType &&\n    isDefined(setting.value) &&\n    typeof setting.value !== \"string\"\n  );\n}\n\n/**\n * @internal\n */\nfunction isSimpleConfigSetting(setting: any): setting is ConfigurationSetting {\n  return typeof setting.value === \"string\" || !isDefined(setting.value);\n}\n\n/**\n * @internal\n */\nexport function serializeAsConfigurationSettingParam(\n  setting:\n    | ConfigurationSettingParam\n    | ConfigurationSettingParam<FeatureFlagValue>\n    | ConfigurationSettingParam<SecretReferenceValue>\n): ConfigurationSettingParam {\n  if (isSimpleConfigSetting(setting)) {\n    return setting as ConfigurationSettingParam;\n  }\n  try {\n    if (isConfigSettingWithFeatureFlagValue(setting)) {\n      return FeatureFlagHelper.toConfigurationSettingParam(setting);\n    }\n    if (isConfigSettingWithSecretReferenceValue(setting)) {\n      return SecretReferenceHelper.toConfigurationSettingParam(setting);\n    }\n  } catch (error) {\n    return setting as ConfigurationSettingParam;\n  }\n  throw new TypeError(\n    `Unable to serialize the setting with key \"${setting.key}\" as a configuration setting`\n  );\n}\n\n/**\n * @internal\n */\nexport function transformKeyValueResponseWithStatusCode<\n  T extends KeyValue & HttpResponseField<any>\n>(kvp: T): ConfigurationSetting & { eTag?: string } & HttpResponseField<any> & HttpResponseFields {\n  return normalizeResponse(kvp, <\n    ConfigurationSetting & HttpResponseField<any> & HttpResponseFields\n  >{\n    ...transformKeyValue(kvp),\n    statusCode: kvp._response.status\n  });\n}\n\n/**\n * @internal\n */\nexport function transformKeyValueResponse<\n  T extends KeyValue & { eTag?: string } & HttpResponseField<any>\n>(kvp: T): ConfigurationSetting & HttpResponseField<any> {\n  return normalizeResponse(kvp, <ConfigurationSetting & HttpResponseField<any>>{\n    ...transformKeyValue(kvp)\n  });\n}\n\nfunction normalizeResponse<T extends HttpResponseField<any> & { eTag?: string }>(\n  originalResponse: HttpResponseField<any>,\n  newResponse: T\n): T {\n  Object.defineProperty(newResponse, \"_response\", {\n    enumerable: false,\n    value: originalResponse._response\n  });\n\n  // this field comes from the header but it's redundant with\n  // the one serialized in the model itself\n  delete newResponse.eTag;\n\n  return newResponse;\n}\n\n/**\n * Translates user-facing field names into their `select` equivalents (these can be\n * seen in the `KnownEnum5`)\n *\n * @param fieldNames - fieldNames from users.\n * @returns The field names translated into the `select` field equivalents.\n *\n * @internal\n */\nexport function formatFieldsForSelect(\n  fieldNames: (keyof ConfigurationSetting)[] | undefined\n): string[] | undefined {\n  if (fieldNames == null) {\n    return undefined;\n  }\n\n  const mappedFieldNames = fieldNames.map((fn) => {\n    switch (fn) {\n      case \"lastModified\":\n        return \"last_modified\";\n      case \"contentType\":\n        return \"content_type\";\n      case \"isReadOnly\":\n        return \"locked\";\n      default:\n        return fn;\n    }\n  });\n\n  return mappedFieldNames;\n}\n\n/**\n * @internal\n */\nexport function errorMessageForUnexpectedSetting(\n  key: string,\n  expectedType: \"FeatureFlag\" | \"SecretReference\"\n): string {\n  return `Setting with key ${key} is not a valid ${expectedType}, make sure to have the correct content-type and a valid non-null value.`;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Span, SpanStatusCode } from \"@azure/core-tracing\";\n\nimport { RestError, OperationOptions } from \"@azure/core-http\";\nimport { createSpanFunction } from \"@azure/core-tracing\";\nimport { AppConfigurationClient } from \"../appConfigurationClient\";\n\n/** @internal */\nexport const createSpan = createSpanFunction({\n  namespace: \"Microsoft.AppConfiguration\",\n  packagePrefix: \"Azure.Data.AppConfiguration\"\n});\n\n/**\n * Traces an operation and properly handles reporting start, end and errors for a given span\n *\n * @param operationName - Name of a method in the TClient type\n * @param options - An options class, typically derived from \\@azure/core-http/RequestOptionsBase\n * @param fn - The function to call with an options class that properly propagates the span context\n *\n * @internal\n */\nexport async function trace<ReturnT>(\n  operationName: keyof AppConfigurationClient,\n  options: OperationOptions,\n  fn: (options: OperationOptions, span: Span) => Promise<ReturnT>,\n  createSpanFn = createSpan\n): Promise<ReturnT> {\n  const { updatedOptions, span } = createSpanFn(operationName, options);\n\n  try {\n    // NOTE: we really do need to await on this function here so we can handle any exceptions thrown and properly\n    // close the span.\n    const result = await fn(updatedOptions, span);\n\n    span.setStatus({\n      code: SpanStatusCode.OK\n    });\n    return result;\n  } catch (err) {\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: err.message\n    });\n    throw err;\n  } finally {\n    span.end();\n  }\n}\n\n/** @internal */\nexport function isRestError(err: Error): err is RestError {\n  return err instanceof RestError;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy,\n  WebResource,\n  HttpOperationResponse,\n  RequestPolicyFactory\n} from \"@azure/core-http\";\n\n/**\n * The sync token header, as described here:\n * https://docs.microsoft.com/azure/azure-app-configuration/rest-api-consistency\n * @internal\n */\nexport const SyncTokenHeaderName = \"sync-token\";\n\n/**\n * A policy factory for injecting sync tokens properly into outgoing requests.\n * @param syncTokens - the sync tokens store to be used across requests.\n * @internal\n */\nexport function syncTokenPolicy(syncTokens: SyncTokens): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SyncTokenPolicy(nextPolicy, options, syncTokens);\n    }\n  };\n}\n\nclass SyncTokenPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private _syncTokens: SyncTokens\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(webResource: WebResource): Promise<HttpOperationResponse> {\n    const syncTokenHeaderValue = this._syncTokens.getSyncTokenHeaderValue();\n\n    if (syncTokenHeaderValue != null) {\n      webResource.headers.set(SyncTokenHeaderName, syncTokenHeaderValue);\n    }\n\n    const response = await this._nextPolicy.sendRequest(webResource);\n    this._syncTokens.addSyncTokenFromHeaderValue(response.headers.get(SyncTokenHeaderName));\n    return response;\n  }\n}\n\n/**\n * Sync token tracker (allows for real-time consistency, even in the face of\n * caching and load balancing within App Configuration).\n *\n * (protocol and format described here)\n * https://docs.microsoft.com/azure/azure-app-configuration/rest-api-consistency\n *\n * @internal\n */\nexport class SyncTokens {\n  private _currentSyncTokens = new Map<string, SyncToken>();\n\n  /**\n   * Takes the value from the header named after the constant `SyncTokenHeaderName`\n   * and adds it to our list of accumulated sync tokens.\n   *\n   * If given an empty value (or undefined) it clears the current list of sync tokens.\n   * (indicates the service has properly absorbed values into the cluster).\n   *\n   * @param syncTokenHeaderValue - The full value of the sync token header.\n   */\n  addSyncTokenFromHeaderValue(syncTokenHeaderValue: string | undefined): void {\n    if (syncTokenHeaderValue == null || syncTokenHeaderValue === \"\") {\n      // eventually everything gets synced up and we don't have to track\n      // these headers anymore\n      this._currentSyncTokens.clear();\n      return;\n    }\n\n    const newTokens = syncTokenHeaderValue.split(\",\").map(parseSyncToken);\n\n    for (const newToken of newTokens) {\n      const existingToken = this._currentSyncTokens.get(newToken.id);\n\n      if (!existingToken || existingToken.sequenceNumber < newToken.sequenceNumber) {\n        this._currentSyncTokens.set(newToken.id, newToken);\n        continue;\n      }\n    }\n  }\n\n  /**\n   * Gets a properly formatted SyncToken header value.\n   */\n  getSyncTokenHeaderValue(): string | undefined {\n    if (this._currentSyncTokens.size === 0) {\n      return undefined;\n    }\n\n    const syncTokenStrings = [];\n\n    for (const syncToken of this._currentSyncTokens.values()) {\n      // note that you don't include the 'sn' field here - that's only\n      // used for internal tracking of the 'version' for the token itself\n      syncTokenStrings.push(`${syncToken.id}=${syncToken.value}`);\n    }\n\n    return syncTokenStrings.join(\",\");\n  }\n}\n\n// An example sync token (from their documentation):\n//\n// jtqGc1I4=MDoyOA==;sn=28\n//\n// Which breaks down to:\n// id: jtqGc1I4\n// value: MDoyOA==\n// sequence number: 28\nconst syncTokenRegex = /^([^=]+)=([^;]+);sn=(\\d+)$/;\n\ninterface SyncToken {\n  id: string;\n  value: string;\n  sequenceNumber: number;\n}\n\n/**\n * Parses a single sync token into it's constituent parts.\n *\n * @param syncToken - A single sync token.\n *\n * @internal\n */\nexport function parseSyncToken(syncToken: string): SyncToken {\n  const matches = syncToken.match(syncTokenRegex);\n\n  if (matches == null) {\n    throw new Error(\n      `Failed to parse sync token '${syncToken}' with regex ${syncTokenRegex.source}`\n    );\n  }\n\n  const sequenceNumber = parseInt(matches[3], 10);\n\n  if (isNaN(sequenceNumber)) {\n    // this should be impossible since our regex restricts to just digits\n    // but there's nothing wrong with being thorough.\n    throw new Error(`${syncToken}: The sequence number value '${matches[3]}' wasn't a number`);\n  }\n\n  return {\n    id: matches[1],\n    value: matches[2],\n    sequenceNumber\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// https://azure.github.io/azure-sdk/typescript_design.html#ts-config-lib\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { AppConfigCredential } from \"./appConfigCredential\";\nimport { AppConfiguration } from \"./generated/src/appConfiguration\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  isTokenCredential,\n  exponentialRetryPolicy,\n  systemErrorRetryPolicy,\n  ServiceClientCredentials,\n  UserAgentOptions,\n  getDefaultUserAgentValue as getCoreHttpDefaultUserAgentValue,\n  userAgentPolicy\n} from \"@azure/core-http\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { TokenCredential } from \"@azure/core-auth\";\n\nimport \"@azure/core-asynciterator-polyfill\";\n\nimport {\n  AddConfigurationSettingOptions,\n  AddConfigurationSettingParam,\n  AddConfigurationSettingResponse,\n  ConfigurationSetting,\n  ConfigurationSettingId,\n  DeleteConfigurationSettingOptions,\n  DeleteConfigurationSettingResponse,\n  GetConfigurationSettingOptions,\n  GetConfigurationSettingResponse,\n  ListConfigurationSettingPage,\n  ListConfigurationSettingsOptions,\n  ListRevisionsOptions,\n  ListRevisionsPage,\n  PageSettings,\n  RetryOptions,\n  SetConfigurationSettingOptions,\n  SetConfigurationSettingParam,\n  SetConfigurationSettingResponse,\n  SetReadOnlyOptions,\n  SetReadOnlyResponse\n} from \"./models\";\nimport {\n  checkAndFormatIfAndIfNoneMatch,\n  extractAfterTokenFromNextLink,\n  formatFiltersAndSelect,\n  makeConfigurationSettingEmpty,\n  transformKeyValueResponse,\n  transformKeyValueResponseWithStatusCode,\n  transformKeyValue,\n  formatAcceptDateTime,\n  formatFieldsForSelect,\n  serializeAsConfigurationSettingParam\n} from \"./internal/helpers\";\nimport { tracingPolicy } from \"@azure/core-http\";\nimport { trace as traceFromTracingHelpers } from \"./internal/tracingHelpers\";\nimport {\n  AppConfigurationGetKeyValuesResponse,\n  AppConfigurationOptionalParams as GeneratedAppConfigurationClientOptions\n} from \"./generated/src/models\";\nimport { syncTokenPolicy, SyncTokens } from \"./internal/synctokenpolicy\";\nimport { FeatureFlagValue } from \"./featureFlag\";\nimport { SecretReferenceValue } from \"./secretReference\";\n\nconst packageName = \"azsdk-js-app-configuration\";\n\n/**\n * This constant should always be the same as the package.json's version - we use it when forming the\n * User - Agent header. There's a unit test that makes sure it always stays in sync.\n * @internal\n */\nexport const packageVersion = \"1.3.1\";\nconst apiVersion = \"1.0\";\nconst ConnectionStringRegex = /Endpoint=(.*);Id=(.*);Secret=(.*)/;\nconst deserializationContentTypes = {\n  json: [\n    \"application/vnd.microsoft.appconfig.kvset+json\",\n    \"application/vnd.microsoft.appconfig.kv+json\",\n    \"application/vnd.microsoft.appconfig.kvs+json\",\n    \"application/vnd.microsoft.appconfig.keyset+json\",\n    \"application/vnd.microsoft.appconfig.revs+json\"\n  ]\n};\n\n/**\n * Provides configuration options for AppConfigurationClient.\n */\nexport interface AppConfigurationClientOptions {\n  // NOTE: AppConfigurationClient is currently using it's own version of the ThrottlingRetryPolicy\n  // which we are going to unify with core-http. When we do that we can have this options\n  // interface extend PipelineOptions, and also switch over to using`createPipelineFromOptions`\n  // which will auto-create all of these policies and remove a lot of code.\n  //\n  // In the meantime we'll just deal with having our own interface that's compatible with PipelineOptions\n  // for the small subset we absolutely need to support.\n\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentOptions;\n\n  /**\n   * Options that control how to retry failed requests.\n   */\n  retryOptions?: RetryOptions;\n}\n\n/**\n * Provides internal configuration options for AppConfigurationClient.\n * @internal\n */\nexport interface InternalAppConfigurationClientOptions extends AppConfigurationClientOptions {\n  /**\n   * The sync token cache to use for this client.\n   * NOTE: this is an internal option, not for general client usage.\n   */\n  syncTokens?: SyncTokens;\n}\n\n/**\n * Client for the Azure App Configuration service.\n */\nexport class AppConfigurationClient {\n  private client: AppConfiguration;\n  private _syncTokens: SyncTokens;\n  // (for tests)\n  private _trace = traceFromTracingHelpers;\n\n  /**\n   * Initializes a new instance of the AppConfigurationClient class.\n   * @param connectionString - Connection string needed for a client to connect to Azure.\n   * @param options - Options for the AppConfigurationClient.\n   */\n  constructor(connectionString: string, options?: AppConfigurationClientOptions);\n  /**\n   * Initializes a new instance of the AppConfigurationClient class using\n   * a TokenCredential.\n   * @param endpoint - The endpoint of the App Configuration service (ex: https://sample.azconfig.io).\n   * @param tokenCredential - An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the \\@azure/identity package to create a credential that suits your needs.\n   * @param options - Options for the AppConfigurationClient.\n   */\n  constructor(\n    endpoint: string,\n    tokenCredential: TokenCredential,\n    options?: AppConfigurationClientOptions\n  );\n  constructor(\n    connectionStringOrEndpoint: string,\n    tokenCredentialOrOptions?: TokenCredential | AppConfigurationClientOptions,\n    options?: AppConfigurationClientOptions\n  ) {\n    let appConfigOptions: InternalAppConfigurationClientOptions = {};\n    let appConfigCredential: ServiceClientCredentials | TokenCredential;\n    let appConfigEndpoint: string;\n\n    if (isTokenCredential(tokenCredentialOrOptions)) {\n      appConfigOptions = (options as InternalAppConfigurationClientOptions) || {};\n      appConfigCredential = tokenCredentialOrOptions;\n      appConfigEndpoint = connectionStringOrEndpoint;\n    } else {\n      appConfigOptions = (tokenCredentialOrOptions as InternalAppConfigurationClientOptions) || {};\n      const regexMatch = connectionStringOrEndpoint?.match(ConnectionStringRegex);\n      if (regexMatch) {\n        appConfigCredential = new AppConfigCredential(regexMatch[2], regexMatch[3]);\n        appConfigEndpoint = regexMatch[1];\n      } else {\n        throw new Error(\n          `Invalid connection string. Valid connection strings should match the regex '${ConnectionStringRegex.source}'.`\n        );\n      }\n    }\n\n    this._syncTokens = appConfigOptions.syncTokens || new SyncTokens();\n\n    this.client = new AppConfiguration(\n      appConfigCredential,\n      appConfigEndpoint,\n      apiVersion,\n      getGeneratedClientOptions(appConfigEndpoint, this._syncTokens, appConfigOptions)\n    );\n  }\n\n  /**\n   * Add a setting into the Azure App Configuration service, failing if it\n   * already exists.\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.addConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\", value: \"MyValue\" });\n   * ```\n   * @param configurationSetting - A configuration setting.\n   * @param options - Optional parameters for the request.\n   */\n  addConfigurationSetting(\n    configurationSetting:\n      | AddConfigurationSettingParam\n      | AddConfigurationSettingParam<FeatureFlagValue>\n      | AddConfigurationSettingParam<SecretReferenceValue>,\n    options: AddConfigurationSettingOptions = {}\n  ): Promise<AddConfigurationSettingResponse> {\n    return this._trace(\"addConfigurationSetting\", options, async (newOptions) => {\n      const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n      const originalResponse = await this.client.putKeyValue(configurationSetting.key, {\n        ifNoneMatch: \"*\",\n        label: configurationSetting.label,\n        entity: keyValue,\n        ...newOptions\n      });\n      return transformKeyValueResponse(originalResponse);\n    });\n  }\n\n  /**\n   * Delete a setting from the Azure App Configuration service\n   *\n   * Example usage:\n   * ```ts\n   * const deletedSetting = await client.deleteConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to delete.\n   * @param options - Optional parameters for the request (ex: etag, label)\n   */\n  deleteConfigurationSetting(\n    id: ConfigurationSettingId,\n    options: DeleteConfigurationSettingOptions = {}\n  ): Promise<DeleteConfigurationSettingResponse> {\n    return this._trace(\"deleteConfigurationSetting\", options, async (newOptions) => {\n      const originalResponse = await this.client.deleteKeyValue(id.key, {\n        label: id.label,\n        ...newOptions,\n        ...checkAndFormatIfAndIfNoneMatch(id, options)\n      });\n\n      return transformKeyValueResponseWithStatusCode(originalResponse);\n    });\n  }\n\n  /**\n   * Gets a setting from the Azure App Configuration service.\n   *\n   * Example code:\n   * ```ts\n   * const setting = await client.getConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to get.\n   * @param options - Optional parameters for the request.\n   */\n  async getConfigurationSetting(\n    id: ConfigurationSettingId,\n    options: GetConfigurationSettingOptions = {}\n  ): Promise<GetConfigurationSettingResponse> {\n    return this._trace(\"getConfigurationSetting\", options, async (newOptions) => {\n      const originalResponse = await this.client.getKeyValue(id.key, {\n        ...newOptions,\n        label: id.label,\n        select: formatFieldsForSelect(options.fields),\n        ...formatAcceptDateTime(options),\n        ...checkAndFormatIfAndIfNoneMatch(id, options)\n      });\n\n      const response: GetConfigurationSettingResponse = transformKeyValueResponseWithStatusCode(\n        originalResponse\n      );\n\n      // 304 only comes back if the user has passed a conditional option in their\n      // request _and_ the remote object has the same etag as what the user passed.\n      if (response.statusCode === 304) {\n        // this is one of our few 'required' fields so we'll make sure it does get initialized\n        // with a value\n        response.key = id.key;\n\n        // and now we'll undefine all the other properties that are not HTTP related\n        makeConfigurationSettingEmpty(response);\n      }\n\n      return response;\n    });\n  }\n\n  /**\n   * Lists settings from the Azure App Configuration service, optionally\n   * filtered by key names, labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const allSettingsWithLabel = client.listConfigurationSettings({ labelFilter: \"MyLabel\" });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listConfigurationSettings(\n    options: ListConfigurationSettingsOptions = {}\n  ): PagedAsyncIterableIterator<ConfigurationSetting, ListConfigurationSettingPage, PageSettings> {\n    const iter = this.getListConfigurationSettingsIterator(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        // The appconfig service doesn't currently support letting you select a page size\n        // so we're ignoring their setting for now.\n        return this.listConfigurationSettingsByPage({\n          ...options,\n          continuationToken: settings.continuationToken\n        });\n      }\n    };\n  }\n\n  private async *getListConfigurationSettingsIterator(\n    options: ListConfigurationSettingsOptions\n  ): AsyncIterableIterator<ConfigurationSetting> {\n    for await (const page of this.listConfigurationSettingsByPage(options)) {\n      for (const configurationSetting of page.items) {\n        yield configurationSetting;\n      }\n    }\n  }\n\n  private async *listConfigurationSettingsByPage(\n    options: ListConfigurationSettingsOptions & PageSettings = {}\n  ): AsyncIterableIterator<ListConfigurationSettingPage> {\n    let currentResponse = await this._trace(\n      \"listConfigurationSettings\",\n      options,\n      async (newOptions) => {\n        const response = await this.client.getKeyValues({\n          ...newOptions,\n          ...formatAcceptDateTime(options),\n          ...formatFiltersAndSelect(options),\n          after: options.continuationToken\n        });\n\n        return response;\n      }\n    );\n\n    yield* this.createListConfigurationPageFromResponse(currentResponse);\n\n    while (currentResponse.nextLink) {\n      currentResponse = await this._trace(\n        \"listConfigurationSettings\",\n        options,\n        // TODO: same code up above. Unify.\n        async (newOptions) => {\n          const response = await this.client.getKeyValues({\n            ...newOptions,\n            ...formatAcceptDateTime(options),\n            ...formatFiltersAndSelect(options),\n            after: extractAfterTokenFromNextLink(currentResponse.nextLink!)\n          });\n\n          return response;\n        }\n      );\n\n      if (!currentResponse.items) {\n        break;\n      }\n\n      yield* this.createListConfigurationPageFromResponse(currentResponse);\n    }\n  }\n\n  private *createListConfigurationPageFromResponse(\n    currentResponse: AppConfigurationGetKeyValuesResponse\n  ): Generator<ListConfigurationSettingPage> {\n    yield {\n      ...currentResponse,\n      items: currentResponse.items != null ? currentResponse.items.map(transformKeyValue) : [],\n      continuationToken: currentResponse.nextLink\n        ? extractAfterTokenFromNextLink(currentResponse.nextLink)\n        : undefined\n    };\n  }\n\n  /**\n   * Lists revisions of a set of keys, optionally filtered by key names,\n   * labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const revisionsIterator = client.listRevisions({ keys: [\"MyKey\"] });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listRevisions(\n    options?: ListRevisionsOptions\n  ): PagedAsyncIterableIterator<ConfigurationSetting, ListRevisionsPage, PageSettings> {\n    const iter = this.getListRevisionsIterator(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        // The appconfig service doesn't currently support letting you select a page size\n        // so we're ignoring their setting for now.\n        return this.listRevisionsByPage({\n          ...options,\n          continuationToken: settings.continuationToken\n        });\n      }\n    };\n  }\n\n  private async *getListRevisionsIterator(\n    options?: ListRevisionsOptions\n  ): AsyncIterableIterator<ConfigurationSetting> {\n    for await (const page of this.listRevisionsByPage(options)) {\n      for (const item of page.items) {\n        yield item;\n      }\n    }\n  }\n\n  private async *listRevisionsByPage(\n    options: ListRevisionsOptions & PageSettings = {}\n  ): AsyncIterableIterator<ListRevisionsPage> {\n    let currentResponse = await this._trace(\"listRevisions\", options, async (newOptions) => {\n      const response = await this.client.getRevisions({\n        ...newOptions,\n        ...formatAcceptDateTime(options),\n        ...formatFiltersAndSelect(newOptions),\n        after: options.continuationToken\n      });\n\n      return response;\n    });\n\n    yield* this.createListRevisionsPageFromResponse(currentResponse);\n\n    while (currentResponse.nextLink) {\n      currentResponse = await this._trace(\"listRevisions\", options, (newOptions) => {\n        return this.client.getRevisions({\n          ...newOptions,\n          ...formatAcceptDateTime(options),\n          ...formatFiltersAndSelect(options),\n          after: extractAfterTokenFromNextLink(currentResponse.nextLink!)\n        });\n      });\n\n      if (!currentResponse.items) {\n        break;\n      }\n\n      yield* this.createListRevisionsPageFromResponse(currentResponse);\n    }\n  }\n\n  private *createListRevisionsPageFromResponse(\n    currentResponse: AppConfigurationGetKeyValuesResponse\n  ) {\n    yield {\n      ...currentResponse,\n      items: currentResponse.items != null ? currentResponse.items.map(transformKeyValue) : [],\n      continuationToken: currentResponse.nextLink\n        ? extractAfterTokenFromNextLink(currentResponse.nextLink)\n        : undefined\n    };\n  }\n\n  /**\n   * Sets the value of a key in the Azure App Configuration service, allowing for an optional etag.\n   * @param key - The name of the key.\n   * @param configurationSetting - A configuration value.\n   * @param options - Optional parameters for the request.\n   *\n   * Example code:\n   * ```ts\n   * await client.setConfigurationSetting({ key: \"MyKey\", value: \"MyValue\" });\n   * ```\n   */\n  async setConfigurationSetting(\n    configurationSetting:\n      | SetConfigurationSettingParam\n      | SetConfigurationSettingParam<FeatureFlagValue>\n      | SetConfigurationSettingParam<SecretReferenceValue>,\n    options: SetConfigurationSettingOptions = {}\n  ): Promise<SetConfigurationSettingResponse> {\n    return this._trace(\"setConfigurationSetting\", options, async (newOptions) => {\n      const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n      const response = await this.client.putKeyValue(configurationSetting.key, {\n        ...newOptions,\n        label: configurationSetting.label,\n        entity: keyValue,\n        ...checkAndFormatIfAndIfNoneMatch(configurationSetting, options)\n      });\n\n      return transformKeyValueResponse(response);\n    });\n  }\n\n  /**\n   * Sets or clears a key's read-only status.\n   * @param id - The id of the configuration setting to modify.\n   */\n  async setReadOnly(\n    id: ConfigurationSettingId,\n    readOnly: boolean,\n    options: SetReadOnlyOptions = {}\n  ): Promise<SetReadOnlyResponse> {\n    return this._trace(\"setReadOnly\", options, async (newOptions) => {\n      if (readOnly) {\n        const response = await this.client.putLock(id.key, {\n          ...newOptions,\n          label: id.label,\n          ...checkAndFormatIfAndIfNoneMatch(id, options)\n        });\n\n        return transformKeyValueResponse(response);\n      } else {\n        const response = await this.client.deleteLock(id.key, {\n          ...newOptions,\n          label: id.label,\n          ...checkAndFormatIfAndIfNoneMatch(id, options)\n        });\n\n        return transformKeyValueResponse(response);\n      }\n    });\n  }\n\n  /**\n   * Adds an external synchronization token to ensure service requests receive up-to-date values.\n   *\n   * @param syncToken - The synchronization token value.\n   */\n  updateSyncToken(syncToken: string): void {\n    this._syncTokens.addSyncTokenFromHeaderValue(syncToken);\n  }\n}\n/**\n * Gets the options for the generated AppConfigurationClient\n * @internal\n */\nexport function getGeneratedClientOptions(\n  endpoint: string,\n  syncTokens: SyncTokens,\n  internalAppConfigOptions: InternalAppConfigurationClientOptions\n): GeneratedAppConfigurationClientOptions {\n  const retryPolicies = [\n    exponentialRetryPolicy(),\n    systemErrorRetryPolicy(),\n    throttlingRetryPolicy(internalAppConfigOptions.retryOptions)\n  ];\n\n  const userAgent = getUserAgentPrefix(\n    internalAppConfigOptions.userAgentOptions &&\n      internalAppConfigOptions.userAgentOptions.userAgentPrefix\n  );\n\n  return {\n    endpoint,\n    deserializationContentTypes,\n    // we'll add in our own custom retry policies\n    noRetryPolicy: true,\n    requestPolicyFactories: (defaults) => [\n      tracingPolicy({ userAgent }),\n      syncTokenPolicy(syncTokens),\n      userAgentPolicy({ value: userAgent }),\n      ...retryPolicies,\n      ...defaults\n    ],\n    generateClientRequestIdHeader: true\n  };\n}\n\n/**\n * @internal\n */\nexport function getUserAgentPrefix(userSuppliedUserAgent: string | undefined): string {\n  const appConfigDefaultUserAgent = `${packageName}/${packageVersion} ${getCoreHttpDefaultUserAgentValue()}`;\n\n  if (!userSuppliedUserAgent) {\n    return appConfigDefaultUserAgent;\n  }\n\n  return `${userSuppliedUserAgent} ${appConfigDefaultUserAgent}`;\n}\n"],"names":["createHash","createHmac","URLBuilder","QueryCollectionFormat","KeyValueMapper","coreHttp.ServiceClient","coreHttp.getDefaultUserAgentValue","coreHttp.operationOptionsToRequestOptionsBase","coreHttp.Serializer","Mappers.KeyListResult","Mappers.AppConfigurationGetKeysHeaders","Mappers.ErrorModel","Parameters.name","Parameters.apiVersion","Parameters.after","Parameters.endpoint","Parameters.accept","Parameters.syncToken","Parameters.acceptDatetime","Mappers.AppConfigurationCheckKeysHeaders","Mappers.KeyValueListResult","Mappers.AppConfigurationGetKeyValuesHeaders","Parameters.key","Parameters.label","Parameters.select","Parameters.accept1","Mappers.AppConfigurationCheckKeyValuesHeaders","Parameters.select1","Mappers.KeyValue","Mappers.AppConfigurationGetKeyValueHeaders","Parameters.select2","Parameters.key1","Parameters.accept2","Parameters.ifMatch","Parameters.ifNoneMatch","Mappers.AppConfigurationPutKeyValueHeaders","Parameters.entity","Parameters.contentType","Mappers.AppConfigurationDeleteKeyValueHeaders","Mappers.AppConfigurationCheckKeyValueHeaders","Parameters.select3","Mappers.LabelListResult","Mappers.AppConfigurationGetLabelsHeaders","Parameters.select4","Parameters.accept3","Mappers.AppConfigurationCheckLabelsHeaders","Mappers.AppConfigurationPutLockHeaders","Mappers.AppConfigurationDeleteLockHeaders","Mappers.AppConfigurationGetRevisionsHeaders","Parameters.select5","Mappers.AppConfigurationCheckRevisionsHeaders","Parameters.select6","Mappers.AppConfigurationGetKeysNextHeaders","Parameters.nextLink","Mappers.AppConfigurationGetKeyValuesNextHeaders","Mappers.AppConfigurationGetLabelsNextHeaders","Mappers.AppConfigurationGetRevisionsNextHeaders","BaseRequestPolicy","delay","AbortError","Constants","createSpanFunction","SpanStatusCode","packageName","packageVersion","apiVersion","traceFromTracingHelpers","isTokenCredential","__asyncValues","__asyncDelegator","exponentialRetryPolicy","systemErrorRetryPolicy","tracingPolicy","userAgentPolicy","getCoreHttpDefaultUserAgentValue"],"mappings":"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"}