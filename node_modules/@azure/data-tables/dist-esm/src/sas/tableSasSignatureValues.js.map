{"version":3,"file":"tableSasSignatureValues.js","sourceRoot":"","sources":["../../../src/sas/tableSasSignatureValues.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * TableSASSignatureValues is used to help generating SAS tokens for tables.\n */\n\nimport { SasIPRange, ipRangeToString } from \"./sasIPRange\";\nimport { SasProtocol, SasQueryParameters } from \"./sasQueryParameters\";\nimport { TableSasPermissions, tableSasPermissionsToString } from \"./tableSasPermisions\";\nimport { NamedKeyCredential } from \"@azure/core-auth\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { computeHMACSHA256 } from \"../utils/computeHMACSHA256\";\nimport { truncatedISO8061Date } from \"../utils/truncateISO8061Date\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * TableSASSignatureValues is used to help generating Table service SAS tokens for tables\n */\nexport interface TableSasSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SasProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional. If identifier is not provided has a default value of one hour from the time the token is generated.\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional. If identifier is not provided has a default value of \"read\"\n   * Please refer to {@link TableSasPermissions} depending on the resource\n   * being accessed for help constructing the permissions string.\n   */\n  permissions?: TableSasPermissions;\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * Optional. The name of the access policy on the container this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Define the start of a Partition Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  startPartitionKey?: string;\n  /**\n   * Define the end of a Partition Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  endPartitionKey?: string;\n  /**\n   * Define the start of a Row Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  startRowKey?: string;\n  /**\n   * Define the end of a Row Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  endRowKey?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * **Note**: When identifier is not provided, permissions has a default value of \"read\" and expiresOn of one hour from the time the token is generated.\n */\nexport function generateTableSasQueryParameters(\n  tableName: string,\n  credential: NamedKeyCredential,\n  tableSasSignatureValues: TableSasSignatureValues\n): SasQueryParameters {\n  const version = tableSasSignatureValues.version ?? SERVICE_VERSION;\n\n  if (credential === undefined) {\n    throw TypeError(\"Invalid NamedKeyCredential\");\n  }\n\n  if (!tableName) {\n    throw new Error(\"Must provide a 'tableName'\");\n  }\n\n  const signedPermissions = tableSasPermissionsToString(tableSasSignatureValues.permissions);\n  const signedStart = tableSasSignatureValues.startsOn\n    ? truncatedISO8061Date(tableSasSignatureValues.startsOn, false /** withMilliseconds */)\n    : \"\";\n  const signedExpiry = tableSasSignatureValues.expiresOn\n    ? truncatedISO8061Date(tableSasSignatureValues.expiresOn, false /** withMilliseconds */)\n    : \"\";\n  const canonicalizedResource = getCanonicalName(credential.name, tableName);\n  const signedIdentifier = tableSasSignatureValues.identifier ?? \"\";\n  const signedIP = ipRangeToString(tableSasSignatureValues.ipRange);\n  const signedProtocol = tableSasSignatureValues.protocol || \"\";\n  const startingPartitionKey = tableSasSignatureValues.startPartitionKey ?? \"\";\n  const startingRowKey = tableSasSignatureValues.startRowKey ?? \"\";\n  const endingPartitionKey = tableSasSignatureValues.endPartitionKey ?? \"\";\n  const endingRowKey = tableSasSignatureValues.endRowKey ?? \"\";\n\n  const stringToSign = [\n    signedPermissions,\n    signedStart,\n    signedExpiry,\n    canonicalizedResource,\n    signedIdentifier,\n    signedIP,\n    signedProtocol,\n    version,\n    startingPartitionKey,\n    startingRowKey,\n    endingPartitionKey,\n    endingRowKey,\n  ].join(\"\\n\");\n\n  const signature = computeHMACSHA256(stringToSign, credential.key);\n\n  return new SasQueryParameters(version, signature, {\n    permissions: signedPermissions,\n    protocol: tableSasSignatureValues.protocol,\n    startsOn: tableSasSignatureValues.startsOn,\n    expiresOn: tableSasSignatureValues.expiresOn,\n    ipRange: tableSasSignatureValues.ipRange,\n    identifier: tableSasSignatureValues.identifier,\n    tableName,\n  });\n}\n\nfunction getCanonicalName(accountName: string, tableName: string): string {\n  // Sample CanonicalName for URL = https://myaccount.table.core.windows.net/Employees(PartitionKey='Jeff',RowKey='Price'):\n  //   canonicalizedResource = \"/table/myaccount/employees\"\n  return `/table/${accountName}/${tableName.toLowerCase()}`;\n}\n"]}