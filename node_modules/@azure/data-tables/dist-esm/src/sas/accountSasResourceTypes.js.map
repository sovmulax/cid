{"version":3,"file":"accountSasResourceTypes.js","sourceRoot":"","sources":["../../../src/sas/accountSasResourceTypes.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;GAKG;AACH,MAAM,UAAU,iCAAiC,CAAC,aAAqB;IACrE,MAAM,uBAAuB,GAA4B,EAAE,CAAC;IAE5D,KAAK,MAAM,CAAC,IAAI,aAAa,EAAE;QAC7B,QAAQ,CAAC,EAAE;YACT,KAAK,GAAG;gBACN,uBAAuB,CAAC,OAAO,GAAG,IAAI,CAAC;gBACvC,MAAM;YACR,KAAK,GAAG;gBACN,uBAAuB,CAAC,SAAS,GAAG,IAAI,CAAC;gBACzC,MAAM;YACR,KAAK,GAAG;gBACN,uBAAuB,CAAC,MAAM,GAAG,IAAI,CAAC;gBACtC,MAAM;YACR;gBACE,MAAM,IAAI,UAAU,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;SACvD;KACF;IAED,OAAO,uBAAuB,CAAC;AACjC,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,+BAA+B,CAAC,aAAsC;IACpF,MAAM,mBAAmB,GAAa,EAAE,CAAC;IACzC,IAAI,aAAa,CAAC,OAAO,EAAE;QACzB,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC/B;IACD,IAAI,aAAa,CAAC,SAAS,EAAE;QAC3B,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC/B;IACD,IAAI,aAAa,CAAC,MAAM,EAAE;QACxB,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC/B;IACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACtC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Creates an {@link accountSasResourceTypesFromString} from the specified resource types string. This method will throw an\n * Error if it encounters a character that does not correspond to a valid resource type.\n *\n * @param resourceTypes -\n */\nexport function accountSasResourceTypesFromString(resourceTypes: string): AccountSasResourceTypes {\n  const accountSasResourceTypes: AccountSasResourceTypes = {};\n\n  for (const c of resourceTypes) {\n    switch (c) {\n      case \"s\":\n        accountSasResourceTypes.service = true;\n        break;\n      case \"c\":\n        accountSasResourceTypes.container = true;\n        break;\n      case \"o\":\n        accountSasResourceTypes.object = true;\n        break;\n      default:\n        throw new RangeError(`Invalid resource type: ${c}`);\n    }\n  }\n\n  return accountSasResourceTypes;\n}\n\n/**\n * Converts the given resource types to a string.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n */\nexport function accountSasResourceTypesToString(resourceTypes: AccountSasResourceTypes): string {\n  const resourceTypesString: string[] = [];\n  if (resourceTypes.service) {\n    resourceTypesString.push(\"s\");\n  }\n  if (resourceTypes.container) {\n    resourceTypesString.push(\"c\");\n  }\n  if (resourceTypes.object) {\n    resourceTypesString.push(\"o\");\n  }\n  return resourceTypesString.join(\"\");\n}\n\n/**\n * Represents the Resources that are accessible by the SAS token\n */\nexport interface AccountSasResourceTypes {\n  /**\n   * Permission to access service level APIs granted.\n   */\n  service?: boolean;\n\n  /**\n   * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n   */\n  container?: boolean;\n\n  /**\n   * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n   */\n  object?: boolean;\n}\n"]}