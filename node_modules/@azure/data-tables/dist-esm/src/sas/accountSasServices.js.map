{"version":3,"file":"accountSasServices.js","sourceRoot":"","sources":["../../../src/sas/accountSasServices.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;GAKG;AACH,MAAM,UAAU,4BAA4B,CAAC,QAAgB;IAC3D,MAAM,kBAAkB,GAAuB,EAAE,CAAC;IAElD,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;QACxB,QAAQ,CAAC,EAAE;YACT,KAAK,GAAG;gBACN,kBAAkB,CAAC,IAAI,GAAG,IAAI,CAAC;gBAC/B,MAAM;YACR,KAAK,GAAG;gBACN,kBAAkB,CAAC,IAAI,GAAG,IAAI,CAAC;gBAC/B,MAAM;YACR,KAAK,GAAG;gBACN,kBAAkB,CAAC,KAAK,GAAG,IAAI,CAAC;gBAChC,MAAM;YACR,KAAK,GAAG;gBACN,kBAAkB,CAAC,KAAK,GAAG,IAAI,CAAC;gBAChC,MAAM;YACR;gBACE,MAAM,IAAI,UAAU,CAAC,8BAA8B,CAAC,EAAE,CAAC,CAAC;SAC3D;KACF;IAED,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,0BAA0B,CAAC,WAA+B,EAAE,KAAK,EAAE,IAAI,EAAE;IACvF,MAAM,cAAc,GAAa,EAAE,CAAC;IACpC,IAAI,QAAQ,CAAC,IAAI,EAAE;QACjB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC1B;IACD,IAAI,QAAQ,CAAC,KAAK,EAAE;QAClB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC1B;IACD,IAAI,QAAQ,CAAC,KAAK,EAAE;QAClB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC1B;IACD,IAAI,QAAQ,CAAC,IAAI,EAAE;QACjB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC1B;IACD,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACjC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Creates an {@link AccountSasServices} from the specified services string. This method will throw an\n * Error if it encounters a character that does not correspond to a valid service.\n *\n * @param services -\n */\nexport function accountSasServicesFromString(services: string): AccountSasServices {\n  const accountSasServices: AccountSasServices = {};\n\n  for (const c of services) {\n    switch (c) {\n      case \"b\":\n        accountSasServices.blob = true;\n        break;\n      case \"f\":\n        accountSasServices.file = true;\n        break;\n      case \"q\":\n        accountSasServices.queue = true;\n        break;\n      case \"t\":\n        accountSasServices.table = true;\n        break;\n      default:\n        throw new RangeError(`Invalid service character: ${c}`);\n    }\n  }\n\n  return accountSasServices;\n}\n\n/**\n * Converts the given services to a string.\n *\n */\nexport function accountSasServicesToString(services: AccountSasServices = { table: true }): string {\n  const servicesString: string[] = [];\n  if (services.blob) {\n    servicesString.push(\"b\");\n  }\n  if (services.table) {\n    servicesString.push(\"t\");\n  }\n  if (services.queue) {\n    servicesString.push(\"q\");\n  }\n  if (services.file) {\n    servicesString.push(\"f\");\n  }\n  return servicesString.join(\"\");\n}\n/**\n * Services that the SAS token can access\n */\nexport interface AccountSasServices {\n  /**\n   * Permission to access blob resources granted.\n   */\n  blob?: boolean;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  file?: boolean;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n\n  queue?: boolean;\n  /**\n   * Permission to access table resources granted.\n   */\n  table?: boolean;\n}\n"]}