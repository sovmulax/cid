{"version":3,"file":"tableSasPermisions.js","sourceRoot":"","sources":["../../../src/sas/tableSasPermisions.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;GAKG;AACH,MAAM,UAAU,6BAA6B,CAAC,WAAmB;IAC/D,MAAM,mBAAmB,GAAwB,EAAE,CAAC;IACpD,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;QAC9B,QAAQ,IAAI,EAAE;YACZ,KAAK,GAAG;gBACN,mBAAmB,CAAC,KAAK,GAAG,IAAI,CAAC;gBACjC,MAAM;YACR,KAAK,GAAG;gBACN,mBAAmB,CAAC,GAAG,GAAG,IAAI,CAAC;gBAC/B,MAAM;YACR,KAAK,GAAG;gBACN,mBAAmB,CAAC,MAAM,GAAG,IAAI,CAAC;gBAClC,MAAM;YACR,KAAK,GAAG;gBACN,mBAAmB,CAAC,MAAM,GAAG,IAAI,CAAC;gBAClC,MAAM;YACR;gBACE,MAAM,IAAI,UAAU,CAAC,uBAAuB,IAAI,EAAE,CAAC,CAAC;SACvD;KACF;IAED,OAAO,mBAAmB,CAAC;AAC7B,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,2BAA2B,CAAC,WAAiC;IAC3E,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,EAAE,CAAC;KACX;IAED,MAAM,iBAAiB,GAAa,EAAE,CAAC;IACvC,IAAI,WAAW,CAAC,KAAK,EAAE;QACrB,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7B;IACD,IAAI,WAAW,CAAC,GAAG,EAAE;QACnB,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7B;IACD,IAAI,WAAW,CAAC,MAAM,EAAE;QACtB,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7B;IAED,IAAI,WAAW,CAAC,MAAM,EAAE;QACtB,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7B;IACD,OAAO,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACpC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Creates a {@link TableSasPermissions} from the specified permissions string. This method will throw an\n * Error if it encounters a character that does not correspond to a valid permission.\n *\n * @param permissions -\n */\nexport function tableSasPermissionsFromString(permissions: string): TableSasPermissions {\n  const tableSasPermissions: TableSasPermissions = {};\n  for (const char of permissions) {\n    switch (char) {\n      case \"r\":\n        tableSasPermissions.query = true;\n        break;\n      case \"a\":\n        tableSasPermissions.add = true;\n        break;\n      case \"u\":\n        tableSasPermissions.update = true;\n        break;\n      case \"d\":\n        tableSasPermissions.delete = true;\n        break;\n      default:\n        throw new RangeError(`Invalid permission: ${char}`);\n    }\n  }\n\n  return tableSasPermissions;\n}\n\n/**\n * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n * order accepted by the service.\n *\n * @returns A string which represents the TableSasPermissions\n */\nexport function tableSasPermissionsToString(permissions?: TableSasPermissions): string {\n  if (!permissions) {\n    return \"\";\n  }\n\n  const permissionsString: string[] = [];\n  if (permissions.query) {\n    permissionsString.push(\"r\");\n  }\n  if (permissions.add) {\n    permissionsString.push(\"a\");\n  }\n  if (permissions.update) {\n    permissionsString.push(\"u\");\n  }\n\n  if (permissions.delete) {\n    permissionsString.push(\"d\");\n  }\n  return permissionsString.join(\"\");\n}\n\n/**\n * A type that looks like a Table SAS permission.\n * Used in {@link TableSasPermissions} to parse SAS permissions from raw objects.\n */\nexport interface TableSasPermissions {\n  /**\n   * Specifies Query access granted.\n   */\n  query?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Update access granted.\n   */\n  update?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n}\n"]}