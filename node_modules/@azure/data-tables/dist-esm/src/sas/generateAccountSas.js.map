{"version":3,"file":"generateAccountSas.js","sourceRoot":"","sources":["../../../src/sas/generateAccountSas.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAyB,+BAA+B,EAAE,MAAM,yBAAyB,CAAC;AACjG,OAAO,EAEL,4BAA4B,EAC5B,0BAA0B,GAC3B,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAsB,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAG5E,OAAO,EAAE,iCAAiC,EAAE,MAAM,6BAA6B,CAAC;AAEhF;;;;;;;;GAQG;AACH,MAAM,UAAU,kBAAkB,CAChC,UAA8B,EAC9B,UAA6B,EAAE;IAE/B,MAAM,EACJ,SAAS,EACT,WAAW,GAAG,+BAA+B,CAAC,IAAI,CAAC,EACnD,aAAa,GAAG,KAAK,EACrB,QAAQ,GAAG,4BAA4B,CAAC,GAAG,CAAC,KAE1C,OAAO,EADN,IAAI,UACL,OAAO,EANL,yDAML,CAAU,CAAC;IACZ,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;QACrC,MAAM,UAAU,CACd,+FAA+F,CAChG,CAAC;KACH;IAED,IAAI,MAAM,GAAG,SAAS,CAAC;IAEvB,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;KAChD;IAED,MAAM,GAAG,GAAG,iCAAiC,iBAEzC,WAAW,EACX,SAAS,EAAE,MAAM,EACjB,aAAa,EACb,QAAQ,EAAE,0BAA0B,CAAC,QAAQ,CAAC,IAC3C,IAAI,GAET,UAAU,CACX,CAAC,QAAQ,EAAE,CAAC;IAEb,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccountSasPermissions, accountSasPermissionsFromString } from \"./accountSasPermissions\";\nimport {\n  AccountSasServices,\n  accountSasServicesFromString,\n  accountSasServicesToString,\n} from \"./accountSasServices\";\nimport { NamedKeyCredential, isNamedKeyCredential } from \"@azure/core-auth\";\nimport { SasIPRange } from \"./sasIPRange\";\nimport { SasProtocol } from \"./sasQueryParameters\";\nimport { generateAccountSasQueryParameters } from \"./accountSasSignatureValues\";\n\n/**\n * Generates a Table Account Shared Access Signature (SAS) URI based on the client properties\n * and parameters passed in. The SAS is signed by the shared key credential of the client.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n *\n * @param options - Optional parameters.\n * @returns An account SAS token\n */\nexport function generateAccountSas(\n  credential: NamedKeyCredential,\n  options: AccountSasOptions = {}\n): string {\n  const {\n    expiresOn,\n    permissions = accountSasPermissionsFromString(\"rl\"),\n    resourceTypes = \"sco\",\n    services = accountSasServicesFromString(\"t\"),\n    ...rest\n  } = options;\n  if (!isNamedKeyCredential(credential)) {\n    throw RangeError(\n      \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n    );\n  }\n\n  let expiry = expiresOn;\n\n  if (expiry === undefined) {\n    const now = new Date();\n    expiry = new Date(now.getTime() + 3600 * 1000);\n  }\n\n  const sas = generateAccountSasQueryParameters(\n    {\n      permissions,\n      expiresOn: expiry,\n      resourceTypes,\n      services: accountSasServicesToString(services),\n      ...rest,\n    },\n    credential\n  ).toString();\n\n  return sas;\n}\n\n/**\n * Options to configure {@link generateAccountSas} operation.\n */\nexport interface AccountSasOptions {\n  /**\n   * The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n   */\n  expiresOn?: Date;\n  /**\n   * Specifies the list of permissions to be associated with the SAS.\n   */\n  permissions?: AccountSasPermissions;\n  /**\n   * Specifies the resource types associated with the shared access signature.\n   */\n  resourceTypes?: string;\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * SAS protocols allowed.\n   */\n  protocol?: SasProtocol;\n\n  /**\n   * When the SAS will take effect.\n   */\n  startsOn?: Date;\n  /**\n   * IP range allowed.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Account services\n   */\n  services?: AccountSasServices;\n}\n"]}