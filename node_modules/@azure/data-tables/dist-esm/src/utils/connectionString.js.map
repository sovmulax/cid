{"version":3,"file":"connectionString.js","sourceRoot":"","sources":["../../../src/utils/connectionString.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ClientParamsFromConnectionString, ConnectionString } from \"./internalModels\";\nimport { fromAccountConnectionString, getAccountConnectionString } from \"./accountConnectionString\";\n\nimport { TableServiceClientOptions } from \"../models\";\n\nconst DevelopmentConnectionString =\n  \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1\";\n\n/**\n * This function parses a connection string into a set of\n * parameters to pass to be passed to TableClientService,\n * depending on the connection string type these parameter would\n * contain:\n * - Account Connection String:  A pipeline to sign the request with a SharedKey\n * - SAS Connection String: Attach a SAS token to the storage account url for authentication\n * @param connectionString - Connection string to parse\n * @param options - TableService client options\n */\nexport function getClientParamsFromConnectionString(\n  connectionString: string,\n  options: TableServiceClientOptions = {}\n): ClientParamsFromConnectionString {\n  if (connectionString.toLowerCase().indexOf(\"usedevelopmentstorage=true\") !== -1) {\n    connectionString = DevelopmentConnectionString;\n    options.allowInsecureConnection = true;\n  }\n  const extractedCreds = extractConnectionStringParts(connectionString);\n  if (extractedCreds.kind === \"AccountConnString\") {\n    return fromAccountConnectionString(extractedCreds, options);\n  } else if (extractedCreds.kind === \"SASConnString\") {\n    return {\n      url: `${extractedCreds.url}?${extractedCreds.accountSas}`,\n      options,\n    };\n  } else {\n    throw new Error(\n      \"Connection string must be either an Account connection string or a SAS connection string\"\n    );\n  }\n}\n\n/**\n * Extracts the parts of an Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  // Matching TableEndpoint in the Account connection string\n  let tableEndpoint = getValueInConnString(connectionString, \"TableEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  tableEndpoint = tableEndpoint.endsWith(\"/\") ? tableEndpoint.slice(0, -1) : tableEndpoint;\n\n  if (isAccountConnectionString(connectionString)) {\n    return getAccountConnectionString(\n      getValueInConnString(connectionString, \"AccountName\"),\n      getValueInConnString(connectionString, \"AccountKey\"),\n      getValueInConnString(connectionString, \"DefaultEndpointsProtocol\"),\n      getValueInConnString(connectionString, \"EndpointSuffix\"),\n      tableEndpoint\n    );\n  } else {\n    return getSASConnectionString(connectionString, tableEndpoint);\n  }\n}\n\n/**\n * Checks whether a connection string is an Account Connection string or not\n */\nfunction isAccountConnectionString(connectionString: string) {\n  const lowercaseConnectionString = connectionString.toLowerCase();\n  return (\n    lowercaseConnectionString.search(\"defaultendpointsprotocol=\") !== -1 &&\n    lowercaseConnectionString.search(\"accountkey=\") !== -1\n  );\n}\n\nfunction getSASConnectionString(connectionString: string, tableEndpoint: string): ConnectionString {\n  const accountName = getAccountNameFromUrl(tableEndpoint);\n  const accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n  if (!tableEndpoint) {\n    throw new Error(\"Invalid TableEndpoint in the provided SAS Connection String\");\n  } else if (!accountSas) {\n    throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n  } else if (!accountName) {\n    throw new Error(\"Invalid AccountName in the provided SAS Connection String\");\n  }\n\n  return { kind: \"SASConnString\", url: tableEndpoint, accountName, accountSas };\n}\n\nfunction getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"TableEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n): string {\n  const searchKey = argument.toLowerCase();\n  const elements = connectionString.split(\";\").filter((e) => Boolean(e));\n  for (const element of elements) {\n    const trimmedElement = element.trim();\n    const [elementKey, value] = getValuePair(trimmedElement);\n    const key = elementKey.toLowerCase();\n    if (key === searchKey) {\n      return value;\n    }\n  }\n  return \"\";\n}\n\nfunction getValuePair(kvp: string): string[] {\n  // If the string is not in kvp format <key>=<valye> return an empty array\n  if (!kvp || kvp.indexOf(\"=\") === -1) {\n    return [];\n  }\n  // Get the substring before the first '='\n  const key = kvp.substr(0, kvp.indexOf(\"=\"));\n  // Get the substring after the first '='\n  const value = kvp.substr(kvp.indexOf(\"=\") + 1);\n\n  return [key, value];\n}\n\n/**\n * Extracts account name from the url\n * @param url - URL to extract the account name from\n * @returns The account name\n */\nfunction getAccountNameFromUrl(url: string): string {\n  if (!url) {\n    return url;\n  }\n\n  const parsedUrl = new URL(url);\n  let accountName;\n\n  const host = parsedUrl.host || \"\";\n  const path = parsedUrl.pathname || \"\";\n  const hostParts = host.split(\".\");\n  const pathParts = path.split(\"/\");\n\n  if (hostParts.length >= 1 && hostParts[1] === \"table\") {\n    // `${defaultEndpointsProtocol}://${accountName}.table.${endpointSuffix}`;\n    // Slicing off '/' at the end if exists\n    url = url.endsWith(\"/\") ? url.slice(0, -1) : url;\n    accountName = host.split(\".\")[0];\n  } else if (pathParts.length >= 1) {\n    // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n    // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n    // .getPath() -> /devstoreaccount1/\n    accountName = pathParts[1];\n  } else {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n\n  return accountName;\n}\n"]}