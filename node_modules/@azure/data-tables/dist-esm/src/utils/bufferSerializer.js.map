{"version":3,"file":"bufferSerializer.js","sourceRoot":"","sources":["../../../src/utils/bufferSerializer.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,KAA0B;IACrD,IAAI,KAAK,YAAY,UAAU,EAAE;QAC/B,MAAM,WAAW,GAAG,KAAK,YAAY,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAChF,OAAO,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KACvC;SAAM;QACL,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC9C;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,KAAa;IACxC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACtC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Encodes a byte array in base64 format.\n * @param value - The Uint8Aray or string to encode\n */\nexport function base64Encode(value: Uint8Array | string): string {\n  if (value instanceof Uint8Array) {\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n  } else {\n    return Buffer.from(value).toString(\"base64\");\n  }\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value - The base64 string to decode\n */\nexport function base64Decode(value: string): Uint8Array {\n  return Buffer.from(value, \"base64\");\n}\n"]}