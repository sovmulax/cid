{"version":3,"file":"errorHelpers.js","sourceRoot":"","sources":["../../../src/utils/errorHelpers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAsBlC,MAAM,UAAU,wBAAwB,CACtC,KAAc,EACd,UAA2E,EAAE;;IAE7E,MAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9C,IACE,aAAa;QACb,aAAa,CAAC,MAAM,KAAK,GAAG;QAC5B,CAAA,MAAA,aAAa,CAAC,UAAU,CAAC,UAAU,0CAAE,IAAI,MAAK,oBAAoB,EAClE;QACA,MAAA,OAAO,CAAC,MAAM,0CAAE,IAAI,CAAC,SAAS,OAAO,CAAC,SAAS,iBAAiB,CAAC,CAAC;QAElE,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO,CAAC,UAAU,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;SACvC;KACF;SAAM;QACL,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,KAAc;IACtC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;QACvB,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,aAAa,GAA8B,KAAK,CAAC,QAAqC,CAAC;IAE7F,IAAI,CAAC,aAAa,IAAI,CAAC,2BAA2B,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;QAC5E,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,SAAS,WAAW,CAAC,KAAc;IACjC,OAAQ,KAAmB,CAAC,IAAI,KAAK,WAAW,CAAC;AACnD,CAAC;AAED,SAAS,2BAA2B,CAClC,iBAAsB;IAEtB,OAAO,OAAO,CAAC,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,UAAU,CAAC,CAAC;AAChD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions, OperationRequest } from \"@azure/core-client\";\nimport { PipelineResponse, RestError } from \"@azure/core-rest-pipeline\";\nimport { AzureLogger } from \"@azure/logger\";\nimport { TableServiceError } from \"../generated\";\n\nexport type TableServiceErrorResponse = PipelineResponse & {\n  /**\n   * The parsed HTTP response headers.\n   */\n  parsedHeaders?: Record<string, unknown>;\n  /**\n   * The response body as parsed JSON or XML.\n   */\n  parsedBody: TableServiceError;\n  /**\n   * The request that generated the response.\n   */\n  request: OperationRequest;\n};\n\nexport function handleTableAlreadyExists(\n  error: unknown,\n  options: OperationOptions & { tableName?: string; logger?: AzureLogger } = {}\n): void {\n  const responseError = getErrorResponse(error);\n  if (\n    responseError &&\n    responseError.status === 409 &&\n    responseError.parsedBody.odataError?.code === \"TableAlreadyExists\"\n  ) {\n    options.logger?.info(`Table ${options.tableName} already Exists`);\n\n    if (options.onResponse) {\n      options.onResponse(responseError, {});\n    }\n  } else {\n    throw error;\n  }\n}\n\nfunction getErrorResponse(error: unknown): TableServiceErrorResponse | undefined {\n  if (!isRestError(error)) {\n    return undefined;\n  }\n\n  const errorResponse: TableServiceErrorResponse = error.response as TableServiceErrorResponse;\n\n  if (!errorResponse || !isTableServiceErrorResponse(errorResponse.parsedBody)) {\n    return undefined;\n  }\n\n  return errorResponse;\n}\n\nfunction isRestError(error: unknown): error is RestError {\n  return (error as RestError).name === \"RestError\";\n}\n\nfunction isTableServiceErrorResponse(\n  errorResponseBody: any\n): errorResponseBody is TableServiceError {\n  return Boolean(errorResponseBody?.odataError);\n}\n"]}