{"version":3,"file":"accountConnectionString.js","sourceRoot":"","sources":["../../../src/utils/accountConnectionString.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,uBAAuB,EAAE,MAAM,kBAAkB,CAAC;AAG3D;;;;;GAKG;AACH,MAAM,UAAU,2BAA2B,CACzC,cAAgC,EAChC,UAAqC,EAAE;IAEvC,MAAM,mBAAmB,GAAG,IAAI,uBAAuB,CACrD,cAAc,CAAC,WAAY,EAC3B,cAAc,CAAC,UAAU,CAC1B,CAAC;IAEF,OAAO;QACL,GAAG,EAAE,cAAc,CAAC,GAAG;QACvB,OAAO;QACP,UAAU,EAAE,mBAAmB;KAChC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,0BAA0B,CACxC,WAAmB,EACnB,UAAkB,EAClB,wBAAgC,EAChC,cAAuB,EACvB,aAAsB;IAEtB,IAAI,CAAC,aAAa,EAAE;QAClB,gEAAgE;QAChE,8FAA8F;QAC9F,MAAM,QAAQ,GAAG,wBAAwB,CAAC,WAAW,EAAE,CAAC;QACxD,IAAI,QAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK,MAAM,EAAE;YAC/C,MAAM,IAAI,KAAK,CACb,iGAAiG,CAClG,CAAC;SACH;QACD,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;SAC7E;QACD,aAAa,GAAG,GAAG,wBAAwB,MAAM,WAAW,UAAU,cAAc,EAAE,CAAC;KACxF;IAED,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;KAC1E;SAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;KACzE;IAED,OAAO;QACL,IAAI,EAAE,mBAAmB;QACzB,GAAG,EAAE,aAAa;QAClB,WAAW;QACX,UAAU;KACX,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ClientParamsFromConnectionString, ConnectionString } from \"./internalModels\";\nimport { AzureNamedKeyCredential } from \"@azure/core-auth\";\nimport { TableServiceClientOptions } from \"..\";\n\n/**\n * Gets client parameters from an Account Connection String\n * Only supported in Node.js not supported for Browsers\n * @param extractedCreds - parsed connection string\n * @param options - TablesServiceClient options\n */\nexport function fromAccountConnectionString(\n  extractedCreds: ConnectionString,\n  options: TableServiceClientOptions = {}\n): ClientParamsFromConnectionString {\n  const sharedKeyCredential = new AzureNamedKeyCredential(\n    extractedCreds.accountName!,\n    extractedCreds.accountKey\n  );\n\n  return {\n    url: extractedCreds.url,\n    options,\n    credential: sharedKeyCredential,\n  };\n}\n\nexport function getAccountConnectionString(\n  accountName: string,\n  accountKey: string,\n  defaultEndpointsProtocol: string,\n  endpointSuffix?: string,\n  tableEndpoint?: string\n): ConnectionString {\n  if (!tableEndpoint) {\n    // TableEndpoint is not present in the Account connection string\n    // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.table.${endpointSuffix}`\n    const protocol = defaultEndpointsProtocol.toLowerCase();\n    if (protocol !== \"https\" && protocol !== \"http\") {\n      throw new Error(\n        \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n      );\n    }\n    if (!endpointSuffix) {\n      throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n    }\n    tableEndpoint = `${defaultEndpointsProtocol}://${accountName}.table.${endpointSuffix}`;\n  }\n\n  if (!accountName) {\n    throw new Error(\"Invalid AccountName in the provided Connection String\");\n  } else if (accountKey.length === 0) {\n    throw new Error(\"Invalid AccountKey in the provided Connection String\");\n  }\n\n  return {\n    kind: \"AccountConnString\",\n    url: tableEndpoint,\n    accountName,\n    accountKey,\n  };\n}\n"]}