{"version":3,"file":"internalModels.js","sourceRoot":"","sources":["../../../src/utils/internalModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CreateTableEntityResponse,\n  DeleteTableEntityOptions,\n  GetTableEntityOptions,\n  GetTableEntityResponse,\n  ListTableEntitiesOptions,\n  TableEntity,\n  TableEntityResult,\n  TableItem,\n  TableServiceClientOptions,\n  TableTransactionResponse,\n  TransactionAction,\n  UpdateMode,\n  UpdateTableEntityOptions,\n} from \"../models\";\nimport { DeleteTableEntityResponse, UpdateEntityResponse, UpsertEntityResponse } from \"..\";\nimport { Pipeline, PipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { NamedKeyCredential } from \"@azure/core-auth\";\nimport { OperationOptions } from \"@azure/core-client\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nexport interface ConnectionString {\n  kind: \"AccountConnString\" | \"SASConnString\";\n  url: string;\n  accountName: string;\n  accountKey?: any;\n  accountSas?: string;\n}\n\n/**\n * Contains response data for the listTable operation.\n */\nexport type ListTableItemsResponse = Array<TableItem> & {\n  /**\n   * This header contains the continuation token value.\n   */\n  nextTableName?: string;\n};\n\n/**\n * Contains response data for the getEntity operation.\n */\nexport type ListEntitiesResponse<T extends object> = Array<TableEntityResult<T>> & {\n  /**\n   * Contains the continuation token value for the next page.\n   */\n  continuationToken?: string;\n};\n\nexport interface ClientParamsFromConnectionString {\n  url: string;\n  options?: TableServiceClientOptions;\n  credential?: NamedKeyCredential;\n}\n\n/**\n * Transaction request builder\n */\nexport interface InnerTransactionRequest {\n  /**\n   * Transaction request body\n   */\n  body: string[];\n  /**\n   * Creates a pipeline to intercept sub-requests and\n   * build the request body\n   */\n  createPipeline(): Pipeline;\n  /**\n   * Adds an operation to add to the transaction body\n   * @param request - The operation to add\n   */\n  appendSubRequestToBody(request: PipelineRequest): void;\n  /**\n   * Gets the transaction request body\n   */\n  getHttpRequestBody(): string;\n}\n\nexport interface InternalTransactionClientOptions extends TableServiceClientOptions {\n  innerTransactionRequest: InnerTransactionRequest;\n}\n\n/**\n * Describes the shape of a TableClient\n */\nexport interface TableClientLike {\n  /**\n   * Represents a pipeline for making a HTTP request to a URL.\n   */\n  pipeline: Pipeline;\n  /**\n   * Name of the table to perform operations on.\n   */\n  readonly tableName: string;\n  /**\n   *  Creates the current table.\n   * @param options - The options parameters.\n   */\n  createTable(options?: OperationOptions): Promise<void>;\n  /**\n   * Submits a Transaction which is composed of a set of actions.\n   * @param actions - tuple that contains the action to perform, and the entity to perform the action with\n   */\n  submitTransaction(actions: TransactionAction[]): Promise<TableTransactionResponse>;\n  /**\n   * Insert entity in the table.\n   * @param entity - The properties for the table entity.\n   * @param options - The options parameters.\n   */\n  createEntity<T extends object>(\n    entity: TableEntity<T>,\n    options?: OperationOptions\n  ): Promise<CreateTableEntityResponse>;\n  /**\n   * Permanently deletes the current table with all of its entities.\n   * @param options - The options parameters.\n   */\n  deleteTable(options?: OperationOptions): Promise<void>;\n  /**\n   * Permanently deletes the current table if it exists in the account.\n   * @param options - The options parameters.\n   */\n  deleteEntity(\n    partitionKey: string,\n    rowKey: string,\n    options?: DeleteTableEntityOptions\n  ): Promise<DeleteTableEntityResponse>;\n  /**\n   * Returns a single entity in the table.\n   * @param partitionKey - The partition key of the entity.\n   * @param rowKey - The row key of the entity.\n   * @param options - The options parameters.\n   */\n  getEntity<T extends object>(\n    partitionKey: string,\n    rowKey: string,\n    options?: GetTableEntityOptions\n  ): Promise<GetTableEntityResponse<T>>;\n  /**\n   * Queries entities in a table.\n   * @param tableName - The name of the table.\n   * @param options - The options parameters.\n   */\n  listEntities<T extends object>(\n    options?: ListTableEntitiesOptions\n  ): PagedAsyncIterableIterator<T, ListEntitiesResponse<T>>;\n  /**\n   * Update an entity in the table.\n   * @param entity - The properties of the entity to be updated.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   */\n  updateEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode,\n    options?: UpdateTableEntityOptions\n  ): Promise<UpdateEntityResponse>;\n  /**\n   * Upsert an entity in the table.\n   * @param tableName - The name of the table.\n   * @param entity - The properties for the table entity.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   */\n  upsertEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode,\n    options?: OperationOptions\n  ): Promise<UpsertEntityResponse>;\n}\n"]}