{"version":3,"file":"table.js","sourceRoot":"","sources":["../../../../src/generated/operationsInterfaces/table.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  TableQueryOptionalParams,\n  TableQueryOperationResponse,\n  TableProperties,\n  TableCreateOptionalParams,\n  TableCreateResponse,\n  TableDeleteOptionalParams,\n  TableDeleteResponse,\n  TableQueryEntitiesOptionalParams,\n  TableQueryEntitiesResponse,\n  TableQueryEntitiesWithPartitionAndRowKeyOptionalParams,\n  TableQueryEntitiesWithPartitionAndRowKeyResponse,\n  TableUpdateEntityOptionalParams,\n  TableUpdateEntityResponse,\n  TableMergeEntityOptionalParams,\n  TableMergeEntityResponse,\n  TableDeleteEntityOptionalParams,\n  TableDeleteEntityResponse,\n  TableInsertEntityOptionalParams,\n  TableInsertEntityResponse,\n  TableGetAccessPolicyOptionalParams,\n  TableGetAccessPolicyResponse,\n  TableSetAccessPolicyOptionalParams,\n  TableSetAccessPolicyResponse\n} from \"../models\";\n\n/** Interface representing a Table. */\nexport interface Table {\n  /**\n   * Queries tables under the given account.\n   * @param options The options parameters.\n   */\n  query(\n    options?: TableQueryOptionalParams\n  ): Promise<TableQueryOperationResponse>;\n  /**\n   * Creates a new table under the given account.\n   * @param tableProperties The Table properties.\n   * @param options The options parameters.\n   */\n  create(\n    tableProperties: TableProperties,\n    options?: TableCreateOptionalParams\n  ): Promise<TableCreateResponse>;\n  /**\n   * Operation permanently deletes the specified table.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  delete(\n    table: string,\n    options?: TableDeleteOptionalParams\n  ): Promise<TableDeleteResponse>;\n  /**\n   * Queries entities in a table.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  queryEntities(\n    table: string,\n    options?: TableQueryEntitiesOptionalParams\n  ): Promise<TableQueryEntitiesResponse>;\n  /**\n   * Queries entities in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param options The options parameters.\n   */\n  queryEntitiesWithPartitionAndRowKey(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    options?: TableQueryEntitiesWithPartitionAndRowKeyOptionalParams\n  ): Promise<TableQueryEntitiesWithPartitionAndRowKeyResponse>;\n  /**\n   * Update entity in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param options The options parameters.\n   */\n  updateEntity(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    options?: TableUpdateEntityOptionalParams\n  ): Promise<TableUpdateEntityResponse>;\n  /**\n   * Merge entity in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param options The options parameters.\n   */\n  mergeEntity(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    options?: TableMergeEntityOptionalParams\n  ): Promise<TableMergeEntityResponse>;\n  /**\n   * Deletes the specified entity in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param ifMatch Match condition for an entity to be deleted. If specified and a matching entity is\n   *                not found, an error will be raised. To force an unconditional delete, set to the wildcard character\n   *                (*).\n   * @param options The options parameters.\n   */\n  deleteEntity(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    ifMatch: string,\n    options?: TableDeleteEntityOptionalParams\n  ): Promise<TableDeleteEntityResponse>;\n  /**\n   * Insert entity in a table.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  insertEntity(\n    table: string,\n    options?: TableInsertEntityOptionalParams\n  ): Promise<TableInsertEntityResponse>;\n  /**\n   * Retrieves details about any stored access policies specified on the table that may be used with\n   * Shared Access Signatures.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  getAccessPolicy(\n    table: string,\n    options?: TableGetAccessPolicyOptionalParams\n  ): Promise<TableGetAccessPolicyResponse>;\n  /**\n   * Sets stored access policies for the table that may be used with Shared Access Signatures.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  setAccessPolicy(\n    table: string,\n    options?: TableSetAccessPolicyOptionalParams\n  ): Promise<TableSetAccessPolicyResponse>;\n}\n"]}