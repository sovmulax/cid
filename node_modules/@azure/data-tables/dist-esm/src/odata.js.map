{"version":3,"file":"odata.js","sourceRoot":"","sources":["../../src/odata.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,SAAS,oBAAoB,CAAC,KAAc,EAAE,QAAgB;IAC5D,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QAC7B,0CAA0C;QAC1C,IAAI,QAAQ,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACrD,MAAM,GAAG,IAAI,MAAM,GAAG,CAAC;SACxB;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,KAAa;IACxC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACnC,CAAC;AAED,SAAS,UAAU,CAAC,KAAc;IAChC,OAAO,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC,YAAY,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;AAC5E,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,OAA6B,EAAE,GAAG,MAAiB;IACvE,MAAM,WAAW,GAAG,CAAC,KAAc,EAAE,MAAc,EAAoB,EAAE;QACvE,OAAO,UAAU,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC;IACF,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE;YACrB,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAClD;KACF;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC1B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nfunction escapeQuotesIfString(input: unknown, previous: string): string | unknown {\n  let result = input;\n\n  if (typeof input === \"string\") {\n    result = escapeQuotes(input);\n    // check if we need to escape this literal\n    if (previous !== \"\" && !previous.trim().endsWith(\"'\")) {\n      result = `'${result}'`;\n    }\n  }\n  return result;\n}\n\nexport function escapeQuotes(input: string): string {\n  return input.replace(/'/g, \"''\");\n}\n\nfunction encodeDate(input: unknown): string | unknown {\n  return input instanceof Date ? `datetime'${input.toISOString()}'` : input;\n}\n\n/**\n * Escapes an odata filter expression to avoid errors with quoting string literals.\n * Encodes Date objects.\n */\nexport function odata(strings: TemplateStringsArray, ...values: unknown[]): string {\n  const fixEncoding = (value: unknown, string: string): string | unknown => {\n    return encodeDate(escapeQuotesIfString(value, string));\n  };\n  const results = [];\n  for (let i = 0; i < strings.length; i++) {\n    results.push(strings[i]);\n    if (i < values.length) {\n      results.push(fixEncoding(values[i], strings[i]));\n    }\n  }\n  return results.join(\"\");\n}\n"]}