{"version":3,"file":"TablePolicies.js","sourceRoot":"","sources":["../../src/TablePolicies.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HeaderConstants,\n  TRANSACTION_HTTP_LINE_ENDING,\n  TRANSACTION_HTTP_VERSION_1_1,\n} from \"./utils/constants\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n  createHttpHeaders,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { getChangeSetBoundary } from \"./utils/transactionHelpers\";\n\nexport const transactionRequestAssemblePolicyName = \"transactionRequestAssemblePolicy\";\n\nconst dummyResponse: PipelineResponse = {\n  request: createPipelineRequest({ url: \"FAKE\" }),\n  status: 200,\n  headers: createHttpHeaders(),\n};\n\nexport function transactionRequestAssemblePolicy(\n  bodyParts: string[],\n  changesetId: string\n): PipelinePolicy {\n  return {\n    name: transactionRequestAssemblePolicyName,\n    async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n      const subRequest = getNextSubrequestBodyPart(request, changesetId);\n      bodyParts.push(subRequest);\n      // Intercept request from going to wire\n      return dummyResponse;\n    },\n  };\n}\n\nexport const transactionHeaderFilterPolicyName = \"transactionHeaderFilterPolicy\";\n\nexport function transactionHeaderFilterPolicy(): PipelinePolicy {\n  return {\n    name: transactionHeaderFilterPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // The subrequests should not have the x-ms-version header.\n      request.headers.delete(HeaderConstants.X_MS_VERSION);\n      return next(request);\n    },\n  };\n}\n\nfunction getSubRequestUrl(url: string): string {\n  const sasTokenParts = [\"sv\", \"ss\", \"srt\", \"sp\", \"se\", \"st\", \"spr\", \"sig\"];\n  const urlParsed = new URL(url);\n  sasTokenParts.forEach((part) => urlParsed.searchParams.delete(part));\n  return urlParsed.toString();\n}\n\nfunction getNextSubrequestBodyPart(request: PipelineRequest, changesetId: string) {\n  const changesetBoundary = getChangeSetBoundary(changesetId);\n  const subRequestPrefix = `--${changesetBoundary}${TRANSACTION_HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${TRANSACTION_HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n\n  const subRequestUrl = getSubRequestUrl(request.url);\n  // Start to assemble sub request\n  const subRequest = [\n    subRequestPrefix, // sub request constant prefix\n    \"\", // empty line after sub request's content ID\n    `${request.method.toString()} ${subRequestUrl} ${TRANSACTION_HTTP_VERSION_1_1}`, // sub request start line with method,\n  ];\n\n  // Add required headers\n  for (const [name, value] of request.headers) {\n    subRequest.push(`${name}: ${value}`);\n  }\n\n  // Append sub-request body\n  subRequest.push(`${TRANSACTION_HTTP_LINE_ENDING}`); // sub request's headers need end with an empty line\n  if (request.body) {\n    subRequest.push(String(request.body));\n  }\n\n  // Add subrequest to transaction body\n  return subRequest.join(TRANSACTION_HTTP_LINE_ENDING);\n}\n"]}