import { AzureNamedKeyCredential } from '@azure/core-auth';
import { AzureSASCredential } from '@azure/core-auth';
import { CommonClientOptions } from '@azure/core-client';
import * as coreClient from '@azure/core-client';
import { NamedKeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { Pipeline } from '@azure/core-rest-pipeline';
import { RestError } from '@azure/core-rest-pipeline';
import { SASCredential } from '@azure/core-auth';
import { TokenCredential } from '@azure/core-auth';
/** An Access policy. */
export declare interface AccessPolicy {
    /** The start datetime from which the policy is active. */
    start?: Date;
    /** The datetime that the policy expires. */
    expiry?: Date;
    /** The permissions for the acl policy. */
    permission?: string;
}
/**
 * Options to configure {@link generateAccountSas} operation.
 */
export declare interface AccountSasOptions {
    /**
     * The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
     */
    expiresOn?: Date;
    /**
     * Specifies the list of permissions to be associated with the SAS.
     */
    permissions?: AccountSasPermissions;
    /**
     * Specifies the resource types associated with the shared access signature.
     */
    resourceTypes?: string;
    /**
     * The version of the service this SAS will target. If not specified, it will default to the version targeted by the
     * library.
     */
    version?: string;
    /**
     * SAS protocols allowed.
     */
    protocol?: SasProtocol;
    /**
     * When the SAS will take effect.
     */
    startsOn?: Date;
    /**
     * IP range allowed.
     */
    ipRange?: SasIPRange;
    /**
     * Account services
     */
    services?: AccountSasServices;
}
/**
 * A type that looks like an account SAS permission.
 * Used in {@link AccountSasPermissions} to parse SAS permissions from raw objects.
 */
export declare interface AccountSasPermissions {
    /**
     * Grants permission to list entities.
     */
    query?: boolean;
    /**
     * Grants permission to create tables
     */
    write?: boolean;
    /**
     * Grants permission to delete tables and entities
     */
    delete?: boolean;
    /**
     * Grants permission to list tables
     */
    list?: boolean;
    /**
     * Grants permission to create entities
     */
    add?: boolean;
    /**
     * Permissions to update messages and table entities granted.
     */
    update?: boolean;
}
/**
 * Services that the SAS token can access
 */
export declare interface AccountSasServices {
    /**
     * Permission to access blob resources granted.
     */
    blob?: boolean;
    /**
     * Permission to access file resources granted.
     */
    file?: boolean;
    /**
     * Permission to access queue resources granted.
     */
    queue?: boolean;
    /**
     * Permission to access table resources granted.
     */
    table?: boolean;
}
export { AzureNamedKeyCredential };
export { AzureSASCredential };
/** CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. */
export declare interface CorsRule {
    /** The origin domains that are permitted to make a request against the service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS. */
    allowedOrigins: string;
    /** The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated) */
    allowedMethods: string;
    /** The request headers that the origin domain may specify on the CORS request. */
    allowedHeaders: string;
    /** The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. */
    exposedHeaders: string;
    /** The maximum amount time that a browser should cache the preflight OPTIONS request. */
    maxAgeInSeconds: number;
}
/**
 * Represents the Create or Delete Entity operation to be included in a Transaction request
 */
export declare type CreateDeleteEntityAction = [
    "create" | "delete",
    TableEntity
];
/**
 * Contains response data for the createEntity operation.
 */
export declare type CreateTableEntityResponse = TableInsertEntityHeaders;
/**
 * Optional parameters for DeleteTableEntity operation
 */
export declare type DeleteTableEntityOptions = OperationOptions & {
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was initiated
     */
    etag?: string;
};
/** Contains response data for the deleteEntity operation. */
export declare type DeleteTableEntityResponse = TableDeleteEntityHeaders;
/**
 * Entity Data Model representation for an entity property.
 */
export declare interface Edm<T extends EdmTypes> {
    /**
     * The value of the entity property
     */
    value: T extends "Binary" ? string : T extends "Boolean" ? boolean : T extends "Double" ? number : T extends "Int32" ? number : string;
    /**
     * The type of the entity property
     */
    type: T;
}
/**
 * Supported EDM Types by Azure Tables.
 */
export declare type EdmTypes = "Binary" | "Boolean" | "DateTime" | "Double" | "Guid" | "Int32" | "Int64" | "String";
/**
 * Generates a Table Account Shared Access Signature (SAS) URI based on the client properties
 * and parameters passed in. The SAS is signed by the shared key credential of the client.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
 *
 * @param options - Optional parameters.
 * @returns An account SAS token
 */
export declare function generateAccountSas(credential: NamedKeyCredential, options?: AccountSasOptions): string;
/**
 * Generates a Table Service Shared Access Signature (SAS) URI based on the client properties
 * and parameters passed in. The SAS is signed by the shared key credential of the client.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
 *
 * @param options - Optional parameters.
 * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
 */
export declare function generateTableSas(tableName: string, credential: NamedKeyCredential, options?: TableSasSignatureValues): string;
/** Geo-Replication information for the Secondary Storage Service */
export declare interface GeoReplication {
    /** The status of the secondary location. */
    status: GeoReplicationStatusType;
    /** A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. */
    lastSyncTime: Date;
}
/**
 * Defines values for GeoReplicationStatusType. \
 * {@link KnownGeoReplicationStatusType} can be used interchangeably with GeoReplicationStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **live** \
 * **bootstrap** \
 * **unavailable**
 */
export declare type GeoReplicationStatusType = string;
/** Contains response data for the getAccessPolicy operation. */
export declare type GetAccessPolicyResponse = TableGetAccessPolicyHeaders & SignedIdentifier[];
/** Contains response data for the getProperties operation. */
export declare type GetPropertiesResponse = ServiceGetPropertiesHeaders & ServiceProperties;
/** Contains response data for the getStatistics operation. */
export declare type GetStatisticsResponse = ServiceGetStatisticsHeaders & TableServiceStats;
/**
 * GetEntity optional parameters.
 */
export declare type GetTableEntityOptions = OperationOptions & {
    /**
     * Parameter group
     */
    queryOptions?: TableEntityQueryOptions;
    /**
     * If true, automatic type conversion will be disabled and entity properties will
     * be represented by full metadata types. For example, an Int32 value will be \{value: "123", type: "Int32"\} instead of 123.
     * This option applies for all the properties
     */
    disableTypeConversion?: boolean;
};
/**
 * Contains response data for the listEntities operation.
 */
export declare type GetTableEntityResponse<T extends object> = TableEntityResult<T>;
/** Known values of {@link GeoReplicationStatusType} that the service accepts. */
export declare enum KnownGeoReplicationStatusType {
    Live = "live",
    Bootstrap = "bootstrap",
    Unavailable = "unavailable"
}
/**
 * List entities optional parameters.
 */
export declare type ListTableEntitiesOptions = OperationOptions & {
    /**
     * Query options group
     */
    queryOptions?: TableEntityQueryOptions;
    /**
     * If true, automatic type conversion will be disabled and entity properties will
     * be represented by full metadata types. For example, an Int32 value will be \{value: "123", type: "Int32"\} instead of 123.
     * This option applies for all the properties
     */
    disableTypeConversion?: boolean;
};
/**
 * List tables optional parameters.
 */
export declare type ListTableItemsOptions = OperationOptions & {
    /**
     * Query options group
     */
    queryOptions?: TableQueryOptions;
};
/** Azure Analytics Logging settings. */
export declare interface Logging {
    /** The version of Analytics to configure. */
    version: string;
    /** Indicates whether all delete requests should be logged. */
    delete: boolean;
    /** Indicates whether all read requests should be logged. */
    read: boolean;
    /** Indicates whether all write requests should be logged. */
    write: boolean;
    /** The retention policy. */
    retentionPolicy: RetentionPolicy;
}
/** A summary of request statistics grouped by API */
export declare interface Metrics {
    /** The version of Analytics to configure. */
    version?: string;
    /** Indicates whether metrics are enabled for the Table service. */
    enabled: boolean;
    /** Indicates whether metrics should generate summary statistics for called API operations. */
    includeAPIs?: boolean;
    /** The retention policy. */
    retentionPolicy?: RetentionPolicy;
}
export { NamedKeyCredential };
/**
 * Escapes an odata filter expression to avoid errors with quoting string literals.
 * Encodes Date objects.
 */
export declare function odata(strings: TemplateStringsArray, ...values: unknown[]): string;
export { RestError };
/** The retention policy. */
export declare interface RetentionPolicy {
    /** Indicates whether a retention policy is enabled for the service. */
    enabled: boolean;
    /** Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted. */
    days?: number;
}
/**
 * Allowed IP range for a SAS.
 */
export declare interface SasIPRange {
    /**
     * Starting IP address in the IP range.
     * If end IP doesn't provide, start IP will the only IP allowed.
     */
    start: string;
    /**
     * Optional. IP address that ends the IP range.
     * If not provided, start IP will the only IP allowed.
     */
    end?: string;
}
/**
 * Protocols for generated SAS.
 */
export declare type SasProtocol = "https" | "https,http";
/** Defines headers for Service_getProperties operation. */
export declare interface ServiceGetPropertiesHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
}
/** Defines headers for Service_getStatistics operation. */
export declare interface ServiceGetStatisticsHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
}
/** Table Service Properties. */
export declare interface ServiceProperties {
    /** Azure Analytics Logging settings. */
    logging?: Logging;
    /** A summary of request statistics grouped by API in hourly aggregates for tables. */
    hourMetrics?: Metrics;
    /** A summary of request statistics grouped by API in minute aggregates for tables. */
    minuteMetrics?: Metrics;
    /** The set of CORS rules. */
    cors?: CorsRule[];
}
/** Defines headers for Service_setProperties operation. */
export declare interface ServiceSetPropertiesHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
}
/** Contains response data for the setAccessPolicy operation. */
export declare type SetAccessPolicyResponse = TableSetAccessPolicyHeaders;
/** Optional parameters. */
export declare interface SetPropertiesOptions extends coreClient.OperationOptions {
    /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */
    requestId?: string;
    /** The timeout parameter is expressed in seconds. */
    timeout?: number;
}
/** Contains response data for the setProperties operation. */
export declare type SetPropertiesResponse = ServiceSetPropertiesHeaders;
/** A signed identifier. */
export declare interface SignedIdentifier {
    /** A unique id. */
    id: string;
    /** The access policy. */
    accessPolicy?: AccessPolicy;
}
/**
 * A TableClient represents a Client to the Azure Tables service allowing you
 * to perform operations on a single table.
 */
export declare class TableClient {
    /**
     * Table Account URL
     */
    url: string;
    /**
     * Represents a pipeline for making a HTTP request to a URL.
     * Pipelines can have multiple policies to manage manipulating each request before and after it is made to the server.
     */
    pipeline: Pipeline;
    private table;
    private generatedClient;
    private credential?;
    private clientOptions;
    private readonly allowInsecureConnection;
    /**
     * Name of the table to perform operations on.
     */
    readonly tableName: string;
    /**
     * Creates a new instance of the TableClient class.
     *
     * @param url - The URL of the service account that is the target of the desired operation, such as "https://myaccount.table.core.windows.net".
     * @param tableName - the name of the table
     * @param credential - NamedKeyCredential used to authenticate requests. Only Supported for Node
     * @param options - Optional. Options to configure the HTTP pipeline.
     *
     *
     * ### Example using an account name/key:
     *
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables");
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   tableName,
     *   sharedKeyCredential
     * );
     * ```
     */
    constructor(url: string, tableName: string, credential: NamedKeyCredential, options?: TableServiceClientOptions);
    /**
     * Creates a new instance of the TableClient class.
     *
     * @param url - The URL of the service account that is the target of the desired operation, such as "https://myaccount.table.core.windows.net".
     * @param tableName - the name of the table
     * @param credential - SASCredential used to authenticate requests
     * @param options - Optional. Options to configure the HTTP pipeline.
     *
     *
     * ### Example using a SAS Token:
     *
     * ```js
     * const { AzureSASCredential, TableClient } = require("@azure/data-tables");
     * const account = "<storage account name>";
     * const sasToken = "<sas-token>";
     * const tableName = "<table name>";
     * const sasCredential = new AzureSASCredential(sasToken);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   tableName,
     *   sasCredential
     * );
     * ```
     */
    constructor(url: string, tableName: string, credential: SASCredential, options?: TableServiceClientOptions);
    /**
     * Creates a new instance of the TableClient class.
     *
     * @param url - The URL of the service account that is the target of the desired operation, such as "https://myaccount.table.core.windows.net".
     * @param tableName - the name of the table
     * @param credential - Azure Active Directory credential used to authenticate requests
     * @param options - Optional. Options to configure the HTTP pipeline.
     *
     *
     * ### Example using an Azure Active Directory credential:
     *
     * ```js
     * cons { DefaultAzureCredential } = require("@azure/identity");
     * const { AzureSASCredential, TableClient } = require("@azure/data-tables");
     * const account = "<storage account name>";
     * const sasToken = "<sas-token>";
     * const tableName = "<table name>";
     * const credential = new DefaultAzureCredential();
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   tableName,
     *   credential
     * );
     * ```
     */
    constructor(url: string, tableName: string, credential: TokenCredential, options?: TableServiceClientOptions);
    /**
     * Creates an instance of TableClient.
     *
     * @param url - A Client string pointing to Azure Storage table service, such as
     *              "https://myaccount.table.core.windows.net". You can append a SAS,
     *              such as "https://myaccount.table.core.windows.net?sasString".
     * @param tableName - the name of the table
     * @param options - Options to configure the HTTP pipeline.
     *
     * ### Example appending a SAS token:
     *
     * ```js
     * const { TableClient } = require("@azure/data-tables");
     * const account = "<storage account name>";
     * const sasToken = "<SAS token>";
     * const tableName = "<table name>";
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net?${sasToken}`,
     *   `${tableName}`
     * );
     * ```
     */
    constructor(url: string, tableName: string, options?: TableServiceClientOptions);
    /**
     * Permanently deletes the current table with all of its entities.
     * @param options - The options parameters.
     *
     * ### Example deleting a table
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * // calling deleteTable will delete the table used
     * // to instantiate the TableClient.
     * // Note: If the table doesn't exist this function doesn't fail.
     * await client.deleteTable();
     * ```
     */
    deleteTable(options?: OperationOptions): Promise<void>;
    /**
     *  Creates a table with the tableName passed to the client constructor
     * @param options - The options parameters.
     *
     * ### Example creating a table
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * // calling create table will create the table used
     * // to instantiate the TableClient.
     * // Note: If the table already
     * // exists this function doesn't throw.
     * await client.createTable();
     * ```
     */
    createTable(options?: OperationOptions): Promise<void>;
    /**
     * Returns a single entity in the table.
     * @param partitionKey - The partition key of the entity.
     * @param rowKey - The row key of the entity.
     * @param options - The options parameters.
     *
     * ### Example getting an entity
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * // getEntity will get a single entity stored in the service that
     * // matches exactly the partitionKey and rowKey used as parameters
     * // to the method.
     * const entity = await client.getEntity("<partitionKey>", "<rowKey>");
     * console.log(entity);
     * ```
     */
    getEntity<T extends object = Record<string, unknown>>(partitionKey: string, rowKey: string, options?: GetTableEntityOptions): Promise<GetTableEntityResponse<TableEntityResult<T>>>;
    /**
     * Queries entities in a table.
     * @param options - The options parameters.
     *
     * Example listing entities
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * // list entities returns a AsyncIterableIterator
     * // this helps consuming paginated responses by
     * // automatically handling getting the next pages
     * const entities = client.listEntities();
     *
     * // this loop will get all the entities from all the pages
     * // returned by the service
     * for await (const entity of entities) {
     *    console.log(entity);
     * }
     * ```
     */
    listEntities<T extends object = Record<string, unknown>>(options?: ListTableEntitiesOptions): PagedAsyncIterableIterator<TableEntityResult<T>, TableEntityResultPage<T>>;
    private listEntitiesAll;
    private listEntitiesPage;
    private _listEntities;
    /**
     * Insert entity in the table.
     * @param entity - The properties for the table entity.
     * @param options - The options parameters.
     *
     * ### Example creating an entity
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * // partitionKey and rowKey are required properties of the entity to create
     * // and accepts any other properties
     * await client.createEntity({partitionKey: "p1", rowKey: "r1", foo: "Hello!"});
     * ```
     */
    createEntity<T extends object>(entity: TableEntity<T>, options?: OperationOptions): Promise<CreateTableEntityResponse>;
    /**
     * Deletes the specified entity in the table.
     * @param partitionKey - The partition key of the entity.
     * @param rowKey - The row key of the entity.
     * @param options - The options parameters.
     *
     * ### Example deleting an entity
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * // deleteEntity deletes the entity that matches
     * // exactly the partitionKey and rowKey passed as parameters
     * await client.deleteEntity("<partitionKey>", "<rowKey>")
     * ```
     */
    deleteEntity(partitionKey: string, rowKey: string, options?: DeleteTableEntityOptions): Promise<DeleteTableEntityResponse>;
    /**
     * Update an entity in the table.
     * @param entity - The properties of the entity to be updated.
     * @param mode - The different modes for updating the entity:
     *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
     *               - Replace: Updates an existing entity by replacing the entire entity.
     * @param options - The options parameters.
     *
     * ### Example updating an entity
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * const entity = {partitionKey: "p1", rowKey: "r1", bar: "updatedBar"};
     *
     * // Update uses update mode "Merge" as default
     * // merge means that update will match a stored entity
     * // that has the same partitionKey and rowKey as the entity
     * // passed to the method and then will only update the properties present in it.
     * // Any other properties that are not defined in the entity passed to updateEntity
     * // will remain as they are in the service
     * await client.updateEntity(entity)
     *
     * // We can also set the update mode to Replace, which will match the entity passed
     * // to updateEntity with one stored in the service and replace with the new one.
     * // If there are any missing properties in the entity passed to updateEntity, they
     * // will be removed from the entity stored in the service
     * await client.updateEntity(entity, "Replace")
     * ```
     */
    updateEntity<T extends object>(entity: TableEntity<T>, mode?: UpdateMode, options?: UpdateTableEntityOptions): Promise<UpdateEntityResponse>;
    /**
     * Upsert an entity in the table.
     * @param entity - The properties for the table entity.
     * @param mode - The different modes for updating the entity:
     *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
     *               - Replace: Updates an existing entity by replacing the entire entity.
     * @param options - The options parameters.
     *
     * ### Example upserting an entity
     * ```js
     * const { AzureNamedKeyCredential, TableClient } = require("@azure/data-tables")
     * const account = "<storage account name>";
     * const accountKey = "<account key>"
     * const tableName = "<table name>";
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);
     *
     * const client = new TableClient(
     *   `https://${account}.table.core.windows.net`,
     *   `${tableName}`,
     *   sharedKeyCredential
     * );
     *
     * const entity = {partitionKey: "p1", rowKey: "r1", bar: "updatedBar"};
     *
     * // Upsert uses update mode "Merge" as default.
     * // This behaves similarly to update but creates the entity
     * // if it doesn't exist in the service
     * await client.upsertEntity(entity)
     *
     * // We can also set the update mode to Replace.
     * // This behaves similarly to update but creates the entity
     * // if it doesn't exist in the service
     * await client.upsertEntity(entity, "Replace")
     * ```
     */
    upsertEntity<T extends object>(entity: TableEntity<T>, mode?: UpdateMode, options?: OperationOptions): Promise<UpsertEntityResponse>;
    /**
     * Retrieves details about any stored access policies specified on the table that may be used with
     * Shared Access Signatures.
     * @param options - The options parameters.
     */
    getAccessPolicy(options?: OperationOptions): Promise<GetAccessPolicyResponse>;
    /**
     * Sets stored access policies for the table that may be used with Shared Access Signatures.
     * @param tableAcl - The Access Control List for the table.
     * @param options - The options parameters.
     */
    setAccessPolicy(tableAcl: SignedIdentifier[], options?: OperationOptions): Promise<SetAccessPolicyResponse>;
    /**
     * Submits a Transaction which is composed of a set of actions. You can provide the actions as a list
     * or you can use {@link TableTransaction} to help building the transaction.
     *
     * Example usage:
     * ```typescript
     * const { TableClient } = require("@azure/data-tables");
     * const connectionString = "<connection-string>"
     * const tableName = "<tableName>"
     * const client = TableClient.fromConnectionString(connectionString, tableName);
     * const actions = [
     *    ["create", {partitionKey: "p1", rowKey: "1", data: "test1"}],
     *    ["delete", {partitionKey: "p1", rowKey: "2"}],
     *    ["update", {partitionKey: "p1", rowKey: "3", data: "newTest"}, "Merge"]
     * ]
     * const result = await client.submitTransaction(actions);
     * ```
     *
     * Example usage with TableTransaction:
     * ```js
     * const { TableClient } = require("@azure/data-tables");
     * const connectionString = "<connection-string>"
     * const tableName = "<tableName>"
     * const client = TableClient.fromConnectionString(connectionString, tableName);
     * const transaction = new TableTransaction();
     * // Call the available action in the TableTransaction object
     * transaction.create({partitionKey: "p1", rowKey: "1", data: "test1"});
     * transaction.delete("p1", "2");
     * transaction.update({partitionKey: "p1", rowKey: "3", data: "newTest"}, "Merge")
     * // submitTransaction with the actions list on the transaction.
     * const result = await client.submitTransaction(transaction.actions);
     * ```
     *
     * @param actions - tuple that contains the action to perform, and the entity to perform the action with
     */
    submitTransaction(actions: TransactionAction[]): Promise<TableTransactionResponse>;
    /**
     *
     * Creates an instance of TableClient from connection string.
     *
     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
     *                           [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                           Account connection string example -
     *                           `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                           SAS connection string example -
     *                           `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param options - Options to configure the HTTP pipeline.
     * @returns A new TableClient from the given connection string.
     */
    static fromConnectionString(connectionString: string, tableName: string, options?: TableServiceClientOptions): TableClient;
}
/** Defines headers for Table_create operation. */
export declare interface TableCreateHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
    /** Indicates whether the Prefer request header was honored. If the response does not include this header, then the Prefer header was not honored. If this header is returned, its value will either be return-content or return-no-content. */
    preferenceApplied?: string;
}
/** Defines headers for Table_deleteEntity operation. */
export declare interface TableDeleteEntityHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
}
/** Defines headers for Table_delete operation. */
export declare interface TableDeleteHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
}
/**
 * A set of key-value pairs representing the table entity.
 */
export declare type TableEntity<T extends object = Record<string, unknown>> = T & {
    /**
     * The PartitionKey property of the entity.
     */
    partitionKey: string;
    /**
     * The RowKey property of the entity.
     */
    rowKey: string;
};
/**
 * OData Query options to limit the set of entities returned.
 */
export declare interface TableEntityQueryOptions {
    /**
     * OData filter expression.
     */
    filter?: string;
    /**
     * A select expression limits the properties on each entity to just those requested.
     */
    select?: string[];
}
/**
 * Output type for query operations
 */
export declare type TableEntityResult<T> = T & {
    /**
     * etag property. Always returned by the service
     */
    etag: string;
    /**
     * Partition key property. Omitted if a select filter is set and this property is not requested
     */
    partitionKey?: string;
    /**
     * Row key property. Omitted if a select filter is set and this property is not requested
     */
    rowKey?: string;
    /**
     * Timestamp property. This property is assinged by the service on entity creation
     * Omitted if a select filter is set and this property is not requested
     */
    timestamp?: string;
};
/**
 * Output page type for query operations
 */
export declare type TableEntityResultPage<T> = Array<TableEntityResult<T>> & {
    /**
     * Continuation token to get the next page
     */
    continuationToken?: string;
};
/** Defines headers for Table_getAccessPolicy operation. */
export declare interface TableGetAccessPolicyHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
}
/** Defines headers for Table_insertEntity operation. */
export declare interface TableInsertEntityHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
    /** UTC date/time value generated by the service that indicates the time at which the entity was last updated. */
    etag?: string;
    /** Indicates whether the Prefer request header was honored. If the response does not include this header, then the Prefer header was not honored. If this header is returned, its value will either be return-content or return-no-content. */
    preferenceApplied?: string;
    /** Indicates the content type of the payload. The value depends on the value specified for the Accept request header. */
    contentType?: string;
}
/** The properties for the table item. */
export declare interface TableItem {
    /** The name of the table. */
    name?: string;
}
/**
 * Output page type for table query operations
 */
export declare interface TableItemResultPage extends Array<TableItem> {
    /**
     * Continuation token to get the next TableItem page
     */
    continuationToken?: string;
}
/** Defines headers for Table_mergeEntity operation. */
export declare interface TableMergeEntityHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
    /** UTC date/time value generated by the service that indicates the time at which the entity was last updated. */
    etag?: string;
}
/**
 * OData Query options to limit the set of tables returned.
 */
export declare interface TableQueryOptions {
    /**
     * OData filter expression.
     */
    filter?: string;
}
/** The properties for the table query response. */
export declare interface TableQueryResponse {
    /** List of tables. */
    value?: TableItem[];
}
/**
 * A type that looks like a Table SAS permission.
 * Used in {@link TableSasPermissions} to parse SAS permissions from raw objects.
 */
export declare interface TableSasPermissions {
    /**
     * Specifies Query access granted.
     */
    query?: boolean;
    /**
     * Specifies Add access granted.
     */
    add?: boolean;
    /**
     * Specifies Update access granted.
     */
    update?: boolean;
    /**
     * Specifies Delete access granted.
     */
    delete?: boolean;
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * TableSASSignatureValues is used to help generating Table service SAS tokens for tables
 */
export declare interface TableSasSignatureValues {
    /**
     * The version of the service this SAS will target. If not specified, it will default to the version targeted by the
     * library.
     */
    version?: string;
    /**
     * Optional. SAS protocols, HTTPS only or HTTPSandHTTP
     */
    protocol?: SasProtocol;
    /**
     * Optional. When the SAS will take effect.
     */
    startsOn?: Date;
    /**
     * Optional. If identifier is not provided has a default value of one hour from the time the token is generated.
     * The time after which the SAS will no longer work.
     */
    expiresOn?: Date;
    /**
     * Optional. If identifier is not provided has a default value of "read"
     * Please refer to {@link TableSasPermissions} depending on the resource
     * being accessed for help constructing the permissions string.
     */
    permissions?: TableSasPermissions;
    /**
     * Optional. IP ranges allowed in this SAS.
     */
    ipRange?: SasIPRange;
    /**
     * Optional. The name of the access policy on the container this SAS references if any.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy
     */
    identifier?: string;
    /**
     * Define the start of a Partition Key range
     * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.
     * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.
     * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition
     */
    startPartitionKey?: string;
    /**
     * Define the end of a Partition Key range
     * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.
     * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.
     * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition
     */
    endPartitionKey?: string;
    /**
     * Define the start of a Row Key range
     * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.
     * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.
     * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition
     */
    startRowKey?: string;
    /**
     * Define the end of a Row Key range
     * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.
     * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.
     * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition
     */
    endRowKey?: string;
}
/**
 * A TableServiceClient represents a Client to the Azure Tables service allowing you
 * to perform operations on the tables and the entities.
 */
export declare class TableServiceClient {
    /**
     * Table Account URL
     */
    url: string;
    /**
     * Represents a pipeline for making a HTTP request to a URL.
     * Pipelines can have multiple policies to manage manipulating each request before and after it is made to the server.
     */
    pipeline: Pipeline;
    private table;
    private service;
    /**
     * Creates a new instance of the TableServiceClient class.
     *
     * @param url - The URL of the service account that is the target of the desired operation., such as "https://myaccount.table.core.windows.net".
     * @param credential - NamedKeyCredential | SASCredential used to authenticate requests. Only Supported for Node
     * @param options - Options to configure the HTTP pipeline.
     *
     * ### Example using an account name/key:
     *
     * ```js
     * const { AzureNamedKeyCredential, TableServiceClient } = require("@azure/data-tables")
     * const account = "<storage account name>"
     * const sharedKeyCredential = new AzureNamedKeyCredential(account, "<account key>");
     *
     * const tableServiceClient = new TableServiceClient(
     *   `https://${account}.table.core.windows.net`,
     *   sharedKeyCredential
     * );
     * ```
     */
    constructor(url: string, credential: NamedKeyCredential, options?: TableServiceClientOptions);
    /**
     * Creates a new instance of the TableServiceClient class.
     *
     * @param url - The URL of the service account that is the target of the desired operation., such as "https://myaccount.table.core.windows.net".
     * @param credential - SASCredential used to authenticate requests
     * @param options - Options to configure the HTTP pipeline.
     *
     * ### Example using a SAS Token.
     *
     * ```js
     * const { AzureSASCredential, TableServiceClient } = require("@azure/data-tables")
     * const account = "<storage account name>"
     * const sasCredential = new AzureSASCredential(account, "<account key>");
     *
     * const tableServiceClient = new TableServiceClient(
     *   `https://${account}.table.core.windows.net`,
     *   sasCredential
     * );
     * ```
     */
    constructor(url: string, credential: SASCredential, options?: TableServiceClientOptions);
    /**
     * Creates a new instance of the TableServiceClient class.
     *
     * @param url - The URL of the service account that is the target of the desired operation., such as "https://myaccount.table.core.windows.net".
     * @param credential - Azure Active Directory credential used to authenticate requests
     * @param options - Options to configure the HTTP pipeline.
     *
     * ### Example using an Azure Active Directory credential:
     *
     * ```js
     * cons { DefaultAzureCredential } = require("@azure/identity");
     * const { TableServiceClient } = require("@azure/data-tables")
     * const account = "<storage account name>"
     * const credential = new DefaultAzureCredential();
     *
     * const tableServiceClient = new TableServiceClient(
     *   `https://${account}.table.core.windows.net`,
     *   credential
     * );
     * ```
     */
    constructor(url: string, credential: TokenCredential, options?: TableServiceClientOptions);
    /**
     * Creates a new instance of the TableServiceClient class.
     *
     * @param url - The URL of the service account that is the target of the desired operation., such as
     *              "https://myaccount.table.core.windows.net". You can append a SAS,
     *              such as "https://myaccount.table.core.windows.net?sasString".
     * @param options - Options to configure the HTTP pipeline.
     * Example appending a SAS token:
     *
     * ```js
     * const account = "<storage account name>";
     * const sasToken = "<SAS token>";
     *
     * const tableServiceClient = new TableServiceClient(
     *   `https://${account}.table.core.windows.net?${sasToken}`,
     * );
     * ```
     */
    constructor(url: string, options?: TableServiceClientOptions);
    /**
     * Retrieves statistics related to replication for the Table service. It is only available on the
     * secondary location endpoint when read-access geo-redundant replication is enabled for the account.
     * @param options - The options parameters.
     */
    getStatistics(options?: OperationOptions): Promise<GetStatisticsResponse>;
    /**
     * Gets the properties of an account's Table service, including properties for Analytics and CORS
     * (Cross-Origin Resource Sharing) rules.
     * @param options - The options parameters.
     */
    getProperties(options?: OperationOptions): Promise<GetPropertiesResponse>;
    /**
     * Sets properties for an account's Table service endpoint, including properties for Analytics and CORS
     * (Cross-Origin Resource Sharing) rules.
     * @param properties - The Table Service properties.
     * @param options - The options parameters.
     */
    setProperties(properties: ServiceProperties, options?: SetPropertiesOptions): Promise<SetPropertiesResponse>;
    /**
     * Creates a new table under the given account.
     * @param name - The name of the table.
     * @param options - The options parameters.
     */
    createTable(name: string, options?: OperationOptions): Promise<void>;
    /**
     * Operation permanently deletes the specified table.
     * @param name - The name of the table.
     * @param options - The options parameters.
     */
    deleteTable(name: string, options?: OperationOptions): Promise<void>;
    /**
     * Queries tables under the given account.
     * @param options - The options parameters.
     */
    listTables(options?: ListTableItemsOptions): PagedAsyncIterableIterator<TableItem, TableItemResultPage>;
    private listTablesAll;
    private listTablesPage;
    private _listTables;
    /**
     *
     * Creates an instance of TableServiceClient from connection string.
     *
     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
     *                           [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                           Account connection string example -
     *                           `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                           SAS connection string example -
     *                           `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param options - Options to configure the HTTP pipeline.
     * @returns A new TableServiceClient from the given connection string.
     */
    static fromConnectionString(connectionString: string, options?: TableServiceClientOptions): TableServiceClient;
}
/**
 * Client options used to configure Tables Api requests
 */
export declare type TableServiceClientOptions = CommonClientOptions & {
    endpoint?: string;
    version?: string;
};
/** Stats for the service. */
export declare interface TableServiceStats {
    /** Geo-Replication information for the Secondary Storage Service. */
    geoReplication?: GeoReplication;
}
/** Defines headers for Table_setAccessPolicy operation. */
export declare interface TableSetAccessPolicyHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
}
/**
 * Helper to build a list of transaction actions
 */
export declare class TableTransaction {
    /**
     * List of actions to perform in a transaction
     */
    actions: TransactionAction[];
    constructor(actions?: TransactionAction[]);
    /**
     * Adds a create action to the transaction
     * @param entity - entity to create
     */
    createEntity<T extends object = Record<string, unknown>>(entity: TableEntity<T>): void;
    /**
     * Adds a delete action to the transaction
     * @param partitionKey - partition key of the entity to delete
     * @param rowKey - rowKey of the entity to delete
     */
    deleteEntity(partitionKey: string, rowKey: string): void;
    /**
     * Adds an update action to the transaction
     * @param entity - entity to update
     * @param updateOptions - options for the update operation
     */
    updateEntity<T extends object = Record<string, unknown>>(entity: TableEntity<T>, updateOptions?: UpdateTableEntityOptions): void;
    /**
     * Adds an update action to the transaction
     * @param entity - entity to update
     * @param updateMode - update mode
     * @param updateOptions - options for the update operation
     */
    updateEntity<T extends object = Record<string, unknown>>(entity: TableEntity<T>, updateMode: UpdateMode, updateOptions?: UpdateTableEntityOptions): void;
    /**
     * Adds an upsert action to the transaction, which inserts if the entity doesn't exist or updates the existing one
     * @param entity - entity to upsert
     * @param updateMode - update mode
     */
    upsertEntity<T extends object = Record<string, unknown>>(entity: TableEntity<T>, updateMode?: UpdateMode): void;
}
/**
 * Represents a sub-response of a Transaction operation
 */
export declare interface TableTransactionEntityResponse {
    /**
     * Entity's etag
     */
    etag?: string;
    /**
     * Entity's rowKey
     */
    rowKey?: string;
    /**
     * Sub-response status
     */
    status: number;
}
/**
 * Represents the response of a Transaction operation
 */
export declare interface TableTransactionResponse {
    /**
     * Collection of sub responses
     */
    subResponses: TableTransactionEntityResponse[];
    /**
     * Main Transaction request status code
     */
    status: number;
    /**
     * Gets a specific response given a row key
     */
    getResponseForEntity: (rowKey: string) => TableTransactionEntityResponse | undefined;
}
/** Defines headers for Table_updateEntity operation. */
export declare interface TableUpdateEntityHeaders {
    /** If a client request id header is sent in the request, this header will be present in the response with the same value. */
    clientRequestId?: string;
    /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */
    requestId?: string;
    /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */
    version?: string;
    /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */
    date?: Date;
    /** UTC date/time value generated by the service that indicates the time at which the entity was last updated. */
    etag?: string;
}
/**
 * Represents the union of all the available transactional actions
 */
export declare type TransactionAction = CreateDeleteEntityAction | UpdateEntityAction;
/**
 * Represents the Update or Upsert Entity operation to be included in a Transaction request
 */
export declare type UpdateEntityAction = [
    "update" | "upsert",
    TableEntity
] | [
    "update" | "upsert",
    TableEntity,
    "Merge" | "Replace"
] | [
    "update" | "upsert",
    TableEntity,
    "Merge" | "Replace",
    UpdateTableEntityOptions | undefined
];
/** Contains response data for the updateEntity operation. */
export declare type UpdateEntityResponse = TableUpdateEntityHeaders;
/**
 * The different modes for Update and Upsert methods
 * - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
 * - Replace: Updates an existing entity by replacing the entire entity.
 */
export declare type UpdateMode = "Merge" | "Replace";
/**
 * Update entity optional parameters.
 */
export declare type UpdateTableEntityOptions = OperationOptions & {
    /**
     * Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed if an existing entity is found.
     */
    etag?: string;
};
/** Contains response data for the mergeEntity operation. */
export declare type UpsertEntityResponse = TableMergeEntityHeaders;
export {};
