'use strict';

const unhead = require('unhead');
const useHead = require('./shared/vue.3af8ac9e.cjs');
const vue = require('vue');
const shared = require('@unhead/shared');

const VueHeadMixin = {
  created() {
    const instance = vue.getCurrentInstance();
    if (!instance)
      return;
    const options = instance.type;
    if (!options || !("head" in options))
      return;
    const source = typeof options.head === "function" ? () => options.head.call(instance.proxy) : options.head;
    useHead.useHead(source);
  }
};

const Vue2ProvideUnheadPlugin = function(_Vue, head) {
  _Vue.mixin({
    beforeCreate() {
      const options = this.$options;
      const origProvide = options.provide;
      options.provide = function() {
        let origProvideResult;
        if (typeof origProvide === "function")
          origProvideResult = origProvide.call(this);
        else
          origProvideResult = origProvide || {};
        return {
          ...origProvideResult,
          [useHead.headSymbol]: head
        };
      };
    }
  });
};

function useHeadSafe(input, options = {}) {
  return useHead.useHead(input, { ...options, transform: unhead.whitelistSafeInput });
}

const useSeoMeta = (input, options) => {
  const headInput = vue.ref({});
  vue.watchEffect(() => {
    const resolvedMeta = useHead.resolveUnrefHeadInput(input);
    const { title, titleTemplate, ...meta } = resolvedMeta;
    headInput.value = {
      title,
      titleTemplate,
      meta: unhead.unpackMeta(meta)
    };
  });
  return useHead.useHead(headInput, options);
};

function useServerHead(input, options = {}) {
  return useHead.serverUseHead(input, { ...options, mode: "server" });
}

function useServerHeadSafe(input, options = {}) {
  return useHeadSafe(input, { ...options, mode: "server" });
}

function useServerSeoMeta(input, options) {
  return useSeoMeta(input, { ...options || {}, mode: "server" });
}

const useTagTitle = (title) => useHead.useHead({ title });
const useTitleTemplate = (titleTemplate) => useHead.useHead({ titleTemplate });
const useTagMeta = (meta) => useHead.useHead({ meta: shared.asArray(meta) });
const useTagMetaFlat = (meta) => {
  const input = vue.ref({});
  vue.watchEffect(() => {
    input.value = unhead.unpackMeta(useHead.resolveUnrefHeadInput(meta));
  });
  return useHead.useHead({ meta: input });
};
const useTagLink = (link) => useHead.useHead({ link: shared.asArray(link) });
const useTagScript = (script) => useHead.useHead({ script: shared.asArray(script) });
const useTagStyle = (style) => useHead.useHead({ style: shared.asArray(style) });
const useTagNoscript = (noscript) => useHead.useHead({ noscript: shared.asArray(noscript) });
const useTagBase = (base) => useHead.useHead({ base });
const useHtmlAttrs = (attrs) => useHead.useHead({ htmlAttrs: attrs });
const useBodyAttrs = (attrs) => useHead.useHead({ bodyAttrs: attrs });
const useServerTagTitle = (title) => useServerHead({ title });
const useServerTitleTemplate = (titleTemplate) => useServerHead({ titleTemplate });
const useServerTagMeta = (meta) => useServerHead({ meta: shared.asArray(meta) });
const useServerTagMetaFlat = (meta) => {
  const input = vue.ref({});
  vue.watchEffect(() => {
    input.value = unhead.unpackMeta(useHead.resolveUnrefHeadInput(meta));
  });
  return useServerHead({ meta: input });
};
const useServerTagLink = (link) => useServerHead({ link: shared.asArray(link) });
const useServerTagScript = (script) => useServerHead({ script: shared.asArray(script) });
const useServerTagStyle = (style) => useServerHead({ style: shared.asArray(style) });
const useServerTagNoscript = (noscript) => useServerHead({ noscript: shared.asArray(noscript) });
const useServerTagBase = (base) => useServerHead({ base });
const useServerHtmlAttrs = (attrs) => useServerHead({ htmlAttrs: attrs });
const useServerBodyAttrs = (attrs) => useHead.useHead({ bodyAttrs: attrs });

const coreComposableNames = [
  "injectHead"
];
const unheadVueComposablesImports = {
  "@unhead/vue": [...coreComposableNames, ...unhead.composableNames]
};

exports.createHeadCore = unhead.createHeadCore;
exports.VueReactiveUseHeadPlugin = useHead.VueReactiveUseHeadPlugin;
exports.createHead = useHead.createHead;
exports.createServerHead = useHead.createServerHead;
exports.headSymbol = useHead.headSymbol;
exports.injectHead = useHead.injectHead;
exports.resolveUnrefHeadInput = useHead.resolveUnrefHeadInput;
exports.useHead = useHead.useHead;
exports.Vue2ProvideUnheadPlugin = Vue2ProvideUnheadPlugin;
exports.VueHeadMixin = VueHeadMixin;
exports.unheadVueComposablesImports = unheadVueComposablesImports;
exports.useBodyAttrs = useBodyAttrs;
exports.useHeadSafe = useHeadSafe;
exports.useHtmlAttrs = useHtmlAttrs;
exports.useSeoMeta = useSeoMeta;
exports.useServerBodyAttrs = useServerBodyAttrs;
exports.useServerHead = useServerHead;
exports.useServerHeadSafe = useServerHeadSafe;
exports.useServerHtmlAttrs = useServerHtmlAttrs;
exports.useServerSeoMeta = useServerSeoMeta;
exports.useServerTagBase = useServerTagBase;
exports.useServerTagLink = useServerTagLink;
exports.useServerTagMeta = useServerTagMeta;
exports.useServerTagMetaFlat = useServerTagMetaFlat;
exports.useServerTagNoscript = useServerTagNoscript;
exports.useServerTagScript = useServerTagScript;
exports.useServerTagStyle = useServerTagStyle;
exports.useServerTagTitle = useServerTagTitle;
exports.useServerTitleTemplate = useServerTitleTemplate;
exports.useTagBase = useTagBase;
exports.useTagLink = useTagLink;
exports.useTagMeta = useTagMeta;
exports.useTagMetaFlat = useTagMetaFlat;
exports.useTagNoscript = useTagNoscript;
exports.useTagScript = useTagScript;
exports.useTagStyle = useTagStyle;
exports.useTagTitle = useTagTitle;
exports.useTitleTemplate = useTitleTemplate;
