import { format } from './sanitization.js';
export { format } from './sanitization.js';
export { hex } from './text.js';
import { decode } from './text.js';
import { Version } from './version.js';
export class DatabaseError extends Error {
    constructor(message, status, body) {
        super(message);
        this.status = status;
        this.name = 'DatabaseError';
        this.body = body;
    }
}
const defaultExecuteOptions = {
    as: 'object'
};
export class Client {
    constructor(config) {
        this.config = config;
    }
    async transaction(fn) {
        return this.connection().transaction(fn);
    }
    async execute(query, args = null, options = defaultExecuteOptions) {
        return this.connection().execute(query, args, options);
    }
    connection() {
        return new Connection(this.config);
    }
}
class Tx {
    constructor(conn) {
        this.conn = conn;
    }
    async execute(query, args = null, options = defaultExecuteOptions) {
        return this.conn.execute(query, args, options);
    }
}
export class Connection {
    constructor(config) {
        var _a;
        this.session = null;
        this.config = { ...config };
        if (typeof fetch !== 'undefined') {
            (_a = this.config).fetch || (_a.fetch = fetch);
        }
        if (config.url) {
            const url = new URL(config.url);
            this.config.username = url.username;
            this.config.password = url.password;
            this.config.host = url.hostname;
        }
    }
    async transaction(fn) {
        const conn = new Connection(this.config);
        const tx = new Tx(conn);
        try {
            await tx.execute('BEGIN');
            const res = await fn(tx);
            await tx.execute('COMMIT');
            return res;
        }
        catch (err) {
            await tx.execute('ROLLBACK');
            throw err;
        }
    }
    async refresh() {
        await this.createSession();
    }
    async execute(query, args = null, options = defaultExecuteOptions) {
        const url = new URL('/psdb.v1alpha1.Database/Execute', `https://${this.config.host}`);
        const formatter = this.config.format || format;
        const sql = args ? formatter(query, args) : query;
        const saved = await postJSON(this.config, url, { query: sql, session: this.session });
        const { result, session, error, timing } = saved;
        if (error) {
            throw new DatabaseError(error.message, 400, error);
        }
        const rowsAffected = result?.rowsAffected ? parseInt(result.rowsAffected, 10) : 0;
        const insertId = result?.insertId ?? '0';
        this.session = session;
        const fields = result?.fields ?? [];
        for (const field of fields) {
            field.type || (field.type = 'NULL');
        }
        const castFn = options.cast || this.config.cast || cast;
        const rows = result ? parse(result, castFn, options.as || 'object') : [];
        const headers = fields.map((f) => f.name);
        const typeByName = (acc, { name, type }) => ({ ...acc, [name]: type });
        const types = fields.reduce(typeByName, {});
        const timingSeconds = timing ?? 0;
        return {
            headers,
            types,
            fields,
            rows,
            rowsAffected,
            insertId,
            size: rows.length,
            statement: sql,
            time: timingSeconds * 1000
        };
    }
    async createSession() {
        const url = new URL('/psdb.v1alpha1.Database/CreateSession', `https://${this.config.host}`);
        const { session } = await postJSON(this.config, url);
        this.session = session;
        return session;
    }
}
async function postJSON(config, url, body = {}) {
    const auth = btoa(`${config.username}:${config.password}`);
    const { fetch } = config;
    const response = await fetch(url.toString(), {
        method: 'POST',
        body: JSON.stringify(body),
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': `database-js/${Version}`,
            Authorization: `Basic ${auth}`
        }
    });
    if (response.ok) {
        return await response.json();
    }
    else {
        let error = null;
        try {
            const e = (await response.json()).error;
            error = new DatabaseError(e.message, response.status, e);
        }
        catch {
            error = new DatabaseError(response.statusText, response.status, {
                code: 'internal',
                message: response.statusText
            });
        }
        throw error;
    }
}
export function connect(config) {
    return new Connection(config);
}
function parseArrayRow(fields, rawRow, cast) {
    const row = decodeRow(rawRow);
    return fields.map((field, ix) => {
        return cast(field, row[ix]);
    });
}
function parseObjectRow(fields, rawRow, cast) {
    const row = decodeRow(rawRow);
    return fields.reduce((acc, field, ix) => {
        acc[field.name] = cast(field, row[ix]);
        return acc;
    }, {});
}
function parse(result, cast, returnAs) {
    const fields = result.fields;
    const rows = result.rows ?? [];
    return rows.map((row) => returnAs === 'array' ? parseArrayRow(fields, row, cast) : parseObjectRow(fields, row, cast));
}
function decodeRow(row) {
    const values = row.values ? atob(row.values) : '';
    let offset = 0;
    return row.lengths.map((size) => {
        const width = parseInt(size, 10);
        if (width < 0)
            return null;
        const splice = values.substring(offset, offset + width);
        offset += width;
        return splice;
    });
}
export function cast(field, value) {
    if (value === '' || value == null) {
        return value;
    }
    switch (field.type) {
        case 'INT8':
        case 'INT16':
        case 'INT24':
        case 'INT32':
        case 'UINT8':
        case 'UINT16':
        case 'UINT24':
        case 'UINT32':
        case 'YEAR':
            return parseInt(value, 10);
        case 'FLOAT32':
        case 'FLOAT64':
            return parseFloat(value);
        case 'DECIMAL':
        case 'INT64':
        case 'UINT64':
        case 'DATE':
        case 'TIME':
        case 'DATETIME':
        case 'TIMESTAMP':
        case 'BLOB':
        case 'BIT':
        case 'VARBINARY':
        case 'BINARY':
            return value;
        case 'JSON':
            return JSON.parse(decode(value));
        default:
            return decode(value);
    }
}
